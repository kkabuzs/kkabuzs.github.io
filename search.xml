<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MongoDB-6.0.21离线分片集群部署</title>
      <link href="/articles/2025/04/22/mongodb-6-0-21-lixian-fenpianjiqun/"/>
      <url>/articles/2025/04/22/mongodb-6-0-21-lixian-fenpianjiqun/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="MongoDB-6-0-21离线分片集群部署"><a href="#MongoDB-6-0-21离线分片集群部署" class="headerlink" title="MongoDB-6.0.21离线分片集群部署"></a>MongoDB-6.0.21离线分片集群部署</h1><h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h2><blockquote><p>MongoDB 分片集群通过将数据分散存储在多个节点（分片）上，以支持处理大规模数据和高并发读写操作。它由多个组件组成，包括分片（Shard）、配置服务器（Config Server）和查询路由器（Query Router，也称为 mongos）。分片负责存储实际的数据，配置服务器存储集群的元数据，查询路由器则负责接收客户端的请求，并将其路由到正确的分片上进行处理。</p></blockquote><h3 id="1-1-核心组件"><a href="#1-1-核心组件" class="headerlink" title="1.1 核心组件"></a>1.1 核心组件</h3><p><strong>分片（Shard）</strong></p><ul><li><strong>功能：</strong> 分片是存储实际数据的服务器，一个分片集群可包含多个分片。每个分片能够是单个服务器，也可以是一个复制集，复制集的运用提升了数据的可用性与持久性。数据依据分片键被划分并存储于不同的分片上。</li><li><strong>示例场景：</strong> 在一个电商数据库中，可按商品 ID 进行分片，不同范围的商品 ID 数据会存于不同的分片，如此能将数据均匀分散，减轻单个服务器的负载。</li></ul><p><strong>配置服务器（Config Server）</strong></p><ul><li><strong>功能：</strong> 配置服务器存储了集群的元数据，涵盖分片的位置、数据块的分布等信息。查询路由器（mongos）会借助这些元数据来确定请求应被路由到哪个或哪些分片。自 MongoDB 3.4 版本起，建议使用复制集形式的配置服务器，以增强其高可用性。</li><li><strong>示例场景：</strong> 当客户端发起查询商品的请求时，配置服务器会告知查询路由器该商品的数据存于哪个分片。</li></ul><p><strong>查询路由器（Query Router，mongos）</strong></p><ul><li><strong>功能：</strong> 作为客户端与分片集群间的接口，客户端的所有请求都要先经过 mongos。mongos 会依据配置服务器提供的元数据，把请求路由到合适的分片上进行处理，然后将各分片的处理结果汇总并返回给客户端。</li><li><strong>示例场景：</strong> 客户端向 mongos 发送一个查询商品列表的请求，mongos 根据商品 ID 的范围确定涉及的分片，向这些分片发送查询请求，最后把各分片返回的结果整合后返回给客户端。</li></ul><p><strong>监控与管理工具</strong></p><ul><li><strong>功能：</strong> 除了上述核心组件，还可借助 MongoDB 自带的监控与管理工具（如 MongoDB Cloud Manager、MongoDB Ops Manager）来监控集群的性能、状态，管理集群的配置与备份等。</li><li><strong>示例场景：</strong> 通过 MongoDB Ops Manager 可以实时查看每个分片的磁盘使用情况、读写性能等指标，及时发现并处理潜在的问题。</li></ul><p><strong>架构示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+</span><br><span class="line">|    客户端应用    |</span><br><span class="line">+-----------------+</span><br><span class="line">        |</span><br><span class="line">        v</span><br><span class="line">+-----------------+</span><br><span class="line">|     mongos      |</span><br><span class="line">+-----------------+</span><br><span class="line">        |</span><br><span class="line">        |  查询请求</span><br><span class="line">        v</span><br><span class="line">+-----------------+</span><br><span class="line">|  配置服务器集群  |</span><br><span class="line">+-----------------+</span><br><span class="line">        |</span><br><span class="line">        |  元数据</span><br><span class="line">        v</span><br><span class="line">+-----------------+</span><br><span class="line">|    分片 1 (复制集) |</span><br><span class="line">+-----------------+</span><br><span class="line">        |</span><br><span class="line">        |  数据存储</span><br><span class="line">        v</span><br><span class="line">+-----------------+</span><br><span class="line">|    分片 2 (复制集) |</span><br><span class="line">+-----------------+</span><br><span class="line">        |</span><br><span class="line">        |  数据存储</span><br><span class="line">        v</span><br><span class="line">+-----------------+</span><br><span class="line">|    分片 3 (复制集) |</span><br><span class="line">+-----------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个架构图清晰展示了客户端应用通过 mongos 与分片集群交互，mongos 依据配置服务器的元数据将请求路由到相应分片的过程。</span></span><br></pre></td></tr></table></figure><h3 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h3><ul><li><strong>数据自动分布：</strong> MongoDB 会根据数据的分片键自动将数据分散到不同的分片上，实现数据的均衡分布。</li><li><strong>支持多种分片策略：</strong> 包括基于范围、哈希等分片方式，可以根据数据的特点和业务需求选择合适的分片策略，以优化数据分布和查询性能。</li><li><strong>动态调整：</strong> 可以在集群运行过程中动态地添加或删除分片，以及调整分片的配置，无需停机维护，实现对集群的动态扩展和优化。</li><li><strong>与 MongoDB 原生功能集成：</strong> 分片集群与 MongoDB 的其他功能（如复制集、索引等）紧密集成，能够充分利用 MongoDB 的各种特性，提供强大的数据库服务。</li></ul><h3 id="1-3-优点"><a href="#1-3-优点" class="headerlink" title="1.3 优点"></a>1.3 优点</h3><ul><li><strong>可扩展性：</strong> 能够水平扩展，通过添加更多的分片节点来处理不断增长的数据量和并发请求，轻松应对大规模数据存储和高流量访问。</li><li><strong>高可用性：</strong> 数据在多个分片上复制，即使部分节点出现故障，也可以通过其他正常的分片继续提供服务，保证系统的连续性。</li><li><strong>负载均衡：</strong> 自动将数据和请求均匀分布到各个分片上，避免单个节点负载过高，提高整个集群的性能和资源利用率。</li><li><strong>灵活性：</strong> 可以根据业务需求灵活地调整集群的规模和架构，例如添加或删除分片、调整数据分布等。</li></ul><h3 id="1-4-缺点"><a href="#1-4-缺点" class="headerlink" title="1.4 缺点"></a>1.4 缺点</h3><ul><li><strong>复杂性：</strong> 部署和管理相对复杂，需要对 MongoDB 的分片机制有深入的了解，同时涉及到多个组件的配置和协调，增加了运维的难度和成本。</li><li><strong>数据一致性挑战：</strong> 在分布式环境下，保证数据的一致性需要一定的机制和策略，可能会涉及到更多的性能开销和潜在的一致性问题，尤其是在跨分片的事务处理中。</li><li><strong>查询性能的不确定性：</strong> 虽然分片集群可以提高整体的读写性能，但对于一些复杂的查询，尤其是涉及到多个分片的关联查询，可能会因为数据分布和查询路由的复杂性而导致性能不稳定或下降。</li></ul><h2 id="二-准备工作"><a href="#二-准备工作" class="headerlink" title="二 准备工作"></a>二 准备工作</h2><h3 id="2-1-服务器准备"><a href="#2-1-服务器准备" class="headerlink" title="2.1 服务器准备"></a>2.1 服务器准备</h3><blockquote><p>最小生产配置（6节点）：<br>配置服务器：3节点（cfg1, cfg2, cfg3）<br>分片1：3节点（shard1a, shard1b, shard1c）<br>mongos路由：2节点（mongos1, mongos2）</p></blockquote><blockquote><p><strong>说明：本例子中采用了在三台服务器装配置服务器，一个分片，每台服务器都装了mongos路由</strong></p></blockquote><table><thead><tr><th>IP</th><th>系统</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>192.168.79.138</td><td>Centos7.6</td><td>2C2G</td><td>1</td></tr><tr><td>192.168.79.139</td><td>Centos7.6</td><td>2C2G</td><td>2</td></tr><tr><td>192.168.79.140</td><td>Centos7.6</td><td>2C2G</td><td>3</td></tr><tr><td>192.168.79.143</td><td>Centos7.6</td><td>2C2G</td><td>验证添加删除节点</td></tr></tbody></table><h3 id="2-2-环境初始化（所有节点）"><a href="#2-2-环境初始化（所有节点）" class="headerlink" title="2.2 环境初始化（所有节点）"></a>2.2 环境初始化（所有节点）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查系统版本</span></span><br><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查SELinux状态</span></span><br><span class="line">getenforce  <span class="comment"># 建议设置为Disabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查防火墙</span></span><br><span class="line">systemctl status firewalld  <span class="comment"># 建议关闭或配置规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建mongodb用户和目录</span></span><br><span class="line">groupadd mongodb</span><br><span class="line">useradd -r -g mongodb -s /bin/false mongodb</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/&#123;configdb,shard,logs&#125;</span><br><span class="line"><span class="built_in">chown</span> -R mongodb:mongodb /data</span><br></pre></td></tr></table></figure><h3 id="2-3-系统优化配置（所有节点）"><a href="#2-3-系统优化配置（所有节点）" class="headerlink" title="2.3 系统优化配置（所有节点）"></a>2.3 系统优化配置（所有节点）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用THP（Transparent Huge Pages）</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到/etc/rc.local保证重启生效</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled\necho never &gt; /sys/kernel/mm/transparent_hugepage/defrag&quot;</span> &gt;&gt; /etc/rc.local</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整系统限制</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mongodb soft nofile 64000&quot;</span> &gt;&gt; /etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mongodb hard nofile 64000&quot;</span> &gt;&gt; /etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mongodb soft nproc 64000&quot;</span> &gt;&gt; /etc/security/limits.conf</span><br></pre></td></tr></table></figure><h2 id="三-分片集群部署"><a href="#三-分片集群部署" class="headerlink" title="三 分片集群部署"></a>三 分片集群部署</h2><h3 id="3-1-架构规划（最小配置）"><a href="#3-1-架构规划（最小配置）" class="headerlink" title="3.1 架构规划（最小配置）"></a>3.1 架构规划（最小配置）</h3><blockquote><p>配置服务器：3节点（cfg1:27019, cfg2:27019, cfg3:27019）</p></blockquote><blockquote><p>分片1：3节点副本集（shard1a:27018, shard1b:27018, shard1c:27018）</p></blockquote><blockquote><p>分片2：3节点副本集（shard2a:27018, shard2b:27018, shard2c:27018）# 本示例只创建一个分片，不同名字可以一直延展</p></blockquote><blockquote><p>mongos路由：3节点（mongos1:27017, mongos2:27017, mongos3:27017） #路由两节点也行</p></blockquote><h3 id="3-2-分步安装部署"><a href="#3-2-分步安装部署" class="headerlink" title="3.2 分步安装部署"></a>3.2 分步安装部署</h3><h4 id="3-2-1-安装MongoDB二进制文件（所有节点）"><a href="#3-2-1-安装MongoDB二进制文件（所有节点）" class="headerlink" title="3.2.1 安装MongoDB二进制文件（所有节点）"></a>3.2.1 安装MongoDB二进制文件（所有节点）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf mongodb-linux-x86_64-rhel70-6.0.21.tgz -C /usr/local/</span><br><span class="line">tar xf mongosh-1.10.6-linux-x64.tgz -C /usr/local/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line"><span class="built_in">mv</span> mongodb-linux-x86_64-rhel70-6.0.21/ mongodb</span><br><span class="line"><span class="built_in">mv</span> mongosh-1.10.6-linux-x64 mongosh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line"><span class="built_in">cd</span> mongodb/</span><br><span class="line"><span class="built_in">mkdir</span> conf</span><br><span class="line"><span class="built_in">cd</span> conf</span><br></pre></td></tr></table></figure><h4 id="3-2-2-部署配置服务器副本集"><a href="#3-2-2-部署配置服务器副本集" class="headerlink" title="3.2.2 部署配置服务器副本集"></a>3.2.2 部署配置服务器副本集</h4><p><code>配置文件 (/usr/local/mongodb/conf/mongod-config.conf)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /data/logs/configsvr.log</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">  logRotate: reopen</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/configdb</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: 1</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line">  port: 27019</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: configRepl</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: configsvr</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /var/run/mongod-config.pid</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line"><span class="comment">#  keyFile: /data/mongodb-keyfile</span></span><br><span class="line">  authorization: disabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：初始化之前，不开启认证</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>初始化命令:</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动所有配置服务器（所有节点）</span></span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongod-config.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化副本集</span></span><br><span class="line">/usr/local/mongosh/bin/mongosh --host 192.168.79.138 --port 27019</span><br><span class="line">&gt; rs.initiate(&#123;</span><br><span class="line">    _id: <span class="string">&quot;configRepl&quot;</span>,</span><br><span class="line">    configsvr: <span class="literal">true</span>,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id: 0, host: <span class="string">&quot;192.168.79.138:27019&quot;</span> &#125;,</span><br><span class="line">      &#123; _id: 1, host: <span class="string">&quot;192.168.79.139:27019&quot;</span> &#125;,</span><br><span class="line">      &#123; _id: 2, host: <span class="string">&quot;192.168.79.140:27019&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="3-2-3-部署分片副本集"><a href="#3-2-3-部署分片副本集" class="headerlink" title="3.2.3 部署分片副本集"></a>3.2.3 部署分片副本集</h4><p><code>配置文件 (/usr/local/mongodb/conf/mongod-shard1.conf)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /data/logs/shard1.<span class="built_in">log</span></span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/shard</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: 1  <span class="comment"># 根据内存调整</span></span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line">  port: 27018</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard1</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /var/run/mongod-shard1.pid</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line"><span class="comment">#  keyFile: /data/mongodb-keyfile</span></span><br><span class="line">  authorization: disabled</span><br></pre></td></tr></table></figure><blockquote><p><strong>初始化分片:</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动分片节点（所有节点）</span></span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongod-shard1.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化副本集</span></span><br><span class="line">/usr/local/mongosh/bin/mongosh --host 192.168.79.138 --port 27018</span><br><span class="line">&gt; rs.initiate(&#123;</span><br><span class="line">    _id: <span class="string">&quot;shard1&quot;</span>,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id: 0, host: <span class="string">&quot;192.168.79.138:27018&quot;</span>, priority: 2 &#125;,</span><br><span class="line">      &#123; _id: 1, host: <span class="string">&quot;192.168.79.139:27018&quot;</span>, priority: 1 &#125;,</span><br><span class="line">      &#123; _id: 2, host: <span class="string">&quot;192.168.79.140:27018&quot;</span>, arbiterOnly: <span class="literal">true</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分片集群可以不要仲裁节点，本示例部署了仲裁节点</span></span><br></pre></td></tr></table></figure><h4 id="3-2-4-部署mongos路由"><a href="#3-2-4-部署mongos路由" class="headerlink" title="3.2.4 部署mongos路由"></a>3.2.4 部署mongos路由</h4><p><code>配置文件 (/usr/local/mongodb/conf/mongos.conf)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /data/logs/mongos.log</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line">  port: 27017</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  configDB: configRepl/192.168.79.138:27019,192.168.79.139:27019,192.168.79.140:27019</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /var/run/mongos.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#security:</span></span><br><span class="line"><span class="comment">#  keyFile: /data/mongodb-keyfile</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>启动mongos</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本示例三台机器都部署了mongos</span></span><br><span class="line">/usr/local/mongodb/bin/mongos -f /usr/local/mongodb/conf/mongos.conf</span><br></pre></td></tr></table></figure><h2 id="四-集群初始化"><a href="#四-集群初始化" class="headerlink" title="四 集群初始化"></a>四 集群初始化</h2><h3 id="4-1-添加分片到集群"><a href="#4-1-添加分片到集群" class="headerlink" title="4.1 添加分片到集群"></a>4.1 添加分片到集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接mongos</span></span><br><span class="line">/usr/local/mongosh/bin/mongosh --host 192.168.79.138 --port 27017</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建分片</span></span><br><span class="line">&gt; sh.addShard(<span class="string">&quot;shard1/192.168.79.138:27018,192.168.79.139:27018&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">报错：</span><br><span class="line">MongoServerError: Cannot add shard1/192.168.79.138:27018,192.168.79.139:27018 as a shard since the implicit default write concern on this shard is <span class="built_in">set</span> to &#123;w : 1&#125;, because number of arbiters <span class="keyword">in</span> the shard<span class="string">&#x27;s configuration caused the number of writable voting members not to be strictly more than the voting majority. Change the shard configuration or set the cluster-wide write concern using the setDefaultRWConcern command and try again.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">原因分析：</span></span><br><span class="line"><span class="string">在 MongoDB 的副本集中，写关注（write concern）用于指定写操作在被确认之前需要传播到多少个副本集成员。&#123;w : 1&#125; 表示写操作只需要在主节点上成功写入即可被确认。而在将分片添加到集群时，MongoDB 会检查分片的配置，确保其写关注设置符合集群的要求。</span></span><br><span class="line"><span class="string">当副本集中存在仲裁者时，仲裁者不参与数据的写入，只参与选举投票。如果仲裁者的数量导致可写投票成员的数量没有严格超过投票多数，就会出现这个错误。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">解决办法：</span></span><br><span class="line"><span class="string"># 连接mongos服务器</span></span><br><span class="line"><span class="string">/usr/local/mongosh/bin/mongosh --host 192.168.79.138 --port 27017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; db.adminCommand(&#123;</span></span><br><span class="line"><span class="string">    setDefaultRWConcern: 1,</span></span><br><span class="line"><span class="string">    defaultWriteConcern: &#123; w: &quot;majority&quot; &#125;,</span></span><br><span class="line"><span class="string">    writeConcern: &#123; w: &quot;majority&quot; &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  defaultReadConcern: &#123; level: &#x27;</span><span class="built_in">local</span><span class="string">&#x27; &#125;,</span></span><br><span class="line"><span class="string">  defaultWriteConcern: &#123; w: &#x27;</span>majority<span class="string">&#x27;, wtimeout: 0 &#125;,</span></span><br><span class="line"><span class="string">  updateOpTime: Timestamp(&#123; t: 1744186820, i: 2 &#125;),</span></span><br><span class="line"><span class="string">  updateWallClockTime: ISODate(&quot;2025-04-09T08:20:21.412Z&quot;),</span></span><br><span class="line"><span class="string">  defaultWriteConcernSource: &#x27;</span>global<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  defaultReadConcernSource: &#x27;</span>implicit<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  localUpdateWallClockTime: ISODate(&quot;2025-04-09T08:20:21.415Z&quot;),</span></span><br><span class="line"><span class="string">  ok: 1,</span></span><br><span class="line"><span class="string">  &#x27;</span><span class="variable">$clusterTime</span><span class="string">&#x27;: &#123;</span></span><br><span class="line"><span class="string">    clusterTime: Timestamp(&#123; t: 1744186821, i: 2 &#125;),</span></span><br><span class="line"><span class="string">    signature: &#123;</span></span><br><span class="line"><span class="string">      hash: Binary(Buffer.from(&quot;0000000000000000000000000000000000000000&quot;, &quot;hex&quot;), 0),</span></span><br><span class="line"><span class="string">      keyId: Long(&quot;0&quot;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  operationTime: Timestamp(&#123; t: 1744186821, i: 2 &#125;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 此刻重新加入分片就不报错了</span></span><br><span class="line"><span class="string">&gt; sh.addShard(&quot;shard1/192.168.79.138:27018,192.168.79.139:27018&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  shardAdded: &#x27;</span>shard1<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  ok: 1,</span></span><br><span class="line"><span class="string">  &#x27;</span><span class="variable">$clusterTime</span><span class="string">&#x27;: &#123;</span></span><br><span class="line"><span class="string">    clusterTime: Timestamp(&#123; t: 1744186861, i: 10 &#125;),</span></span><br><span class="line"><span class="string">    signature: &#123;</span></span><br><span class="line"><span class="string">      hash: Binary(Buffer.from(&quot;0000000000000000000000000000000000000000&quot;, &quot;hex&quot;), 0),</span></span><br><span class="line"><span class="string">      keyId: Long(&quot;0&quot;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  operationTime: Timestamp(&#123; t: 1744186861, i: 10 &#125;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="五-添加安全配置"><a href="#五-添加安全配置" class="headerlink" title="五 添加安全配置"></a>五 添加安全配置</h2><h3 id="5-1-创建keyfile（所有节点）"><a href="#5-1-创建keyfile（所有节点）" class="headerlink" title="5.1 创建keyfile（所有节点）"></a>5.1 创建keyfile（所有节点）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在主节点生成keyfile</span></span><br><span class="line">openssl rand -<span class="built_in">base64</span> 756 &gt; /data/mongodb-keyfile</span><br><span class="line"><span class="built_in">chmod</span> 400 /data/mongodb-keyfile</span><br><span class="line"><span class="built_in">chown</span> mongodb:mongodb /data/mongodb-keyfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分发到其他节点</span></span><br><span class="line">scp /data/mongodb-keyfile root@192.168.79.139:/data/</span><br><span class="line">scp /data/mongodb-keyfile root@192.168.79.140:/data/</span><br></pre></td></tr></table></figure><h3 id="5-2-创建管理员用户"><a href="#5-2-创建管理员用户" class="headerlink" title="5.2 创建管理员用户"></a>5.2 创建管理员用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接mongos</span></span><br><span class="line">/usr/local/mongosh/bin/mongosh --host 192.168.79.138 --port 27017</span><br><span class="line"></span><br><span class="line">use admin   <span class="comment"># 切换为admin</span></span><br><span class="line"><span class="comment"># 创建超级管理员</span></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">  user: <span class="string">&quot;admin&quot;</span>,  <span class="comment"># 名字自己起，随意</span></span><br><span class="line">  <span class="built_in">pwd</span>: <span class="string">&quot;yourStrongPassword&quot;</span>,  <span class="comment"># 替换为实际密码    # zs@@123</span></span><br><span class="line">  roles: [</span><br><span class="line">    &#123; role: <span class="string">&quot;root&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;,</span><br><span class="line">    &#123; role: <span class="string">&quot;clusterAdmin&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;,</span><br><span class="line">    &#123; role: <span class="string">&quot;userAdminAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;,</span><br><span class="line">    &#123; role: <span class="string">&quot;dbAdminAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;,</span><br><span class="line">    &#123; role: <span class="string">&quot;readWriteAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建操作集群，数据库的管理员</span></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">  user: <span class="string">&quot;clusteradmin&quot;</span>,</span><br><span class="line">  <span class="built_in">pwd</span>: <span class="string">&quot;yourStrongPassword&quot;</span>,    <span class="comment"># zs@@123</span></span><br><span class="line">  roles: [</span><br><span class="line">    &#123; role: <span class="string">&quot;clusterAdmin&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;,</span><br><span class="line">    &#123; role: <span class="string">&quot;userAdminAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询用户信息命令</span></span><br><span class="line">db.system.users.find(&#123; user: <span class="string">&quot;admin&quot;</span> &#125;).pretty()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 输出：</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="string">&#x27;admin.admin&#x27;</span>,</span><br><span class="line">    userId: new UUID(<span class="string">&quot;0bbdb4e6-ff72-4475-aa86-0bb7d23de00c&quot;</span>),</span><br><span class="line">    user: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    db: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    credentials: &#123;</span><br><span class="line">      <span class="string">&#x27;SCRAM-SHA-1&#x27;</span>: &#123;</span><br><span class="line">        iterationCount: 10000,</span><br><span class="line">        salt: <span class="string">&#x27;OnIcTUkRinQ3rf+PWQhnmA==&#x27;</span>,</span><br><span class="line">        storedKey: <span class="string">&#x27;E1NyqSqeeEoxjbIu4lpFWXVZPxY=&#x27;</span>,</span><br><span class="line">        serverKey: <span class="string">&#x27;jz7e6o2fxMhNqhnp+wpLEbA5Lp0=&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;SCRAM-SHA-256&#x27;</span>: &#123;</span><br><span class="line">        iterationCount: 15000,</span><br><span class="line">        salt: <span class="string">&#x27;pObhLJQbLp7ilNRthmxd5hkW/T1KuqxPVW/E+g==&#x27;</span>,</span><br><span class="line">        storedKey: <span class="string">&#x27;APlFIKQUnGsyrB44h1De7eGkGcGta5PNMJUiit2jdyo=&#x27;</span>,</span><br><span class="line">        serverKey: <span class="string">&#x27;pYkayEP1ii4WiNWrq3D8y9WmebZ8dhgDQ07E4/rU1zI=&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: <span class="string">&#x27;root&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span> &#125;,</span><br><span class="line">      &#123; role: <span class="string">&#x27;clusterAdmin&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>特别注意!!!!</strong></p><ul><li>在 MongoDB 分片集群中，通过 mongos 创建的用户默认不会自动同步到各个分片服务器上，这是因为：<ul><li>用户数据仅存储在配置服务器(config server)的 admin 数据库中</li><li>分片服务器(shard)需要独立认证用户凭据</li><li>这是 MongoDB 分片集群的设计行为，不是系统缺陷</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 若需要操作分片，则需要同步用户信息到分片集群</span><br><span class="line">// 在分片集群的主节点创建用户</span><br><span class="line">// 可以和配置集群保持一致</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">  user: <span class="string">&quot;admin&quot;</span>,    <span class="comment"># 名字自己起，随意</span></span><br><span class="line">  <span class="built_in">pwd</span>: <span class="string">&quot;yourStrongPassword&quot;</span>,    <span class="comment"># 替换为实际密码</span></span><br><span class="line">  roles: [</span><br><span class="line">    &#123; role: <span class="string">&quot;root&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;,</span><br><span class="line">    &#123; role: <span class="string">&quot;clusterAdmin&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>为用户新增权限的正确方法</strong></p><blockquote><p>通过 mongos 为集群用户添加权限（推荐方式）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 连接到mongos</span><br><span class="line">use admin</span><br><span class="line">db.grantRolesToUser(</span><br><span class="line">  <span class="string">&quot;username&quot;</span>,</span><br><span class="line">  [</span><br><span class="line">    &#123; role: <span class="string">&quot;readWrite&quot;</span>, db: <span class="string">&quot;targetDatabase&quot;</span> &#125;,  // 添加库级读写权限</span><br><span class="line">    &#123; role: <span class="string">&quot;dbAdmin&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;             // 添加管理权限</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>验证分片服务器的用户列表</strong><br><code>use admin</code><br><code>db.system.users.find()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">shard1 [direct: primary] admin&gt; db.system.users.find()</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="string">&#x27;admin.root&#x27;</span>,</span><br><span class="line">    userId: new UUID(<span class="string">&quot;126d5130-998f-4f82-96a8-dd754246e81f&quot;</span>),</span><br><span class="line">    user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    db: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    credentials: &#123;</span><br><span class="line">      <span class="string">&#x27;SCRAM-SHA-1&#x27;</span>: &#123;</span><br><span class="line">        iterationCount: 10000,</span><br><span class="line">        salt: <span class="string">&#x27;QfqvYBECkEnNlz+x3+hEXw==&#x27;</span>,</span><br><span class="line">        storedKey: <span class="string">&#x27;pymFSYJE+5HanpJ+xDLMlBz38gg=&#x27;</span>,</span><br><span class="line">        serverKey: <span class="string">&#x27;INjIgudppIPLqIV1JWlNs5MKoDY=&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;SCRAM-SHA-256&#x27;</span>: &#123;</span><br><span class="line">        iterationCount: 15000,</span><br><span class="line">        salt: <span class="string">&#x27;RyjTmqfM/gGvHhDOMAtiWhvBC6Eta72bvYqfdg==&#x27;</span>,</span><br><span class="line">        storedKey: <span class="string">&#x27;JVHPwxNx4roiqc7ZT66cRXWPaoF0ogd+HrbNovWcVtk=&#x27;</span>,</span><br><span class="line">        serverKey: <span class="string">&#x27;HaHtkotXaXzth5Wpv3bNBiicRy5us4P4NSPTX9DJg0Y=&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: <span class="string">&#x27;clusterAdmin&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span> &#125;,</span><br><span class="line">      &#123; role: <span class="string">&#x27;root&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-3-开启安全配置"><a href="#5-3-开启安全配置" class="headerlink" title="5.3 开启安全配置"></a>5.3 开启安全配置</h3><pre><code># 停止分片服务（所有节点）[root@localhost conf]# ps aux | grep mongodroot      11352  2.1  6.0 3165824 113296 ?      SLl  15:24   4:24 /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongod-config.confroot      11964  1.5  5.4 3204592 100824 ?      Sl   15:32   2:56 ./bin/mongod -f conf/mongod-shard1.conf[root@localhost conf]# kill 11964# 再停止配置服务（所有节点）[root@localhost conf]# kill 11352# 停止mongos服务（所有节点）[root@localhost conf]# ps aux | grep mongosroot      13651  0.5  1.5 2587960 29676 ?       Sl   15:58   0:58 ./bin/mongos -f conf/mongos.conf[root@localhost conf]# kill 13651# 需要把所有节点配置文件的keyfile全开启security:  keyFile: /data/mongodb-keyfile  authorization: enabled    # 取消注释改为开启（security.authorization只适用mongod）# mongos配置文件security:  keyFile: /data/mongodb-keyfile    # 取消注释</code></pre><h3 id="5-4-重新启动服务"><a href="#5-4-重新启动服务" class="headerlink" title="5.4 重新启动服务"></a>5.4 重新启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动配置服务（所有节点）</span></span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongod-config.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动分片服务（所有节点）</span></span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongod-shard1.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动mongos路由服务（所有节点）</span></span><br><span class="line">/usr/local/mongodb/bin/mongos -f /usr/local/mongodb/conf/mongos.conf</span><br></pre></td></tr></table></figure><h3 id="5-5-验证登录"><a href="#5-5-验证登录" class="headerlink" title="5.5 验证登录"></a>5.5 验证登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先测试超级管理员登录</span></span><br><span class="line">/usr/local/mongosh/bin/mongosh --host 192.168.79.138 --port 27017 -u admin -p zs@@123 --authenticationDatabase admin</span><br><span class="line">---</span><br><span class="line">Current Mongosh Log ID:67f72ad9c2dd92b63ae118e2</span><br><span class="line">Connecting to:mongodb://&lt;credentials&gt;@192.168.79.138:27017/?directConnection=<span class="literal">true</span>&amp;authSource=admin&amp;appName=mongosh+1.10.6</span><br><span class="line">Using MongoDB:6.0.21</span><br><span class="line">Using Mongosh:1.10.6</span><br><span class="line">mongosh 2.5.0 is available <span class="keyword">for</span> download: https://www.mongodb.com/try/download/shell</span><br><span class="line"></span><br><span class="line">For mongosh info see: https://docs.mongodb.com/mongodb-shell/</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">   The server generated these startup warnings when booting</span><br><span class="line">   2025-04-09T19:15:57.166-07:00: You are running this process as the root user, <span class="built_in">which</span> is not recommended</span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">[direct: mongos] <span class="built_in">test</span>&gt; sh.status()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">shardingVersion</span><br><span class="line">&#123;</span><br><span class="line">  _id: 1,</span><br><span class="line">  minCompatibleVersion: 5,</span><br><span class="line">  currentVersion: 6,</span><br><span class="line">  clusterId: ObjectId(<span class="string">&quot;67f61e12f30a8acb66fef8cd&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">shards</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="string">&#x27;shard1&#x27;</span>,</span><br><span class="line">    host: <span class="string">&#x27;shard1/192.168.79.138:27018,192.168.79.139:27018&#x27;</span>,</span><br><span class="line">    state: 1,</span><br><span class="line">    topologyTime: Timestamp(&#123; t: 1744186861, i: 7 &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">---</span><br><span class="line">active mongoses</span><br><span class="line">[ &#123; <span class="string">&#x27;6.0.21&#x27;</span>: 1 &#125; ]</span><br><span class="line">---</span><br><span class="line">autosplit</span><br><span class="line">&#123; <span class="string">&#x27;Currently enabled&#x27;</span>: <span class="string">&#x27;yes&#x27;</span> &#125;</span><br><span class="line">---</span><br><span class="line">balancer</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;Currently enabled&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Failed balancer rounds in last 5 attempts&#x27;</span>: 0,</span><br><span class="line">  <span class="string">&#x27;Currently running&#x27;</span>: <span class="string">&#x27;no&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Migration Results for the last 24 hours&#x27;</span>: <span class="string">&#x27;No recent migrations&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">databases</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    database: &#123; _id: <span class="string">&#x27;config&#x27;</span>, primary: <span class="string">&#x27;config&#x27;</span>, partitioned: <span class="literal">true</span> &#125;,</span><br><span class="line">    collections: &#123;</span><br><span class="line">      <span class="string">&#x27;config.system.sessions&#x27;</span>: &#123;</span><br><span class="line">        shardKey: &#123; _id: 1 &#125;,</span><br><span class="line">        unique: <span class="literal">false</span>,</span><br><span class="line">        balancing: <span class="literal">true</span>,</span><br><span class="line">        chunkMetadata: [ &#123; shard: <span class="string">&#x27;shard1&#x27;</span>, nChunks: 1024 &#125; ],</span><br><span class="line">        chunks: [</span><br><span class="line">          <span class="string">&#x27;too many chunks to print, use verbose if you want to force print&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        tags: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    database: &#123;</span><br><span class="line">      _id: <span class="string">&#x27;testdb&#x27;</span>,</span><br><span class="line">      primary: <span class="string">&#x27;shard1&#x27;</span>,</span><br><span class="line">      partitioned: <span class="literal">false</span>,</span><br><span class="line">      version: &#123;</span><br><span class="line">        uuid: new UUID(<span class="string">&quot;68f6362d-a05e-40a8-a20e-63ed47241131&quot;</span>),</span><br><span class="line">        timestamp: Timestamp(&#123; t: 1744186927, i: 1 &#125;),</span><br><span class="line">        lastMod: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    collections: &#123;</span><br><span class="line">      <span class="string">&#x27;testdb.users&#x27;</span>: &#123;</span><br><span class="line">        shardKey: &#123; userId: <span class="string">&#x27;hashed&#x27;</span> &#125;,</span><br><span class="line">        unique: <span class="literal">false</span>,</span><br><span class="line">        balancing: <span class="literal">true</span>,</span><br><span class="line">        chunkMetadata: [ &#123; shard: <span class="string">&#x27;shard1&#x27;</span>, nChunks: 2 &#125; ],</span><br><span class="line">        chunks: [</span><br><span class="line">          &#123; min: &#123; userId: MinKey() &#125;, max: &#123; userId: Long(<span class="string">&quot;0&quot;</span>) &#125;, <span class="string">&#x27;on shard&#x27;</span>: <span class="string">&#x27;shard1&#x27;</span>, <span class="string">&#x27;last modified&#x27;</span>: Timestamp(&#123; t: 1, i: 0 &#125;) &#125;,</span><br><span class="line">          &#123; min: &#123; userId: Long(<span class="string">&quot;0&quot;</span>) &#125;, max: &#123; userId: MaxKey() &#125;, <span class="string">&#x27;on shard&#x27;</span>: <span class="string">&#x27;shard1&#x27;</span>, <span class="string">&#x27;last modified&#x27;</span>: Timestamp(&#123; t: 1, i: 1 &#125;) &#125;</span><br><span class="line">        ],</span><br><span class="line">        tags: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">[direct: mongos] <span class="built_in">test</span>&gt; db.<span class="function"><span class="title">stats</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  raw: &#123;</span><br><span class="line">    <span class="string">&#x27;shard1/192.168.79.138:27018,192.168.79.139:27018&#x27;</span>: &#123;</span><br><span class="line">      db: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">      collections: 0,</span><br><span class="line">      views: 0,</span><br><span class="line">      objects: 0,</span><br><span class="line">      avgObjSize: 0,</span><br><span class="line">      dataSize: 0,</span><br><span class="line">      storageSize: 0,</span><br><span class="line">      indexes: 0,</span><br><span class="line">      indexSize: 0,</span><br><span class="line">      totalSize: 0,</span><br><span class="line">      scaleFactor: 1,</span><br><span class="line">      fsUsedSize: 0,</span><br><span class="line">      fsTotalSize: 0,</span><br><span class="line">      ok: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  objects: 0,</span><br><span class="line">  avgObjSize: 0,</span><br><span class="line">  dataSize: 0,</span><br><span class="line">  storageSize: 0,</span><br><span class="line">  totalSize: 0,</span><br><span class="line">  indexes: 0,</span><br><span class="line">  indexSize: 0,</span><br><span class="line">  scaleFactor: 1,</span><br><span class="line">  fileSize: 0,</span><br><span class="line">  ok: 1,</span><br><span class="line">  <span class="string">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class="line">    clusterTime: Timestamp(&#123; t: 1744251631, i: 1 &#125;),</span><br><span class="line">    signature: &#123;</span><br><span class="line">      <span class="built_in">hash</span>: Binary(Buffer.from(<span class="string">&quot;e1fffd79d10bfdfa8b9d3323b855d294b67bf8c3&quot;</span>, <span class="string">&quot;hex&quot;</span>), 0),</span><br><span class="line">      keyId: Long(<span class="string">&quot;7491208092835643417&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  operationTime: Timestamp(&#123; t: 1744251631, i: 1 &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[direct: mongos] <span class="built_in">test</span>&gt; use testdb</span><br><span class="line">switched to db testdb</span><br><span class="line">[direct: mongos] testdb&gt; db.users.getShardDistribution()</span><br><span class="line">Shard shard1 at shard1/192.168.79.138:27018,192.168.79.139:27018</span><br><span class="line">&#123;</span><br><span class="line">  data: <span class="string">&#x27;50KiB&#x27;</span>,</span><br><span class="line">  docs: 1000,</span><br><span class="line">  chunks: 2,</span><br><span class="line">  <span class="string">&#x27;estimated data per chunk&#x27;</span>: <span class="string">&#x27;25KiB&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;estimated docs per chunk&#x27;</span>: 500</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">Totals</span><br><span class="line">&#123;</span><br><span class="line">  data: <span class="string">&#x27;50KiB&#x27;</span>,</span><br><span class="line">  docs: 1000,</span><br><span class="line">  chunks: 2,</span><br><span class="line">  <span class="string">&#x27;Shard shard1&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;100 % data&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;100 % docs in cluster&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;51B avg obj size on shard&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>sh.status()  &#x2F;&#x2F; 查看分片状态<br>db.stats()   &#x2F;&#x2F; 查看数据库统计</p></blockquote><p><strong>测试clusteradmin用户登录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongosh/bin/mongosh --host 192.168.79.138 --port 27017 -u clusteradmin -p zs@@123 --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line">&gt; sh.status()  // 查看分片状态</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加了安全认证之后，重新测试分片功能</span></span><br><span class="line">// 启用数据库分片</span><br><span class="line">sh.enableSharding(<span class="string">&quot;testdb1&quot;</span>)</span><br><span class="line"></span><br><span class="line">// 创建分片集合</span><br><span class="line">db.adminCommand(&#123;</span><br><span class="line">  shardCollection: <span class="string">&quot;testdb1.users&quot;</span>,</span><br><span class="line">  key: &#123; userId: <span class="string">&quot;hashed&quot;</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 插入测试数据</span><br><span class="line">use testdb1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=1; i&lt;=12341; i++) &#123;</span><br><span class="line">  db.users.insert(&#123;userId: i, data: <span class="string">&quot;test&quot;</span>+i&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 出现报错</span></span><br><span class="line">MongoBulkWriteError: not authorized on testdb1 to execute <span class="built_in">command</span> &#123; insert: <span class="string">&quot;users&quot;</span>, documents: [ &#123; userId: 1, data: <span class="string">&quot;test1&quot;</span>, _id: ObjectId(<span class="string">&#x27;67f72d3583a7485597775119&#x27;</span>) &#125; ], ordered: <span class="literal">true</span>, lsid: &#123; <span class="built_in">id</span>: UUID(<span class="string">&quot;2438810d-f498-4135-86b4-be3e25e7dd88&quot;</span>) &#125;, txnNumber: 1, <span class="variable">$clusterTime</span>: &#123; clusterTime: Timestamp(1744252191, 1), signature: &#123; <span class="built_in">hash</span>: BinData(0, BCE7688B25A7D590830F4270723EC46B6EA80569), keyId: 7491208092835643417 &#125; &#125;, <span class="variable">$db</span>: <span class="string">&quot;testdb1&quot;</span> &#125;</span><br><span class="line">Result: BulkWriteResult &#123;</span><br><span class="line">  insertedCount: 0,</span><br><span class="line">  matchedCount: 0,</span><br><span class="line">  modifiedCount: 0,</span><br><span class="line">  deletedCount: 0,</span><br><span class="line">  upsertedCount: 0,</span><br><span class="line">  upsertedIds: &#123;&#125;,</span><br><span class="line">  insertedIds: &#123; <span class="string">&#x27;0&#x27;</span>: ObjectId(<span class="string">&quot;67f72d3583a7485597775119&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line">Write Errors: []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错说明没有权限，因为这是个集群用户，只有管理集群权限，没有操作testdb1的权限，此时我们可以赋权，或者创建专门操作testdb1库的用户，这里选择赋权。</span></span><br></pre></td></tr></table></figure><p><strong>处理报错问题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出，选择admin用户登录</span></span><br><span class="line">/usr/local/mongosh/bin/mongosh --host 192.168.79.138 --port 27017 -u admin -p zs@@123 --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line">&gt; use admin</span><br><span class="line">&gt; db.grantRolesToUser(<span class="string">&quot;clusteradmin&quot;</span>, [</span><br><span class="line">  &#123; role: <span class="string">&quot;readWrite&quot;</span>, db: <span class="string">&quot;testdb1&quot;</span> &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看clusteradmin用户的权限</span></span><br><span class="line">&gt; db.getUser(<span class="string">&quot;clusteradmin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  _id: <span class="string">&#x27;admin.clusteradmin&#x27;</span>,</span><br><span class="line">  userId: new UUID(<span class="string">&quot;4236ad1c-bcac-45c8-a593-5c36ea563dbc&quot;</span>),</span><br><span class="line">  user: <span class="string">&#x27;clusteradmin&#x27;</span>,</span><br><span class="line">  db: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">  roles: [</span><br><span class="line">    &#123; role: <span class="string">&#x27;clusterAdmin&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span> &#125;,</span><br><span class="line">    &#123; role: <span class="string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span> &#125;,</span><br><span class="line">    &#123; role: <span class="string">&#x27;readWrite&#x27;</span>, db: <span class="string">&#x27;testdb1&#x27;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  mechanisms: [ <span class="string">&#x27;SCRAM-SHA-1&#x27;</span>, <span class="string">&#x27;SCRAM-SHA-256&#x27;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重新测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新使用clusteradmin用户登录进行测试</span></span><br><span class="line">/usr/local/mongosh/bin/mongosh --host 192.168.79.138 --port 27017 -u clusteradmin -p zs@@123 --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line">&gt; use testdb1</span><br><span class="line">&gt; <span class="keyword">for</span> (i = 1; i &lt;= 12341; i++) &#123; db.users.insert(&#123; userId: i, data: <span class="string">&quot;test&quot;</span> + i &#125;); &#125;</span><br><span class="line"><span class="comment"># 此时无报错了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 验证数据分布</span><br><span class="line">db.users.getShardDistribution()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Shard shard1 at shard1/192.168.79.138:27018,192.168.79.139:27018</span><br><span class="line">&#123;</span><br><span class="line">  data: <span class="string">&#x27;639KiB&#x27;</span>,</span><br><span class="line">  docs: 12341,</span><br><span class="line">  chunks: 2,</span><br><span class="line">  <span class="string">&#x27;estimated data per chunk&#x27;</span>: <span class="string">&#x27;319KiB&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;estimated docs per chunk&#x27;</span>: 6170</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">Totals</span><br><span class="line">&#123;</span><br><span class="line">  data: <span class="string">&#x27;639KiB&#x27;</span>,</span><br><span class="line">  docs: 12341,</span><br><span class="line">  chunks: 2,</span><br><span class="line">  <span class="string">&#x27;Shard shard1&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;100 % data&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;100 % docs in cluster&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;53B avg obj size on shard&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以下是对信息的解析：</strong></p><ul><li><p><strong>分片基本信息</strong></p><ul><li><code>Shard shard1 at shard1/192.168.79.138:27018,192.168.79.139:27018</code>：表示名为 <code>shard1</code> 的分片，它由位于 <code>192.168.79.138</code> 主机的 <code>27018</code> 端口和 <code>192.168.79.139</code> 主机的 <code>27018</code> 端口上的节点组成。</li></ul></li><li><p><strong>分片数据统计信息</strong></p><ul><li><code>data: &#39;639KiB&#39;</code>：说明该分片上存储的数据总量为 639KiB。</li><li><code>docs: 12341</code>：表示该分片上存储的文档数量为 12341 个。</li><li><code>chunks: 2</code>：指该分片被划分为 2 个数据块。</li><li><code>&#39;estimated data per chunk&#39;: &#39;319KiB&#39;</code>：是对每个数据块平均存储数据量的估计值，约为 319KiB。</li><li><code>&#39;estimated docs per chunk&#39;: 6170</code>：是对每个数据块平均存储文档数量的估计值，约为 6170 个。</li></ul></li><li><p><strong>集群总体统计信息</strong></p><ul><li><code>data: &#39;639KiB&#39;</code> 和 <code>docs: 12341</code>：再次强调整个集群中数据总量和文档总数与 <code>shard1</code> 中的相同，说明当前集群只有这一个分片存储了数据。</li><li><code>chunks: 2</code>：表示整个集群的数据块数量为 <code>2</code> 个。</li><li><code>&#39;Shard shard1&#39;: [&#39;100 % data&#39;, &#39;100 % docs in cluster&#39;, &#39;53B avg obj size on shard&#39;]</code>：指出 <code>shard1</code> 存储了集群中 <code>100%</code> 的数据和文档，并且该分片上对象的平均大小为 <code>53B</code>。</li></ul></li></ul><h2 id="六-维护"><a href="#六-维护" class="headerlink" title="六 维护"></a>六 维护</h2><h3 id="6-1-查看分片数据分布"><a href="#6-1-查看分片数据分布" class="headerlink" title="6.1 查看分片数据分布"></a>6.1 查看分片数据分布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use config</span><br><span class="line">db.chunks.aggregate([</span><br><span class="line">  &#123; <span class="variable">$group</span>: &#123; _id: <span class="string">&quot;<span class="variable">$shard</span>&quot;</span>, count: &#123; <span class="variable">$sum</span>: 1 &#125; &#125; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">[ &#123; _id: <span class="string">&#x27;shard1&#x27;</span>, count: 1028 &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目前只有一个分片</span></span><br></pre></td></tr></table></figure><h3 id="6-2-平衡器管理"><a href="#6-2-平衡器管理" class="headerlink" title="6.2 平衡器管理"></a>6.2 平衡器管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 检查平衡器是否正在运行</span><br><span class="line">sh.isBalancerRunning()</span><br><span class="line"></span><br><span class="line">// 检查平衡器是否已启用</span><br><span class="line">sh.getBalancerState()</span><br></pre></td></tr></table></figure><p><strong>启用或禁用平衡器</strong></p><blockquote><p>要是你需要启用或者禁用平衡器，可以使用 sh.setBalancerState() 命令。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 启用平衡器</span><br><span class="line">sh.setBalancerState(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">// 禁用平衡器</span><br><span class="line">sh.setBalancerState(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><strong>配置平衡器运行时间</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use config</span><br><span class="line">db.settings.update(</span><br><span class="line">  &#123; _id: <span class="string">&quot;balancer&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="variable">$set</span>: &#123; activeWindow: &#123; start: <span class="string">&quot;23:00&quot;</span>, stop: <span class="string">&quot;05:00&quot;</span> &#125; &#125; &#125;,</span><br><span class="line">  &#123; upsert: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>上述代码将平衡器的运行时间设置为每天晚上 23:00 到次日凌晨 05:00</p></blockquote><h3 id="6-3-资源监控"><a href="#6-3-资源监控" class="headerlink" title="6.3 资源监控"></a>6.3 资源监控</h3><blockquote><p>tools下载地址：<a href="https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel70-x86_64-100.12.0.tgz">https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel70-x86_64-100.12.0.tgz</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工具安装</span></span><br><span class="line">tar xf mongodb-database-tools-rhel70-x86_64-100.12.0.tgz -C /usr/local/</span><br><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line"><span class="built_in">mv</span> mongodb-database-tools-rhel70-x86_64-100.12.0 mongotools</span><br></pre></td></tr></table></figure><p><strong>资源监控</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongotools/bin/mongostat --host 192.168.79.138 --port 27017 -u clusteradmin -p zs@@123 --authenticationDatabase admin</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2025-04-10T02:12:59.188-0700WARNING: On some systems, a password provided directly using --password may be visible to system status programs such as `ps` that may be invoked by other <span class="built_in">users</span>. Consider omitting the password to provide it via stdin, or using the --config option to specify a configuration file with the password.</span><br><span class="line">insert query update delete getmore <span class="built_in">command</span> flushes mapped vsize   res faults qrw arw net_in net_out conn                <span class="keyword">time</span></span><br><span class="line">    *0    *0     *0     *0       0     1|0       0     0B 2.46G 31.0M      0 0|0 0|0   215b   23.2k    3 Apr 10 02:13:01.212</span><br><span class="line">    *0    *0     *0     *0       0     0|0       0     0B 2.46G 31.0M      0 0|0 0|0   213b   23.0k    3 Apr 10 02:13:02.212</span><br><span class="line">    *0    *0     *0     *0       0     1|0       0     0B 2.46G 32.0M      0 0|0 0|0   214b   23.1k    3 Apr 10 02:13:03.210</span><br><span class="line">    *0    *0     *0     *0       0     1|0       0     0B 2.46G 32.0M      0 0|0 0|0   214b   23.0k    3 Apr 10 02:13:04.210</span><br><span class="line">    *0    *0     *0     *0       0     0|0       0     0B 2.46G 32.0M      0 0|0 0|0   213b   22.9k    3 Apr 10 02:13:05.212</span><br><span class="line">    *0    *0     *0     *0       0     1|0       0     0B 2.46G 32.0M      0 0|0 0|0   214b   23.1k    3 Apr 10 02:13:06.209</span><br><span class="line">    *0    *0     *0     *0       0     1|0       0     0B 2.46G 32.0M      0 0|0 0|0   214b   23.1k    3 Apr 10 02:13:07.205</span><br><span class="line">    *0    *0     *0     *0       0     0|0       0     0B 2.46G 32.0M      0 0|0 0|0   213b   22.9k    3 Apr 10 02:13:08.209</span><br><span class="line">    *0    *0     *0     *0       0     2|0       0     0B 2.46G 32.0M      0 0|0 0|0   378b   23.5k    3 Apr 10 02:13:09.208</span><br><span class="line">    *0    *0     *0     *0       0     1|0       0     0B 2.46G 32.0M      0 0|0 0|0   361b   23.4k    3 Apr 10 02:13:10.210</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>主要字段含义：</strong></p></blockquote><blockquote><p><code>insert/query/update/delete</code>: 每秒操作次数<br><code>getmore</code>: 游标批量获取次数<br><code>command</code>: 命令执行次数<br><code>dirty/used</code>: WiredTiger 缓存使用率<br><code>vsize/res</code>: 虚拟内存&#x2F;常驻内存使用量<br><code>net_in/net_out</code>: 网络流量</p></blockquote><h3 id="6-4-添加、删除节点"><a href="#6-4-添加、删除节点" class="headerlink" title="6.4 添加、删除节点"></a>6.4 添加、删除节点</h3><h4 id="6-4-1-添加配置节点"><a href="#6-4-1-添加配置节点" class="headerlink" title="6.4.1 添加配置节点"></a>6.4.1 添加配置节点</h4><blockquote><p>前期准备</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 准备一台新服务器，保证mongodb，mongosh的版本，部署目录，权限全部保持一致</span><br><span class="line">// 初始化操作（省略）</span><br><span class="line">// 拷贝keyfile到新的服务器，启动配置进程</span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongod-config.conf</span><br><span class="line"></span><br><span class="line">// 在配置集群主节点操作</span><br><span class="line">rs.add(<span class="string">&quot;hostip:port&quot;</span>)   <span class="comment"># 示例 rs.add(&quot;192.168.79.143:27019&quot;)</span></span><br><span class="line"></span><br><span class="line">// 查看是否添加成功</span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">set</span>: <span class="string">&#x27;configRepl&#x27;</span>,</span><br><span class="line">  <span class="built_in">date</span>: ISODate(<span class="string">&quot;2025-04-18T08:04:34.902Z&quot;</span>),</span><br><span class="line">  myState: 1,</span><br><span class="line">  term: Long(<span class="string">&quot;10&quot;</span>),</span><br><span class="line">  syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  syncSourceId: -1,</span><br><span class="line">  configsvr: <span class="literal">true</span>,</span><br><span class="line">  heartbeatIntervalMillis: Long(<span class="string">&quot;2000&quot;</span>),</span><br><span class="line">  majorityVoteCount: 2,</span><br><span class="line">  writeMajorityCount: 2,</span><br><span class="line">  votingMembersCount: 3,</span><br><span class="line">  writableVotingMembersCount: 3,</span><br><span class="line">  optimes: &#123;</span><br><span class="line">    lastCommittedOpTime: &#123; ts: Timestamp(&#123; t: 1744963473, i: 2 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">    lastCommittedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:04:33.704Z&quot;</span>),</span><br><span class="line">    readConcernMajorityOpTime: &#123; ts: Timestamp(&#123; t: 1744963473, i: 2 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">    appliedOpTime: &#123; ts: Timestamp(&#123; t: 1744963473, i: 2 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">    durableOpTime: &#123; ts: Timestamp(&#123; t: 1744963473, i: 2 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">    lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:04:33.704Z&quot;</span>),</span><br><span class="line">    lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-18T08:04:33.704Z&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  lastStableRecoveryTimestamp: Timestamp(&#123; t: 1744963443, i: 1 &#125;),</span><br><span class="line">  electionCandidateMetrics: &#123;</span><br><span class="line">    lastElectionReason: <span class="string">&#x27;electionTimeout&#x27;</span>,</span><br><span class="line">    lastElectionDate: ISODate(<span class="string">&quot;2025-04-18T08:00:17.849Z&quot;</span>),</span><br><span class="line">    electionTerm: Long(<span class="string">&quot;10&quot;</span>),</span><br><span class="line">    lastCommittedOpTimeAtElection: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(<span class="string">&quot;-1&quot;</span>) &#125;,</span><br><span class="line">    lastSeenOpTimeAtElection: &#123; ts: Timestamp(&#123; t: 1744963018, i: 2 &#125;), t: Long(<span class="string">&quot;8&quot;</span>) &#125;,</span><br><span class="line">    numVotesNeeded: 2,</span><br><span class="line">    priorityAtElection: 1,</span><br><span class="line">    electionTimeoutMillis: Long(<span class="string">&quot;10000&quot;</span>),</span><br><span class="line">    numCatchUpOps: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">    newTermStartDate: ISODate(<span class="string">&quot;2025-04-18T08:00:17.859Z&quot;</span>),</span><br><span class="line">    wMajorityWriteAvailabilityDate: ISODate(<span class="string">&quot;2025-04-18T08:00:18.306Z&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 0,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.138:27019&#x27;</span>,</span><br><span class="line">      health: 1,</span><br><span class="line">      state: 1,</span><br><span class="line">      stateStr: <span class="string">&#x27;PRIMARY&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 271,</span><br><span class="line">      optime: &#123; ts: Timestamp(&#123; t: 1744963473, i: 2 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">      optimeDate: ISODate(<span class="string">&quot;2025-04-18T08:04:33.000Z&quot;</span>),</span><br><span class="line">      lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:04:33.704Z&quot;</span>),</span><br><span class="line">      lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-18T08:04:33.704Z&quot;</span>),</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceId: -1,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      electionTime: Timestamp(&#123; t: 1744963217, i: 1 &#125;),</span><br><span class="line">      electionDate: ISODate(<span class="string">&quot;2025-04-18T08:00:17.000Z&quot;</span>),</span><br><span class="line">      configVersion: 2,</span><br><span class="line">      configTerm: 10,</span><br><span class="line">      self: <span class="literal">true</span>,</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 1,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.139:27019&#x27;</span>,</span><br><span class="line">      health: 1,</span><br><span class="line">      state: 2,</span><br><span class="line">      stateStr: <span class="string">&#x27;SECONDARY&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 269,</span><br><span class="line">      optime: &#123; ts: Timestamp(&#123; t: 1744963472, i: 1 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">      optimeDurable: &#123; ts: Timestamp(&#123; t: 1744963472, i: 1 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">      optimeDate: ISODate(<span class="string">&quot;2025-04-18T08:04:32.000Z&quot;</span>),</span><br><span class="line">      optimeDurableDate: ISODate(<span class="string">&quot;2025-04-18T08:04:32.000Z&quot;</span>),</span><br><span class="line">      lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:04:33.704Z&quot;</span>),</span><br><span class="line">      lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-18T08:04:33.704Z&quot;</span>),</span><br><span class="line">      lastHeartbeat: ISODate(<span class="string">&quot;2025-04-18T08:04:32.942Z&quot;</span>),</span><br><span class="line">      lastHeartbeatRecv: ISODate(<span class="string">&quot;2025-04-18T08:04:32.940Z&quot;</span>),</span><br><span class="line">      pingMs: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;192.168.79.138:27019&#x27;</span>,</span><br><span class="line">      syncSourceId: 0,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      configVersion: 2,</span><br><span class="line">      configTerm: 10</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 2,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.140:27019&#x27;</span>,</span><br><span class="line">      health: 1,</span><br><span class="line">      state: 2,</span><br><span class="line">      stateStr: <span class="string">&#x27;SECONDARY&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 267,</span><br><span class="line">      optime: &#123; ts: Timestamp(&#123; t: 1744963472, i: 1 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">      optimeDurable: &#123; ts: Timestamp(&#123; t: 1744963472, i: 1 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">      optimeDate: ISODate(<span class="string">&quot;2025-04-18T08:04:32.000Z&quot;</span>),</span><br><span class="line">      optimeDurableDate: ISODate(<span class="string">&quot;2025-04-18T08:04:32.000Z&quot;</span>),</span><br><span class="line">      lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:04:33.704Z&quot;</span>),</span><br><span class="line">      lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-18T08:04:33.704Z&quot;</span>),</span><br><span class="line">      lastHeartbeat: ISODate(<span class="string">&quot;2025-04-18T08:04:32.942Z&quot;</span>),</span><br><span class="line">      lastHeartbeatRecv: ISODate(<span class="string">&quot;2025-04-18T08:04:32.949Z&quot;</span>),</span><br><span class="line">      pingMs: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;192.168.79.139:27019&#x27;</span>,</span><br><span class="line">      syncSourceId: 1,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      configVersion: 2,</span><br><span class="line">      configTerm: 10</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 3,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.143:27019&#x27;</span>,</span><br><span class="line">      health: 0,</span><br><span class="line">      state: 6,</span><br><span class="line">      stateStr: <span class="string">&#x27;(not reachable/healthy)&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 0,</span><br><span class="line">      optime: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(<span class="string">&quot;-1&quot;</span>) &#125;,</span><br><span class="line">      optimeDurable: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(<span class="string">&quot;-1&quot;</span>) &#125;,</span><br><span class="line">      optimeDate: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      optimeDurableDate: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      lastAppliedWallTime: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      lastDurableWallTime: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      lastHeartbeat: ISODate(<span class="string">&quot;2025-04-18T08:04:32.947Z&quot;</span>),</span><br><span class="line">      lastHeartbeatRecv: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      pingMs: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      authenticated: <span class="literal">false</span>,</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceId: -1,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      configVersion: -1,</span><br><span class="line">      configTerm: -1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  ok: 1,</span><br><span class="line">  lastCommittedOpTime: Timestamp(&#123; t: 1744963473, i: 2 &#125;),</span><br><span class="line">  <span class="string">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class="line">    clusterTime: Timestamp(&#123; t: 1744963473, i: 2 &#125;),</span><br><span class="line">    signature: &#123;</span><br><span class="line">      <span class="built_in">hash</span>: Binary(Buffer.from(<span class="string">&quot;bb24c5d713e2289c327d05e9887f7d9efd7eb11d&quot;</span>, <span class="string">&quot;hex&quot;</span>), 0),</span><br><span class="line">      keyId: Long(<span class="string">&quot;7491208092835643417&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  operationTime: Timestamp(&#123; t: 1744963473, i: 2 &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>已经看到节点添加成功了（生产环境使用主机名，不建议ip）<br>修改mongos配置文件，把新的配置节点信息添加，重启所有节点mongos服务</p></blockquote><h4 id="6-4-2-添加分片副本集节点"><a href="#6-4-2-添加分片副本集节点" class="headerlink" title="6.4.2 添加分片副本集节点"></a>6.4.2 添加分片副本集节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 在主节点连接分片集群（新节点服务已经运行，配置，数据目录等信息保持一致）</span><br><span class="line">root@localhost conf]# mongosh --port 27018</span><br><span class="line">Current Mongosh Log ID:68020801ac653b7dba78a0e8</span><br><span class="line">Connecting to:mongodb://127.0.0.1:27018/?directConnection=<span class="literal">true</span>&amp;serverSelectionTimeoutMS=2000&amp;appName=mongosh+1.10.6</span><br><span class="line">Using MongoDB:6.0.21</span><br><span class="line">Using Mongosh:1.10.6</span><br><span class="line">mongosh 2.5.0 is available <span class="keyword">for</span> download: https://www.mongodb.com/try/download/shell</span><br><span class="line"></span><br><span class="line">For mongosh info see: https://docs.mongodb.com/mongodb-shell/</span><br><span class="line"></span><br><span class="line">&gt; use admin </span><br><span class="line">switched to db admin</span><br><span class="line"></span><br><span class="line">&gt; db.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;zs@@123&quot;</span>)</span><br><span class="line">&#123; ok: 1 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>rs.add(&quot;new-node:27018&quot;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; rs.add(<span class="string">&quot;192.168.79.143:27018&quot;</span>)</span><br><span class="line"></span><br><span class="line">// 输出：</span><br><span class="line">&#123;</span><br><span class="line">  ok: 1,</span><br><span class="line">  lastCommittedOpTime: Timestamp(&#123; t: 1744963782, i: 1 &#125;),</span><br><span class="line">  <span class="string">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class="line">    clusterTime: Timestamp(&#123; t: 1744963783, i: 1 &#125;),</span><br><span class="line">    signature: &#123;</span><br><span class="line">      <span class="built_in">hash</span>: Binary(Buffer.from(<span class="string">&quot;5b05512ecf6e13784b4f4dbef9c102f13af06e16&quot;</span>, <span class="string">&quot;hex&quot;</span>), 0),</span><br><span class="line">      keyId: Long(<span class="string">&quot;7491208092835643417&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  operationTime: Timestamp(&#123; t: 1744963782, i: 1 &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&gt; rs.status()   // 检查新节点的stateStr应为<span class="string">&quot;SECONDARY&quot;</span></span><br><span class="line"></span><br><span class="line">// 输出：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">set</span>: <span class="string">&#x27;shard1&#x27;</span>,</span><br><span class="line">  <span class="built_in">date</span>: ISODate(<span class="string">&quot;2025-04-18T08:10:02.797Z&quot;</span>),</span><br><span class="line">  myState: 1,</span><br><span class="line">  term: Long(<span class="string">&quot;12&quot;</span>),</span><br><span class="line">  syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  syncSourceId: -1,</span><br><span class="line">  heartbeatIntervalMillis: Long(<span class="string">&quot;2000&quot;</span>),</span><br><span class="line">  majorityVoteCount: 3,</span><br><span class="line">  writeMajorityCount: 3,</span><br><span class="line">  votingMembersCount: 4,</span><br><span class="line">  writableVotingMembersCount: 3,</span><br><span class="line">  optimes: &#123;</span><br><span class="line">    lastCommittedOpTime: &#123; ts: Timestamp(&#123; t: 1744963799, i: 1 &#125;), t: Long(<span class="string">&quot;12&quot;</span>) &#125;,</span><br><span class="line">    lastCommittedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:09:59.141Z&quot;</span>),</span><br><span class="line">    readConcernMajorityOpTime: &#123; ts: Timestamp(&#123; t: 1744963799, i: 1 &#125;), t: Long(<span class="string">&quot;12&quot;</span>) &#125;,</span><br><span class="line">    appliedOpTime: &#123; ts: Timestamp(&#123; t: 1744963799, i: 1 &#125;), t: Long(<span class="string">&quot;12&quot;</span>) &#125;,</span><br><span class="line">    durableOpTime: &#123; ts: Timestamp(&#123; t: 1744963799, i: 1 &#125;), t: Long(<span class="string">&quot;12&quot;</span>) &#125;,</span><br><span class="line">    lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:09:59.141Z&quot;</span>),</span><br><span class="line">    lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-18T08:09:59.141Z&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  lastStableRecoveryTimestamp: Timestamp(&#123; t: 1744963749, i: 1 &#125;),</span><br><span class="line">  electionCandidateMetrics: &#123;</span><br><span class="line">    lastElectionReason: <span class="string">&#x27;electionTimeout&#x27;</span>,</span><br><span class="line">    lastElectionDate: ISODate(<span class="string">&quot;2025-04-18T08:00:29.004Z&quot;</span>),</span><br><span class="line">    electionTerm: Long(<span class="string">&quot;12&quot;</span>),</span><br><span class="line">    lastCommittedOpTimeAtElection: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(<span class="string">&quot;-1&quot;</span>) &#125;,</span><br><span class="line">    lastSeenOpTimeAtElection: &#123; ts: Timestamp(&#123; t: 1744963001, i: 1 &#125;), t: Long(<span class="string">&quot;10&quot;</span>) &#125;,</span><br><span class="line">    numVotesNeeded: 2,</span><br><span class="line">    priorityAtElection: 2,</span><br><span class="line">    electionTimeoutMillis: Long(<span class="string">&quot;10000&quot;</span>),</span><br><span class="line">    numCatchUpOps: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">    newTermStartDate: ISODate(<span class="string">&quot;2025-04-18T08:00:29.008Z&quot;</span>),</span><br><span class="line">    wMajorityWriteAvailabilityDate: ISODate(<span class="string">&quot;2025-04-18T08:00:29.375Z&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 0,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.138:27018&#x27;</span>,</span><br><span class="line">      health: 1,</span><br><span class="line">      state: 1,</span><br><span class="line">      stateStr: <span class="string">&#x27;PRIMARY&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 588,</span><br><span class="line">      optime: &#123; ts: Timestamp(&#123; t: 1744963799, i: 1 &#125;), t: Long(<span class="string">&quot;12&quot;</span>) &#125;,</span><br><span class="line">      optimeDate: ISODate(<span class="string">&quot;2025-04-18T08:09:59.000Z&quot;</span>),</span><br><span class="line">      lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:09:59.141Z&quot;</span>),</span><br><span class="line">      lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-18T08:09:59.141Z&quot;</span>),</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceId: -1,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      electionTime: Timestamp(&#123; t: 1744963229, i: 1 &#125;),</span><br><span class="line">      electionDate: ISODate(<span class="string">&quot;2025-04-18T08:00:29.000Z&quot;</span>),</span><br><span class="line">      configVersion: 3,</span><br><span class="line">      configTerm: 12,</span><br><span class="line">      self: <span class="literal">true</span>,</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 1,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.139:27018&#x27;</span>,</span><br><span class="line">      health: 1,</span><br><span class="line">      state: 2,</span><br><span class="line">      stateStr: <span class="string">&#x27;SECONDARY&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 583,</span><br><span class="line">      optime: &#123; ts: Timestamp(&#123; t: 1744963799, i: 1 &#125;), t: Long(<span class="string">&quot;12&quot;</span>) &#125;,</span><br><span class="line">      optimeDurable: &#123; ts: Timestamp(&#123; t: 1744963799, i: 1 &#125;), t: Long(<span class="string">&quot;12&quot;</span>) &#125;,</span><br><span class="line">      optimeDate: ISODate(<span class="string">&quot;2025-04-18T08:09:59.000Z&quot;</span>),</span><br><span class="line">      optimeDurableDate: ISODate(<span class="string">&quot;2025-04-18T08:09:59.000Z&quot;</span>),</span><br><span class="line">      lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:09:59.141Z&quot;</span>),</span><br><span class="line">      lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-18T08:09:59.141Z&quot;</span>),</span><br><span class="line">      lastHeartbeat: ISODate(<span class="string">&quot;2025-04-18T08:10:02.335Z&quot;</span>),</span><br><span class="line">      lastHeartbeatRecv: ISODate(<span class="string">&quot;2025-04-18T08:10:02.335Z&quot;</span>),</span><br><span class="line">      pingMs: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;192.168.79.138:27018&#x27;</span>,</span><br><span class="line">      syncSourceId: 0,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      configVersion: 3,</span><br><span class="line">      configTerm: 12</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 2,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.140:27018&#x27;</span>,</span><br><span class="line">      health: 1,</span><br><span class="line">      state: 7,</span><br><span class="line">      stateStr: <span class="string">&#x27;ARBITER&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 584,</span><br><span class="line">      lastHeartbeat: ISODate(<span class="string">&quot;2025-04-18T08:10:02.335Z&quot;</span>),</span><br><span class="line">      lastHeartbeatRecv: ISODate(<span class="string">&quot;2025-04-18T08:10:02.334Z&quot;</span>),</span><br><span class="line">      pingMs: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceId: -1,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      configVersion: 3,</span><br><span class="line">      configTerm: 12</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 3,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.143:27018&#x27;</span>,</span><br><span class="line">      health: 1,</span><br><span class="line">      state: 2,</span><br><span class="line">      stateStr: <span class="string">&#x27;SECONDARY&#x27;</span>,        <span class="comment"># 这里已经改变</span></span><br><span class="line">      <span class="built_in">uptime</span>: 20,</span><br><span class="line">      optime: &#123; ts: Timestamp(&#123; t: 1744963799, i: 1 &#125;), t: Long(<span class="string">&quot;12&quot;</span>) &#125;,</span><br><span class="line">      optimeDurable: &#123; ts: Timestamp(&#123; t: 1744963799, i: 1 &#125;), t: Long(<span class="string">&quot;12&quot;</span>) &#125;,</span><br><span class="line">      optimeDate: ISODate(<span class="string">&quot;2025-04-18T08:09:59.000Z&quot;</span>),</span><br><span class="line">      optimeDurableDate: ISODate(<span class="string">&quot;2025-04-18T08:09:59.000Z&quot;</span>),</span><br><span class="line">      lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-18T08:09:59.141Z&quot;</span>),</span><br><span class="line">      lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-18T08:09:59.141Z&quot;</span>),</span><br><span class="line">      lastHeartbeat: ISODate(<span class="string">&quot;2025-04-18T08:10:02.335Z&quot;</span>),</span><br><span class="line">      lastHeartbeatRecv: ISODate(<span class="string">&quot;2025-04-18T08:10:00.852Z&quot;</span>),</span><br><span class="line">      pingMs: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;192.168.79.139:27018&#x27;</span>,</span><br><span class="line">      syncSourceId: 1,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      configVersion: 3,</span><br><span class="line">      configTerm: 12</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  ok: 1,</span><br><span class="line">  lastCommittedOpTime: Timestamp(&#123; t: 1744963799, i: 1 &#125;),</span><br><span class="line">  <span class="string">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class="line">    clusterTime: Timestamp(&#123; t: 1744963799, i: 2 &#125;),</span><br><span class="line">    signature: &#123;</span><br><span class="line">      <span class="built_in">hash</span>: Binary(Buffer.from(<span class="string">&quot;a72400ff211096017f0f38e351826bc16c3b150a&quot;</span>, <span class="string">&quot;hex&quot;</span>), 0),</span><br><span class="line">      keyId: Long(<span class="string">&quot;7491208092835643417&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  operationTime: Timestamp(&#123; t: 1744963799, i: 1 &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>分片节点添加成功</p></blockquote><p><strong>验证操作</strong></p><pre><code>// 检查分片状态，mongos操作&gt; use admin&gt; sh.status()// 查看集群分片列表&gt; db.adminCommand(&#123; listShards: 1 &#125;)// 查看数据平衡&gt; use config&gt; db.chunks.find().sort(&#123;shard:1&#125;)  // 查看数据分布</code></pre><h4 id="6-4-3-移除配置节点"><a href="#6-4-3-移除配置节点" class="headerlink" title="6.4.3 移除配置节点"></a>6.4.3 移除配置节点</h4><p><strong>删除配置节点前的准备工作</strong></p><blockquote><p>检查当前配置节点状态</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 连接到任意mongos或配置服务器</span><br><span class="line">use config</span><br><span class="line">db.shards.find()  // 查看当前分片状态</span><br><span class="line">db.mongos.find()  // 查看mongos实例</span><br><span class="line">rs.status()  // 查看配置副本集状态</span><br></pre></td></tr></table></figure><blockquote><p>确保集群健康</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh.status()  // 检查整体集群状态</span><br><span class="line">db.adminCommand(&#123; listShards: 1 &#125;)  // 列出所有分片</span><br></pre></td></tr></table></figure><p><strong>从配置副本集中删除节点</strong></p><blockquote><p>连接到配置副本集的主节点</p></blockquote><p><code>mongosh &quot;mongodb://admin:password@config-server-primary:27019/admin?authSource=admin&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# mongosh --port 27019</span><br><span class="line">Current Mongosh Log ID:68020cc772ba9bbe89b3f522</span><br><span class="line">Connecting to:mongodb://127.0.0.1:27019/?directConnection=true&amp;serverSelectionTimeoutMS=2000&amp;appName=mongosh+1.10.6</span><br><span class="line">Using MongoDB:6.0.21</span><br><span class="line">Using Mongosh:1.10.6</span><br><span class="line">mongosh 2.5.0 is available for download: https://www.mongodb.com/try/download/shell</span><br><span class="line"></span><br><span class="line">For mongosh info see: https://docs.mongodb.com/mongodb-shell/</span><br><span class="line"></span><br><span class="line">&gt; use admin</span><br><span class="line">&gt; db.auth(&quot;admin&quot;,&quot;zs@@123&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>查看当前副本集成员</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs.conf()  // 查看详细配置</span><br><span class="line">rs.status()  // 查看节点状态</span><br></pre></td></tr></table></figure><blockquote><p>删除指定配置节点</p></blockquote><p><code>rs.remove(&quot;config-server-to-remove:27019&quot;)  // 替换为要删除的节点地址</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rs.remove(<span class="string">&quot;192.168.79.143:27019&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>验证</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.status()  // 确认节点已移除</span><br></pre></td></tr></table></figure><p><strong>更新所有mongos配置</strong></p><blockquote><p>修改mongos配置文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mongos.conf</span></span><br><span class="line">sharding:</span><br><span class="line">  configDB: configReplSet/remaining-config1:27019,remaining-config2:27019  <span class="comment"># 移除被删除的节点</span></span><br></pre></td></tr></table></figure><blockquote><p>重启所有节点mongos服务</p></blockquote><p><strong>监控调整</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 检查配置服务器状态</span><br><span class="line">use admin</span><br><span class="line">db.adminCommand(&#123; replSetGetStatus: 1 &#125;)</span><br></pre></td></tr></table></figure><h4 id="6-4-4-删除分片副本集节点"><a href="#6-4-4-删除分片副本集节点" class="headerlink" title="6.4.4 删除分片副本集节点"></a>6.4.4 删除分片副本集节点</h4><p><strong>安全删除节点</strong></p><blockquote><p>连接到主节点</p></blockquote><p><code>mongosh &quot;mongodb://admin:password@primary-node:27018/admin?authSource=admin&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# mongosh --port 27018</span><br><span class="line">Current Mongosh Log ID:680212ff368d20209c829b99</span><br><span class="line">Connecting to:mongodb://127.0.0.1:27018/?directConnection=<span class="literal">true</span>&amp;serverSelectionTimeoutMS=2000&amp;appName=mongosh+1.10.6</span><br><span class="line">Using MongoDB:6.0.21</span><br><span class="line">Using Mongosh:1.10.6</span><br><span class="line">mongosh 2.5.0 is available <span class="keyword">for</span> download: https://www.mongodb.com/try/download/shell</span><br><span class="line"></span><br><span class="line">For mongosh info see: https://docs.mongodb.com/mongodb-shell/</span><br><span class="line"></span><br><span class="line">shard1 [direct: primary] <span class="built_in">test</span>&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">shard1 [direct: primary] admin&gt; db.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;zs@@123&quot;</span>)</span><br><span class="line">&#123; ok: 1 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>降级主节点（如果要删除的是主节点）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs.stepDown()  // 强制主节点降级</span><br><span class="line">rs.status()    // 确认新主节点已选举产生</span><br></pre></td></tr></table></figure><blockquote><p>正式删除节点</p></blockquote><p><code>rs.remove(&quot;node-to-remove:27018&quot;)  // 替换为要删除的节点地址</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rs.remove(<span class="string">&quot;192.168.79.143:27018&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 输出：</span><br><span class="line">&#123;</span><br><span class="line">  ok: 1,</span><br><span class="line">  lastCommittedOpTime: Timestamp(&#123; t: 1744966680, i: 1 &#125;),</span><br><span class="line">  <span class="string">&#x27;$clusterTime&#x27;</span>: &#123;</span><br><span class="line">    clusterTime: Timestamp(&#123; t: 1744966680, i: 1 &#125;),</span><br><span class="line">    signature: &#123;</span><br><span class="line">      <span class="built_in">hash</span>: Binary(Buffer.from(<span class="string">&quot;f40ce72c59baa0b342b2cf6cf93c8769d9a0e3e5&quot;</span>, <span class="string">&quot;hex&quot;</span>), 0),</span><br><span class="line">      keyId: Long(<span class="string">&quot;7491208092835643417&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  operationTime: Timestamp(&#123; t: 1744966680, i: 1 &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>验证删除结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs.conf()  // 检查成员列表</span><br><span class="line">rs.status() // 查看节点状态</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-6.0.21副本集离线部署手册-（Replica Set）副本集模式</title>
      <link href="/articles/2025/04/22/mongodb-6-0-21-lixian-fubenjibushu/"/>
      <url>/articles/2025/04/22/mongodb-6-0-21-lixian-fubenjibushu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="MongoDB-6-0-21副本集离线部署手册-（Replica-Set）副本集模式"><a href="#MongoDB-6-0-21副本集离线部署手册-（Replica-Set）副本集模式" class="headerlink" title="MongoDB-6.0.21副本集离线部署手册-（Replica Set）副本集模式"></a>MongoDB-6.0.21副本集离线部署手册-（Replica Set）副本集模式</h1><h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h2><blockquote><p>MongoDB 副本集是一组维护相同数据集的 MongoDB 实例，由一个主节点（Primary）和多个从节点（Secondary）组成。客户端的写操作只能在主节点上执行，而读操作可以在主节点或从节点上执行。副本集通过心跳机制来监控成员状态，当主节点出现故障时，会自动进行选举，从从节点中选出一个新的主节点，以保证系统的高可用性。</p></blockquote><h3 id="1-1-架构组成"><a href="#1-1-架构组成" class="headerlink" title="1.1 架构组成"></a>1.1 架构组成</h3><ul><li><p><strong>主节点（Primary）：</strong></p><ul><li>唯一可以处理写操作的节点。当客户端发起写请求时，主节点会将写操作应用到自己的数据集上，并将这些操作记录到操作日志（oplog）中。</li><li>负责将 oplog 中的操作同步到从节点。</li></ul></li><li><p><strong>从节点（Secondary）：</strong></p><ul><li>从主节点复制 oplog，并将其中的操作应用到自己的数据集上，从而与主节点保持数据一致。</li><li>可以处理读请求，通过将读操作分发到从节点，可以减轻主节点的负载，提高系统的读性能。</li></ul></li><li><p><strong>仲裁节点（Arbiter）：</strong></p><ul><li>仲裁节点不存储数据，只参与主节点的选举过程。当副本集中的节点数量为偶数时，仲裁节点可以打破平局，确保选举能够顺利进行。</li></ul></li></ul><h3 id="1-2-工作流程"><a href="#1-2-工作流程" class="headerlink" title="1.2 工作流程"></a>1.2 工作流程</h3><ol><li><strong>写操作：</strong> 客户端将写请求发送到主节点，主节点将写操作应用到自己的数据集上，并将操作记录到 oplog 中。然后，主节点将 oplog 同步到从节点。</li><li><strong>读操作：</strong> 客户端可以选择将读请求发送到主节点或从节点。如果发送到主节点，将获得最新的数据；如果发送到从节点，可能会获得稍微旧一点的数据。</li><li><strong>故障转移：</strong> 当主节点出现故障时，从节点会检测到主节点不可用，并发起选举过程。选举过程中，各个从节点会投票选出一个新的主节点。仲裁节点在选举过程中起到关键作用，确保选举能够顺利进行。</li></ol><h3 id="1-3-优点"><a href="#1-3-优点" class="headerlink" title="1.3 优点"></a>1.3 优点</h3><p><strong>高可用性</strong></p><ul><li><strong>自动故障转移：</strong> 当主节点出现故障时，副本集可以自动进行选举，选出一个新的主节点，从而保证系统的高可用性。客户端无需手动干预，即可继续进行读写操作。</li><li><strong>数据冗余：</strong> 副本集中的每个从节点都存储了一份完整的数据副本，即使某个节点出现故障，其他节点仍然可以提供服务。</li></ul><p><strong>数据一致性</strong></p><ul><li><strong>操作日志同步：</strong> 主节点将写操作记录到 oplog 中，并将 oplog 同步到从节点。从节点通过应用 oplog 中的操作，与主节点保持数据一致。</li><li><strong>多数确认：</strong> MongoDB 支持多数确认（majority write concern），即写操作必须在大多数节点上成功执行后，才会向客户端返回成功响应。这样可以确保数据的一致性。</li></ul><p><strong>读写分离</strong></p><ul><li><strong>读扩展：</strong> 可以将读请求分发到从节点，从而减轻主节点的负载，提高系统的读性能。特别是在读密集型应用中，读写分离可以显著提高系统的吞吐量。</li><li><strong>灵活配置：</strong> 客户端可以根据业务需求，灵活选择将读请求发送到主节点或从节点。例如，对于对数据实时性要求较高的读请求，可以发送到主节点；对于对数据实时性要求较低的读请求，可以发送到从节点。</li></ul><h3 id="1-4-缺点"><a href="#1-4-缺点" class="headerlink" title="1.4 缺点"></a>1.4 缺点</h3><p><strong>复杂性增加</strong></p><ul><li><strong>部署和管理复杂：</strong> 副本集需要部署多个节点，并且需要进行配置和管理。例如，需要配置节点之间的通信、选举参数等。</li><li><strong>故障诊断困难：</strong> 当副本集出现故障时，由于涉及多个节点，故障诊断和排查会比较困难。需要对每个节点的状态进行检查，找出故障原因。</li></ul><p><strong>成本增加</strong></p><ul><li><strong>硬件成本：</strong> 副本集需要部署多个节点，每个节点都需要占用一定的硬件资源，如 CPU、内存、磁盘等。这会增加硬件成本。</li><li><strong>维护成本：</strong> 需要对多个节点进行维护和管理，如监控节点状态、备份数据等。这会增加维护成本。</li></ul><p><strong>数据延迟</strong></p><ul><li><strong>从节点同步延迟：</strong> 从节点从主节点复制 oplog 并应用操作需要一定的时间，因此从节点上的数据可能会稍微落后于主节点。在对数据实时性要求较高的应用中，可能会出现数据不一致的问题。</li><li><strong>选举延迟：</strong> 当主节点出现故障时，选举新的主节点需要一定的时间。在选举过程中，副本集可能无法处理写操作，会导致一定的服务中断。</li></ul><h2 id="二-准备工作"><a href="#二-准备工作" class="headerlink" title="二 准备工作"></a>二 准备工作</h2><h3 id="2-1-准备环境"><a href="#2-1-准备环境" class="headerlink" title="2.1 准备环境"></a>2.1 准备环境</h3><blockquote><p>所有节点使用相同操作系统版本（推荐RHEL&#x2F;CentOS 7+或Ubuntu 18.04+）</p></blockquote><table><thead><tr><th>IP</th><th>系统</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>192.168.79.130</td><td>Centos7.6</td><td>1C1G</td><td>mongodb主节点</td></tr><tr><td>192.168.79.131</td><td>Centos7.6</td><td>1C1G</td><td>mongodb从节点</td></tr><tr><td>192.168.79.132</td><td>Centos7.6</td><td>1C1G</td><td>mongodb仲裁节点</td></tr></tbody></table><blockquote><p>确保节点间时间同步（NTP服务）</p></blockquote><blockquote><p>禁用THP（Transparent Huge Pages）</p></blockquote><h3 id="2-2-服务器初始化"><a href="#2-2-服务器初始化" class="headerlink" title="2.2 服务器初始化"></a>2.2 服务器初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三个节点统一设置，这里以 主节点 为例</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">[root@localhost ~]# <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-957.el7.x86_64</span><br><span class="line"></span><br><span class="line">sed -i.bak <span class="string">&#x27;7s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line"> </span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户和目录</span></span><br><span class="line">groupadd mongodb</span><br><span class="line">useradd -r -g mongodb -s /bin/false mongodb</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/mongodb/&#123;db,logs&#125;</span><br><span class="line"><span class="built_in">chown</span> -R mongodb:mongodb /data/mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用THP（添加到/etc/rc.local保证重启生效）</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-离线安装MongoDB"><a href="#2-3-离线安装MongoDB" class="headerlink" title="2.3 离线安装MongoDB"></a>2.3 离线安装MongoDB</h3><p><strong>准备安装包</strong></p><blockquote><p>mongodb-linux-x86_64-rhel70-6.0.21.tgz  <code>主体文件包</code><br>下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p></blockquote><blockquote><p>mongosh-1.10.6-linux-x64.tgz            <code>启动命令包（因为mongodb6.0要用mongosh命令连接，故此需要额外下载工具包）</code><br>下载地址：<a href="https://www.mongodb.com/try/download/shell">https://www.mongodb.com/try/download/shell</a></p></blockquote><h4 id="2-3-1-手动安装（所有节点）"><a href="#2-3-1-手动安装（所有节点）" class="headerlink" title="2.3.1 手动安装（所有节点）"></a>2.3.1 手动安装（所有节点）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传安装包到服务器</span></span><br><span class="line">[root@localhost ~]# tar xf mongodb-linux-x86_64-rhel70-6.0.21.tgz -C /usr/local</span><br><span class="line">[root@localhost ~]# tar xf mongosh-1.10.6-linux-x64.tgz</span><br><span class="line">[root@localhost ~]# <span class="built_in">mv</span> mongosh-1.10.6-linux-x64 mongosh</span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/local</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">mv</span> mongodb-linux-x86_64-rhel70-6.0.21 mongodb</span><br></pre></td></tr></table></figure><h4 id="2-3-2-创建配置文件（-usr-local-mongodb-conf-mongodb-yml）"><a href="#2-3-2-创建配置文件（-usr-local-mongodb-conf-mongodb-yml）" class="headerlink" title="2.3.2 创建配置文件（&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;conf&#x2F;mongodb.yml）"></a>2.3.2 创建配置文件（&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;conf&#x2F;mongodb.yml）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> /usr/local/mongodb/conf</span><br><span class="line">[root@localhost ~]# vim  /usr/local/mongodb/conf/mongodb.yml</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongodb/db</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: 1  <span class="comment"># 根据内存调整，建议不超过可用内存的50%</span></span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /data/mongodb/logs/mongod.log</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: rs0  <span class="comment"># 副本集名称</span></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /var/run/mongod.pid</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  authorization: disabled  <span class="comment"># 禁用认证</span></span><br><span class="line"><span class="comment">#  authorization: enabled  # 启用认证</span></span><br><span class="line"><span class="comment">#  keyFile: /data/mongodb/keyfile  # 副本集认证文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这里先禁用认证，因为直接开启 集群初始化可能会报错，初始化集群之后重新开启认证即可。</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-初始化副本集"><a href="#2-3-3-初始化副本集" class="headerlink" title="2.3.3 初始化副本集"></a>2.3.3 初始化副本集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有节点都启动mongodb服务</span></span><br><span class="line">[root@localhost ~]# /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongodb.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在注解点连接集群</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> mongosh/bin/</span><br><span class="line">[root@localhost bin]# ./mongosh --host 192.168.79.130</span><br><span class="line"></span><br><span class="line">rs.initiate(&#123;</span><br><span class="line">    _id: <span class="string">&quot;rs0&quot;</span>,</span><br><span class="line">    version: 1,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id: 0, host: <span class="string">&quot;192.168.79.130:27017&quot;</span> &#125;,</span><br><span class="line">      &#123; _id: 1, host: <span class="string">&quot;192.168.79.131:27017&quot;</span> &#125;,</span><br><span class="line">      &#123; _id: 2, host: <span class="string">&quot;192.168.79.132:27017&quot;</span>, arbiterOnly: <span class="literal">true</span> &#125;  <span class="comment"># 仲裁节点</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="2-3-4-创建管理用户"><a href="#2-3-4-创建管理用户" class="headerlink" title="2.3.4 创建管理用户"></a>2.3.4 创建管理用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">use admin   <span class="comment"># 切换为admin</span></span><br><span class="line"></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">  user: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="built_in">pwd</span>: <span class="string">&quot;yourStrongPassword&quot;</span>,  <span class="comment"># 替换为实际密码</span></span><br><span class="line">  roles: [</span><br><span class="line">    &#123; role: <span class="string">&quot;root&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;,</span><br><span class="line">    &#123; role: <span class="string">&quot;clusterAdmin&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-3-5-开启认证"><a href="#2-3-5-开启认证" class="headerlink" title="2.3.5 开启认证"></a>2.3.5 开启认证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 停止服务（所有节点）</span><br><span class="line"></span><br><span class="line">pkill mongod</span><br><span class="line"></span><br><span class="line">openssl rand -base64 756 &gt; /data/mongodb/keyfile</span><br><span class="line">chmod 400 /data/mongodb/keyfile</span><br><span class="line">chown mongodb:mongodb /data/mongodb/keyfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改配置文件</span><br><span class="line">[root@localhost ~]# vim  /usr/local/mongodb/conf/mongodb.yml</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongodb/db</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: 1  # 根据内存调整，建议不超过可用内存的50%</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /data/mongodb/logs/mongod.log</span><br><span class="line">  logAppend: true</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: rs0  # 副本集名称</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true</span><br><span class="line">  pidFilePath: /var/run/mongod.pid</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">#  authorization: disabled  # 禁用认证</span><br><span class="line">  authorization: enabled  # 启用认证</span><br><span class="line">  keyFile: /data/mongodb/keyfile  # 副本集认证文件</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"># 重新启动服务</span><br><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongodb.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-3-6-测试连接"><a href="#2-3-6-测试连接" class="headerlink" title="2.3.6 测试连接"></a>2.3.6 测试连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg  mongodb-linux-x86_64-rhel70-6.0.21.tgz  mongosh  mongosh-1.10.6-linux-x64.tgz  original-ks.cfg</span><br><span class="line">[root@localhost ~]# ./mongosh/bin/mongosh --host 192.168.79.130 -u admin -p zs@@123 --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line">Current Mongosh Log ID:67f4bc26d05252519cba53cd</span><br><span class="line">Connecting to:mongodb://&lt;credentials&gt;@192.168.79.130:27017/?directConnection=<span class="literal">true</span>&amp;authSource=admin&amp;appName=mongosh+1.10.6</span><br><span class="line">Using MongoDB:6.0.21</span><br><span class="line">Using Mongosh:1.10.6</span><br><span class="line">mongosh 2.4.2 is available <span class="keyword">for</span> download: https://www.mongodb.com/try/download/shell</span><br><span class="line"></span><br><span class="line">For mongosh info see: https://docs.mongodb.com/mongodb-shell/</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">   The server generated these startup warnings when booting</span><br><span class="line">   2025-04-07T22:45:49.608-07:00: The configured WiredTiger cache size is more than 80% of available RAM. See http://dochub.mongodb.org/core/faq-memory-diagnostics-wt</span><br><span class="line">   2025-04-07T22:45:50.251-07:00: You are running this process as the root user, <span class="built_in">which</span> is not recommended</span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">rs0 [direct: other] <span class="built_in">test</span>&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证副本集状态</span></span><br><span class="line">rs0 [direct: other] <span class="built_in">test</span>&gt; rs.status()</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">set</span>: <span class="string">&#x27;rs0&#x27;</span>,</span><br><span class="line">  <span class="built_in">date</span>: ISODate(<span class="string">&quot;2025-04-08T06:04:21.933Z&quot;</span>),</span><br><span class="line">  myState: 3,</span><br><span class="line">  term: Long(<span class="string">&quot;1&quot;</span>),</span><br><span class="line">  syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  syncSourceId: -1,</span><br><span class="line">  heartbeatIntervalMillis: Long(<span class="string">&quot;2000&quot;</span>),</span><br><span class="line">  majorityVoteCount: 2,</span><br><span class="line">  writeMajorityCount: 2,</span><br><span class="line">  votingMembersCount: 3,</span><br><span class="line">  writableVotingMembersCount: 2,</span><br><span class="line">  optimes: &#123;</span><br><span class="line">    lastCommittedOpTime: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(<span class="string">&quot;-1&quot;</span>) &#125;,</span><br><span class="line">    lastCommittedWallTime: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">    appliedOpTime: &#123; ts: Timestamp(&#123; t: 1744077485, i: 1 &#125;), t: Long(<span class="string">&quot;1&quot;</span>) &#125;,</span><br><span class="line">    durableOpTime: &#123; ts: Timestamp(&#123; t: 1744077485, i: 1 &#125;), t: Long(<span class="string">&quot;1&quot;</span>) &#125;,</span><br><span class="line">    lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-08T01:58:05.695Z&quot;</span>),</span><br><span class="line">    lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-08T01:58:05.695Z&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  lastStableRecoveryTimestamp: Timestamp(&#123; t: 1744077485, i: 1 &#125;),</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 0,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.130:27017&#x27;</span>,</span><br><span class="line">      health: 1,</span><br><span class="line">      state: 3,</span><br><span class="line">      stateStr: <span class="string">&#x27;RECOVERING&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 1112,</span><br><span class="line">      optime: &#123; ts: Timestamp(&#123; t: 1744077485, i: 1 &#125;), t: Long(<span class="string">&quot;1&quot;</span>) &#125;,</span><br><span class="line">      optimeDate: ISODate(<span class="string">&quot;2025-04-08T01:58:05.000Z&quot;</span>),</span><br><span class="line">      lastAppliedWallTime: ISODate(<span class="string">&quot;2025-04-08T01:58:05.695Z&quot;</span>),</span><br><span class="line">      lastDurableWallTime: ISODate(<span class="string">&quot;2025-04-08T01:58:05.695Z&quot;</span>),</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceId: -1,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      configVersion: 1,</span><br><span class="line">      configTerm: 1,</span><br><span class="line">      self: <span class="literal">true</span>,</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 1,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.131:27017&#x27;</span>,</span><br><span class="line">      health: 0,</span><br><span class="line">      state: 6,</span><br><span class="line">      stateStr: <span class="string">&#x27;(not reachable/healthy)&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 0,</span><br><span class="line">      optime: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(<span class="string">&quot;-1&quot;</span>) &#125;,</span><br><span class="line">      optimeDurable: &#123; ts: Timestamp(&#123; t: 0, i: 0 &#125;), t: Long(<span class="string">&quot;-1&quot;</span>) &#125;,</span><br><span class="line">      optimeDate: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      optimeDurableDate: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      lastAppliedWallTime: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      lastDurableWallTime: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      lastHeartbeat: ISODate(<span class="string">&quot;2025-04-08T06:04:21.450Z&quot;</span>),</span><br><span class="line">      lastHeartbeatRecv: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      pingMs: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      authenticated: <span class="literal">false</span>,</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceId: -1,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      configVersion: -1,</span><br><span class="line">      configTerm: -1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 2,</span><br><span class="line">      name: <span class="string">&#x27;192.168.79.132:27017&#x27;</span>,</span><br><span class="line">      health: 0,</span><br><span class="line">      state: 6,</span><br><span class="line">      stateStr: <span class="string">&#x27;(not reachable/healthy)&#x27;</span>,</span><br><span class="line">      <span class="built_in">uptime</span>: 0,</span><br><span class="line">      lastHeartbeat: ISODate(<span class="string">&quot;2025-04-08T06:04:21.798Z&quot;</span>),</span><br><span class="line">      lastHeartbeatRecv: ISODate(<span class="string">&quot;1970-01-01T00:00:00.000Z&quot;</span>),</span><br><span class="line">      pingMs: Long(<span class="string">&quot;0&quot;</span>),</span><br><span class="line">      lastHeartbeatMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      authenticated: <span class="literal">false</span>,</span><br><span class="line">      syncSourceHost: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      syncSourceId: -1,</span><br><span class="line">      infoMessage: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      configVersion: -1,</span><br><span class="line">      configTerm: -1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  ok: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-日常维护命令"><a href="#2-4-日常维护命令" class="headerlink" title="2.4 日常维护命令"></a>2.4 日常维护命令</h3><h4 id="2-4-1-查看副本集状态"><a href="#2-4-1-查看副本集状态" class="headerlink" title="2.4.1 查看副本集状态"></a>2.4.1 查看副本集状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rs.status()</span><br><span class="line">rs.conf()</span><br><span class="line">rs.printReplicationInfo()</span><br><span class="line">rs.printSecondaryReplicationInfo()</span><br></pre></td></tr></table></figure><h4 id="2-4-2-主从切换"><a href="#2-4-2-主从切换" class="headerlink" title="2.4.2 主从切换"></a>2.4.2 主从切换</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在primary上执行</span><br><span class="line">rs.stepDown(300)  // 300秒内不参与选举</span><br></pre></td></tr></table></figure><h4 id="2-4-3-添加-移除节点"><a href="#2-4-3-添加-移除节点" class="headerlink" title="2.4.3 添加&#x2F;移除节点"></a>2.4.3 添加&#x2F;移除节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 添加新节点</span><br><span class="line">rs.add(<span class="string">&quot;newnode:27017&quot;</span>)</span><br><span class="line"></span><br><span class="line">// 移除节点</span><br><span class="line">rs.remove(<span class="string">&quot;oldnode:27017&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-5-注意事项"><a href="#2-5-注意事项" class="headerlink" title="2.5 注意事项"></a>2.5 注意事项</h3><ul><li><p><strong>版本一致性：</strong> 确保所有节点MongoDB版本完全相同</p></li><li><p><strong>防火墙配置：</strong> 开放27017端口及节点间所有必要端口</p></li><li><p><strong>磁盘空间：</strong> 监控数据目录空间使用情况</p></li><li><p><strong>备份策略：</strong> 定期执行mongodump或使用文件系统快照</p></li><li><p><strong>日志轮转：</strong> 配置logrotate防止日志文件过大</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB-6.0.21离线单节点部署</title>
      <link href="/articles/2025/04/21/mongodb-6-0-21-lixian-danjiedianbushu/"/>
      <url>/articles/2025/04/21/mongodb-6-0-21-lixian-danjiedianbushu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="MongoDB-6-0-21离线单节点部署"><a href="#MongoDB-6-0-21离线单节点部署" class="headerlink" title="MongoDB-6.0.21离线单节点部署"></a>MongoDB-6.0.21离线单节点部署</h1><h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一 准备工作"></a>一 准备工作</h2><blockquote><p>下载离线环境包<br>mongodb-linux-x86_64-rhel70-6.0.21.tgz  <code>主体文件包</code><br>下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p></blockquote><blockquote><p>mongosh-1.10.6-linux-x64.tgz            <code>启动命令包（因为mongodb6.0要用mongosh命令连接，故此需要额外下载工具包）</code><br>下载地址：<a href="https://www.mongodb.com/try/download/shell">https://www.mongodb.com/try/download/shell</a></p></blockquote><h3 id="1-1-环境初始化"><a href="#1-1-环境初始化" class="headerlink" title="1.1 环境初始化"></a>1.1 环境初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">[root@localhost ~]# <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-957.el7.x86_64</span><br><span class="line"></span><br><span class="line">sed -i.bak <span class="string">&#x27;7s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户和目录</span></span><br><span class="line">groupadd mongodb</span><br><span class="line">useradd -r -g mongodb -s /bin/false mongodb</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/mongodb/&#123;db,logs&#125;</span><br><span class="line"><span class="built_in">chown</span> -R mongodb:mongodb /data/mongodb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用THP（添加到/etc/rc.local保证重启生效）</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled\necho never &gt; /sys/kernel/mm/transparent_hugepage/defrag&quot;</span> &gt;&gt; /etc/rc.local</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.local</span><br></pre></td></tr></table></figure><h3 id="1-2-离线安装"><a href="#1-2-离线安装" class="headerlink" title="1.2 离线安装"></a>1.2 离线安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf mongodb-linux-x86_64-rhel70-6.0.21.tgz -C /usr/local/</span><br><span class="line">tar xf mongosh-1.10.6-linux-x64.tgz -C /usr/local/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line"><span class="built_in">mv</span> mongodb-linux-x86_64-rhel70-6.0.21/ mongodb</span><br><span class="line"><span class="built_in">mv</span> mongosh-1.10.6-linux-x64 mongosh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line"><span class="built_in">cd</span> mongodb/</span><br><span class="line"><span class="built_in">mkdir</span> conf</span><br><span class="line"><span class="built_in">cd</span> conf</span><br></pre></td></tr></table></figure><h3 id="1-3-创建配置文件"><a href="#1-3-创建配置文件" class="headerlink" title="1.3 创建配置文件"></a>1.3 创建配置文件</h3><p><code>/usr/local/mongodb/conf/mongod.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /data/mongodb/logs/mongod.log</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongodb/db</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: 1  <span class="comment"># 根据可用内存调整，建议不超过物理内存的50%</span></span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  bindIp: 0.0.0.0  <span class="comment"># 生产环境建议绑定具体IP</span></span><br><span class="line">  port: 27017</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span>  <span class="comment"># 后台运行</span></span><br><span class="line">  pidFilePath: /var/run/mongod.pid</span><br></pre></td></tr></table></figure><h3 id="1-4-启动服务"><a href="#1-4-启动服务" class="headerlink" title="1.4 启动服务"></a>1.4 启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/conf/mongod.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承与派生</title>
      <link href="/articles/2023/05/10/jichengyupaisheng/"/>
      <url>/articles/2023/05/10/jichengyupaisheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="26、继承与派生"><a href="#26、继承与派生" class="headerlink" title="26、继承与派生"></a>26、继承与派生</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，什么是继承"><a href="#一，什么是继承" class="headerlink" title="一，什么是继承"></a>一，什么是继承</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">继承是一种创建新类的方式，在Python中，新建的类可以继承一个或多个父类，新建的类可称为子类或派生类，父类又可称为基类或超类，子类会遗传父类的属性</span><br><span class="line">需要注意的是：</span><br><span class="line">    在python中，新建的类可以继承一个或多个父类</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent1</span>: <span class="comment">#定义父类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent2</span>: <span class="comment">#定义父类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub1</span>(<span class="title class_ inherited__">Parent1</span>): <span class="comment">#单继承</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub2</span>(Parent1,Parent2): <span class="comment">#多继承</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过类的内置属性__bases__可以查看类继承的所有父类</span></span><br><span class="line"><span class="built_in">print</span>(Sub1.__bases__)       <span class="comment"># (&lt;class &#x27;__main__.Parent1&#x27;&gt;,)</span></span><br><span class="line"><span class="built_in">print</span>(Sub2.__bases__)       <span class="comment"># (&lt;class &#x27;__main__.Parent1&#x27;&gt;, &lt;class &#x27;__main__.Parent2&#x27;&gt;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps1: 在python2中有经典类和新式类之分</span></span><br><span class="line"><span class="comment"># 新式类：继承了object类的子类，以及该子类的子类子子类。。。</span></span><br><span class="line"><span class="comment"># 经典类：没有继承object类的子类，以及该子类的子类子子类。。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps2: 在python3中没有继承任何类，那么会默认继承object类，所以python3中所有的类都是新式类</span></span><br><span class="line"><span class="built_in">print</span>(Parent1.__bases__)    <span class="comment"># (&lt;class &#x27;object&#x27;&gt;,)</span></span><br><span class="line"><span class="built_in">print</span>(Parent2.__bases__)    <span class="comment"># (&lt;class &#x27;object&#x27;&gt;,)</span></span><br></pre></td></tr></table></figure><h2 id="二，继承与抽象"><a href="#二，继承与抽象" class="headerlink" title="二，继承与抽象"></a>二，继承与抽象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python的多继承</span></span><br><span class="line"><span class="comment"># 优点：子类可以同时遗传多个父类的属性，最大限度的重用代码</span></span><br><span class="line"><span class="comment"># 缺点：违背人的思维习惯：继承表达的是一种&quot;是&quot;什么的关系。</span></span><br><span class="line"><span class="comment">#      代码可读性会变差。</span></span><br><span class="line"><span class="comment">#      不建议使用多继承，扩展性变差。</span></span><br><span class="line"><span class="comment">#      如果真的涉及到一饿子类不可避免的要重用多个父类的属性，应该使用mixins</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、为何要用继承：用类解决类与类代码冗余问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、如何实现继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    school = <span class="string">&#x27;清华大学&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sax</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">        <span class="variable language_">self</span>.sax = sax</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sax,salary,level</span>):</span><br><span class="line">        <span class="comment"># 调用父类的init方法</span></span><br><span class="line">        People.__init__(<span class="variable language_">self</span>,name,age,sax)</span><br><span class="line">        <span class="variable language_">self</span>.salary = salary</span><br><span class="line">        <span class="variable language_">self</span>.level = level</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teacher</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is teaching&#x27;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">student</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is student&#x27;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.name))</span><br><span class="line"></span><br><span class="line">teach_obj = Teacher(<span class="string">&#x27;lisi&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">5000</span>,<span class="string">&#x27;三&#x27;</span>)</span><br><span class="line">teach_obj.teacher()     <span class="comment"># lisi is teaching</span></span><br><span class="line"><span class="built_in">print</span>(teach_obj.name,teach_obj.age,teach_obj.sax,teach_obj.salary,teach_obj.level,teach_obj.school)     <span class="comment"># lisi 30 male 5000 三 清华大学</span></span><br><span class="line"></span><br><span class="line">obj = Student(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">obj.student()</span><br><span class="line"><span class="built_in">print</span>(obj.school)</span><br></pre></td></tr></table></figure><h2 id="三，属性查找"><a href="#三，属性查找" class="headerlink" title="三，属性查找"></a>三，属性查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单继承背景下的属性查找</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.f1()       <span class="comment"># obj.f1()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Bar()</span><br><span class="line">obj.f2()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">Foo.f2</span></span><br><span class="line"><span class="string">Bar.f1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果就想访问Foo类下的f1函数，有两种实现方法</span></span><br><span class="line"><span class="comment"># 示范一：</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        Foo.f1(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Bar()</span><br><span class="line">obj.f2()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">Foo.f2</span></span><br><span class="line"><span class="string">Foo.f1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示范二：</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__f1()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Bar()</span><br><span class="line">obj.f2()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">Foo.f2</span></span><br><span class="line"><span class="string">Foo.f1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="四，多继承带来的菱形问题"><a href="#四，多继承带来的菱形问题" class="headerlink" title="四，多继承带来的菱形问题"></a>四，多继承带来的菱形问题</h2><h3 id="4-1-菱形问题"><a href="#4-1-菱形问题" class="headerlink" title="4.1 菱形问题"></a>4.1 菱形问题</h3><blockquote><p>大多数面向对象语言都不支持多继承，而在Python中，一个子类是可以同时继承多个父类的，这固然可以带来一个子类可以对多个不同父类加以重用的好处，但也有可能引发著名的 Diamond problem菱形问题(或称钻石问题，有时候也被称为“死亡钻石”)，菱形其实就是对下面这种继承结构的形象比喻</p></blockquote><p><img src="/articles/2023/05/10/jichengyupaisheng/1.png"></p><pre><code>A类在顶部，B类和C类分别位于其下方，D类在底部将两者连接在一起形成菱形。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这种继承结构下导致的问题称之为菱形问题：如果A中有一个方法，B和/或C都重写了该方法，而D没有重写它，那么D继承的是哪个版本的方法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B,C):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = D()</span><br><span class="line">obj.test() <span class="comment"># 结果为：from B</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(D.mro())</span><br><span class="line"><span class="comment"># [&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找顺序如上，简单概括就是，D（B，C）按顺序，先找D，再找B，在找C，如果C在前面，就是先找D，再找C，在找B</span></span><br></pre></td></tr></table></figure><h3 id="4-2-继承原理"><a href="#4-2-继承原理" class="headerlink" title="4.2 继承原理"></a>4.2 继承原理</h3><blockquote><p>python到底是如何实现继承的呢？ 对于你定义的每一个类，Python都会计算出一个方法解析顺序(MRO)列表，该MRO列表就是一个简单的所有基类的线性顺序列表，如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(D.mro())</span><br><span class="line"><span class="comment"># [&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p>python会在MRO列表上从左到右开始查找基类,直到找到第一个匹配这个属性的类为止。 而这个MRO列表的构造是通过一个C3线性化算法来实现的。我们不去深究这个算法的数学原理,它实际上就是合并所有父类的MRO列表并遵循如下三条准则:</p></blockquote><pre><code>1.子类会先于父类被检查2.多个父类会根据它们在列表中的顺序被检查3.如果对下一个类存在两个合法的选择,选择第一个父类</code></pre><p><strong>ps:</strong></p><pre><code>1.由对象发起的属性查找，会从对象自身的属性里检索，没有则会按照对象的类.mro()规定的顺序依次找下去，2.由类发起的属性查找，会按照当前类.mro()规定的顺序依次找下去，</code></pre><h3 id="4-3-深度优先和广度优先"><a href="#4-3-深度优先和广度优先" class="headerlink" title="4.3 深度优先和广度优先"></a>4.3 深度优先和广度优先</h3><blockquote><p>参照下述代码，多继承结构为非菱形结构，此时，会按照先找B这一条分支，然后再找C这一条分支，最后找D这一条分支的顺序直到找到我们想要的属性</p></blockquote><p><img src="/articles/2023/05/10/jichengyupaisheng/2.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from E&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from F&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">E</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">F</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(B, C, D):</span><br><span class="line">    <span class="comment"># def test(self):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;from A&#x27;)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.mro())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.E&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.F&#x27;&gt;, &lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">obj = A()</span><br><span class="line">obj.test() <span class="comment"># 结果为：from B</span></span><br><span class="line"><span class="comment"># 可依次注释上述类中的方法test来进行验证</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2023/05/10/jichengyupaisheng/3.png"></p><pre><code>python3都是新式类，都按照这种顺序进行查找</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">G</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from G&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>(<span class="title class_ inherited__">G</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from E&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span>(<span class="title class_ inherited__">G</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from F&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">E</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">F</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">G</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(B,C,D):</span><br><span class="line">    <span class="comment"># def test(self):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;from A&#x27;)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = A()</span><br><span class="line">obj.test() <span class="comment"># 如上图，查找顺序为:obj-&gt;A-&gt;B-&gt;E-&gt;C-&gt;F-&gt;D-&gt;G-&gt;object</span></span><br><span class="line"><span class="comment"># 可依次注释上述类中的方法test来进行验证</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装</title>
      <link href="/articles/2023/05/09/fengzhuang/"/>
      <url>/articles/2023/05/09/fengzhuang/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="25、封装"><a href="#25、封装" class="headerlink" title="25、封装"></a>25、封装</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引入"><a href="#一，引入" class="headerlink" title="一，引入"></a>一，引入</h2><blockquote><p>面向对象编程有三大特性：封装、继承、多态，其中最重要的一个特性就是封装。封装指的就是把数据与功能都整合到一起，听起来是不是很熟悉，没错，我们之前所说的”整合“二字其实就是封装的通俗说法。除此之外，针对封装到对象或者类中的属性，我们还可以严格控制对它们的访问，分两步实现：隐藏与开放接口</p></blockquote><h2 id="二，隐藏属性"><a href="#二，隐藏属性" class="headerlink" title="二，隐藏属性"></a>二，隐藏属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何隐藏：在属性名面前加__前缀，就会实现一个对外隐藏属性的效果</span></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># I、在类外部无法直接访问双下滑线开头的属性，但知道了类名和属性名就可以拼出名字：_类名__属性，然后就可以访问了，如Foo._Foo__x，所以说这种操作并没有严格意义上地限制外部访问，仅仅只是一种语法意义上的变形。</span></span><br><span class="line"><span class="comment"># II、在类内部是可以直接访问双下滑线开头的属性的，比如self.__f1()，因为在类定义阶段类内部双下滑线开头的属性统一发生了变形。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>():</span><br><span class="line">    __x = <span class="number">1</span>     <span class="comment"># _Foo__x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f1</span>(<span class="params">self</span>):     <span class="comment"># _Foo__f1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.__x)</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.__f1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Foo._Foo__x)      <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(Foo._Foo__f1)     <span class="comment"># &lt;function Foo.__f1 at 0x10b26bd30&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># III、变形操作只在类定义阶段发生一次,在类定义之后的赋值操作，不会变形。</span></span><br><span class="line">Foo.__y = <span class="number">3</span></span><br><span class="line"><span class="comment"># print(Foo.__dict__)</span></span><br><span class="line"><span class="built_in">print</span>(Foo.__y)  <span class="comment"># 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三，开放接口"><a href="#三，开放接口" class="headerlink" title="三，开放接口"></a>三，开放接口</h2><blockquote><p>定义属性就是为了使用，所以隐藏并不是目的</p></blockquote><h3 id="3-1-隐藏数据属性"><a href="#3-1-隐藏数据属性" class="headerlink" title="3.1 隐藏数据属性"></a>3.1 隐藏数据属性</h3><blockquote><p>将数据隐藏起来就限制了类外部对数据的直接操作，然后类内应该提供相应的接口来允许类外部间接地操作数据，接口之上可以附加额外的逻辑来对数据的操作进行严格地控制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 通过该接口就可以间接的访问到名字属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.__name)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self,val</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(val) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">str</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;必须为字符串类型&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__name = val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="comment"># print(obj.name)   # 无法直接用名字属性</span></span><br><span class="line">obj.get_name()  <span class="comment"># zhangsan</span></span><br><span class="line"></span><br><span class="line">obj.set_name(<span class="number">1231</span>)  <span class="comment"># 必须为字符串类型，封装了之后可以更加严格的判断处理</span></span><br></pre></td></tr></table></figure><h3 id="3-2-隐藏函数属性"><a href="#3-2-隐藏函数属性" class="headerlink" title="3.2 隐藏函数属性"></a>3.2 隐藏函数属性</h3><blockquote><p>目的的是为了隔离复杂度，例如ATM程序的取款功能,该功能有很多其他功能组成，比如插卡、身份认证、输入金额、打印小票、取钱等，而对使用者来说,只需要开发取款这个功能接口即可,其余功能我们都可以隐藏起来</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ATM</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__card</span>(<span class="params">self</span>): <span class="comment">#插卡</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;插卡&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__auth</span>(<span class="params">self</span>): <span class="comment">#身份认证</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户认证&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__input</span>(<span class="params">self</span>): <span class="comment">#输入金额</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入取款金额&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__print_bill</span>(<span class="params">self</span>): <span class="comment">#打印小票</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;打印账单&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__take_money</span>(<span class="params">self</span>): <span class="comment">#取钱</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;取款&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self</span>): <span class="comment">#取款功能</span></span><br><span class="line">        <span class="variable language_">self</span>.__card()</span><br><span class="line">        <span class="variable language_">self</span>.__auth()</span><br><span class="line">        <span class="variable language_">self</span>.__<span class="built_in">input</span>()</span><br><span class="line">        <span class="variable language_">self</span>.__print_bill()</span><br><span class="line">        <span class="variable language_">self</span>.__take_money()</span><br><span class="line"></span><br><span class="line">obj=ATM()</span><br><span class="line">obj.withdraw()</span><br></pre></td></tr></table></figure><h2 id="四，property"><a href="#四，property" class="headerlink" title="四，property"></a>四，property</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 装饰器：</span><br><span class="line"># 是在不修改被装饰对象源代码以及调用方式的前提下为被装饰对象添加新功能的可调用对象</span><br><span class="line"></span><br><span class="line"># property是一个装饰器，是用来将绑定给对象的方法为伪造成一个数据属性</span><br></pre></td></tr></table></figure><p><strong>案例1：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">什么是特性property</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">property是一种特殊的属性，访问它时会执行一段功能（函数）然后返回值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例一：BMI指数（bmi是计算而来的，但很明显它听起来像是一个属性而非方法，如果我们将其做成一个属性，更便于理解）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">成人的BMI数值：</span></span><br><span class="line"><span class="string">过轻：低于18.5</span></span><br><span class="line"><span class="string">正常：18.5-23.9</span></span><br><span class="line"><span class="string">过重：24-27</span></span><br><span class="line"><span class="string">肥胖：28-32</span></span><br><span class="line"><span class="string">非常肥胖, 高于32</span></span><br><span class="line"><span class="string">　　体质指数（BMI）=体重（kg）÷身高^2（m）</span></span><br><span class="line"><span class="string">　　EX：70kg÷（1.75×1.75）=22.86</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,weight,height</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.weight = weight</span><br><span class="line">        <span class="variable language_">self</span>.height = height</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义函数的原因：</span></span><br><span class="line">    <span class="comment"># 1、从bmi的公式上看，bmi应该是触发功能计算得到的</span></span><br><span class="line">    <span class="comment"># 2、bmi随着身高，体重的变化而动态变化的，不是一个固定的值</span></span><br><span class="line">    <span class="comment"># 简单的说，每次都是需要临时计算得到的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 但是，bmi听起来更像是一个数据属性，而不是功能</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bmi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.weight / (<span class="variable language_">self</span>.height ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">72</span>,<span class="number">1.73</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.bmi)        <span class="comment"># 24.0569347455645</span></span><br></pre></td></tr></table></figure><p><strong>案例2：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(name) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">str</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;必须为str类型&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不让删除&#x27;</span>)</span><br><span class="line">        <span class="comment"># del self.__name</span></span><br><span class="line">    name = <span class="built_in">property</span>(get_name,set_name,del_name)</span><br><span class="line"></span><br><span class="line">obj1 = People2(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj1.name)</span><br><span class="line">obj1.name = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(obj1.name)</span><br><span class="line"><span class="keyword">del</span> obj1.name</span><br></pre></td></tr></table></figure><p><strong>案例3：(推荐使用的方式)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People3</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):     <span class="comment"># obj3.name</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, name</span>):      <span class="comment"># obj3.name = &#x27;lisi&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(name) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">str</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;必须为str类型&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):     <span class="comment"># del obj3.name</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不让删除&#x27;</span>)</span><br><span class="line">        <span class="comment"># del self.__name</span></span><br><span class="line"></span><br><span class="line">obj3 = People3(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj1.name)</span><br><span class="line">obj3.name = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(obj1.name)</span><br><span class="line"><span class="keyword">del</span> obj3.name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程</title>
      <link href="/articles/2023/05/05/mianxiangduixiangbiancheng/"/>
      <url>/articles/2023/05/05/mianxiangduixiangbiancheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="24、面向对象编程"><a href="#24、面向对象编程" class="headerlink" title="24、面向对象编程"></a>24、面向对象编程</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，对象的概念"><a href="#一，对象的概念" class="headerlink" title="一，对象的概念"></a>一，对象的概念</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">面向过程：</span></span><br><span class="line"><span class="string">    核心是&quot;过程&quot;二字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    过程的终极奥义是：将程序流程化</span></span><br><span class="line"><span class="string">    过程是&quot;流水线&quot;，用来分步骤解决问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">面向对象：</span></span><br><span class="line"><span class="string">    核心是&quot;对象&quot;二字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    对象的终极奥义就是：将程序&quot;整合&quot;</span></span><br><span class="line"><span class="string">    对象是&quot;容器&quot;，用来盛放数据与功能的</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>所有的程序都是由”数据”与“功能“组成，因而编写程序的本质就是定义出一系列的数据，然后定义出一系列的功能来对数据进行操作。在学习”对象“之前，程序中的数据与功能是分离开的，如下:</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 程序 = 数据 + 功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生的数据</span></span><br><span class="line">name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">stu_gender = <span class="string">&#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生的功能</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tell_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name %s age %s 性别 %s&#x27;</span> %(name,age,stu_gender))</span><br></pre></td></tr></table></figure><h2 id="二，类与对象"><a href="#二，类与对象" class="headerlink" title="二，类与对象"></a>二，类与对象</h2><blockquote><p>类即类别&#x2F;种类，是面向对象分析和设计的基石，如果多个对象有相似的数据与功能，那么该多个对象就属于同一种类。有了类的好处是：我们可以把同一类对象相同的数据与功能存放到类里，而无需每个对象都重复存一份，这样每个对象里只需存自己独有的数据即可，极大地节省了空间。所以，如果说对象是用来存放数据与功能的容器，那么类则是用来存放多个对象相同的数据与功能的容器。</p></blockquote><p><img src="/articles/2023/05/05/mianxiangduixiangbiancheng/1.png"></p><blockquote><p>综上所述，虽然我们是先介绍对象后介绍类，但是需要强调的是：在程序中，必须要事先定义类，然后再调用类产生对象（调用类拿到的返回值就是对象）。产生对象的类与对象之间存在关联，这种关联指的是：对象可以访问到类中共有的数据与功能，所以类中的内容仍然是属于对象的，类只不过是一种节省空间、减少代码冗余的机制，面向对象编程最终的核心仍然是去使用对象。</p></blockquote><h2 id="三，面向对象编程"><a href="#三，面向对象编程" class="headerlink" title="三，面向对象编程"></a>三，面向对象编程</h2><h3 id="3-1-类的定义与实例化"><a href="#3-1-类的定义与实例化" class="headerlink" title="3.1 类的定义与实例化"></a>3.1 类的定义与实例化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先定义类</span></span><br><span class="line"><span class="comment"># 类是对象相似数据与功能的集合体。所以类体中最常见的是变量与函数的定义，但是类体其实是可以包含任意代码的</span></span><br><span class="line"><span class="comment"># 注意：类体代码在定义阶段就会立即执行，会产生类的名称空间</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="comment"># 1、变量的定义</span></span><br><span class="line">    stu_school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、功能的定义</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tell_stu_info</span>(<span class="params">stu_obj</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;学生信息：名字：%s 年龄：%s 性别：%s&#x27;</span> %(</span><br><span class="line">            stu_obj[<span class="string">&#x27;stu_name&#x27;</span>],</span><br><span class="line">            stu_obj[<span class="string">&#x27;stu_age&#x27;</span>],</span><br><span class="line">            stu_obj[<span class="string">&#x27;stu_gender&#x27;</span>]</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_info</span>(<span class="params">stu_obj,x,y,z</span>):</span><br><span class="line">        stu_obj[<span class="string">&#x27;stu_name&#x27;</span>] = x</span><br><span class="line">        stu_obj[<span class="string">&#x27;stu_age&#x27;</span>] = y</span><br><span class="line">        stu_obj[<span class="string">&#x27;stu_gender&#x27;</span>] = z</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;==========&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Student.__dict__)</span><br><span class="line"><span class="built_in">print</span>(Student.__dict__[<span class="string">&#x27;stu_school&#x27;</span>])       <span class="comment"># oldboy</span></span><br><span class="line"><span class="built_in">print</span>(Student.__dict__[<span class="string">&#x27;set_info&#x27;</span>])     <span class="comment"># &lt;function Student.set_info at 0x100ee3e50&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-属性访问"><a href="#3-2-属性访问" class="headerlink" title="3.2 属性访问"></a>3.2 属性访问</h3><h4 id="3-2-1-类属性与对象属性"><a href="#3-2-1-类属性与对象属性" class="headerlink" title="3.2.1 类属性与对象属性"></a>3.2.1 类属性与对象属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 属性访问的语法</span></span><br><span class="line"><span class="comment"># 1、访问数据属性</span></span><br><span class="line"><span class="built_in">print</span>(Student.stu_school)   <span class="comment"># print(Student.__dict__[&#x27;stu_school&#x27;])       # oldboy</span></span><br><span class="line"><span class="comment"># 2、访问函数属性</span></span><br><span class="line"><span class="built_in">print</span>(Student.set_info)     <span class="comment"># print(Student.__dict__[&#x27;set_info&#x27;])     # &lt;function Student.set_info at 0x100ee3e50&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再调用类产生对象</span></span><br><span class="line">stu1_obj = Student()        <span class="comment"># 实例化对象</span></span><br><span class="line">stu2_obj = Student()</span><br><span class="line">stu3_obj = Student()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1_obj.__dict__)    <span class="comment"># &#123;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(stu2_obj.__dict__)    <span class="comment"># &#123;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(stu3_obj.__dict__)    <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为对象定制自己的独有属性</span></span><br><span class="line"><span class="comment"># 问题1：代码重复</span></span><br><span class="line"><span class="comment"># 问题2：属性的查找顺序</span></span><br><span class="line">stu1_obj.stu_name = <span class="string">&#x27;zhangsan&#x27;</span> <span class="comment"># stu1_obj.__dict__[&#x27;stu_name&#x27;] = &#x27;zhangsan&#x27;</span></span><br><span class="line">stu1_obj.stu_age = <span class="number">18</span> <span class="comment"># stu1_obj.__dict__[&#x27;stu_age&#x27;] = 18</span></span><br><span class="line">stu1_obj.stu_gender = <span class="string">&#x27;male&#x27;</span> <span class="comment"># stu1_obj.__dict__[&#x27;stu_gender&#x27;] = &#x27;male&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(stu1_obj.__dict__)    <span class="comment"># &#123;&#x27;stu_name&#x27;: &#x27;zhangsan&#x27;, &#x27;stu_age&#x27;: 18, &#x27;stu_gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stu2_obj.stu_name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="comment"># stu2_obj.stu_age = 38</span></span><br><span class="line"><span class="comment"># stu2_obj.stu_gender = &#x27;male&#x27;</span></span><br><span class="line"><span class="comment"># print(stu2_obj.__dict__)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># stu3_obj.stu_name = &#x27;wangwu&#x27;</span></span><br><span class="line"><span class="comment"># stu3_obj.stu_age = 20</span></span><br><span class="line"><span class="comment"># stu3_obj.stu_gender = &#x27;female&#x27;</span></span><br><span class="line"><span class="comment"># print(stu3_obj.__dict__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决问题1：</span></span><br><span class="line"><span class="comment"># 解决方案1：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">obj,x,y,z</span>):</span><br><span class="line">    obj.stu_name = x</span><br><span class="line">    obj.stu_age = y</span><br><span class="line">    obj.stu_gender = z</span><br><span class="line"></span><br><span class="line">init(stu1_obj,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">init(stu2_obj,<span class="string">&#x27;lisi&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">init(stu3_obj,<span class="string">&#x27;wangwu&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方案2：</span></span><br><span class="line"><span class="comment"># 一，先定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="comment"># 1、变量的定义</span></span><br><span class="line">    stu_school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 空对象,&#x27;zhangsan&#x27;,18,&#x27;male&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">obj, x, y, z</span>):</span><br><span class="line">        obj.stu_name = x    <span class="comment"># 空对象.stu_name = &#x27;zhangsan&#x27;</span></span><br><span class="line">        obj.stu_age = y     <span class="comment"># 空对象.stu_age = 18</span></span><br><span class="line">        obj.stu_gender = z  <span class="comment"># 空对象.stu_gender = &#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、功能的定义</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tell_stu_info</span>(<span class="params">stu_obj</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;学生信息：名字：%s 年龄：%s 性别：%s&#x27;</span> %(</span><br><span class="line">            stu_obj[<span class="string">&#x27;stu_name&#x27;</span>],</span><br><span class="line">            stu_obj[<span class="string">&#x27;stu_age&#x27;</span>],</span><br><span class="line">            stu_obj[<span class="string">&#x27;stu_gender&#x27;</span>]</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_info</span>(<span class="params">stu_obj,x,y,z</span>):</span><br><span class="line">        stu_obj[<span class="string">&#x27;stu_name&#x27;</span>] = x</span><br><span class="line">        stu_obj[<span class="string">&#x27;stu_age&#x27;</span>] = y</span><br><span class="line">        stu_obj[<span class="string">&#x27;stu_gender&#x27;</span>] = z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二，再调用类产生对象</span></span><br><span class="line"><span class="comment"># 调用类的过程又称之为实例化，发生了三件事</span></span><br><span class="line"><span class="comment"># 1、先产生一个空对象</span></span><br><span class="line"><span class="comment"># 2、python会自动调用类中的__init__方法，然后将空对象以及调用类时括号内传入的参数一同传给__init__方法</span></span><br><span class="line"><span class="comment"># 3、返回初始化好的对象</span></span><br><span class="line">stu1_obj = Student(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)    <span class="comment"># Student.__init__(空对象,&#x27;zhangsan&#x27;,18,&#x27;male&#x27;)</span></span><br><span class="line">stu2_obj = Student(<span class="string">&#x27;lisi&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">stu3_obj = Student(<span class="string">&#x27;wangwu&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1_obj.__dict__)    <span class="comment"># &#123;&#x27;stu_name&#x27;: &#x27;zhangsan&#x27;, &#x27;stu_age&#x27;: 18, &#x27;stu_gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结__init__方法</span></span><br><span class="line"><span class="comment"># 1、会在调用类时自动触发执行，用来为对象初始化自己独有的数据。</span></span><br><span class="line"><span class="comment"># 2、__init__内应该存放的是为对象初始化属性的功能（共有属性），但是是可以存放任意其他代码，想要在类调用时就立刻执行的代码都可以放到该方法内。</span></span><br><span class="line"><span class="comment"># 3、__init__方法必须返回None</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-属性查找顺序与绑定方法"><a href="#3-2-2-属性查找顺序与绑定方法" class="headerlink" title="3.2.2 属性查找顺序与绑定方法"></a>3.2.2 属性查找顺序与绑定方法</h4><pre><code>对象的名称空间里只存放着对象独有的属性，而对象们相似的属性是存放于类中的。对象在访问属性时，会优先从对象本身的__dict__中查找，未找到，则去类的__dict__中查找</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="comment"># 1、变量的定义</span></span><br><span class="line">    stu_school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 空对象,&#x27;zhangsan&#x27;,18,&#x27;male&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, z</span>):</span><br><span class="line">        Student.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.stu_name = x    <span class="comment"># 空对象.stu_name = &#x27;zhangsan&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.stu_age = y     <span class="comment"># 空对象.stu_age = 18</span></span><br><span class="line">        <span class="variable language_">self</span>.stu_gender = z  <span class="comment"># 空对象.stu_gender = &#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、功能的定义</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tell_stu_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;学生信息：名字：%s 年龄：%s 性别：%s&#x27;</span> %(</span><br><span class="line">            <span class="variable language_">self</span>.stu_name,</span><br><span class="line">            <span class="variable language_">self</span>.stu_age,</span><br><span class="line">            <span class="variable language_">self</span>.stu_gender</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_info</span>(<span class="params">self,x,y,z</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stu_name = x</span><br><span class="line">        <span class="variable language_">self</span>.stu_age = y</span><br><span class="line">        <span class="variable language_">self</span>.stu_gender = z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1_obj = Student(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)    <span class="comment"># Student.__init__(空对象,&#x27;zhangsan&#x27;,18,&#x27;male&#x27;)</span></span><br><span class="line">stu2_obj = Student(<span class="string">&#x27;lisi&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">stu3_obj = Student(<span class="string">&#x27;wangwu&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu1_obj.count)   <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(stu2_obj.count)   <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(stu3_obj.count)   <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类中存放的是对象共有的数据与功能</span></span><br><span class="line"><span class="comment"># 一、类可以访问：</span></span><br><span class="line"><span class="comment"># 1、类的数据属性</span></span><br><span class="line"><span class="built_in">print</span>(Student.stu_school)</span><br><span class="line"><span class="comment"># 2、类的函数属性</span></span><br><span class="line"><span class="built_in">print</span>(Student.tell_stu_info)</span><br><span class="line"><span class="built_in">print</span>(Student.set_info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二、但其实类中的东西是给对象使用的</span></span><br><span class="line"><span class="comment"># 1、类的数据属性是共享给所有对象用的，大家访问的地址都一样</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(Student.stu_school))       <span class="comment"># 4447792176</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu1_obj.stu_school))      <span class="comment"># 4447792176</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu2_obj.stu_school))      <span class="comment"># 4447792176</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(stu3_obj.stu_school))      <span class="comment"># 4447792176</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Student.stu_school = &#x27;OLDBOY&#x27;   # 类修改，影响所有对象</span></span><br><span class="line"><span class="comment"># print(Student.stu_school)       # OLDBOY</span></span><br><span class="line"><span class="comment"># print(stu1_obj.stu_school)      # OLDBOY</span></span><br><span class="line"><span class="comment"># print(stu2_obj.stu_school)      # OLDBOY</span></span><br><span class="line"><span class="comment"># print(stu3_obj.stu_school)      # OLDBOY</span></span><br><span class="line"></span><br><span class="line">stu1_obj.stu_school = <span class="string">&#x27;OLDBOY&#x27;</span>      <span class="comment"># 对象修改，只影响对象本身</span></span><br><span class="line"><span class="built_in">print</span>(Student.stu_school)       <span class="comment"># oldboy</span></span><br><span class="line"><span class="built_in">print</span>(stu1_obj.stu_school)      <span class="comment"># OLDBOY</span></span><br><span class="line"><span class="built_in">print</span>(stu2_obj.stu_school)      <span class="comment"># oldboy</span></span><br><span class="line"><span class="built_in">print</span>(stu3_obj.stu_school)      <span class="comment"># oldboy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、类中定义的函数主要是给对象使用的，而且是绑定给对象的，虽然所有对象指向的都是相同的功能，但是绑定到不同的对象就是不同的绑定方法，内存地址各不相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类调用自己的函数属性必须严格按照函数的用法来</span></span><br><span class="line">Student.tell_stu_info(stu1_obj)     <span class="comment"># 学生信息：名字：zhangsan 年龄：18 性别：male</span></span><br><span class="line">Student.tell_stu_info(stu2_obj)     <span class="comment"># 学生信息：名字：lisi 年龄：38 性别：male</span></span><br><span class="line">Student.tell_stu_info(stu3_obj)     <span class="comment"># 学生信息：名字：wangwu 年龄：20 性别：female</span></span><br><span class="line"></span><br><span class="line">Student.set_info(stu1_obj,<span class="string">&#x27;ZHANGSAN&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;MALE&#x27;</span>)</span><br><span class="line">Student.tell_stu_info(stu1_obj)     <span class="comment"># 学生信息：名字：ZHANGSAN 年龄：19 性别：MALE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定到对象的方法特殊之处在于，绑定给谁就应该由谁来调用，谁来调用，就会将’谁’本身当做第一个参数自动传入（方法__init__也是一样的道理）</span></span><br><span class="line"><span class="built_in">print</span>(Student.tell_stu_info)    <span class="comment"># &lt;function Student.tell_stu_info at 0x106297e50&gt;</span></span><br><span class="line"><span class="built_in">print</span>(stu1_obj.tell_stu_info)   <span class="comment"># &lt;bound method Student.tell_stu_info of &lt;__main__.Student object at 0x1086edfd0&gt;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(stu2_obj.tell_stu_info)   <span class="comment"># &lt;bound method Student.tell_stu_info of &lt;__main__.Student object at 0x1027c4f70&gt;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(stu3_obj.tell_stu_info)   <span class="comment"># &lt;bound method Student.tell_stu_info of &lt;__main__.Student object at 0x10421fee0&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">stu1_obj.tell_stu_info()    <span class="comment"># 等同于 Student.tell_stu_info(stu1_obj)</span></span><br></pre></td></tr></table></figure><h4 id="3-3-3-小结"><a href="#3-3-3-小结" class="headerlink" title="3.3.3 小结"></a>3.3.3 小结</h4><pre><code>在上述介绍类与对象的使用过程中，我们更多的是站在底层原理的角度去介绍类与对象之间的关联关系，如果只是站在使用的角度，我们无需考虑语法“对象.属性&quot;中”属性“到底源自于哪里，只需要知道是通过对象获取到的就可以了，所以说，对象是一个高度整合的产物，有了对象，我们只需要使用”对象.xxx“的语法就可以得到跟这个对象相关的所有数据与功能，十分方便且解耦合程度极高。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用模块</title>
      <link href="/articles/2023/04/23/changyongmokuai/"/>
      <url>/articles/2023/04/23/changyongmokuai/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="23、常用模块"><a href="#23、常用模块" class="headerlink" title="23、常用模块"></a>23、常用模块</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，时间模块time"><a href="#一，时间模块time" class="headerlink" title="一，时间模块time"></a>一，时间模块time</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一：time</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间分为三种格式：</span></span><br><span class="line"><span class="comment"># 1、时间戳：从1970年到现在经过的秒数</span></span><br><span class="line"><span class="comment"># 作用：用于时间间隔的计算</span></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、按照某种格式显示的时间：2023-04-19 17:36:33</span></span><br><span class="line"><span class="comment"># 作用：用于展示时间</span></span><br><span class="line"><span class="comment">#                    年 月 日  时 分 秒 上下午</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>))     <span class="comment"># X：直接表示分时秒的时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、结构化时间(struct_time)</span></span><br><span class="line"><span class="comment"># 作用：用于单独获取时间的某一部分</span></span><br><span class="line">res = time.localtime()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(res.tm_year)  <span class="comment"># 获取年份</span></span><br><span class="line"><span class="built_in">print</span>(res.tm_mon)   <span class="comment"># 获取月份</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/articles/2023/04/23/changyongmokuai/1.png"></p><p><img src="/articles/2023/04/23/changyongmokuai/2.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二：datetime</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now())       <span class="comment"># 2023-04-19 17:48:20.419771</span></span><br><span class="line"><span class="comment"># 时间，计算三天后的时间</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(days=<span class="number">3</span>))     <span class="comment"># 2023-04-22 17:48:20.419771</span></span><br><span class="line"><span class="comment"># 时间，计算三天前的时间</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(days=-<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间模块需要掌握的操作</span></span><br><span class="line"><span class="comment"># 1、时间格式的转换</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结构化时间转成时间戳</span></span><br><span class="line">s_time = time.localtime()</span><br><span class="line"><span class="built_in">print</span>(time.mktime(s_time))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳转成结构化时间</span></span><br><span class="line">tp_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(time.localtime(tp_time))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充：世界标准时间与本地时间：区别只有小时的时间</span></span><br><span class="line"><span class="built_in">print</span>(time.localtime())     <span class="comment"># 东八区时间</span></span><br><span class="line"><span class="built_in">print</span>(time.gmtime())        <span class="comment"># 世界标准时间，和我们有八个小时时差，需要加8才是我们的小时</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结构化时间转成格式化字符串形式的时间</span></span><br><span class="line">s_time = time.localtime()</span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,s_time))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.strptime(<span class="string">&#x27;2023-04-19 18:02:49&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 真正需要掌握的只有一条：format string(格式化字符串形式的时间) &lt;-----&gt; timestamp(时间戳)</span></span><br><span class="line"><span class="comment"># &#x27;2023-04-19 18:02:49&#x27;+7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># format string(格式化字符串形式的时间） ---&gt; struct_time(结构化时间) ---&gt; timestamp(时间戳)</span></span><br><span class="line">struct_time = time.strptime(<span class="string">&#x27;2023-04-19 18:02:49&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">timestamp=time.mktime(struct_time)+<span class="number">7</span>*<span class="number">86400</span></span><br><span class="line"><span class="built_in">print</span>(timestamp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># format string(格式化字符串形式的时间） &lt;--- struct_time(结构化时间) &lt;--- timestamp(时间戳)</span></span><br><span class="line">format_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>,time.localtime(timestamp))</span><br><span class="line"><span class="built_in">print</span>(format_time)      <span class="comment"># 2023-04-26 18:02:49</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)   <span class="comment"># 睡眠三秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 了解知识</span></span><br><span class="line"><span class="built_in">print</span>(time.asctime())       <span class="comment"># Thu Apr 20 10:48:09 2023</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now()) <span class="comment">#返回 2023-04-20 10:50:10.456470</span></span><br><span class="line"><span class="built_in">print</span>(datetime.date.fromtimestamp(time.time()) )  <span class="comment"># 时间戳直接转成日期格式 2023-04-20</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() )</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(<span class="number">3</span>)) <span class="comment">#当前时间+3天</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(-<span class="number">3</span>)) <span class="comment">#当前时间-3天</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(hours=<span class="number">3</span>)) <span class="comment">#当前时间+3小时</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(minutes=<span class="number">30</span>)) <span class="comment">#当前时间+30分</span></span><br></pre></td></tr></table></figure><h2 id="二，random模块"><a href="#二，random模块" class="headerlink" title="二，random模块"></a>二，random模块</h2><blockquote><p>随机模块，取随机值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.random())      <span class="comment"># (0,1)----float    大于0且小于1之间的小数</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>,<span class="number">3</span>))  <span class="comment"># [1,3]    大于等于1且小于等于3之间的整数</span></span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment"># [1,3)    大于等于1且小于3之间的整数</span></span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="number">1</span>,<span class="string">&#x27;23&#x27;</span>,[<span class="number">4</span>,<span class="number">5</span>]]))    <span class="comment"># 1或者23或者[4,5]</span></span><br><span class="line"><span class="built_in">print</span>(random.sample([<span class="number">1</span>,<span class="string">&#x27;23&#x27;</span>,[<span class="number">4</span>,<span class="number">5</span>]],<span class="number">2</span>))  <span class="comment"># 列表元素任意2个组合</span></span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1</span>,<span class="number">3</span>))  <span class="comment"># 大于1小于3的小数，如1.927109612082716</span></span><br><span class="line"></span><br><span class="line">item=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">random.shuffle(item) <span class="comment"># 打乱item的顺序,相当于&quot;洗牌&quot;</span></span><br><span class="line"><span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机验证码</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_code</span>(<span class="params">size=<span class="number">4</span></span>):</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        zs_letter = <span class="built_in">chr</span>(random.randint(<span class="number">65</span>,<span class="number">90</span>))     <span class="comment"># chr方法是将数字转成字符编码表里面对应的字符，反之使用ord方法</span></span><br><span class="line">        zs_digit = <span class="built_in">str</span>(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">        zs_character = random.choice([zs_letter,zs_digit])</span><br><span class="line">        res += zs_character</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="built_in">print</span>(make_code(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="三，os模块"><a href="#三，os模块" class="headerlink" title="三，os模块"></a>三，os模块</h2><blockquote><p>os模块是与操作系统交互的一个接口</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.getcwd()     # 获取当前工作目录，即当前python脚本工作的目录路径</span></span><br><span class="line"><span class="comment"># os.chdir(&quot;dirname&quot;)  # 改变当前脚本工作目录；相当于shell下cd</span></span><br><span class="line"><span class="comment"># os.curdir  # 返回当前目录: (&#x27;.&#x27;)</span></span><br><span class="line"><span class="comment"># os.pardir  # 获取当前目录的父目录字符串名：(&#x27;..&#x27;)</span></span><br><span class="line"><span class="comment"># os.makedirs(&#x27;dirname1/dirname2&#x27;)    # 可生成多层递归目录</span></span><br><span class="line"><span class="comment"># os.removedirs(&#x27;dirname1&#x27;)    # 若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</span></span><br><span class="line"><span class="comment"># os.mkdir(&#x27;dirname&#x27;)    # 生成单级目录；相当于shell中mkdir dirname</span></span><br><span class="line"><span class="comment"># os.rmdir(&#x27;dirname&#x27;)    # 删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</span></span><br><span class="line"><span class="comment"># os.listdir(&#x27;dirname&#x27;)    # 列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</span></span><br><span class="line"><span class="comment"># os.remove()  # 删除一个文件</span></span><br><span class="line"><span class="comment"># os.rename(&quot;oldname&quot;,&quot;newname&quot;)  # 重命名文件/目录</span></span><br><span class="line"><span class="comment"># os.stat(&#x27;path/filename&#x27;)  # 获取文件/目录信息</span></span><br><span class="line"><span class="comment"># os.sep    # 输出操作系统特定的路径分隔符，win下为&quot;\\&quot;,Linux下为&quot;/&quot;</span></span><br><span class="line"><span class="comment"># os.linesep    # 输出当前平台使用的行终止符，win下为&quot;\r\n&quot;,Linux下为&quot;\n&quot;</span></span><br><span class="line"><span class="comment"># os.pathsep    # 输出用于分割文件路径的字符串 win下为;,Linux下为:</span></span><br><span class="line"><span class="comment"># os.name    # 输出字符串指示当前使用平台。win-&gt;&#x27;nt&#x27;; Linux-&gt;&#x27;posix&#x27;</span></span><br><span class="line"><span class="comment"># os.system(&quot;bash command&quot;)  # 运行shell命令，直接显示</span></span><br><span class="line"><span class="comment"># os.environ  # 获取系统环境变量</span></span><br><span class="line"><span class="comment"># os.path.abspath(path)  # 返回path规范化的绝对路径</span></span><br><span class="line"><span class="comment"># os.path.split(path)  # 将path分割成目录和文件名二元组返回</span></span><br><span class="line"><span class="comment"># os.path.dirname(path)  # 返回path的目录。其实就是os.path.split(path)的第一个元素</span></span><br><span class="line"><span class="comment"># os.path.basename(path)  # 返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</span></span><br><span class="line"><span class="comment"># os.path.exists(path)  # 如果path存在，返回True；如果path不存在，返回False</span></span><br><span class="line"><span class="comment"># os.path.isabs(path)  # 如果path是绝对路径，返回True</span></span><br><span class="line"><span class="comment"># os.path.isfile(path)  # 如果path是一个存在的文件，返回True。否则返回False</span></span><br><span class="line"><span class="comment"># os.path.isdir(path)  # 如果path是一个存在的目录，则返回True。否则返回False</span></span><br><span class="line"><span class="comment"># os.path.join(path1[, path2[, ...]])  # 将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span></span><br><span class="line"><span class="comment"># os.path.getatime(path)  # 返回path所指向的文件或者目录的最后存取时间</span></span><br><span class="line"><span class="comment"># os.path.getmtime(path)  # 返回path所指向的文件或者目录的最后修改时间</span></span><br><span class="line"><span class="comment"># os.path.getsize(path) # 返回path的大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取某一个文件夹下所有的子文件及子文件夹的名字</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">res=os.listdir(<span class="string">&#x27;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day22&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># [&#x27;03os模块.py&#x27;, &#x27;02random模块.py&#x27;, &#x27;01时间模块.py&#x27;, &#x27;day22笔记.md&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计文件大小</span></span><br><span class="line">size = os.path.getsize(<span class="string">&#x27;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day22/03os模块.py&#x27;</span>)     <span class="comment"># 显示的是字节</span></span><br><span class="line"><span class="built_in">print</span>(size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.environ  # 获取系统环境变量</span></span><br><span class="line"><span class="comment"># 规定：key与value必须都为字符串</span></span><br><span class="line">os.environ[<span class="string">&#x27;aaaaaaaaa&#x27;</span>]=<span class="string">&#x27;1111&#x27;</span>      <span class="comment"># 添加一个环境变量</span></span><br><span class="line"><span class="built_in">print</span>(os.environ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.path.abspath(path)  # 返回path规范化的绝对路径</span></span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.path.split(path)  # 将path分割成目录和文件名二元组返回</span></span><br><span class="line"><span class="built_in">print</span>(os.path.split(<span class="string">r&#x27;/a/b/c/d.txt&#x27;</span>))        <span class="comment"># (&#x27;/a/b/c&#x27;, &#x27;d.txt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.path.dirname(path)  # 返回path的目录。其实就是os.path.split(path)的第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(os.path.dirname(<span class="string">r&#x27;/a/b/c/d.txt&#x27;</span>))      <span class="comment"># /a/b/c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.path.basename(path)  # 返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</span></span><br><span class="line"><span class="built_in">print</span>(os.path.basename(<span class="string">r&#x27;/a/b/c/d.txt&#x27;</span>))     <span class="comment"># d.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.path.join(path1[, path2[, ...]])  # 将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span></span><br><span class="line"><span class="built_in">print</span>(os.path.join(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>))    <span class="comment"># /b/c</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取上上一级目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR=os.path.dirname(os.path.dirname(__file__))</span><br><span class="line"><span class="built_in">print</span>(BASE_DIR)     <span class="comment"># /Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在python3.5之后，推出了一个新的模块pathlib</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">res = Path(__file__).parent.parent      <span class="comment"># parent代表取上一级，两个就代表取两层</span></span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># /Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩</span></span><br><span class="line"></span><br><span class="line">res1 = Path(<span class="string">&#x27;/a/b/c&#x27;</span>) / <span class="string">&#x27;d/f.txt&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res1)     <span class="comment"># /a/b/c/d/f.txt</span></span><br></pre></td></tr></table></figure><h2 id="四，sys模块"><a href="#四，sys模块" class="headerlink" title="四，sys模块"></a>四，sys模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sys模块</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.argv           # 命令行参数List，第一个元素是程序本身路径</span></span><br><span class="line"><span class="comment"># sys.exit(n)        # 退出程序，正常退出时exit(0)</span></span><br><span class="line"><span class="comment"># sys.version        # 获取Python解释程序的版本信息</span></span><br><span class="line"><span class="comment"># sys.maxint         # 最大的Int值</span></span><br><span class="line"><span class="comment"># sys.path           # 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span></span><br><span class="line"><span class="comment"># sys.platform       # 返回操作系统平台名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 04sys模块.py 1 2 3</span></span><br><span class="line"><span class="comment"># sys.argv获取的是解释器后的参数值</span></span><br><span class="line"><span class="built_in">print</span>(sys.argv)     <span class="comment">#[&#x27;04sys模块.py&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件程序优化：实现linux上cp命令的效果</span></span><br><span class="line">src_file = sys.argv[<span class="number">1</span>]</span><br><span class="line">dst_file = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以加判断，继续完善</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;%s&#x27;</span> %src_file,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> src_f, \</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">r&#x27;%s&#x27;</span> %dst_file,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> dst_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> src_f:</span><br><span class="line">        dst_f.write(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印进度条案例</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">知识储备：</span></span><br><span class="line"><span class="string">#=========知识储备==========</span></span><br><span class="line"><span class="string">#进度条的效果</span></span><br><span class="line"><span class="string">[#             ]</span></span><br><span class="line"><span class="string">[##            ]</span></span><br><span class="line"><span class="string">[###           ]</span></span><br><span class="line"><span class="string">[####          ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#指定宽度</span></span><br><span class="line"><span class="string">print(&#x27;[%-50s]&#x27; %&#x27;#&#x27;)</span></span><br><span class="line"><span class="string">print(&#x27;[%-50s]&#x27; %&#x27;##&#x27;)</span></span><br><span class="line"><span class="string">print(&#x27;[%-50s]&#x27; %&#x27;###&#x27;)</span></span><br><span class="line"><span class="string">print(&#x27;[%-50s]&#x27; %&#x27;####&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 解析：</span></span><br><span class="line"><span class="string">[%-15s]：%s代表格式化字符串，50代表总宽度，-代表左对齐</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 打印</span></span><br><span class="line"><span class="string">import time</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">res = &#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(50):</span></span><br><span class="line"><span class="string">    res += &#x27;#&#x27;</span></span><br><span class="line"><span class="string">    time.sleep(0.5)</span></span><br><span class="line"><span class="string">    print(&#x27;\r[%-50s]&#x27; % res,end=&#x27;&#x27;)     # end=&#x27;&#x27;代表不换行输出，\r代表都输出在左侧，下一次输出覆盖上一次结果，实现进度条效果</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟下载，打印进度条</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">percent</span>):</span><br><span class="line">    <span class="keyword">if</span> percent &gt;= <span class="number">1</span>:     <span class="comment"># 判断的目的是，如果大于一，返回percent=1，不加判断就会出现 101% 超出百分百的情况</span></span><br><span class="line">        percent = <span class="number">1</span></span><br><span class="line">    res = <span class="built_in">int</span>(<span class="number">50</span> * percent) * <span class="string">&#x27;#&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\r[%-50s] %d%%&#x27;</span> % (res,<span class="built_in">int</span>(<span class="number">100</span>*percent)), end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># %d%%代表的是 %d 传个整数，%%代表百分号，两个%代表转义，取消特殊意思，就显示%</span></span><br><span class="line"></span><br><span class="line">recv_size = <span class="number">0</span></span><br><span class="line">total_size = <span class="number">333354</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    recv_size+=<span class="number">1024</span></span><br><span class="line">    <span class="comment"># 打印进度条</span></span><br><span class="line">    percent = recv_size / total_size</span><br><span class="line">    progress(percent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宽度写活示例</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">percent,width=<span class="number">50</span></span>):</span><br><span class="line">    <span class="keyword">if</span> percent &gt;= <span class="number">1</span>:</span><br><span class="line">        percent=<span class="number">1</span></span><br><span class="line">    show_str=(<span class="string">&#x27;[%%-%ds]&#x27;</span> %width) %(<span class="built_in">int</span>(width*percent)*<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\r%s %d%%&#x27;</span> %(show_str,<span class="built_in">int</span>(<span class="number">100</span>*percent)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data_size=<span class="number">10250</span></span><br><span class="line">recv_size=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> recv_size &lt; data_size:</span><br><span class="line">    time.sleep(<span class="number">0.1</span>) <span class="comment">#模拟数据的传输延迟</span></span><br><span class="line">    recv_size+=<span class="number">1024</span> <span class="comment">#每次收1024</span></span><br><span class="line"></span><br><span class="line">    percent=recv_size/data_size <span class="comment">#接收的比例</span></span><br><span class="line">    progress(percent,width=<span class="number">30</span>) <span class="comment">#进度条的宽度70</span></span><br></pre></td></tr></table></figure><h2 id="五，shutil模块"><a href="#五，shutil模块" class="headerlink" title="五，shutil模块"></a>五，shutil模块</h2><blockquote><p>高级的 文件、文件夹、压缩包 处理模块</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件内容拷贝到另一个文件中</span></span><br><span class="line"><span class="comment"># shutil.copyfileobj(fsrc, fdst[, length])</span></span><br><span class="line">shutil.copyfileobj(<span class="built_in">open</span>(<span class="string">&#x27;old.xml&#x27;</span>,<span class="string">&#x27;r&#x27;</span>), <span class="built_in">open</span>(<span class="string">&#x27;new.xml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line"><span class="comment"># shutil.copyfile(src, dst)</span></span><br><span class="line">shutil.copyfile(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>) <span class="comment">#目标文件无需存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅拷贝权限。内容、组、用户均不变</span></span><br><span class="line"><span class="comment"># shutil.copymode(src, dst)</span></span><br><span class="line">shutil.copymode(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>) <span class="comment">#目标文件必须存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅拷贝状态的信息，包括：mode bits, atime, mtime, flags</span></span><br><span class="line"><span class="comment"># shutil.copystat(src, dst)</span></span><br><span class="line">shutil.copystat(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>) <span class="comment">#目标文件必须存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件和权限（使用比较多）</span></span><br><span class="line"><span class="comment"># shutil.copy(src, dst)</span></span><br><span class="line">shutil.copy(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件和状态信息</span></span><br><span class="line"><span class="comment"># shutil.copy2(src, dst)</span></span><br><span class="line">shutil.copy2(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归的去拷贝文件夹</span></span><br><span class="line"><span class="comment"># shutil.ignore_patterns(*patterns)</span></span><br><span class="line"><span class="comment"># shutil.copytree(src, dst, symlinks=False, ignore=None)</span></span><br><span class="line">shutil.copytree(<span class="string">&#x27;folder1&#x27;</span>, <span class="string">&#x27;folder2&#x27;</span>, ignore=shutil.ignore_patterns(<span class="string">&#x27;*.pyc&#x27;</span>, <span class="string">&#x27;tmp*&#x27;</span>)) <span class="comment">#目标目录不能存在，注意对folder2目录父级目录要有可写权限，ignore的意思是排除</span></span><br><span class="line"><span class="comment"># 拷贝软连接：通常的拷贝都把软连接拷贝成硬链接，即对待软连接来说，创建新的文件</span></span><br><span class="line">shutil.copytree(<span class="string">&#x27;f1&#x27;</span>, <span class="string">&#x27;f2&#x27;</span>, symlinks=<span class="literal">True</span>, ignore=shutil.ignore_patterns(<span class="string">&#x27;*.pyc&#x27;</span>, <span class="string">&#x27;tmp*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归的去删除文件</span></span><br><span class="line"><span class="comment"># shutil.rmtree(path[, ignore_errors[, onerror]])</span></span><br><span class="line">shutil.rmtree(<span class="string">&#x27;folder1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归的去移动文件，它类似mv命令，其实就是重命名</span></span><br><span class="line"><span class="comment"># shutil.move(src, dst)</span></span><br><span class="line">shutil.move(<span class="string">&#x27;folder1&#x27;</span>, <span class="string">&#x27;folder3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">shutil.make_archive(base_name, format,...)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建压缩包并返回文件路径，例如：zip、tar</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建压缩包并返回文件路径，例如：zip、tar</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径，</span></span><br><span class="line"><span class="string">    如 data_bak                       =&gt;保存至当前路径</span></span><br><span class="line"><span class="string">    如：/tmp/data_bak =&gt;保存至/tmp/</span></span><br><span class="line"><span class="string">    format： 压缩包种类，“zip”, “tar”, “bztar”，“gztar”</span></span><br><span class="line"><span class="string">    root_dir： 要压缩的文件夹路径（默认当前目录）</span></span><br><span class="line"><span class="string">    owner： 用户，默认当前用户</span></span><br><span class="line"><span class="string">    group： 组，默认当前组</span></span><br><span class="line"><span class="string">    logger： 用于记录日志，通常是logging.Logger对象</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将 /data 下的文件打包放置当前程序目录</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">ret = shutil.make_archive(<span class="string">&quot;data_bak&quot;</span>, <span class="string">&#x27;gztar&#x27;</span>, root_dir=<span class="string">&#x27;/data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将 /data下的文件打包放置 /tmp/目录</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">ret1 = shutil.make_archive(<span class="string">&quot;/tmp/data_bak&quot;</span>, <span class="string">&#x27;gztar&#x27;</span>, root_dir=<span class="string">&#x27;/data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># zipfile压缩解压缩</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&#x27;laxi.zip&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">z.write(<span class="string">&#x27;a.log&#x27;</span>)</span><br><span class="line">z.write(<span class="string">&#x27;data.data&#x27;</span>)</span><br><span class="line">z.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&#x27;laxi.zip&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">z.extractall(path=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">z.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六，json与pickle模块"><a href="#六，json与pickle模块" class="headerlink" title="六，json与pickle模块"></a>六，json与pickle模块</h2><h3 id="6-1什么是序列化与反序列化"><a href="#6-1什么是序列化与反序列化" class="headerlink" title="6.1什么是序列化与反序列化"></a>6.1什么是序列化与反序列化</h3><blockquote><p>指的是把内存的数据类型转换成一个特定格式的内容</p></blockquote><pre><code>内存中的数据类型 ----&gt; 序列化 ----&gt; 特定的格式（json格式或者pickle格式）内存中的数据类型 &lt;---- 反序列化 &lt;---- 特定的格式（json格式或者pickle格式）</code></pre><h3 id="6-2-为何要序列化"><a href="#6-2-为何要序列化" class="headerlink" title="6.2 为何要序列化"></a>6.2 为何要序列化</h3><blockquote><p>序列化得到结果&#x3D;&gt;特定格式的内容（有两种用途）</p></blockquote><pre><code>1、可用于存储 =&gt; 用于存档2、传输给其他平台使用 =&gt; 跨平台数据交互    python              java     列表    特定的格式    数组</code></pre><blockquote><p><strong>强调:</strong></p></blockquote><blockquote><ul><li>针对用途1的特定格式：可以是一种专用的格式 &#x3D;&gt; pickle（只有python可以识别）</li></ul></blockquote><ul><li>针对用途2的特定格式：应该是一种通用，能够被所有语言识别的格式 &#x3D;&gt; json</li></ul><h3 id="6-3-如何序列化与反序列化"><a href="#6-3-如何序列化与反序列化" class="headerlink" title="6.3 如何序列化与反序列化"></a>6.3 如何序列化与反序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示范1：</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line">json_res = json.dumps([<span class="number">1</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="literal">False</span>,<span class="literal">True</span>])</span><br><span class="line"><span class="built_in">print</span>(json_res,<span class="built_in">type</span>(json_res))    <span class="comment"># [1, &quot;aaaa&quot;, false, true] &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">l = json.loads(json_res)</span><br><span class="line"><span class="built_in">print</span>(l,<span class="built_in">type</span>(l))    <span class="comment"># [1, &#x27;aaaa&#x27;, False, True] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示范2：</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line">test_json = json.dumps([<span class="number">1</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="literal">False</span>,<span class="literal">True</span>])</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;test.json&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(test_json)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将序列化的结果写入文件的简单方法</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;test.json&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump([<span class="number">1</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="literal">False</span>,<span class="literal">True</span>],f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;test.json&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    test_json_load = f1.read()</span><br><span class="line">    l = json.loads(test_json_load)</span><br><span class="line">    <span class="built_in">print</span>(l,<span class="built_in">type</span>(l))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化的简单方法</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;test.json&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    l = json.load(f1)</span><br><span class="line">    <span class="built_in">print</span>(l,<span class="built_in">type</span>(l))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># json验证：json格式兼容的是所有语言通用的数据类型，不能支持某一语言独有的数据类型</span></span><br><span class="line"><span class="comment"># json.dumps(&#123;1,3,4,5&#125;)       # 报错，集合不能被json序列化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># json强调：一定要搞清楚json格式，json没有单引号，不要与python混淆</span></span><br><span class="line">l = json.loads(<span class="string">&#x27;[1, &quot;aaaa&quot;, false, true]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pickle模块(和json操作一摸一样)</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line">pickle_res = pickle.dumps(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(pickle_res,<span class="built_in">type</span>(pickle_res))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">p = pickle.loads(pickle_res)</span><br><span class="line"><span class="built_in">print</span>(p,<span class="built_in">type</span>(p))</span><br></pre></td></tr></table></figure><h3 id="6-4-猴子补丁"><a href="#6-4-猴子补丁" class="headerlink" title="6.4 猴子补丁"></a>6.4 猴子补丁</h3><h4 id="6-4-1-什么是猴子补丁"><a href="#6-4-1-什么是猴子补丁" class="headerlink" title="6.4.1 什么是猴子补丁"></a>6.4.1 什么是猴子补丁</h4><blockquote><ul><li>属性在运行时的动态替换，叫做猴子补丁（Monkey Patch）。</li></ul></blockquote><ul><li><p>猴子补丁的核心就是用自己的代码替换所用模块的源代码，详细地如下</p><p>  1， 这个词原来为Guerrilla Patch，杂牌军、游击队，说明这部分不是原装的，在英文里guerilla发音和gorllia(猩猩)相似，再后来就写了monkey(猴子)。</p><p>  2， 还有一种解释是说由于这种方式将原来的代码弄乱了(messing with it)，在英文里叫monkeying about(顽皮的)，所以叫做Monkey Patch。</p></li></ul><h3 id="6-4-2-猴子补丁的功能-一切皆对象"><a href="#6-4-2-猴子补丁的功能-一切皆对象" class="headerlink" title="6.4.2 猴子补丁的功能(一切皆对象)"></a>6.4.2 猴子补丁的功能(一切皆对象)</h3><blockquote><p>拥有在模块运行时替换的功能, 例如: 一个函数对象赋值给另外一个函数对象(把函数原本的执行的功能给替换了)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">猴子补丁的应用场景：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果我们的程序中已经基于json模块编写了大量代码了，发现有一个模块ujson比它性能更高，</span></span><br><span class="line"><span class="string">但用法一样，我们肯定不会想所有的代码都换成ujson.dumps或者ujson.loads,那我们可能</span></span><br><span class="line"><span class="string">会想到这么做</span></span><br><span class="line"><span class="string">import ujson as json，但是这么做的需要每个文件都重新导入一下，维护成本依然很高</span></span><br><span class="line"><span class="string">此时我们就可以用到猴子补丁了</span></span><br><span class="line"><span class="string">只需要在入口处加上：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> ujson</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">monkey_patch_json</span>():</span><br><span class="line">    json.__name__ = <span class="string">&#x27;ujson&#x27;</span></span><br><span class="line">    json.dumps = ujson.dumps</span><br><span class="line">    json.loads = ujson.loads</span><br><span class="line"></span><br><span class="line">monkey_patch_json() <span class="comment"># 之所以在入口处加，是因为模块在导入一次后，后续的导入便直接引用第一次的成果</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#其实这种场景也比较多, 比如我们引用团队通用库里的一个模块, 又想丰富模块的功能, 除了继承之外也可以考虑用Monkey</span></span><br><span class="line"><span class="string">Patch.采用猴子补丁之后，如果发现ujson不符合预期，那也可以快速撤掉补丁。个人感觉Monkey</span></span><br><span class="line"><span class="string">Patch带了便利的同时也有搞乱源代码的风险!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="七，shelve与xml模块-了解"><a href="#七，shelve与xml模块-了解" class="headerlink" title="七，shelve与xml模块(了解)"></a>七，shelve与xml模块(了解)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shelve模块比pickle模块简单，只有一个open函数，返回类似字典的对象，可读可写;key必须为字符串，而值可以是python所支持的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line"></span><br><span class="line">f=shelve.<span class="built_in">open</span>(<span class="string">r&#x27;sheve.txt&#x27;</span>)</span><br><span class="line"><span class="comment"># f[&#x27;stu1_info&#x27;]=&#123;&#x27;name&#x27;:&#x27;egon&#x27;,&#x27;age&#x27;:18,&#x27;hobby&#x27;:[&#x27;piao&#x27;,&#x27;smoking&#x27;,&#x27;drinking&#x27;]&#125;</span></span><br><span class="line"><span class="comment"># f[&#x27;stu2_info&#x27;]=&#123;&#x27;name&#x27;:&#x27;gangdan&#x27;,&#x27;age&#x27;:53&#125;</span></span><br><span class="line"><span class="comment"># f[&#x27;school_info&#x27;]=&#123;&#x27;website&#x27;:&#x27;http://www.pypy.org&#x27;,&#x27;city&#x27;:&#x27;beijing&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[<span class="string">&#x27;stu1_info&#x27;</span>][<span class="string">&#x27;hobby&#x27;</span>])</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># xml是实现不同语言或程序之间进行数据交换的协议，跟json差不多，但json使用起来更简单，不过，古时候，在json还没诞生的黑暗年代，大家只能选择用xml呀，至今很多传统公司如金融行业的很多系统的接口还主要是xml。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xml的格式如下，就是通过&lt;&gt;节点来区别数据结构的:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;data&gt;</span></span><br><span class="line"><span class="string">    &lt;country name=&quot;Liechtenstein&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;rank updated=&quot;yes&quot;&gt;2&lt;/rank&gt;</span></span><br><span class="line"><span class="string">        &lt;year&gt;2008&lt;/year&gt;</span></span><br><span class="line"><span class="string">        &lt;gdppc&gt;141100&lt;/gdppc&gt;</span></span><br><span class="line"><span class="string">        &lt;neighbor name=&quot;Austria&quot; direction=&quot;E&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;neighbor name=&quot;Switzerland&quot; direction=&quot;W&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/country&gt;</span></span><br><span class="line"><span class="string">    &lt;country name=&quot;Singapore&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;rank updated=&quot;yes&quot;&gt;5&lt;/rank&gt;</span></span><br><span class="line"><span class="string">        &lt;year&gt;2011&lt;/year&gt;</span></span><br><span class="line"><span class="string">        &lt;gdppc&gt;59900&lt;/gdppc&gt;</span></span><br><span class="line"><span class="string">        &lt;neighbor name=&quot;Malaysia&quot; direction=&quot;N&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/country&gt;</span></span><br><span class="line"><span class="string">    &lt;country name=&quot;Panama&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;rank updated=&quot;yes&quot;&gt;69&lt;/rank&gt;</span></span><br><span class="line"><span class="string">        &lt;year&gt;2011&lt;/year&gt;</span></span><br><span class="line"><span class="string">        &lt;gdppc&gt;13600&lt;/gdppc&gt;</span></span><br><span class="line"><span class="string">        &lt;neighbor name=&quot;Costa Rica&quot; direction=&quot;W&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;neighbor name=&quot;Colombia&quot; direction=&quot;E&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/country&gt;</span></span><br><span class="line"><span class="string">&lt;/data&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">tree = ET.parse(<span class="string">&quot;xmltest.xml&quot;</span>)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"><span class="built_in">print</span>(root.tag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历xml文档</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> root:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;========&gt;&#x27;</span>, child.tag, child.attrib, child.attrib[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> child:</span><br><span class="line">        <span class="built_in">print</span>(i.tag, i.attrib, i.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只遍历year 节点</span></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;year&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(node.tag, node.text)</span><br><span class="line"><span class="comment"># ---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">tree = ET.parse(<span class="string">&quot;xmltest.xml&quot;</span>)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;year&#x27;</span>):</span><br><span class="line">    new_year = <span class="built_in">int</span>(node.text) + <span class="number">1</span></span><br><span class="line">    node.text = <span class="built_in">str</span>(new_year)</span><br><span class="line">    node.<span class="built_in">set</span>(<span class="string">&#x27;updated&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">    node.<span class="built_in">set</span>(<span class="string">&#x27;version&#x27;</span>, <span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">tree.write(<span class="string">&#x27;test.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除node</span></span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> root.findall(<span class="string">&#x27;country&#x27;</span>):</span><br><span class="line">    rank = <span class="built_in">int</span>(country.find(<span class="string">&#x27;rank&#x27;</span>).text)</span><br><span class="line">    <span class="keyword">if</span> rank &gt; <span class="number">50</span>:</span><br><span class="line">        root.remove(country)</span><br><span class="line"></span><br><span class="line">tree.write(<span class="string">&#x27;output.xml&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="八，configparser模块"><a href="#八，configparser模块" class="headerlink" title="八，configparser模块"></a>八，configparser模块</h2><blockquote><p>配置文件模块</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config.read(<span class="string">&#x27;conf.ini&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、获取sections</span></span><br><span class="line"><span class="built_in">print</span>(config.sections())    <span class="comment"># [&#x27;section1&#x27;, &#x27;section2&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、获取某一section下的所有options</span></span><br><span class="line"><span class="built_in">print</span>(config.options(<span class="string">&#x27;section1&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;k1&#x27;, &#x27;k2&#x27;, &#x27;user&#x27;, &#x27;age&#x27;, &#x27;is_admin&#x27;, &#x27;salary&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、获取items</span></span><br><span class="line"><span class="built_in">print</span>(config.items(<span class="string">&#x27;section1&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[(&#x27;k1&#x27;, &#x27;v1&#x27;), (&#x27;k2&#x27;, &#x27;v2&#x27;), (&#x27;user&#x27;, &#x27;zhangsan&#x27;), (&#x27;age&#x27;, &#x27;18&#x27;), (&#x27;is_admin&#x27;, &#x27;true&#x27;), (&#x27;salary&#x27;, &#x27;31&#x27;)]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标题section1下user的值=&gt;字符串格式</span></span><br><span class="line">res = config.get(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># zhangsan</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标题section1下age的值=&gt;整数格式</span></span><br><span class="line">res = config.getint(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))    <span class="comment"># 18 &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标题section1下is_admin的值=&gt;布尔值格式</span></span><br><span class="line">res = config.getboolean(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;is_admin&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))    <span class="comment"># True &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标题section1下salary的值=&gt;浮点型格式</span></span><br><span class="line">res = config.getfloat(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;salary&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))    <span class="comment"># 31.0 &lt;class &#x27;float&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="九，hashlib模块"><a href="#九，hashlib模块" class="headerlink" title="九，hashlib模块"></a>九，hashlib模块</h2><h3 id="9-1-什么是哈希（hash）"><a href="#9-1-什么是哈希（hash）" class="headerlink" title="9.1 什么是哈希（hash）"></a>9.1 什么是哈希（hash）</h3><blockquote><p>hash是一类算法，该算法接受传入的内容，经过运算得到一串hash值</p></blockquote><pre><code>hash算法就像一座工厂，工厂接收你送来的原材料（可以用m.update()为工厂运送原材料），经过加工返回的产品就是hash值</code></pre><p><img src="/articles/2023/04/23/changyongmokuai/3.png"></p><h3 id="9-2-hash值的特点"><a href="#9-2-hash值的特点" class="headerlink" title="9.2 hash值的特点"></a>9.2 hash值的特点</h3><blockquote><ul><li>只要传入的内容一样，得到的hash值必然一样</li></ul></blockquote><ul><li>不能由hash值反解成内容</li><li>只要使用的hash算法不变，无论校验的内容有多大，得到的hash值长度是固定的</li></ul><h3 id="9-3-hash的用途"><a href="#9-3-hash的用途" class="headerlink" title="9.3 hash的用途"></a>9.3 hash的用途</h3><blockquote><ul><li>用于密码密文传输与验证</li><li>用于文件的完整性校验</li></ul></blockquote><h3 id="9-4-如何使用hash"><a href="#9-4-如何使用hash" class="headerlink" title="9.4 如何使用hash"></a>9.4 如何使用hash</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">res = m.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># 5d41402abc4b2a76b9719d911017c592</span></span><br><span class="line"></span><br><span class="line">m1 = hashlib.md5(<span class="string">&#x27;he&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;l&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;lo&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">res1 = m1.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(res1)     <span class="comment"># 5d41402abc4b2a76b9719d911017c592</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟撞库</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">passwds=[</span><br><span class="line">    <span class="string">&#x27;zhangsan3714&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;zhangsan1313&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;zhangsan94139413&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;zhangsan123456&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;123456zhangsan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;zhang123san&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_passwd_dic</span>(<span class="params">passwds</span>):</span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> passwds:</span><br><span class="line">        m=hashlib.md5()</span><br><span class="line">        m.update(p.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        dic[p]=m.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> dic</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">break_code</span>(<span class="params">cryptograph,passwd_dic</span>):</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> passwd_dic.items():</span><br><span class="line">        <span class="keyword">if</span> v == cryptograph:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;密码是===&gt;\033[46m%s\033[0m&#x27;</span> %k)</span><br><span class="line"></span><br><span class="line">cryptograph=<span class="string">&#x27;443932f461d4357ee5ed615f0eebad29&#x27;</span></span><br><span class="line">break_code(cryptograph,make_passwd_dic(passwds))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提升撞库的成本 =&gt; 密码加盐</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">mm = hashlib.md5()</span><br><span class="line">mm.update(<span class="string">&#x27;bongqiaqia&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))     <span class="comment"># 加的盐</span></span><br><span class="line">mm.update(<span class="string">&#x27;zhangsanchiregou&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))       <span class="comment"># 真实密码</span></span><br><span class="line">mm.update(<span class="string">&#x27;jionghaha&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))      <span class="comment"># 加的盐</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mm.hexdigest())</span><br></pre></td></tr></table></figure><h2 id="十，subprocess模块"><a href="#十，subprocess模块" class="headerlink" title="十，subprocess模块"></a>十，subprocess模块</h2><blockquote><p>执行命令模块</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">obj = subprocess.Popen(<span class="string">&#x27;ls / ; ls /root&#x27;</span>,shell=<span class="literal">True</span>,</span><br><span class="line">                       stdout=subprocess.PIPE,</span><br><span class="line">                       stderr=subprocess.PIPE,</span><br><span class="line">                       )</span><br><span class="line">res = obj.stdout.read()</span><br><span class="line"><span class="built_in">print</span>(res.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">err_res = obj.stderr.read()</span><br><span class="line"><span class="built_in">print</span>(err_res.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="十一，logging模块"><a href="#十一，logging模块" class="headerlink" title="十一，logging模块"></a>十一，logging模块</h2><h3 id="11-1-日志级别"><a href="#11-1-日志级别" class="headerlink" title="11.1 日志级别"></a>11.1 日志级别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">critical =&gt; <span class="number">50</span></span><br><span class="line">error =&gt; <span class="number">40</span></span><br><span class="line">warning =&gt; <span class="number">30</span>   <span class="comment"># 默认级别是警告</span></span><br><span class="line">info =&gt; <span class="number">20</span></span><br><span class="line">debug =&gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="11-2-默认级别为warning，默认打印到终端"><a href="#11-2-默认级别为warning，默认打印到终端" class="headerlink" title="11.2 默认级别为warning，默认打印到终端"></a>11.2 默认级别为warning，默认打印到终端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;调试debug&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;消息info&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;警告warn&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;错误error&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;严重critical&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">WARNING:root:警告warn</span></span><br><span class="line"><span class="string">ERROR:root:错误error</span></span><br><span class="line"><span class="string">CRITICAL:root:严重critical</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="11-3-为logging模块指定全局配置，针对所有logger有效，控制打印到文件中"><a href="#11-3-为logging模块指定全局配置，针对所有logger有效，控制打印到文件中" class="headerlink" title="11.3 为logging模块指定全局配置，针对所有logger有效，控制打印到文件中"></a>11.3 为logging模块指定全局配置，针对所有logger有效，控制打印到文件中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#======介绍</span></span><br><span class="line">可在logging.basicConfig()函数中可通过具体参数来更改logging模块默认行为，可用参数有</span><br><span class="line">filename：用指定的文件名创建FiledHandler（后边会具体讲解handler的概念），这样日志会被存储在指定的文件中。</span><br><span class="line">filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。</span><br><span class="line"><span class="built_in">format</span>：指定handler使用的日志显示格式。</span><br><span class="line">datefmt：指定日期时间格式。</span><br><span class="line">level：设置rootlogger（后边会讲解具体概念）的日志级别</span><br><span class="line">stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">format</span>参数中可能用到的格式化串：</span><br><span class="line">%(name)s Logger的名字</span><br><span class="line">%(levelno)s 数字形式的日志级别</span><br><span class="line">%(levelname)s 文本形式的日志级别</span><br><span class="line">%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span><br><span class="line">%(filename)s 调用日志输出函数的模块的文件名</span><br><span class="line">%(module)s 调用日志输出函数的模块名</span><br><span class="line">%(funcName)s 调用日志输出函数的函数名</span><br><span class="line">%(lineno)d 调用日志输出函数的语句所在的代码行</span><br><span class="line">%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span><br><span class="line">%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span><br><span class="line">%(asctime)s 字符串形式的当前时间。默认格式是 “<span class="number">2003</span>-07-08 <span class="number">16</span>:<span class="number">49</span>:<span class="number">45</span>,<span class="number">896</span>”。逗号后面的是毫秒</span><br><span class="line">%(thread)d 线程ID。可能没有</span><br><span class="line">%(threadName)s 线程名。可能没有</span><br><span class="line">%(process)d 进程ID。可能没有</span><br><span class="line">%(message)s用户输出的消息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#========使用</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;access.log&#x27;</span>,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line">                    level=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;调试debug&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;消息info&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;警告warn&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;错误error&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;严重critical&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#========结果</span></span><br><span class="line">access.log内容:</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - DEBUG -test:  调试debug</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - INFO -test:  消息info</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - WARNING -test:  警告warn</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - ERROR -test:  错误error</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - CRITICAL -test:  严重critical</span><br><span class="line"></span><br><span class="line">part2: 可以为logging模块指定模块级的配置,即所有logger的配置</span><br></pre></td></tr></table></figure><h3 id="11-4-logging模块的Formatter，Handler，Logger，Filter对象"><a href="#11-4-logging模块的Formatter，Handler，Logger，Filter对象" class="headerlink" title="11.4 logging模块的Formatter，Handler，Logger，Filter对象"></a>11.4 logging模块的Formatter，Handler，Logger，Filter对象</h3><blockquote><p>原理图</p></blockquote><p><img src="/articles/2023/04/23/changyongmokuai/4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#logger：产生日志的对象</span><br><span class="line"></span><br><span class="line">#Filter：过滤日志的对象</span><br><span class="line"></span><br><span class="line">#Handler：接收日志然后控制打印到不同的地方，FileHandler用来打印到文件中，StreamHandler用来打印到终端</span><br><span class="line"></span><br><span class="line">#Formatter对象：可以定制不同的日志格式对象，然后绑定给不同的Handler对象使用，以此来控制不同的Handler的日志格式</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="11-5-日志级别与配置"><a href="#11-5-日志级别与配置" class="headerlink" title="11.5 日志级别与配置"></a>11.5 日志级别与配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、日志基本配置</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    <span class="comment"># 1、日志输出位置：1、终端 2、文件</span></span><br><span class="line">    <span class="comment"># filename=&#x27;access.log&#x27;, # 不指定，默认打印到终端</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、日志格式</span></span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、时间格式</span></span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、日志级别</span></span><br><span class="line">    <span class="comment"># critical =&gt; 50</span></span><br><span class="line">    <span class="comment"># error =&gt; 40</span></span><br><span class="line">    <span class="comment"># warning =&gt; 30   # 默认级别是警告</span></span><br><span class="line">    <span class="comment"># info =&gt; 20</span></span><br><span class="line">    <span class="comment"># debug =&gt; 10</span></span><br><span class="line">    level=<span class="number">30</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出日志</span></span><br><span class="line">logging.debug(<span class="string">&#x27;调试debug&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;消息info&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;警告warn&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;错误error&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;严重critical&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 注意下面的root是默认的日志名字</span></span><br><span class="line"><span class="string">WARNING:root:警告warn</span></span><br><span class="line"><span class="string">ERROR:root:错误error</span></span><br><span class="line"><span class="string">CRITICAL:root:严重critical</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="11-6-日志字典"><a href="#11-6-日志字典" class="headerlink" title="11.6 日志字典"></a>11.6 日志字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">logging配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、定义三种日志输出格式，日志中可能用到的格式化串如下</span></span><br><span class="line"><span class="comment"># %(name)s Logger的名字</span></span><br><span class="line"><span class="comment"># %(levelno)s 数字形式的日志级别</span></span><br><span class="line"><span class="comment"># %(levelname)s 文本形式的日志级别</span></span><br><span class="line"><span class="comment"># %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span></span><br><span class="line"><span class="comment"># %(filename)s 调用日志输出函数的模块的文件名</span></span><br><span class="line"><span class="comment"># %(module)s 调用日志输出函数的模块名</span></span><br><span class="line"><span class="comment"># %(funcName)s 调用日志输出函数的函数名</span></span><br><span class="line"><span class="comment"># %(lineno)d 调用日志输出函数的语句所在的代码行</span></span><br><span class="line"><span class="comment"># %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span></span><br><span class="line"><span class="comment"># %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span></span><br><span class="line"><span class="comment"># %(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</span></span><br><span class="line"><span class="comment"># %(thread)d 线程ID。可能没有</span></span><br><span class="line"><span class="comment"># %(threadName)s 线程名。可能没有</span></span><br><span class="line"><span class="comment"># %(process)d 进程ID。可能没有</span></span><br><span class="line"><span class="comment"># %(message)s用户输出的消息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、强调：其中的%(name)s为getlogger时指定的名字</span></span><br><span class="line">standard_format = <span class="string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span> \</span><br><span class="line">                  <span class="string">&#x27;[%(levelname)s][%(message)s]&#x27;</span></span><br><span class="line"></span><br><span class="line">simple_format = <span class="string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line">test_format = <span class="string">&#x27;[%(asctime)s] %(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、日志配置字典</span></span><br><span class="line">LOGGING_DIC = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;standard&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: standard_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: simple_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: test_format</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment"># handlers是日志的接收者，不同的handler会将日志输出到不同位置</span></span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#打印到终端的日志</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,  <span class="comment"># 打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#打印到文件的日志,收集info及以上的日志</span></span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件,日志轮转</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="comment"># 可以定制日志文件路径</span></span><br><span class="line">            <span class="comment"># BASE_DIR = os.path.dirname(os.path.dirname(__file__))  # log文件的目录</span></span><br><span class="line">            <span class="comment"># LOG_PATH = os.path.join(BASE_DIR,&#x27;a1.log&#x27;)</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;a1.log&#x27;</span>,  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,       <span class="comment"># 保留几份，也就是几个文件</span></span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,  <span class="comment"># 日志文件的编码，再也不用担心中文log乱码了</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;other&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.FileHandler&#x27;</span>,  <span class="comment"># 保存到文件</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;a2.log&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;default_time&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.TimedRotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件,日志轮转</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="comment"># 可以定制日志文件路径</span></span><br><span class="line">            <span class="comment"># BASE_DIR = os.path.dirname(os.path.dirname(__file__))  # log文件的目录</span></span><br><span class="line">            <span class="comment"># LOG_PATH = os.path.join(BASE_DIR,&#x27;a1.log&#x27;)</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;a1_time.log&#x27;</span>,  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">&#x27;when&#x27;</span>: <span class="string">&#x27;midnight&#x27;</span>,     <span class="comment"># 指定午夜0点切割</span></span><br><span class="line">            <span class="string">&#x27;interval&#x27;</span>: <span class="number">1</span>,  <span class="comment"># 每天轮转</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,   <span class="comment"># 保留几份，也就是几个文件</span></span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,  <span class="comment"># 日志文件的编码，再也不用担心中文log乱码了</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># loggers是日志的产生者，产生的日志会传递给handler然后控制输出</span></span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># logging.getLogger(__name__)拿到的logger配置</span></span><br><span class="line">        <span class="comment"># 不写名字，就代表是空key，getlogger找不到key名，就会走空key，然后日志名处显示的是getlogger的名字</span></span><br><span class="line">        <span class="string">&#x27;&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],  <span class="comment"># 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,  <span class="comment"># loggers(第一层日志级别关卡限制)---&gt;handlers(第二层日志级别关卡限制)</span></span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,  <span class="comment"># 默认为True，向上（更高level的logger）传递，通常设置为False即可，否则会一份日志向上层层传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;base_log&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],  <span class="comment"># 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>, <span class="comment"># loggers(第一层日志级别关卡限制)---&gt;handlers(第二层日志级别关卡限制)</span></span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,  <span class="comment"># 默认为True，向上（更高level的logger）传递，通常设置为False即可，否则会一份日志向上层层传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;专门的采集&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;other&#x27;</span>,],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-7-使用"><a href="#11-7-使用" class="headerlink" title="11.7 使用"></a>11.7 使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="comment"># !!!强调!!!</span></span><br><span class="line"><span class="comment"># 1、logging是一个包，需要使用其下的config、getLogger，可以如下导入</span></span><br><span class="line"><span class="comment"># from logging import config</span></span><br><span class="line"><span class="comment"># from logging import getLogger</span></span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> config,getLogger</span><br><span class="line"></span><br><span class="line">config.dictConfig(settings.LOGGING_DIC) <span class="comment"># 加载配置字典</span></span><br><span class="line"></span><br><span class="line">logging1 = getLogger(<span class="string">&#x27;base_log&#x27;</span>)</span><br><span class="line">logging1.info(<span class="string">&#x27;这是一条base_log日志&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logging2 = getLogger(<span class="string">&#x27;专门的采集&#x27;</span>)</span><br><span class="line">logging2.info(<span class="string">&#x27;这是专门的采集日志&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充知识</span></span><br><span class="line"><span class="comment"># 1、日志名的命名：日志名是区别业务归属的一种非常重要的标识</span></span><br><span class="line"><span class="comment"># 2、日志轮转：日志记录着程序运行过程中的关键信息</span></span><br></pre></td></tr></table></figure><h2 id="十二，re模块"><a href="#十二，re模块" class="headerlink" title="十二，re模块"></a>十二，re模块</h2><h3 id="12-1-什么是正则"><a href="#12-1-什么是正则" class="headerlink" title="12.1 什么是正则"></a>12.1 什么是正则</h3><blockquote><p>正则就是用一些具有特殊含义的符号组合到一起（称为正则表达式）来描述字符或者字符串的方法。或者说：正则就是用来描述一类事物的规则。（在Python中）它内嵌在Python中，并通过 re 模块实现。正则表达式模式被编译成一系列的字节码，然后由用 C 编写的匹配引擎执行。</p></blockquote><h3 id="12-2-常用匹配模式-元字符"><a href="#12-2-常用匹配模式-元字符" class="headerlink" title="12.2 常用匹配模式(元字符)"></a>12.2 常用匹配模式(元字符)</h3><p><img src="/articles/2023/04/23/changyongmokuai/5.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># \w与\W</span></span><br><span class="line"><span class="comment"># \w：匹配数字字母下划线，\W取反</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\w&#x27;</span>,<span class="string">&#x27;abc123_*()-= &#x27;</span>))      <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;_&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\W&#x27;</span>,<span class="string">&#x27;abc123_*()-= &#x27;</span>))      <span class="comment"># [&#x27;*&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;-&#x27;, &#x27;=&#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \s与\S</span></span><br><span class="line"><span class="comment"># \s：匹配任意空白字符，等价于[\t\n\r\f]，\S取反</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\s&#x27;</span>,<span class="string">&#x27;abc 123 456&#x27;</span>))       <span class="comment"># [&#x27; &#x27;, &#x27; &#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\S&#x27;</span>,<span class="string">&#x27;abc 123 456&#x27;</span>))       <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \t \n \r \f 都是空，都可以被\s匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\s&#x27;</span>,<span class="string">&#x27;ab\r\t 1\n23 45\f6&#x27;</span>))    <span class="comment"># [&#x27;\r&#x27;, &#x27;\t&#x27;, &#x27; &#x27;, &#x27;\n&#x27;, &#x27; &#x27;, &#x27;\x0c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \d与\D</span></span><br><span class="line"><span class="comment"># \d：匹配任意数字，等价于[0-9]，\D取反</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\d&#x27;</span>,<span class="string">&#x27;abc123_*()-= \t\n\r&#x27;</span>))   <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\D&#x27;</span>,<span class="string">&#x27;abc123_*()-= \t\n\r&#x27;</span>))   <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;_&#x27;, &#x27;*&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;-&#x27;, &#x27;=&#x27;, &#x27; &#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\r&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \A：匹配字符串的开始（了解）</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\Ahe&#x27;</span>,<span class="string">&#x27;hello zhangsan 123 -=()&#x27;</span>)) <span class="comment"># [&#x27;he&#x27;],\A==&gt;^</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \Z：匹配字符串结束，如果存在换行，只匹配到换行前的结束字符串（了解）</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;123\Z&#x27;</span>,<span class="string">&#x27;hello zhangsan  -=()123&#x27;</span>)) <span class="comment"># [&#x27;123&#x27;],\Z==&gt;$</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">^ </span></span><br><span class="line"><span class="string">指定匹配必须出现在字符串的开头或行的开头。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\A </span></span><br><span class="line"><span class="string">指定匹配必须出现在字符串的开头（忽略 Multiline 选项）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ </span></span><br><span class="line"><span class="string">指定匹配必须出现在以下位置：字符串结尾、字符串结尾的 \n 之前或行的结尾。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\Z </span></span><br><span class="line"><span class="string">指定匹配必须出现在字符串的结尾或字符串结尾的 \n 之前（忽略 Multiline 选项）。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^与$</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;^a&#x27;</span>,<span class="string">&#x27;abc 123 456&#x27;</span>))   <span class="comment"># [&#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;6$&#x27;</span>,<span class="string">&#x27;abc 123 456&#x27;</span>))   <span class="comment"># [&#x27;6&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复匹配：| . | * | ? | .* | .*? | + | &#123;n,m&#125; |</span></span><br><span class="line"><span class="comment"># .：匹配除了\n任意一个字符</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a1b&#x27;</span>)) <span class="comment"># [&#x27;a1b&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a1b a*b a b aaab&#x27;</span>)) <span class="comment"># [&#x27;a1b&#x27;, &#x27;a*b&#x27;, &#x27;a b&#x27;, &#x27;aab&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a\nb&#x27;</span>)) <span class="comment"># []</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a\nb&#x27;</span>,re.S)) <span class="comment">#[&#x27;a\nb&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a\nb&#x27;</span>,re.DOTALL)) <span class="comment">#[&#x27;a\nb&#x27;]同上一条意思一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *：左侧字符重复0次或无穷次，贪婪</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab*&#x27;</span>,<span class="string">&#x27;bbbbbbb&#x27;</span>)) <span class="comment">#[]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab*&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)) <span class="comment">#[&#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab*&#x27;</span>,<span class="string">&#x27;abbbb&#x27;</span>)) <span class="comment">#[&#x27;abbbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># +：左侧字符重1次或无穷次，贪婪</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab+&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)) <span class="comment">#[]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab+&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment">#[&#x27;abbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ?：左侧字符重0次或1次，贪婪</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab?&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)) <span class="comment">#[&#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab?&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment">#[&#x27;ab&#x27;]</span></span><br><span class="line"><span class="comment">#匹配所有包含小数在内的数字</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\d+\.?\d*&#x27;</span>,<span class="string">&quot;asdfasdf123as1.13dfa12adsf1asdf3&quot;</span>)) <span class="comment">#[&#x27;123&#x27;, &#x27;1.13&#x27;, &#x27;12&#x27;, &#x27;1&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;[0-9]+\.?[0-9]*&#x27;</span>,<span class="string">&quot;asdfasdf123as1.13dfa12adsf1asdf3&quot;</span>))     <span class="comment"># [&#x27;123&#x27;, &#x27;1.13&#x27;, &#x27;12&#x27;, &#x27;1&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;n,m&#125;：左侧字符重复n次到m次，性格贪婪</span></span><br><span class="line"><span class="comment"># &#123;0,&#125; --&gt; *</span></span><br><span class="line"><span class="comment"># &#123;1,&#125; --&gt; +</span></span><br><span class="line"><span class="comment"># &#123;0,1&#125; --&gt; ?</span></span><br><span class="line"><span class="comment"># &#123;n&#125; --&gt; 代表出现n次</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab&#123;2&#125;&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment"># [&#x27;abb&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab&#123;2,4&#125;&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment"># [&#x27;abbb&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab&#123;1,&#125;&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment"># [&#x27;abbb&#x27;]    &#x27;ab&#123;1,&#125;&#x27; ===&gt; &#x27;ab+&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab&#123;0,&#125;&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment"># [&#x27;abbb&#x27;]    &#x27;ab&#123;0,&#125;&#x27; ===&gt; &#x27;ab*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># []：匹配指定字符的一个</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[1*-]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b&#x27;</span>)) <span class="comment"># [&#x27;a1b&#x27;, &#x27;a*b&#x27;, &#x27;a-b&#x27;]     []内的都为普通字符了，且如果-没有被转意的话，应该放到[]的开头或结尾</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[^1*-]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b a=b&#x27;</span>)) <span class="comment"># [&#x27;a=b&#x27;]     []内的^代表的意思是取反</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[0-9]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b a=b&#x27;</span>))  <span class="comment"># [&#x27;a1b&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[a-z]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b a=b aeb&#x27;</span>)) <span class="comment"># [&#x27;aeb&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[a-zA-Z]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b a=b aeb aEb&#x27;</span>)) <span class="comment"># [&#x27;aeb&#x27;, &#x27;aEb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \：print(re.findall(&#x27;a\\c&#x27;,&#x27;a\c&#x27;)) #对于正则来说a\\c确实可以匹配到a\c,但是在python解释器读取a\\c时，会发生转义，然后交给re去执行，所以抛出异常</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&#x27;a\\c&#x27;</span>,<span class="string">&#x27;a\c&#x27;</span>)) <span class="comment">#r代表告诉解释器使用rawstring，即原生字符串，把我们正则内的所有符号都当普通字符处理，不要转义</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a\\\\c&#x27;</span>,<span class="string">&#x27;a\c&#x27;</span>)) <span class="comment">#同上面的意思一样，和上面的结果一样都是[&#x27;a\\c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ()：分组</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab+&#x27;</span>,<span class="string">&#x27;ababab123&#x27;</span>)) <span class="comment">#[&#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;ab&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;(ab)+123&#x27;</span>,<span class="string">&#x27;ababab123&#x27;</span>)) <span class="comment">#[&#x27;ab&#x27;]，匹配到末尾的ab123中的ab</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;(?:ab)+123&#x27;</span>,<span class="string">&#x27;ababab123&#x27;</span>)) <span class="comment">#findall的结果不是匹配的全部内容，而是组内的内容,?:可以让结果为匹配的全部内容</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;href=&quot;(.*?)&quot;&#x27;</span>,<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;点击&lt;/a&gt;&#x27;</span>))<span class="comment">#[&#x27;http://www.baidu.com&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;href=&quot;(?:.*?)&quot;&#x27;</span>,<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;点击&lt;/a&gt;&#x27;</span>))<span class="comment">#[&#x27;href=&quot;http://www.baidu.com&quot;&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># |：或的意思</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;compan(?:y|ies)&#x27;</span>,<span class="string">&#x27;Too many companies have gone bankrupt, and the next one is my company&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件开发的目录规范</title>
      <link href="/articles/2023/04/19/ruanjiankaifamuluguifan/"/>
      <url>/articles/2023/04/19/ruanjiankaifamuluguifan/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="22、软件开发的目录规范"><a href="#22、软件开发的目录规范" class="headerlink" title="22、软件开发的目录规范"></a>22、软件开发的目录规范</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，软件开发目录规范"><a href="#一，软件开发目录规范" class="headerlink" title="一，软件开发目录规范"></a>一，软件开发目录规范</h2><blockquote><p>为了提高程序的可读性与可维护性，我们应该为软件设计良好的目录结构，这与规范的编码风格同等重要。软件的目录规范并无硬性标准，只要清晰可读即可，假设你的软件名为ATM，推荐目录结构如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ATM/</span><br><span class="line">|-- src/</span><br><span class="line">|   |-- src.py</span><br><span class="line">|</span><br><span class="line">|-- api/</span><br><span class="line">|   |-- api.py</span><br><span class="line">|</span><br><span class="line">|-- db/</span><br><span class="line">|   |-- db_handle.py</span><br><span class="line">|</span><br><span class="line">|-- lib/</span><br><span class="line">|   |-- common.py</span><br><span class="line">|</span><br><span class="line">|-- bin/</span><br><span class="line">|   |-- start.py</span><br><span class="line">|</span><br><span class="line">|-- conf/</span><br><span class="line">|   |-- settings.py</span><br><span class="line">|</span><br><span class="line">|-- run.py</span><br><span class="line">|-- setup.py</span><br><span class="line">|-- requirements.txt</span><br><span class="line">|-- README</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">简要解释一下:</span><br><span class="line"></span><br><span class="line">• src/: 存放业务逻辑相关代码</span><br><span class="line"></span><br><span class="line">• api/: 存放接口文件，接口主要用于为业务逻辑提供数据操作。</span><br><span class="line"></span><br><span class="line">• db/: 存放操作数据库相关文件，主要用于与数据库交互</span><br><span class="line"></span><br><span class="line">• lib/: 存放程序中常用的自定义模块</span><br><span class="line"></span><br><span class="line">• bin/: 存放程序中常用的脚本文件</span><br><span class="line"></span><br><span class="line">• conf/: 存放配置文件</span><br><span class="line"></span><br><span class="line">• run.py: 程序的启动文件，一般放在项目的根目录下，因为在运行时会默认将运行文件所在的文件夹作为sys.path的第一个路径，这样就省去了处理环境变量的步骤</span><br><span class="line"></span><br><span class="line">• setup.py: 安装、部署、打包的脚本。</span><br><span class="line"></span><br><span class="line">• requirements.txt: 存放软件依赖的外部Python包列表。</span><br><span class="line"></span><br><span class="line">• README: 项目说明文件。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">除此之外，有一些方案给出了更加多的内容，比如LICENSE.txt,ChangeLog.txt文件等，主要是在项目需要开源时才会用到，请读者自行查阅。</span><br><span class="line"></span><br><span class="line">关于README的内容，这个应该是每个项目都应该有的一个文件，目的是能简要描述该项目的信息，让读者快速了解这个项目。它需要说明以下几个事项:</span><br><span class="line"></span><br><span class="line">1、软件定位，软件的基本功能；</span><br><span class="line"></span><br><span class="line">2、运行代码的方法: 安装环境、启动命令等；</span><br><span class="line"></span><br><span class="line">3、简要的使用说明；</span><br><span class="line"></span><br><span class="line">4、代码目录结构说明，更详细点可以说明软件的基本原理；</span><br><span class="line"></span><br><span class="line">5、常见问题说明。</span><br></pre></td></tr></table></figure><p><strong>关于setup.py和requirements.txt：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一般来说，用setup.py来管理代码的打包、安装、部署问题。业界标准的写法是用Python流行的打包工具setuptools来管理这些事情，这种方式普遍应用于开源项目中。不过这里的核心思想不是用标准化的工具来解决这些问题，而是说，一个项目一定要有一个安装部署工具，能快速便捷的在一台新机器上将环境装好、代码部署好和将程序运行起来。</span><br><span class="line"></span><br><span class="line">requirements.txt文件的存在是为了方便开发者维护软件的依赖库。我们需要将开发过程中依赖库的信息添加进该文件中，避免在 setup.py安装依赖时漏掉软件包，同时也方便了使用者明确项目引用了哪些Python包。</span><br><span class="line"></span><br><span class="line">这个文件的格式是每一行包含一个包依赖的说明，通常是flask&gt;=0.10这种格式，要求是这个格式能被pip识别，这样就可以简单的通过 pip install -r requirements.txt来把所有Python依赖库都装好了，具体格式参照https://pip.readthedocs.io/en/1.1/requirements.html</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取路径的优化方案</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">BASE_DIR=os.path.dirname(os.path.dirname(__file__))</span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> src <span class="keyword">import</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src.run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包</title>
      <link href="/articles/2023/04/18/bao/"/>
      <url>/articles/2023/04/18/bao/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="21、包"><a href="#21、包" class="headerlink" title="21、包"></a>21、包</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，包介绍"><a href="#一，包介绍" class="headerlink" title="一，包介绍"></a>一，包介绍</h2><blockquote><p>随着模块数目的增多，把所有模块不加区分地放到一起也是极不合理的，于是Python为我们提供了一种把模块组织到一起的方法，即创建一个包。包就是一个含有_<em>init</em>_.py文件的文件夹，文件夹内可以组织子模块或子包</p></blockquote><pre><code>包就是一个包含有__init__.py文件的文件夹,包的本质是模块的一种形式，包用来被当作模块导入</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">mmm/</span><br><span class="line">├── __init__.py     </span><br><span class="line">├── mm1.py</span><br><span class="line">├── mm2.py</span><br><span class="line">└── mm3.py      <span class="comment">#子模块</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>需要强调的是</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#1. 在python3中，即使包下没有__init__.py文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错</span><br><span class="line"></span><br><span class="line">#2. 创建包的目的不是为了运行，而是被导入使用，记住，包只是模块的一种形式而已，包的本质就是一种模</span><br></pre></td></tr></table></figure><h2 id="二-包的使用"><a href="#二-包的使用" class="headerlink" title="二,包的使用"></a>二,包的使用</h2><h3 id="2-1-导入包与-init-py"><a href="#2-1-导入包与-init-py" class="headerlink" title="2.1 导入包与__init__.py"></a>2.1 导入包与__init__.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;running....&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="number">111</span></span><br><span class="line">y = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sayying.....&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、产生一个名称空间</span></span><br><span class="line"><span class="comment"># 2、运行包下的__init__.py文件，将运行过程中产生的名字都丢到1的名称空间中</span></span><br><span class="line"><span class="comment"># 3、在当前执行文件的名称空间中拿到一个名字mmm，mmm执行1的名称空间</span></span><br><span class="line"><span class="keyword">import</span> mmm</span><br><span class="line"><span class="built_in">print</span>(mmm.x)</span><br><span class="line"><span class="built_in">print</span>(mmm.y)</span><br><span class="line">mmm.say()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-绝对导入与相对导入"><a href="#2-2-绝对导入与相对导入" class="headerlink" title="2.2 绝对导入与相对导入"></a>2.2 绝对导入与相对导入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo/</span><br><span class="line">├── __init__.py     </span><br><span class="line">├── mm1.py</span><br><span class="line">├── mm2.py</span><br><span class="line">└── mm3.py      <span class="comment">#子模块</span></span><br></pre></td></tr></table></figure><p><strong>针对包内的模块之间互相导入，导入的方式有两种</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mm1.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mm2.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mm3.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f3&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-1-绝对导入：以顶级包为起始"><a href="#2-2-1-绝对导入：以顶级包为起始" class="headerlink" title="2.2.1 绝对导入：以顶级包为起始"></a>2.2.1 绝对导入：以顶级包为起始</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对导入，以包的文件夹作为起始来进行导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> foo.mm1 <span class="keyword">import</span> f1  <span class="comment"># 点的左侧必须为包，否则语法错误</span></span><br><span class="line"><span class="keyword">from</span> foo.mm2 <span class="keyword">import</span> f2</span><br><span class="line"><span class="keyword">from</span> foo.mm3 <span class="keyword">import</span> f3</span><br></pre></td></tr></table></figure><h3 id="2-2-2-相对导入"><a href="#2-2-2-相对导入" class="headerlink" title="2.2.2 相对导入"></a>2.2.2 相对导入</h3><blockquote><p>仅限于包内使用，不能跨出包（包内模块之间的导入，推荐使用相对导入）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># . 代表当前文件夹</span></span><br><span class="line"><span class="comment"># .. 代表上一层文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __init__.py    </span></span><br><span class="line"><span class="keyword">from</span> .mm1 <span class="keyword">import</span> f1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调</span></span><br><span class="line"><span class="comment"># 1、相对导入不能跨出包，所以相对导入仅限于包内模块彼此之间导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、绝对导入是没有任何限制的，所以绝对导入是一种通用的导入</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">调用包：在调用的时候，只需要执行方法，包内的文件规划，和目录层级是制作包该考虑的，调用包只需要包名就可。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量是以执行文件为准的，所有被导入的模块或者说后续的其他文件引用的sys.path都是参照执行文件的sys.path</span></span><br><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line">foo.f1()</span><br><span class="line">foo.f2()</span><br><span class="line">foo.f3()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调</span></span><br><span class="line"><span class="comment"># 1.关于包相关的导入语句也分为import和from ... import ...两种，但是无论哪种，无论在什么位置，在导入时都必须遵循一个原则：凡是在导入时带点的，点的左边都必须是一个包，否则非法。可以带有一连串的点，如import 顶级包.子包.子模块,但都必须遵循这个原则。但对于导入后，在使用时就没有这种限制了，点的左边可以是包,模块，函数，类(它们都可以用点的方式调用自己的属性)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、包A和包B下有同名模块也不会冲突，如A.a与B.a来自俩个命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的__init__.py，导入包本质就是在导入该文件</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>总结：</strong></p></blockquote><pre><code>总结包的使用需要牢记三点1、导包就是在导包下__init__.py文件2、包内部的导入应该使用相对导入，相对导入也只能在包内部使用，而且...取上一级不能出包3、使用语句中的点代表的是访问属性m.n.x ----&gt; 向m要n，向n要x而导入语句中的点代表的是路径分隔符import a.b.c --&gt; a/b/c，文件夹下a下有子文件夹b，文件夹b下有子文件或文件夹c所以导入语句中点的左边必须是一个包</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块</title>
      <link href="/articles/2023/04/07/mokuai/"/>
      <url>/articles/2023/04/07/mokuai/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="20、模块"><a href="#20、模块" class="headerlink" title="20、模块"></a>20、模块</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，模块介绍"><a href="#一，模块介绍" class="headerlink" title="一，模块介绍"></a>一，模块介绍</h2><h3 id="1-1-什么是模块"><a href="#1-1-什么是模块" class="headerlink" title="1.1 什么是模块"></a>1.1 什么是模块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">模块就是一系列功能的集合体，分为三大类</span><br><span class="line">    I：内置模块</span><br><span class="line">    II：第三方的模块</span><br><span class="line">    III：自定义的模块</span><br><span class="line">         一个python文件本身就是一个模块，例如：文件名m.py，模块名m</span><br><span class="line">    ps：模块分为四种形式</span><br><span class="line">        1、使用python编写的.py文件</span><br><span class="line">        2、已被编译为共享库或DLL的C或C++扩展</span><br><span class="line">        3、把一系列模块组知道一起的文件夹（注：文件夹下有一个__init__.py文件，该文件夹称之为包）</span><br><span class="line">        4、使用C编写并链接到python解释器的内置模块</span><br></pre></td></tr></table></figure><h3 id="1-2-为什么要有模块"><a href="#1-2-为什么要有模块" class="headerlink" title="1.2 为什么要有模块"></a>1.2 为什么要有模块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I：内置与第三方的模块拿来就用，无需定义，这种拿来主义，可以极大的提升自己的开发效率</span><br><span class="line">II：自定义的模块</span><br><span class="line">    可以将程序的各部分功能提取出来放到一个模块中共享使用</span><br><span class="line">    优点：减少了代码冗余，程序的组织结构更加清晰</span><br></pre></td></tr></table></figure><h2 id="二，模块的使用"><a href="#二，模块的使用" class="headerlink" title="二，模块的使用"></a>二，模块的使用</h2><h3 id="2-1-import语句"><a href="#2-1-import语句" class="headerlink" title="2.1 import语句"></a>2.1 import语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件名：foo.py</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;模块foo======&gt;&#x27;</span>)</span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>():</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x=<span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>要想在另外一个py文件中引用foo.py中的功能，需要使用<code>import foo</code></p></blockquote><blockquote><p><strong>首次导入模块会发生3件事</strong><br>1、执行foo.py<br>2、产生foo.py的名称空间，将foo.py运行过程中产生的名字都丢到foo的名称空间中<br>3、在当前文件中产生的有一个名字foo，该名字指向2中产的的名称空间</p></blockquote><blockquote><p>**ps：**之后的导入，都是直接引用首次导入产生的foo.py的名称空间，不会重复执行代码</p></blockquote><h3 id="2-1-1-调用"><a href="#2-1-1-调用" class="headerlink" title="2.1.1 调用"></a>2.1.1 调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强调1：指名道姓的问某一个模块要名字对应的值，不会与当前名称空间的名字发生冲突</span></span><br><span class="line"><span class="built_in">print</span>(foo.x)</span><br><span class="line"><span class="built_in">print</span>(foo.get())</span><br><span class="line"><span class="built_in">print</span>(foo.change())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调2：无论是查看还是修改，操作的都是模块本身，与调用位置无关</span></span><br><span class="line"><span class="keyword">import</span> foo</span><br><span class="line">x = <span class="number">3333333</span></span><br><span class="line"></span><br><span class="line">foo.change()</span><br><span class="line"><span class="built_in">print</span>(x)    <span class="comment"># 3333333</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(foo.x)    <span class="comment"># 0</span></span><br><span class="line">foo.get()       <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调</span></span><br><span class="line"><span class="comment">#1、在Python中模块也属于第一类对象，可以进行赋值、以数据形式传递以及作为容器类型的元素等操作。</span></span><br><span class="line"><span class="comment">#2、模块名应该遵循小写形式，标准库从python2过渡到python3做出了很多这类调整，比如ConfigParser、Queue、SocketServer全更新为纯小写形式。</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-import其他的知识和规范"><a href="#2-1-2-import其他的知识和规范" class="headerlink" title="2.1.2 import其他的知识和规范"></a>2.1.2 import其他的知识和规范</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三、可以以逗号为分隔符，一行导入多个模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建议使用这种方式</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time,foo     <span class="comment"># 不建议一行导入多个模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四、导入模块的规范</span></span><br><span class="line"><span class="comment"># I. python内置模块</span></span><br><span class="line"><span class="comment"># II. 第三方模块</span></span><br><span class="line"><span class="comment"># III. 程序员自定义模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 五、起别名</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t    <span class="comment"># t=time</span></span><br><span class="line">t.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 六、模块是第一类对象（函数也是第一类对象）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 七、自定义模块的命名应该采用纯小写+下划线的命名风格</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 八、可以在函数内导入模块（区别就是作用域，函数内是局部）</span></span><br></pre></td></tr></table></figure><h3 id="2-2-from-import-语句"><a href="#2-2-from-import-语句" class="headerlink" title="2.2 from-import 语句"></a>2.2 from-import 语句</h3><blockquote><p>import导入模块在使用时必须加”模块.”：<br>优点：肯定不会与当前名称空间的名字冲突<br>缺点：加前缀显得麻烦</p></blockquote><blockquote><p>from … import … 导入也发生了三件事<br>1、产生一个模块的名称空间<br>2、运行foo.py将运行过程中产生的名字都丢到模块的名称空间中<br>3、在当前名称空间拿到一个名字，该名字与模块名称空间中的某一个名字对应</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> x,get,change <span class="comment">#将模块foo中的x和get导入到当前名称空间</span></span><br><span class="line">a=x <span class="comment">#直接使用模块foo中的x赋值给a</span></span><br><span class="line">get() <span class="comment">#直接执行foo中的get函数</span></span><br><span class="line">change() <span class="comment">#即便是当前有重名的x，修改的仍然是源文件中的x</span></span><br></pre></td></tr></table></figure><pre><code>from ... import ... 导入模块在使用时不需要加前缀优点：代码更精简缺点：容易与当前名称空间混淆</code></pre><p><strong>另外from语句支持from foo import 语法，代表将foo中所有的名字都导入到当前位置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行导入多个名字（不推荐）</span></span><br><span class="line"><span class="comment"># from foo import x,get,change</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *: 导入模块中所有的名字</span></span><br><span class="line"><span class="comment"># （不推荐使用此方法）</span></span><br><span class="line"><span class="comment"># from foo import *</span></span><br></pre></td></tr></table></figure><p><strong>模块的编写者可以在自己的文件中定义__all__变量用来控制*代表的意思</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foo.py</span></span><br><span class="line">__all__=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;get&#x27;</span>] <span class="comment">#该列表中所有的元素必须是字符串类型，每个元素对应foo.py中的一个名字</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>():</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x=<span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在另外一个文件中使用*导入时，就只能导入__all__定义的名字了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> * <span class="comment">#此时的*只代表x和get</span></span><br><span class="line"></span><br><span class="line">x <span class="comment">#可用</span></span><br><span class="line">get() <span class="comment">#可用</span></span><br><span class="line">change() <span class="comment">#不可用</span></span><br><span class="line">Foo() <span class="comment">#不可用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-其他导入语法-as"><a href="#2-3-其他导入语法-as" class="headerlink" title="2.3 其他导入语法(as)"></a>2.3 其他导入语法(as)</h3><blockquote><p>还可以在当前位置为导入的模块起一个别名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">as</span> f <span class="comment">#为导入的模块foo在当前位置起别名f，以后再使用时就用这个别名f</span></span><br><span class="line">f.x</span><br><span class="line">f.get()</span><br></pre></td></tr></table></figure><blockquote><p>还可以为导入的一个名字起别名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> get <span class="keyword">as</span> g</span><br><span class="line">g()</span><br></pre></td></tr></table></figure><h3 id="2-4-循环导入问题"><a href="#2-4-循环导入问题" class="headerlink" title="2.4 循环导入问题"></a>2.4 循环导入问题</h3><blockquote><p>循环导入问题指的是在一个模块加载&#x2F;导入的过程中导入另外一个模块，而在另外一个模块中又返回来导入第一个模块中的名字，由于第一个模块尚未加载完毕，所以引用失败、抛出异常，究其根源就是在python中，同一个模块只会在第一次导入时执行其内部代码，再次导入该模块时，即便是该模块尚未完全加载完毕也不会去重复执行内部代码</p></blockquote><p><strong>以下述文件为例，来详细分析循环&#x2F;嵌套导入出现异常的原因以及解决的方案</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># m1.py 文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m1&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;m1&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># m2.py 文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m2&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line"></span><br><span class="line">y=<span class="string">&#x27;m2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run.py 文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> m1</span><br></pre></td></tr></table></figure><p><strong>测试一</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、执行run.py会抛出异常</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21/run.py&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">import</span> m1</span><br><span class="line">  File <span class="string">&quot;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21/m1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">  File <span class="string">&quot;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21/m2.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">&#x27;x&#x27;</span> <span class="keyword">from</span> partially initialized module <span class="string">&#x27;m1&#x27;</span> (most likely due to a circular <span class="keyword">import</span>) (/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21/m1.py)</span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、分析</span></span><br><span class="line">先执行run.py---&gt;执行<span class="keyword">import</span> m1，开始导入m1并运行其内部代码---&gt;打印内容<span class="string">&quot;正在导入m1&quot;</span></span><br><span class="line">---&gt;执行<span class="keyword">from</span> m2 <span class="keyword">import</span> y 开始导入m2并运行其内部代码---&gt;打印内容“正在导入m2”---&gt;执行<span class="keyword">from</span> m1 <span class="keyword">import</span> x,由于m1已经被导入过了，所以不会重新导入，所以直接去m1中拿x，然而x此时并没有存在于m1中，所以报错</span><br></pre></td></tr></table></figure><p><strong>测试二</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、执行文件不等于导入文件，比如执行m1.py不等于导入了m1</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21/m1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">  File <span class="string">&quot;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21/m2.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">  File <span class="string">&quot;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21/m1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">&#x27;y&#x27;</span> <span class="keyword">from</span> partially initialized module <span class="string">&#x27;m2&#x27;</span> (most likely due to a circular <span class="keyword">import</span>) (/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21/m2.py)</span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">正在导入m1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、分析</span></span><br><span class="line">执行m1.py，打印“正在导入m1”，执行<span class="keyword">from</span> m2 <span class="keyword">import</span> y ，导入m2进而执行m2.py内部代码---&gt;打印<span class="string">&quot;正在导入m2&quot;</span>，执行<span class="keyword">from</span> m1 <span class="keyword">import</span> x，此时m1是第一次被导入，执行m1.py并不等于导入了m1，于是开始导入m1并执行其内部代码---&gt;打印<span class="string">&quot;正在导入m1&quot;</span>，执行<span class="keyword">from</span> m1 <span class="keyword">import</span> y，由于m1已经被导入过了，所以无需继续导入而直接问m2要y，然而y此时并没有存在于m2中所以报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方案一：导入语句放到最后，保证在导入时，所有名字都已经加载过</span></span><br><span class="line"><span class="comment"># 文件：m1.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;m1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：m2.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m2&#x27;</span>)</span><br><span class="line">y=<span class="string">&#x27;m2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：run.py内容如下，执行该文件，可以正常使用</span></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"><span class="built_in">print</span>(m1.x)</span><br><span class="line"><span class="built_in">print</span>(m1.y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方案二：导入语句放到函数中，只有在调用函数时才会执行其内部代码</span></span><br><span class="line"><span class="comment"># 文件：m1.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">x = <span class="string">&#x27;m1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：m2.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">y = <span class="string">&#x27;m2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：run.py内容如下，执行该文件，可以正常使用</span></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line">m1.f1()</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：循环导入问题大多数情况是因为程序设计失误导致，上述解决方案也只是在烂设计之上的无奈之举，在我们的程序中应该尽量避免出现循环&#x2F;嵌套导入，如果多个模块确实都需要共享某些数据，可以将共享的数据集中存放到某一个地方，然后进行导入</strong></p></blockquote><h3 id="2-5-搜索模块的路径与优先级"><a href="#2-5-搜索模块的路径与优先级" class="headerlink" title="2.5 搜索模块的路径与优先级"></a>2.5 搜索模块的路径与优先级</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无论是import还是from...import在导入模块时都涉及到查找问题</span></span><br><span class="line"><span class="comment"># 优先级：</span></span><br><span class="line"><span class="comment"># 1、内存（内置模块）</span></span><br><span class="line"><span class="comment"># 2、硬盘：按照sys.path中存放的文件夹的顺序依次查找要导入的模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 值为一个列表，存放了一系列的文件夹</span></span><br><span class="line"><span class="comment"># 其中第一个文件夹是当前执行文件所在的文件夹</span></span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21&#x27;</span>, <span class="string">&#x27;/Users/zhaoshuo/PycharmProjects/pythonProject&#x27;</span>, <span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.9/lib/python39.zip&#x27;</span>, <span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9&#x27;</span>, <span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/lib-dynload&#x27;</span>, <span class="string">&#x27;/Users/zhaoshuo/PycharmProjects/pythonProject/venv/lib/python3.9/site-packages&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表中的每个元素其实都可以当作一个目录来看：在列表中会发现有.zip或.egg结尾的文件，二者是不同形式的压缩文件，事实上Python确实支持从一个压缩文件中导入模块，我们也只需要把它们都当成目录去看即可。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 了解：sys.modules查看已经加载到内存中的模块</span></span><br><span class="line"><span class="built_in">print</span>(sys.modules)</span><br></pre></td></tr></table></figure><p><strong>sys.path中的第一个路径通常为空，代表执行文件所在的路径，所以在被导入模块与执行文件在同一目录下时肯定是可以正常导入的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sys.path的应用</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 找foo.py，就把foo.py的文件夹添加到环境变量中</span></span><br><span class="line">sys.path.append(<span class="string">r&#x27;/Users/zhaoshuo/PycharmProjects/pythonProject/Python全栈_b站_老男孩/day21/aa&#x27;</span>)      <span class="comment"># 临时添加</span></span><br><span class="line"><span class="keyword">import</span> foo  <span class="comment"># 就不会再报错了</span></span><br></pre></td></tr></table></figure><h3 id="2-6-区分py文件的两种用途"><a href="#2-6-区分py文件的两种用途" class="headerlink" title="2.6 区分py文件的两种用途"></a>2.6 区分py文件的两种用途</h3><blockquote><p>一个Python文件有两种用途，一种被当主程序&#x2F;脚本执行，另一种被当模块导入，为了区别同一个文件的不同用途，每个py文件都内置了_<em>name__变量，该变量在py文件被当做脚本执行时赋值为“_<em>main</em></em>”,在py文件被当做模块导入时赋值为模块名</p></blockquote><blockquote><p><strong>作为模块foo.py的开发者，可以在文件末尾基于__name__在不同应用场景下值的不同来控制文件执行不同的逻辑</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个py文件有两种用途</span></span><br><span class="line"><span class="comment"># 1、被当成程序运行</span></span><br><span class="line"><span class="comment"># 2、被当作模块导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二者的区别是什么？</span></span><br><span class="line"><span class="comment"># 假设有一文件：foo.py</span></span><br><span class="line"><span class="comment"># 1、当foo.py被运行时，__name__的值为&#x27;__main__&#x27;</span></span><br><span class="line"><span class="comment"># 2、当foo.py被当作模块导入时，__name__的值为&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件被执行&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件被导入&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-7-编写一个规范的模块"><a href="#2-7-编写一个规范的模块" class="headerlink" title="2.7 编写一个规范的模块"></a>2.7 编写一个规范的模块</h3><blockquote><p>我们在编写py文件时，需要时刻提醒自己，该文件既是给自己用的，也有可能会被其他人使用，因而代码的可读性与易维护性显得十分重要，为此我们在编写一个模块时最好按照统一的规范去编写，如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模版</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python #通常只在类unix环境有效,作用是可以使用脚本名来执行，而无需直接调用解释器。</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;The module is used to...&quot;</span> <span class="comment">#模块的文档描述</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys <span class="comment">#导入模块</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">1</span> <span class="comment">#定义全局变量,如果非必须,则最好使用局部变量,这样可以提高代码的易维护性,并且可以节省内存提高性能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>: <span class="comment">#定义类,并写好类的注释</span></span><br><span class="line">    <span class="string">&#x27;Class Foo is used to...&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(): <span class="comment">#定义函数,并写好函数的注释</span></span><br><span class="line">    <span class="string">&#x27;Function test is used to…&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: <span class="comment">#主程序</span></span><br><span class="line">    test() <span class="comment">#在被当做脚本执行时,执行此处的代码</span></span><br></pre></td></tr></table></figure><h3 id="2-8-函数的类型提示"><a href="#2-8-函数的类型提示" class="headerlink" title="2.8 函数的类型提示"></a>2.8 函数的类型提示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name:<span class="built_in">str</span>,age:<span class="built_in">int</span>,hobbies:<span class="built_in">tuple</span></span>)-&gt;<span class="built_in">int</span>:      <span class="comment"># -&gt;int 是提示返回值的类型</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line">    <span class="built_in">print</span>(hobbies)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">111</span></span><br><span class="line"></span><br><span class="line">register(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>,(<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name:<span class="string">&quot;必须传入名字&quot;</span>,age:<span class="string">&quot;年龄是数字&quot;</span>,hobbies:<span class="built_in">tuple</span></span>)-&gt;<span class="built_in">int</span>:      <span class="comment"># 冒号后面是提示信息，随便写  不会影响原函数运行</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line">    <span class="built_in">print</span>(hobbies)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">111</span></span><br><span class="line"></span><br><span class="line">register(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>,(<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(register.__annotations__)     <span class="comment"># 查看函数的提示信息</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向过程与函数式</title>
      <link href="/articles/2023/04/06/mianxiangguochengyuhanshushi/"/>
      <url>/articles/2023/04/06/mianxiangguochengyuhanshushi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="19、面向过程与函数式"><a href="#19、面向过程与函数式" class="headerlink" title="19、面向过程与函数式"></a>19、面向过程与函数式</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，二分法"><a href="#一，二分法" class="headerlink" title="一，二分法"></a>一，二分法</h2><blockquote><p>二分法 —&gt; 就是算法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求：有一个按照从小到大顺序排列的数字列表</span></span><br><span class="line"><span class="comment">#      需要从该数字列表中找到我们想要的哪一个数字</span></span><br><span class="line"><span class="comment">#      如何做更高效？？？</span></span><br><span class="line">nums = [-<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">43</span>,<span class="number">77</span>,<span class="number">89</span>]</span><br><span class="line">find_num = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方案一：整体遍历，效率太低</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> num == find_num:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;find it&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方案二：二分法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">伪代码示例：</span></span><br><span class="line"><span class="string">def 函数(find_num,列表):</span></span><br><span class="line"><span class="string">    mid_val = 找到列表中间的值</span></span><br><span class="line"><span class="string">    if find_num &gt; mid_val:</span></span><br><span class="line"><span class="string">        # 接下来查找的应该是在列表的右半部分</span></span><br><span class="line"><span class="string">        列表=列表切片的右半部分</span></span><br><span class="line"><span class="string">        函数(find_num,列表)</span></span><br><span class="line"><span class="string">    elif find_num &lt; mid_val:</span></span><br><span class="line"><span class="string">        # 接下来查找的应该是在列表的左半部分</span></span><br><span class="line"><span class="string">        列表=列表切片的左半部分</span></span><br><span class="line"><span class="string">        函数(find_num,列表)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        print(&#x27;find it&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">nums = [-<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">43</span>,<span class="number">77</span>,<span class="number">89</span>]</span><br><span class="line">nums=nums.sort()    <span class="comment"># 若是不是有序的，进行排序</span></span><br><span class="line">find_num = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">find_num,l</span>):</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;找的值不存在&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_index=<span class="built_in">len</span>(l)//<span class="number">2</span></span><br><span class="line">    mid_val = l[mid_index]</span><br><span class="line">    <span class="keyword">if</span> find_num &gt; mid_val:</span><br><span class="line">        <span class="comment"># 接下来查找的应该是在列表的右半部分</span></span><br><span class="line">        l=l[mid_index+<span class="number">1</span>:]</span><br><span class="line">        binary_search(find_num,l)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; mid_val:</span><br><span class="line">        <span class="comment"># 接下来查找的应该是在列表的左半部分</span></span><br><span class="line">        l=l[:mid_index]</span><br><span class="line">        binary_search(find_num,l)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;find it&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binary_search(find_num,nums)</span><br></pre></td></tr></table></figure><h2 id="二，面向过程的编程思想"><a href="#二，面向过程的编程思想" class="headerlink" title="二，面向过程的编程思想"></a>二，面向过程的编程思想</h2><blockquote><ul><li>核心是”过程”二字，过程即流程，指的是做事的步骤：先什么、再什么、后干什么</li></ul></blockquote><ul><li>基于该思想编写程序就好比在设计一条流水线</li></ul><h3 id="2-1-面向过程的优缺点"><a href="#2-1-面向过程的优缺点" class="headerlink" title="2.1 面向过程的优缺点"></a>2.1 面向过程的优缺点</h3><p><strong>优点：</strong></p><pre><code>复杂的问题流程化、进而简单化</code></pre><p><strong>缺点：</strong></p><pre><code>扩展性非常差</code></pre><h3 id="2-2-面向过程的应用场景"><a href="#2-2-面向过程的应用场景" class="headerlink" title="2.2 面向过程的应用场景"></a>2.2 面向过程的应用场景</h3><blockquote><p>1、不是所有的软件都需要频繁更迭：比如编写脚本<br>2、即便是一个软件需要频繁更迭，也并不代表这个软件所有的组成部分都需要一起更迭</p></blockquote><h2 id="三，函数式"><a href="#三，函数式" class="headerlink" title="三，函数式"></a>三，函数式</h2><blockquote><p>函数式编程并非用函数编程这么简单，而是将计算机的运算视为数学意义上的运算，比起面向过程，函数式更加注重的是执行结果而非执行的过程，代表语言有：Haskell、Erlang。而python并不是一门函数式编程语言，但是仍为我们提供了很多函数式编程好的特性，如lambda，map，reduce，filter</p></blockquote><h3 id="3-1-匿名函数与lambda"><a href="#3-1-匿名函数与lambda" class="headerlink" title="3.1 匿名函数与lambda"></a>3.1 匿名函数与lambda</h3><blockquote><p>对比使用def关键字创建的是有名字的函数，使用lambda关键字创建则是没有名字的函数，即匿名函数，语法如下</p></blockquote><p><code>lambda 参数1,参数2,...: expression</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="keyword">lambda</span> x,y,z:x+y+z</span><br><span class="line"></span><br><span class="line"><span class="comment">#等同于</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、def用于定义有名函数</span></span><br><span class="line"><span class="comment"># func = 函数的内存地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="built_in">print</span>(func)     <span class="comment"># &lt;function func at 0x1004b1d30&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、lambda定义匿名函数</span></span><br><span class="line"><span class="keyword">lambda</span> x,y:x+y      <span class="comment"># 返回值x+y 不用写return，默认就有return</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">lambda</span> x,y:x+y)   <span class="comment"># &lt;function &lt;lambda&gt; at 0x10fc53dc0&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、调用匿名函数</span></span><br><span class="line"><span class="comment"># 方式一：很少这样使用</span></span><br><span class="line">res = (<span class="keyword">lambda</span> x,y:x+y)(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：基本不会这样使用</span></span><br><span class="line">res1 = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line"><span class="built_in">print</span>(res1(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、匿名函数用于临时调用一次的场景：更多的是将匿名函数与其他函数配合使用</span></span><br></pre></td></tr></table></figure><h3 id="3-2-匿名函数的应用"><a href="#3-2-匿名函数的应用" class="headerlink" title="3.2 匿名函数的应用"></a>3.2 匿名函数的应用</h3><blockquote><p>匿名函数与有名函数有相同的作用域，但是匿名意味着引用计数为0，使用一次就释放，所以匿名函数用于临时使用一次的场景，匿名函数通常与其他函数配合使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">salaries=&#123;</span><br><span class="line">    <span class="string">&#x27;siry&#x27;</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="string">&#x27;tom&#x27;</span>:<span class="number">7000</span>,</span><br><span class="line">    <span class="string">&#x27;lili&#x27;</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="string">&#x27;jack&#x27;</span>:<span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求1：找出薪资最高的那个人</span></span><br><span class="line"><span class="comment"># def func(k):</span></span><br><span class="line"><span class="comment">#     return salaries[k]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = max(salaries,key=func)    # 返回值=func(&#x27;siry&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用匿名函数</span></span><br><span class="line"><span class="comment"># max() 取最大值</span></span><br><span class="line">res = <span class="built_in">max</span>(salaries,key=<span class="keyword">lambda</span> k:salaries[k])</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># lili</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># min()取最小值</span></span><br><span class="line">res = <span class="built_in">min</span>(salaries,key=<span class="keyword">lambda</span> k:salaries[k])</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># jack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序sorted()的应用</span></span><br><span class="line">salaries=&#123;</span><br><span class="line">    <span class="string">&#x27;siry&#x27;</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="string">&#x27;tom&#x27;</span>:<span class="number">7000</span>,</span><br><span class="line">    <span class="string">&#x27;lili&#x27;</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="string">&#x27;jack&#x27;</span>:<span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">sorted</span>(salaries,key=<span class="keyword">lambda</span> k:salaries[k])</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># [&#x27;jack&#x27;, &#x27;siry&#x27;, &#x27;tom&#x27;, &#x27;lili&#x27;]   从小到大</span></span><br><span class="line">res = <span class="built_in">sorted</span>(salaries,key=<span class="keyword">lambda</span> k:salaries[k],reverse=<span class="literal">True</span>)    <span class="comment"># 倒序，默认为false</span></span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># [&#x27;lili&#x27;, &#x27;tom&#x27;, &#x27;siry&#x27;, &#x27;jack&#x27;]   从大到小</span></span><br></pre></td></tr></table></figure><h3 id="3-3-map、reduce、filter"><a href="#3-3-map、reduce、filter" class="headerlink" title="3.3 map、reduce、filter"></a>3.3 map、reduce、filter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ============================ map的应用（了解）</span></span><br><span class="line">l = [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;zhouliu&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺点：如果值太多，会过多消耗资源，采取生成器模式</span></span><br><span class="line">res = [i+<span class="string">&#x27;_dsb&#x27;</span><span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># [&#x27;zhangsan_dsb&#x27;, &#x27;lisi_dsb&#x27;, &#x27;wangwu_dsb&#x27;, &#x27;zhouliu_dsb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用生成器</span></span><br><span class="line">res = (i+<span class="string">&#x27;_dsb&#x27;</span><span class="keyword">for</span> i <span class="keyword">in</span> l)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x1056c3660&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(res))     <span class="comment"># [&#x27;zhangsan_dsb&#x27;, &#x27;lisi_dsb&#x27;, &#x27;wangwu_dsb&#x27;, &#x27;zhouliu_dsb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用map函数</span></span><br><span class="line"><span class="comment"># 主要用于批量处理</span></span><br><span class="line">res = <span class="built_in">map</span>(<span class="keyword">lambda</span> i:i+<span class="string">&#x27;_dsb&#x27;</span>,l)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &lt;map object at 0x106a49cd0&gt;  # 就是生成器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================ filter的应用（了解）</span></span><br><span class="line"><span class="comment"># 主要用于过滤操作</span></span><br><span class="line">l = [<span class="string">&#x27;zhangsan_sb&#x27;</span>,<span class="string">&#x27;lisi_sb&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;zhouliu&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同理使用生成器</span></span><br><span class="line">res = (i <span class="keyword">for</span> i <span class="keyword">in</span> l <span class="keyword">if</span> i.endswith(<span class="string">&#x27;sb&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x104d56660&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用filter函数</span></span><br><span class="line">res = <span class="built_in">filter</span>(<span class="keyword">lambda</span> i:i.endswith(<span class="string">&#x27;sb&#x27;</span>),l)</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># &lt;filter object at 0x10d301850&gt;   # 也是生成器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================ reduce的应用（了解）</span></span><br><span class="line"><span class="comment"># 主要作用于合并操作</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行逻辑：先取出两个值，10和1，进行x+y操作，得出11，再取出2，在进行相加操作，11+2，得出13...依次进行</span></span><br><span class="line">res = reduce(<span class="keyword">lambda</span> x,y:x+y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以进行字符串相加，逻辑同上</span></span><br><span class="line">res = reduce(<span class="keyword">lambda</span> x,y:x+y,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># helloabc</span></span><br><span class="line"></span><br><span class="line">res = reduce(<span class="keyword">lambda</span> x,y:x+y,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="comment"># 如果没有初始值，那么会取出第一个a作为初始值，再取出b进行相加</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数递归</title>
      <link href="/articles/2023/04/06/hanshudigui/"/>
      <url>/articles/2023/04/06/hanshudigui/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="18、函数递归"><a href="#18、函数递归" class="headerlink" title="18、函数递归"></a>18、函数递归</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，函数递归调用介绍"><a href="#一，函数递归调用介绍" class="headerlink" title="一，函数递归调用介绍"></a>一，函数递归调用介绍</h2><blockquote><p>函数的递归调用：是函数嵌套调用的一种特殊形式<br>具体是指：在调用一个函数过程中又直接或间接的调用到本身</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接调用本身</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;是我是我还是我&#x27;</span>)</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p><img src="/articles/2023/04/06/hanshudigui/1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 间接调用本身</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt; f1&#x27;</span>)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt; f2&#x27;</span>)</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归的本质就是循环</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2023/04/06/hanshudigui/2.png"></p><blockquote><p>从上图可以看出，两种情况下的递归调用都是一个无限循环的过程，但在python对函数的递归调用的深度做了限制，因而并不会像大家所想的那样进入无限循环，会抛出异常，要避免出现这种情况，就必须让递归调用在满足某个特定条件下终止。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强调：递归调用不应该无限的调用下去，必须在满足某种条件下结束递归调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    n+=<span class="number">1</span></span><br><span class="line">    f1(n)</span><br><span class="line"></span><br><span class="line">f1(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 可以使用sys.getrecursionlimit()去查看递归深度，默认值为1000，虽然可以使用</span></span><br><span class="line">sys.setrecursionlimit()去设定该值，但仍受限于主机操作系统栈大小的限制</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. python不是一门函数式编程语言，无法对递归进行尾递归优化。</span></span><br></pre></td></tr></table></figure><h2 id="二，回溯与递推"><a href="#二，回溯与递推" class="headerlink" title="二，回溯与递推"></a>二，回溯与递推</h2><blockquote><p><strong>下面我们用一个浅显的例子，为了让读者阐释递归的原理和使用：</strong></p></blockquote><blockquote><ul><li>某公司四个员工坐在一起，问第四个人薪水，他说比第三个人多1000，问第三个人薪水，第他说比第二个人多1000，问第二个人薪水，他说比第一个人多1000，最后第一人说自己每月5000，请问第四个人的薪水是多少？</li></ul></blockquote><blockquote><p><strong>思路解析：</strong></p></blockquote><blockquote><ul><li>要知道第四个人的月薪，就必须知道第三个人的，第三个人的又取决于第二个人的，第二个人的又取决于第一个人的，而且每一个员工都比前一个多一千，数学表达式即：</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">salary(<span class="number">4</span>)=salary(<span class="number">3</span>)+<span class="number">1000</span> </span><br><span class="line">salary(<span class="number">3</span>)=salary(<span class="number">2</span>)+<span class="number">1000</span> </span><br><span class="line">salary(<span class="number">2</span>)=salary(<span class="number">1</span>)+<span class="number">1000</span> </span><br><span class="line">salary(<span class="number">1</span>)=<span class="number">5000</span></span><br><span class="line">总结为： </span><br><span class="line">salary(n)=salary(n-<span class="number">1</span>)+<span class="number">1000</span> (n&gt;<span class="number">1</span>) </span><br><span class="line">salary(<span class="number">1</span>)=<span class="number">5000</span> (n=<span class="number">1</span>) </span><br></pre></td></tr></table></figure><pre><code>很明显这是一个递归的过程，可以将该过程分为两个阶段：回溯和递推。</code></pre><blockquote><p>在回溯阶段，要求第n个员工的薪水，需要回溯得到(n-1)个员工的薪水，以此类推，直到得到第一个员工的薪水，此时，salary(1)已知，因而不必再向前回溯了。然后进入递推阶段：从第一个员工的薪水可以推算出第二个员工的薪水(6000)，从第二个员工的薪水可以推算出第三个员工的薪水(7000)，以此类推，一直推算出第第四个员工的薪水(8000)为止，递归结束。需要注意的一点是，递归一定要有一个结束条件，这里n&#x3D;1就是结束条件。</p></blockquote><p><img src="/articles/2023/04/06/hanshudigui/3.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码实现：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">salary</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5000</span></span><br><span class="line">    <span class="keyword">return</span> salary(n-<span class="number">1</span>)+<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">s=salary(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s)    <span class="comment"># 8000</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>程序分析：</strong></p></blockquote><blockquote><p>在未满足n &#x3D;&#x3D; 1的条件时，一直进行递归调用，即一直回溯。而在满足n &#x3D;&#x3D; 1的条件时，终止递归调用，即结束回溯，从而进入递推阶段，依次推导直到得到最终的结果。</p></blockquote><h3 id="2-1-递归的应用"><a href="#2-1-递归的应用" class="headerlink" title="2.1 递归的应用"></a>2.1 递归的应用</h3><blockquote><p>比如有一个嵌套多层的列表，要求打印出所有的元素，代码实现如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">list1</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(x) <span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">            <span class="comment"># 如果是列表，应该再循环，再判断，即重新运行本身的代码</span></span><br><span class="line">            f1(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">f1(l)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成器</title>
      <link href="/articles/2023/04/05/shengchengqi/"/>
      <url>/articles/2023/04/05/shengchengqi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="17、生成器"><a href="#17、生成器" class="headerlink" title="17、生成器"></a>17、生成器</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，生成器与yield"><a href="#一，生成器与yield" class="headerlink" title="一，生成器与yield"></a>一，生成器与yield</h2><blockquote><p>在函数内一旦存在yield关键字，调用函数并不会执行函数体代码，会返回一个生成器对象，生成器就是自定义的迭代器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一次&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第二次&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第三次&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第四次&#x27;</span>)</span><br><span class="line"></span><br><span class="line">g = func()</span><br><span class="line"><span class="built_in">print</span>(g)        <span class="comment"># &lt;generator object func at 0x1026c7660&gt;    # generator就是生成器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器就是迭代器</span></span><br><span class="line"><span class="comment"># g.__iter__()</span></span><br><span class="line"><span class="comment"># g.__next__()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器的__next__方法才会触发函数体代码的运行，然后遇到yield停下来，将yield后的值当作本次调用的结果返回</span></span><br><span class="line">res1 = g.__next__()</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出内容：</span></span><br><span class="line"><span class="string">第一次</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">res2 = g.__next__()</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出内容：</span></span><br><span class="line"><span class="string">第一次</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">第二次</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小知识补充</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aaa&#x27;</span>.__len__())</span><br><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;aaa&#x27;</span>)  <span class="comment"># 本质就是 &#x27;aaa&#x27;.__len__()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span>(g) <span class="comment"># 等同于 g.__next__()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iter(可迭代对象) # 可迭代对象.__iter__()</span></span><br></pre></td></tr></table></figure><h2 id="二，yield表达式应用"><a href="#二，yield表达式应用" class="headerlink" title="二，yield表达式应用"></a>二，yield表达式应用</h2><blockquote><p>在函数内可以采用表达式形式的yield</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x = yield 返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dog</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;狗哥%s准备吃东西啦...&#x27;</span> %name)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># x 拿到的是yield接收到的值</span></span><br><span class="line">        x = <span class="keyword">yield</span>  <span class="comment"># x = &#x27;一根骨头&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;狗哥%s吃了%s&#x27;</span> %(name,x))</span><br><span class="line"></span><br><span class="line">g=dog(<span class="string">&#x27;来福&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次传值必须为None，否则报错，可以理解为给生成器初始化</span></span><br><span class="line">g.send(<span class="literal">None</span>)    <span class="comment"># 等同于 next(g)</span></span><br><span class="line">g.send(<span class="string">&#x27;一根骨头&#x27;</span>)  <span class="comment"># send是给yield传值，赋值给x</span></span><br><span class="line">g.send(<span class="string">&#x27;肉包子&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果输出：</span></span><br><span class="line"><span class="string">狗哥来福准备吃东西啦...</span></span><br><span class="line"><span class="string">狗哥来福吃了一根骨头</span></span><br><span class="line"><span class="string">狗哥来福吃了肉包子</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">g.close() <span class="comment"># 关闭，关闭之后就不能在传值了。</span></span><br></pre></td></tr></table></figure><blockquote><p>表达式形式的yield也可以用于返回多次值，即<code>变量名=yield 值</code>的形式，如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yield返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dog</span>(<span class="params">name</span>):</span><br><span class="line">    food_list = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;狗哥%s准备吃东西啦...&#x27;</span> %name)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># x 拿到的是yield接收到的值</span></span><br><span class="line">        x = <span class="keyword">yield</span> food_list  <span class="comment"># x = &#x27;肉包子&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;狗哥%s吃了%s&#x27;</span> %(name,x))</span><br><span class="line">        food_list.append(x)     <span class="comment"># [&#x27;一根骨头&#x27;, &#x27;肉包子&#x27;]</span></span><br><span class="line"></span><br><span class="line">g=dog(<span class="string">&#x27;来福&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次传值必须为None，否则报错，可以理解为给生成器初始化</span></span><br><span class="line">res = g.send(<span class="literal">None</span>)    <span class="comment"># 等同于 next(g)</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">res = g.send(<span class="string">&#x27;一根骨头&#x27;</span>)  <span class="comment"># send是给yield传值，赋值给x，x被food_list.append添加到food_list列表中，然后返回值是这个列表</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">res = g.send(<span class="string">&#x27;肉包子&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="三，三元表达式、生成式"><a href="#三，三元表达式、生成式" class="headerlink" title="三，三元表达式、生成式"></a>三，三元表达式、生成式</h2><h3 id="3-1-三元表达式"><a href="#3-1-三元表达式" class="headerlink" title="3.1 三元表达式"></a>3.1 三元表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对以下需求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">res = func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三元表达式</span></span><br><span class="line"><span class="comment"># 语法格式： 条件成立时返回的值 if 条件 else 条件不成立时要返回的值</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">res = x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;张三&#x27;</span> <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> <span class="string">&#x27;哈哈哈&#x27;</span>      <span class="comment"># 返回的不一定是x 或者 y</span></span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># 哈哈哈</span></span><br></pre></td></tr></table></figure><h3 id="3-2-列表生成式"><a href="#3-2-列表生成式" class="headerlink" title="3.2 列表生成式"></a>3.2 列表生成式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、列表生成式</span></span><br><span class="line">l = [<span class="string">&#x27;zhangsan_dsb&#x27;</span>,<span class="string">&#x27;lisi_dsb&#x27;</span>,<span class="string">&#x27;wangwu_dsb&#x27;</span>,<span class="string">&#x27;zhouliu&#x27;</span>,<span class="string">&#x27;wangqi&#x27;</span>]</span><br><span class="line">new_l = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> name.endswith(<span class="string">&#x27;dsb&#x27;</span>):    <span class="comment"># 判断dsb结尾的字符串</span></span><br><span class="line">        new_l.append(name)</span><br><span class="line"><span class="built_in">print</span>(new_l)    <span class="comment"># [&#x27;zhangsan_dsb&#x27;, &#x27;lisi_dsb&#x27;, &#x27;wangwu_dsb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用列表生成式一行实现</span></span><br><span class="line">new_l = [name <span class="keyword">for</span> name <span class="keyword">in</span> l <span class="keyword">if</span> name.endswith(<span class="string">&#x27;dsb&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span>(new_l)    <span class="comment"># [&#x27;zhangsan_dsb&#x27;, &#x27;lisi_dsb&#x27;, &#x27;wangwu_dsb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不加for循环也可以，默认情况下就是 if True</span></span><br><span class="line">new_l = [name <span class="keyword">for</span> name <span class="keyword">in</span> l]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例：</span></span><br><span class="line"><span class="comment"># 把所有小写字母全变成大写</span></span><br><span class="line">new_l = [name.upper() <span class="keyword">for</span> name <span class="keyword">in</span> l]</span><br><span class="line"><span class="built_in">print</span>(new_l)    <span class="comment"># [&#x27;ZHANGSAN_DSB&#x27;, &#x27;LISI_DSB&#x27;, &#x27;WANGWU_DSB&#x27;, &#x27;ZHOULIU&#x27;, &#x27;WANGQI&#x27;]</span></span><br><span class="line"><span class="comment"># 把所有名字去掉后缀_dsb</span></span><br><span class="line">new_l = [name.replace(<span class="string">&#x27;_dsb&#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> name <span class="keyword">in</span> l]</span><br><span class="line"><span class="built_in">print</span>(new_l)    <span class="comment"># [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;, &#x27;wangwu&#x27;, &#x27;zhouliu&#x27;, &#x27;wangqi&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="3-3-字典生成式"><a href="#3-3-字典生成式" class="headerlink" title="3.3 字典生成式"></a>3.3 字典生成式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、字典生成式</span></span><br><span class="line">keys = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>]</span><br><span class="line">dic = &#123;i:<span class="literal">None</span> <span class="keyword">for</span> i <span class="keyword">in</span> keys&#125;</span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;zhangsan&#x27;: None, &#x27;lisi&#x27;: None, &#x27;wangwu&#x27;: None&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2</span></span><br><span class="line">items = &#123;(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>),(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>),(<span class="string">&#x27;gender&#x27;</span>,<span class="string">&#x27;male&#x27;</span>)&#125;</span><br><span class="line">res = &#123;k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> items <span class="keyword">if</span> k != <span class="string">&#x27;gender&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># &#123;&#x27;name&#x27;: &#x27;zhangsan&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-集合生成式"><a href="#3-4-集合生成式" class="headerlink" title="3.4 集合生成式"></a>3.4 集合生成式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、集合生成式</span></span><br><span class="line">l = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;zhouliu&#x27;</span>, <span class="string">&#x27;wangqi&#x27;</span>]</span><br><span class="line">set1 = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> l&#125;</span><br><span class="line"><span class="built_in">print</span>(set1,<span class="built_in">type</span>(set1))  <span class="comment"># &#123;&#x27;wangwu&#x27;, &#x27;zhangsan&#x27;, &#x27;wangqi&#x27;, &#x27;lisi&#x27;, &#x27;zhouliu&#x27;&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-生成器表达式"><a href="#3-5-生成器表达式" class="headerlink" title="3.5 生成器表达式"></a>3.5 生成器表达式</h3><blockquote><p>创建一个生成器对象有两种方式，一种是调用带yield关键字的函数，另一种就是生成器表达式，与列表生成式的语法格式相同，只需要将[]换成()，即：</p></blockquote><p><code>（expression for item in iterable if condition） </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4、生成器表达式</span></span><br><span class="line">g=(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 强调：此刻g内部一个值也没有，</span></span><br><span class="line"><span class="built_in">print</span>(g,<span class="built_in">type</span>(g))    <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x1096dae40&gt; &lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))  <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))  <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))  <span class="comment"># 7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))  <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计字符个数</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;day19笔记.md&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 方式一</span></span><br><span class="line">    <span class="comment"># res = 0</span></span><br><span class="line">    <span class="comment"># for line in f:</span></span><br><span class="line">    <span class="comment">#     res += len(line)</span></span><br><span class="line">    <span class="comment"># print(res)  # 416</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法二：缺陷，如果行数太多，也会造成压力</span></span><br><span class="line">    <span class="comment"># res1 = sum([len(line) for line in f])     # sum()函数方法是对序列进行求和计算</span></span><br><span class="line">    <span class="comment"># print(res1)   # 416</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法三</span></span><br><span class="line">    <span class="comment"># res2=sum((len(line) for line in f))    # 使用生成器表达式</span></span><br><span class="line">    <span class="comment"># print(res2)     # 416</span></span><br><span class="line">    <span class="comment"># 上述可以简写成如下形式</span></span><br><span class="line">    res2 = <span class="built_in">sum</span>(<span class="built_in">len</span>(line) <span class="keyword">for</span> line <span class="keyword">in</span> f)    <span class="comment"># 不加括号默认就是生成器表达式</span></span><br><span class="line">    <span class="built_in">print</span>(res2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器</title>
      <link href="/articles/2023/04/04/diedaiqi/"/>
      <url>/articles/2023/04/04/diedaiqi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="16、迭代器"><a href="#16、迭代器" class="headerlink" title="16、迭代器"></a>16、迭代器</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，迭代器介绍"><a href="#一，迭代器介绍" class="headerlink" title="一，迭代器介绍"></a>一，迭代器介绍</h2><blockquote><p>迭代器指的是迭代取值的工具，迭代是一个重复的过程，每次重复都是基于上一次结果而继续的，单纯的重复并不是迭代。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单纯的重复并不是迭代</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><blockquote><p>下述while循环才是一个迭代过程，不仅满足重复，而且以每次重新赋值后的count值作为下一次循环中新的索引进行取值，反复迭代，最终可以取尽条件满足的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="1-1-为何要有迭代器"><a href="#1-1-为何要有迭代器" class="headerlink" title="1.1 为何要有迭代器"></a>1.1 为何要有迭代器</h3><pre><code>迭代器是用来迭代取值的工具，而涉及到把多个值循环取出来的类型有：列表、字符串、元组、字典、集合、打开的文件</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(l):</span><br><span class="line">    <span class="built_in">print</span>(l[i])</span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><pre><code>上述迭代取值的方式只适用于有索引的数据类型：列表、字符串、元组为了解决基于索引迭代取值的局限性，python必须提供一种能够不依赖于索引的取值方式，这就是迭代器。</code></pre><h3 id="1-2-可迭代对象"><a href="#1-2-可迭代对象" class="headerlink" title="1.2 可迭代对象"></a>1.2 可迭代对象</h3><blockquote><p>但凡内置有__iter__方法的都称之为可迭代对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s1 =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># s1.__iter__()</span></span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line"><span class="comment"># l.__iter__()</span></span><br><span class="line"></span><br><span class="line">t = ()</span><br><span class="line"><span class="comment"># t.__iter__()</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># d.__iter__()</span></span><br><span class="line"></span><br><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># set1.__iter__()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment">#     f.__iter__()</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="1-3-迭代器对象"><a href="#1-3-迭代器对象" class="headerlink" title="1.3 迭代器对象"></a>1.3 迭代器对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用可迭代对象下的__iter__方法会将其转换成迭代器对象</span></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d_iterator = d.__iter__()</span><br><span class="line"><span class="built_in">print</span>(d_iterator)      <span class="comment"># &lt;dict_keyiterator object at 0x102761c20&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d_iterator.__next__())    <span class="comment"># a</span></span><br><span class="line"><span class="built_in">print</span>(d_iterator.__next__())    <span class="comment"># b</span></span><br><span class="line"><span class="comment"># print(d_iterator.__next__())    # 抛出异常：StopIteration   没有值可以取了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用while循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:        <span class="comment"># 捕获异常，后面会学到</span></span><br><span class="line">        <span class="built_in">print</span>(d_iterator.__next__())</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代对象与迭代器详解</span></span><br><span class="line"><span class="comment"># 可迭代对象（&quot;可以转换成迭代器的对象&quot;）：内置有__iter__方法的对象</span></span><br><span class="line"><span class="comment">#       可迭代对象.__iter__(): 得到迭代器对象</span></span><br><span class="line"><span class="comment"># 迭代器对象：内置有__next__方法并且内置有__iter__方法的对象</span></span><br><span class="line"><span class="comment">#       迭代器对象.__next__(): 得到迭代器的下一个值</span></span><br><span class="line"><span class="comment">#       迭代器对象.__iter__(): 得到迭代器本身，说白了调了跟没调一个样</span></span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">dic_iterator=dic.__iter__()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dic_iterator <span class="keyword">is</span> dic_iterator.__iter__())      <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="二，for循环原理"><a href="#二，for循环原理" class="headerlink" title="二，for循环原理"></a>二，for循环原理</h2><pre><code>for循环可以称为迭代器循环</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d_iterator = d.__iter__()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:        <span class="comment"># 捕获异常，后面会学到</span></span><br><span class="line">        <span class="built_in">print</span>(d_iterator.__next__())</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环</span></span><br><span class="line"><span class="comment"># 1、d.__iter__()得到一个迭代器对象</span></span><br><span class="line"><span class="comment"># 2、迭代器对象.__next__()拿到一个返回值，然后将该返回值赋值给k</span></span><br><span class="line"><span class="comment"># 3、循环往复步骤2，直到抛出StopIteration异常for循环会捕捉异常然后结束循环</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三，迭代器的优缺点"><a href="#三，迭代器的优缺点" class="headerlink" title="三，迭代器的优缺点"></a>三，迭代器的优缺点</h2><h3 id="3-1-优点"><a href="#3-1-优点" class="headerlink" title="3.1 优点"></a>3.1 优点</h3><blockquote><p>1、为序列和非序列类型提供了一种统一的迭代取值方式。</p></blockquote><blockquote><p>2、惰性计算：迭代器对象表示的是一个数据流，可以只在需要时才去调用next来计算出一个值，就迭代器本身来说，同一时刻在内存中只有一个值，因而可以存放无限大的数据流，而对于其他容器类型，如列表，需要把所有的元素都存放于内存中，受内存大小的限制，可以存放的值的个数是有限的。</p></blockquote><h3 id="3-2-缺点"><a href="#3-2-缺点" class="headerlink" title="3.2 缺点"></a>3.2 缺点</h3><blockquote><p>1、除非取尽，否则无法获取迭代器的长度</p></blockquote><blockquote><p>2、只能取下一个值，不能回到开始，更像是‘一次性的’，迭代器产生后的唯一目标就是重复执行next方法直到值取尽，否则就会停留在某个位置，等待下一次调用next；若是要再次迭代同个对象，你只能重新调用iter方法去创建一个新的迭代器对象，如果有两个或者多个循环使用同一个迭代器，必然只会有一个循环能取到值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器</title>
      <link href="/articles/2023/04/03/zhuangshiqi/"/>
      <url>/articles/2023/04/03/zhuangshiqi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="15、装饰器"><a href="#15、装饰器" class="headerlink" title="15、装饰器"></a>15、装饰器</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，装饰器储备知识"><a href="#一，装饰器储备知识" class="headerlink" title="一，装饰器储备知识"></a>一，装饰器储备知识</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、储备知识</span></span><br><span class="line"><span class="comment"># 1、*args、**kwargs</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;&#x27;</span>,x,y)      <span class="comment"># ====&gt; 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    index(*args,**kwargs)      <span class="comment"># wrapper函数是在给index函数传值</span></span><br><span class="line"></span><br><span class="line">wrapper(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、名称空间与作用域：名称空间的&quot;嵌套&quot;关系是在函数定义阶段，即检测语法的时候来确定的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、函数对象：</span></span><br><span class="line"><span class="comment">#    可以把函数当作参数传入</span></span><br><span class="line"><span class="comment">#    可以把函数当做返回值返回</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line">foo(index1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、函数的嵌套定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():   <span class="comment"># f1函数可以传参，也可以传入一个函数，例：f1(func)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、闭包函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out</span>():</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nei</span>():</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">return</span> nei</span><br><span class="line">out_one = out()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传参方式一：通过参数的形式为函数体传值</span></span><br><span class="line"><span class="comment"># 传参方式二：通过闭包的方式为函数体传值</span></span><br></pre></td></tr></table></figure><h2 id="二，装饰器介绍"><a href="#二，装饰器介绍" class="headerlink" title="二，装饰器介绍"></a>二，装饰器介绍</h2><h3 id="2-1-为何要用装饰器"><a href="#2-1-为何要用装饰器" class="headerlink" title="2.1 为何要用装饰器"></a>2.1 为何要用装饰器</h3><blockquote><ul><li>软件的设计应该遵循开放封闭原则，即对扩展是开放的，而对修改是封闭的。对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着对象一旦设计完成，就可以独立完成其工作，而不要对其进行修改。</li></ul></blockquote><ul><li><p>软件包含的所有功能的源代码以及调用方式，都应该避免修改，否则一旦改错，则极有可能产生连锁反应，最终导致程序崩溃，而对于上线后的软件，新需求或者变化又层出不穷，我们必须为程序提供扩展的可能性，这就用到了装饰器。</p><p>  开放封闭原则<br>  开放：指的是对拓展功能是开放的<br>  封闭：指的是对修改源代码是封闭的</p></li></ul><h3 id="2-2-什么是装饰器"><a href="#2-2-什么是装饰器" class="headerlink" title="2.2 什么是装饰器"></a>2.2 什么是装饰器</h3><blockquote><ul><li>“装饰”代指为被装饰对象添加新的功能，”器”代指器具&#x2F;工具，装饰器与被装饰的对象均可以是任意可调用对象。概括地讲，装饰器的作用就是在不修改被装饰对象源代码和调用方式的前提下为被装饰对象添加额外的功能。装饰器经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等应用场景，装饰器是解决这类问题的绝佳设计，有了装饰器，就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</li></ul></blockquote><ul><li><p>提示：可调用对象有函数，方法或者类，此处我们单以本章主题函数为例，来介绍函数装饰器，并且被装饰的对象也是函数。</p><p>  器指的是工具，可以定义成函数<br>  装饰指的是为其他事物添加额外的东西点缀</p><p>  合到一起的解释：<br>  装饰器指的是定义一个函数，该函数是用来为其他函数添加额外的功能</p></li></ul><h2 id="三，装饰器的实现"><a href="#三，装饰器的实现" class="headerlink" title="三，装饰器的实现"></a>三，装饰器的实现</h2><blockquote><p>函数装饰器分为：无参装饰器和有参装饰两种，二者的实现原理一样，都是’函数嵌套+闭包+函数对象’的组合使用的产物。</p></blockquote><h3 id="3-1-无参装饰器的实现"><a href="#3-1-无参装饰器的实现" class="headerlink" title="3.1 无参装饰器的实现"></a>3.1 无参装饰器的实现</h3><blockquote><p><strong>需求：在不修改index函数的源代码以及调用方式的前提下为其添加统计运行时间的功能</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x,y))</span><br><span class="line">index(<span class="number">111</span>,<span class="number">222</span>)</span><br><span class="line"><span class="comment"># index(y=222,x=111)</span></span><br><span class="line"><span class="comment"># index(111,y=222)</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>解决方案一：失败</strong></p></blockquote><pre><code>问题：没有修改被装饰对象的调用方式，但是修改了源代码</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x,y))</span><br><span class="line">    stop = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;运行时间为：&#x27;</span>,stop - start)</span><br><span class="line">index(<span class="number">111</span>,<span class="number">222</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>解决方案二：失败</strong></p></blockquote><pre><code>问题：没有修改被装饰对象的调用方式，也没有修改源代码，增加了新功能，但是代码冗余</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x,y))</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">index(<span class="number">111</span>,<span class="number">222</span>)</span><br><span class="line">stop = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;运行时间为：&#x27;</span>,stop - start)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">index(<span class="number">111</span>,<span class="number">222</span>)</span><br><span class="line">stop = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;运行时间为：&#x27;</span>,stop - start)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">index(<span class="number">111</span>,<span class="number">222</span>)</span><br><span class="line">stop = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;运行时间为：&#x27;</span>,stop - start)</span><br></pre></td></tr></table></figure><p><strong>解决方案三：失败</strong></p><pre><code>问题：解决了方案二的代码冗余问题，但带来一个新问题，即改变了函数的调用方式</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x,y))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">    start = time.time()</span><br><span class="line">    index(<span class="number">111</span>,<span class="number">222</span>)</span><br><span class="line">    stop = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;运行时间为：&#x27;</span>, stop - start)</span><br><span class="line"></span><br><span class="line">wrapper()</span><br></pre></td></tr></table></figure><p><strong>方案三的优化（一）：将index的参数写活了</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x,y))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    start = time.time()</span><br><span class="line">    index(*args,**kwargs)</span><br><span class="line">    stop = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;运行时间为：&#x27;</span>, stop - start)</span><br><span class="line"></span><br><span class="line">wrapper(<span class="number">111</span>,<span class="number">222</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：只是将index的参数写活了，但是index还是写死的</span></span><br></pre></td></tr></table></figure><p><strong>方案三的优化（二）：在优化一的基础上把被装饰对象写活了，原来只能装饰index</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x,y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># func = index的内存地址</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args,**kwargs)    <span class="comment"># index的内存地址</span></span><br><span class="line">        stop = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;运行时间为：&#x27;</span>, stop - start)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index = outter(index)   <span class="comment"># index = outter(index的内存地址)</span></span><br><span class="line"><span class="comment"># 现在的index = 当初那个wrapper函数的内存地址</span></span><br><span class="line">index(x=<span class="number">3</span>,y=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>方案三的优化（三）：将wrapper做的跟被装饰对象一摸一样，以假乱真</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x,y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;welcome &#123;&#125; to home page&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># func = index的内存地址</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args,**kwargs)    <span class="comment"># index的内存地址</span></span><br><span class="line">        stop = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;运行时间为：&#x27;</span>, stop - start)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index = outter(index)   <span class="comment"># index = outter(index的内存地址)</span></span><br><span class="line"><span class="comment"># 现在的index = 当初那个wrapper函数的内存地址</span></span><br><span class="line">index(x=<span class="number">3</span>,y=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">home = outter(home)     <span class="comment"># index = outter(heme的内存地址)</span></span><br><span class="line"><span class="comment"># 现在的home = 当初那个wrapper函数的内存地址</span></span><br><span class="line">res = home(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><pre><code>大方向：在方案三的基础上不改变函数调用方式</code></pre><h3 id="3-2-语法糖"><a href="#3-2-语法糖" class="headerlink" title="3.2 语法糖"></a>3.2 语法糖</h3><pre><code>让你开心的语法 （糖衣语法）</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># func = index的内存地址</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args,**kwargs)    <span class="comment"># index的内存地址</span></span><br><span class="line">        stop = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;运行时间为：&#x27;</span>, stop - start)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在被装饰对象正上方的单独一行写@装饰器的名字</span></span><br><span class="line"><span class="meta">@outter     </span><span class="comment"># 等同于 index = outter(index)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x,y))</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;welcome &#123;&#125; to home page&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">index(x=<span class="number">3</span>,y=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>思考题：叠加多个装饰器的加载顺序与运行顺序。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@deco1  # index=deco1(deco2.wrapper的内存地址)</span></span><br><span class="line"><span class="string">@deco2  # deco2.wrapper的内存地址=deco2(deco3.wrapper的内存地址)</span></span><br><span class="line"><span class="string">@deco3  # deco3.wrapper的内存地址=deco3(index)</span></span><br><span class="line"><span class="string">def index():</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-总结无参装饰器模版"><a href="#3-3-总结无参装饰器模版" class="headerlink" title="3.3 总结无参装饰器模版"></a>3.3 总结无参装饰器模版</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="comment"># 1、调用原函数</span></span><br><span class="line">        <span class="comment"># 2、为其增加新功能</span></span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h3 id="3-4-的含义"><a href="#3-4-的含义" class="headerlink" title="3.4 @的含义"></a>3.4 @的含义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@print  </span><span class="comment"># @的含义：home = print(home)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># @名字 等于 下方函数名字=名字（下方函数名字），上面为示例</span></span><br></pre></td></tr></table></figure><h3 id="3-5-装饰器补充之wraps"><a href="#3-5-装饰器补充之wraps" class="headerlink" title="3.5 装饰器补充之wraps"></a>3.5 装饰器补充之wraps</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)      </span><span class="comment"># 作用就是把下面手动要实现的原函数属性赋给了wrapper</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        res = func(*args, **kwargs)     <span class="comment"># res = index(1,2)</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment"># 将原函数的属性赋值给wrapper函数</span></span><br><span class="line">    <span class="comment"># 手动：（弊端是如果有100个要写一百行）</span></span><br><span class="line">    <span class="comment"># wrapper.__name__ = func.__name__</span></span><br><span class="line">    <span class="comment"># wrapper.__doc__ = func.__doc__</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;这个是主页功能&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">index(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偷梁换柱：即 将原函数名指向的内存地址偷梁换柱wrapper函数</span></span><br><span class="line"><span class="comment"># 所以：应该将wrapper做的和原函数一样</span></span><br></pre></td></tr></table></figure><h3 id="3-6-有参装饰器"><a href="#3-6-有参装饰器" class="headerlink" title="3.6 有参装饰器"></a>3.6 有参装饰器</h3><p>》 了解无参装饰器的实现原理后，我们可以再实现一个用来为被装饰对象添加认证功能的装饰器，实现的基本形式如下</p><h4 id="3-6-1-前提-知识储备"><a href="#3-6-1-前提-知识储备" class="headerlink" title="3.6.1 前提-知识储备"></a>3.6.1 前提-知识储备</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、知识储备</span></span><br><span class="line"><span class="comment"># 由于语法糖@的限制，outter函数只能有一个参数，并且该参数只是用来接收被装饰对象的内存地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># @outter  # index=outter(index) # index =&gt; wrapper</span></span><br><span class="line"><span class="meta">@outter </span><span class="comment"># outter(index)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偷梁换柱之后</span></span><br><span class="line"><span class="comment"># index的参数是什么样子，wrapper的参数就应该什么样子</span></span><br><span class="line"><span class="comment"># index的返回值是什么样子，wrapper的返回值就应该什么样子</span></span><br><span class="line"><span class="comment"># index的属性是什么样子，wrapper的属性就应该什么样子  ==&gt; from functools import wraps</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-6-2-有参装饰器实现"><a href="#3-6-2-有参装饰器实现" class="headerlink" title="3.6.2 有参装饰器实现"></a>3.6.2 有参装饰器实现</h4><blockquote><p>核心就是在无参装饰器的基础之上，在外面再包一层函数，也就是一共包三层，最外层的函数传参，不会收到语法糖的限制。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有参装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">db_type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            name = <span class="built_in">input</span>(<span class="string">&#x27;your name=&gt;：&#x27;</span>).strip()</span><br><span class="line">            password = <span class="built_in">input</span>(<span class="string">&#x27;your password=&gt;：&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> db_type == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;基于文件的验证&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> name == <span class="string">&#x27;zhangsan&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">                    res = func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;user or password error&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> db_type == <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;基于mysql的验证&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> db_type == <span class="string">&#x27;ldap&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;基于ldap的验证&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;不支持该db_tpye&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> deco</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(<span class="params">db_type=<span class="string">&#x27;file&#x27;</span></span>)   </span><span class="comment"># @deco # index=deco(index) # index=wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index --&gt; %s:%s&#x27;</span> %(x,y))</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(<span class="params">db_type=<span class="string">&#x27;mysql&#x27;</span></span>)  </span><span class="comment"># @deco # home=deco(home) # home=wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;home --&gt; %s&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(<span class="params">db_type=<span class="string">&#x27;ldap&#x27;</span></span>)   </span><span class="comment"># 账号密码的来源是ldap</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfar</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;transfar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">home(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line">transfar()</span><br></pre></td></tr></table></figure><h3 id="3-7-有参装饰器模版总结"><a href="#3-7-有参装饰器模版总结" class="headerlink" title="3.7 有参装饰器模版总结"></a>3.7 有参装饰器模版总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总结有参装饰器模版</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">有参装饰器</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@有参装饰器(<span class="params"><span class="number">1</span>,<span class="number">2</span>,z=<span class="number">3</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">被装饰对象</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数对象和闭包</title>
      <link href="/articles/2023/03/30/hanshuduixianghebibao/"/>
      <url>/articles/2023/03/30/hanshuduixianghebibao/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="14、函数对象和闭包"><a href="#14、函数对象和闭包" class="headerlink" title="14、函数对象和闭包"></a>14、函数对象和闭包</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，函数对象"><a href="#一，函数对象" class="headerlink" title="一，函数对象"></a>一，函数对象</h2><blockquote><p>函数对象指的是函数可以被当做’数据’来处理，具体可以分为四个方面的使用，我们如下</p></blockquote><h3 id="1-1-函数可以被引用"><a href="#1-1-函数可以被引用" class="headerlink" title="1.1 函数可以被引用"></a>1.1 函数可以被引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 精髓：可以把函数对象当成变量去用</span></span><br><span class="line"><span class="comment"># func = 内存地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from func&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、可以赋值</span></span><br><span class="line">f = func</span><br><span class="line"><span class="built_in">print</span>(f,func)       <span class="comment"># &lt;function func at 0x106692d30&gt; &lt;function func at 0x106692d30&gt;</span></span><br><span class="line">f() <span class="comment"># from func</span></span><br></pre></td></tr></table></figure><h3 id="1-2-可以当作函数的参数传入"><a href="#1-2-可以当作函数的参数传入" class="headerlink" title="1.2 可以当作函数的参数传入"></a>1.2 可以当作函数的参数传入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x</span>):     <span class="comment"># x = func的内存地址</span></span><br><span class="line">    <span class="built_in">print</span>(x)    <span class="comment"># &lt;function func at 0x10e4bad30&gt;</span></span><br><span class="line">    x()     <span class="comment"># from func</span></span><br><span class="line"></span><br><span class="line">foo(func)       <span class="comment"># foo(func的内存地址)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-可以把函数当作另一个函数的返回值"><a href="#1-3-可以把函数当作另一个函数的返回值" class="headerlink" title="1.3 可以把函数当作另一个函数的返回值"></a>1.3 可以把函数当作另一个函数的返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">res = foo1(func)</span><br><span class="line"><span class="comment"># foo1(func())      # func()加了括号就代表把func的运行结果的返回值给了foo1，而不加括号等于把这个函数的内存地址给了foo1</span></span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># &lt;function func at 0x1067dbd30&gt;</span></span><br><span class="line">res()       <span class="comment"># from func</span></span><br></pre></td></tr></table></figure><h3 id="1-4-可以当作容器类型的一个元素"><a href="#1-4-可以当作容器类型的一个元素" class="headerlink" title="1.4 可以当作容器类型的一个元素"></a>1.4 可以当作容器类型的一个元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在列表中：</span></span><br><span class="line">l=[func,]</span><br><span class="line"><span class="comment"># 说明：如何取到func，按照列表的取法 l[0]就是取到了func的内存地址，加了括号就是调用l[0]()</span></span><br><span class="line">lis = l[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(lis)  <span class="comment"># &lt;function func at 0x10bebbdc0&gt;</span></span><br><span class="line">l[<span class="number">0</span>]()  <span class="comment"># from func</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在字典中</span></span><br><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>:func,&#125;</span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;k1&#x27;: &lt;function func at 0x10a1b6d30&gt;&#125;</span></span><br><span class="line">dic[<span class="string">&#x27;k1&#x27;</span>]() <span class="comment"># from func     # 调用就是加()</span></span><br></pre></td></tr></table></figure><h3 id="1-5-函数对象案例应用：ATM提款机程序优化"><a href="#1-5-函数对象案例应用：ATM提款机程序优化" class="headerlink" title="1.5 函数对象案例应用：ATM提款机程序优化"></a>1.5 函数对象案例应用：ATM提款机程序优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录功能&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;转账功能&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_banlance</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;查询余额&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">withdraw</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;提现功能&#x27;</span>)</span><br><span class="line"></span><br><span class="line">atm_dic = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>:[<span class="string">&#x27;退出&#x27;</span>,<span class="literal">None</span>],</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:[<span class="string">&#x27;登录&#x27;</span>,login],</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:[<span class="string">&#x27;转账&#x27;</span>,transfer],</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>:[<span class="string">&#x27;查询&#x27;</span>,check_banlance],</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>:[<span class="string">&#x27;提现&#x27;</span>,withdraw]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> atm_dic.keys():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">5</span>,i,atm_dic[i][<span class="number">0</span>],<span class="string">&#x27;=&#x27;</span>*<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    regs = <span class="built_in">input</span>(<span class="string">&#x27;请输出功能编号：&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> regs.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;只能输入编号&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> regs == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> regs <span class="keyword">in</span> atm_dic:</span><br><span class="line">        atm_dic[regs][<span class="number">1</span>]()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;功能编号不存在&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="二，函数看套"><a href="#二，函数看套" class="headerlink" title="二，函数看套"></a>二，函数看套</h2><h3 id="2-1-在调用一个函数的过程中又调用其他函数"><a href="#2-1-在调用一个函数的过程中又调用其他函数" class="headerlink" title="2.1 在调用一个函数的过程中又调用其他函数"></a>2.1 在调用一个函数的过程中又调用其他函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、函数的嵌套调用：在调用一个函数的过程中又调用其他函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max2</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max4</span>(<span class="params">a,b,c,d</span>):</span><br><span class="line">    <span class="comment"># 第一步：比较a，b得到res1</span></span><br><span class="line">    res1 = max2(a,b)</span><br><span class="line">    <span class="comment"># 第二步：比较res1，c得到res2</span></span><br><span class="line">    res2 = max2(res1,c)</span><br><span class="line">    <span class="comment"># 第三步：比较res2，d得到res3</span></span><br><span class="line">    res3 = max2(res2,d)</span><br><span class="line">    <span class="keyword">return</span> res3</span><br><span class="line"></span><br><span class="line">res = max4(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h3 id="2-2-在函数内定义其他函数"><a href="#2-2-在函数内定义其他函数" class="headerlink" title="2.2 在函数内定义其他函数"></a>2.2 在函数内定义其他函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 2、函数的嵌套定义：在函数内定义其他函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 圆形案例：</span></span><br><span class="line"><span class="comment"># 求圆形的周长：2*pi*radius</span></span><br><span class="line"><span class="comment"># 求圆形的面积：pi*(radius**2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">circle</span>(<span class="params">radius,action=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimiter</span>(<span class="params">radius</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*pi*radius</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">radius</span>):</span><br><span class="line">        <span class="keyword">return</span> pi*(radius**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> action == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> perimiter(radius)</span><br><span class="line">    <span class="keyword">elif</span>  action == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> area(radius)</span><br><span class="line"></span><br><span class="line">rea1 = circle(<span class="number">33</span>,action=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(rea1)</span><br></pre></td></tr></table></figure><h2 id="三，闭包函数"><a href="#三，闭包函数" class="headerlink" title="三，闭包函数"></a>三，闭包函数</h2><blockquote><p>大前提：<br>闭包函数&#x3D;名称空间与作用域+函数嵌套+函数对象<br>核心点：名字的查找关系是以函数定义阶段为准</p></blockquote><h3 id="3-1-什么是闭包函数"><a href="#3-1-什么是闭包函数" class="headerlink" title="3.1 什么是闭包函数"></a>3.1 什么是闭包函数</h3><pre><code>&quot;闭&quot;函数指的是该函数是内嵌函数&quot;包&quot;函数指的是该函数包含对外层函数作用域名字的引用（不是全局作用域）</code></pre><p><strong>案例：闭包函数：名称空间与作用域+函数嵌套</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    x = <span class="number">11111</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    f2()</span><br><span class="line">x = <span class="number">22222</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    x = <span class="number">44444</span></span><br><span class="line">    f1()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    x = <span class="number">55555</span></span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line">foo()       <span class="comment"># 11111</span></span><br></pre></td></tr></table></figure><p><strong>案例：闭包函数：函数对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    x = <span class="number">3333333333</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f4</span>():</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">return</span> f4</span><br><span class="line">f=f3()</span><br><span class="line"><span class="built_in">print</span>(f)    <span class="comment"># &lt;function f3.&lt;locals&gt;.f4 at 0x108c17e50&gt;</span></span><br><span class="line">f()     <span class="comment"># 3333333333</span></span><br></pre></td></tr></table></figure><h3 id="3-2-为何要有闭包函数-–-闭包函数的应用"><a href="#3-2-为何要有闭包函数-–-闭包函数的应用" class="headerlink" title="3.2 为何要有闭包函数 –&gt; 闭包函数的应用"></a>3.2 为何要有闭包函数 –&gt; 闭包函数的应用</h3><blockquote><p>两种为函数体传参的方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：直接把函数体需要的参数定义成形参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">func(<span class="number">1</span>)</span><br><span class="line">func(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：利用上面函数对象的方式</span></span><br></pre></td></tr></table></figure><h3 id="3-3-闭包函数的应用"><a href="#3-3-闭包函数的应用" class="headerlink" title="3.3 闭包函数的应用"></a>3.3 闭包函数的应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 1、传参的方案一：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">url</span>):</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">get(<span class="string">&#x27;https://blog.csdn.net&#x27;</span>)</span><br><span class="line">get(<span class="string">&#x27;https://www.zhihu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、传参的方案二：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">url</span>):    <span class="comment"># 在这里添加形参</span></span><br><span class="line">    <span class="comment"># url = &#x27;https://www.baidu.com&#x27;     # 这里写死了，所以注释</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get1</span>():</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">    <span class="keyword">return</span> get1</span><br><span class="line"></span><br><span class="line">baidu = outter(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">baidu()</span><br><span class="line">CSDN = outter(<span class="string">&#x27;https://blog.csdn.net&#x27;</span>)</span><br><span class="line">CSDN()</span><br><span class="line">zhihu = outter(<span class="string">&#x27;https://www.zhihu.com&#x27;</span>)</span><br><span class="line">zhihu()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名称空间与作用域</title>
      <link href="/articles/2023/03/29/mingchengkongjianyuzuoyongyu/"/>
      <url>/articles/2023/03/29/mingchengkongjianyuzuoyongyu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="13、名称空间与作用域"><a href="#13、名称空间与作用域" class="headerlink" title="13、名称空间与作用域"></a>13、名称空间与作用域</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，名称空间"><a href="#一，名称空间" class="headerlink" title="一，名称空间"></a>一，名称空间</h2><blockquote><ul><li>名称空间即存放名字与对象映射&#x2F;绑定关系的地方。对于x&#x3D;3，Python会申请内存空间存放对象3，然后将名字x与3的绑定关系存放于名称空间中，del x表示清除该绑定关系。</li></ul></blockquote><ul><li>在程序执行期间最多会存在三种名称空间</li></ul><h3 id="1-1-内建名称空间"><a href="#1-1-内建名称空间" class="headerlink" title="1.1 内建名称空间"></a>1.1 内建名称空间</h3><blockquote><p>伴随python解释器的启动&#x2F;关闭而产生&#x2F;回收，因而是第一个被加载的名称空间，用来存放一些内置的名字，比如内建函数名</p></blockquote><pre><code>存放python解释器内置的名字</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">print</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">input</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">input</span>&gt;</span><br><span class="line"></span><br><span class="line">存活周期：python解释器启动则产生，python解释器关闭则销毁</span><br></pre></td></tr></table></figure><h3 id="1-2-全局名称空间"><a href="#1-2-全局名称空间" class="headerlink" title="1.2 全局名称空间"></a>1.2 全局名称空间</h3><blockquote><p>只要不是函数内定义、也不是内置的都是全局名称空间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存活周期：python文件执行产生，python文件运行完毕销毁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os、x、func、Foo都是全局名称空间</span></span><br></pre></td></tr></table></figure><h3 id="1-3-局部名称空间"><a href="#1-3-局部名称空间" class="headerlink" title="1.3 局部名称空间"></a>1.3 局部名称空间</h3><blockquote><p>在调用函数时，运行函数体代码过程中产生的函数内的名字</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存活周期：在调用函数是存活，函数低哦啊用完毕后则销毁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中func1是全局名称空间，函数内的x、y是局部名称空间。同一个函数多次调用，调用一次产生一次局部名称空间，调四次产生四次。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-名称空间的加载顺序"><a href="#1-4-名称空间的加载顺序" class="headerlink" title="1.4 名称空间的加载顺序"></a>1.4 名称空间的加载顺序</h3><blockquote><p>内置名称空间 -&gt; 全局名称空间 -&gt; 局部名称空间</p></blockquote><h3 id="1-5-销毁顺序"><a href="#1-5-销毁顺序" class="headerlink" title="1.5 销毁顺序"></a>1.5 销毁顺序</h3><blockquote><p>局部名称空间 -&gt; 全局名称空间 -&gt; 内置名称空间</p></blockquote><h3 id="1-6-名字的查找优先级"><a href="#1-6-名字的查找优先级" class="headerlink" title="1.6 名字的查找优先级"></a>1.6 名字的查找优先级</h3><pre><code>当前所在的位置向上一层一层查找</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">内置名称空间</span></span><br><span class="line"><span class="string">全局名称空间</span></span><br><span class="line"><span class="string">局部名称空间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 如果当前在局部名称空间：</span></span><br><span class="line"><span class="string">局部名称空间 -&gt; 全局名称空间 -&gt; 内置名称空间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 如果当前在全局名称空间：</span></span><br><span class="line"><span class="string">全局名称空间 -&gt; 内置名称空间</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示范1：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funca</span>():</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">x = <span class="number">111</span></span><br><span class="line">funca()     <span class="comment"># 111</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示范2：名称空间的&quot;嵌套&quot;关系是以函数定义节点为准，与调用位置无关</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funca1</span>():</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line">    funca1()</span><br><span class="line">foo()   <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示范3：函数嵌套定义</span></span><br><span class="line"><span class="built_in">input</span> = <span class="number">111</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">input</span> = <span class="number">222</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="built_in">input</span>=<span class="number">333</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()    <span class="comment"># 333</span></span><br><span class="line"><span class="comment"># 说明：结果为333，注释f2函数内input变量，结果为222，在注释f1内input变量，结果为111，如果都注释，结果为&lt;built-in function input&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示范4：</span></span><br><span class="line">b = <span class="number">111</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b1</span>():</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    b = <span class="number">222</span></span><br><span class="line">b1()    <span class="comment"># 报错，UnboundLocalError: local variable &#x27;b&#x27; referenced before assignment</span></span><br><span class="line"><span class="comment"># 分析说明：因为print输出b的值，是在定义阶段查找，定义阶段在b1函数内定义了b的值，所以在局部名称空间找到了，就不会再去全局名称空间去找，但是写在了print输出的下面，所以报错。</span></span><br></pre></td></tr></table></figure><h2 id="二，作用域"><a href="#二，作用域" class="headerlink" title="二，作用域"></a>二，作用域</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作用域 -&gt; 作用范围</span></span><br><span class="line"><span class="comment"># 全局作用域：内置名称空间、全局名称空间</span></span><br><span class="line"><span class="comment"># 1、全局存活</span></span><br><span class="line"><span class="comment"># 2、全局有效：被所有函数共享（不同函数且没有相互调用时，不同函数之间相互独立）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部作用域：局部名称空间的名字</span></span><br><span class="line"><span class="comment"># 1、临时存活</span></span><br><span class="line"><span class="comment"># 2、局部有效：函数内有效</span></span><br></pre></td></tr></table></figure><h3 id="2-1-global与nonlocal"><a href="#2-1-global与nonlocal" class="headerlink" title="2.1 global与nonlocal"></a>2.1 global与nonlocal</h3><p><strong>global</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示范1：</span></span><br><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(x)    <span class="comment"># 111</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示范2：如果在局部想要修改全局的名字对应的值（不可变类型），需要用到global</span></span><br><span class="line">x = <span class="number">111</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">global</span> x  <span class="comment"># 声明x为全局名称空间的名字</span></span><br><span class="line">    x = <span class="number">222</span></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(x)    <span class="comment"># 222</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示范3：</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="number">222</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    l.append(<span class="number">333</span>)</span><br><span class="line">func1()</span><br><span class="line"><span class="built_in">print</span>(l)    <span class="comment"># [111, 222, 333]</span></span><br></pre></td></tr></table></figure><p><strong>nonlocal（了解）</strong></p><pre><code>修改函数外层函数包含的名字对应的值（不可变类型）</code></pre><blockquote><p>对于嵌套多层的函数，使用nonlocal关键字可以将名字声明为来自外部嵌套函数定义的作用域（非全局）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示范：</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    x=<span class="number">11</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = <span class="number">22</span></span><br><span class="line">    f2()    <span class="comment"># 调用f2(),修改f1作用域中名字x的值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1内的x&#x27;</span>,x)    <span class="comment"># f1内的x 22</span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># nonlocal x会从当前函数的外层函数开始一层层去查找名字x，若是一直到最外层函数都找不到，则会抛出异常。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的参数</title>
      <link href="/articles/2023/03/27/hanshudecanshu/"/>
      <url>/articles/2023/03/27/hanshudecanshu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="12、函数的参数"><a href="#12、函数的参数" class="headerlink" title="12、函数的参数"></a>12、函数的参数</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，形参与实参介绍"><a href="#一，形参与实参介绍" class="headerlink" title="一，形参与实参介绍"></a>一，形参与实参介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数的参数分为形式参数和实际参数，简称形参和实参：</span></span><br><span class="line"><span class="comment">#形参：再定义函数阶段定义的参数称之为形式参数，简称形参，相当于变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"><span class="comment">#实参：在调用函数阶段传入的值称之为实际参数，简称实参</span></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 形参与实参的关系：</span></span><br><span class="line"><span class="comment"># 1、在调用阶段，实参（变量值）的值会绑定给形参（变量名）</span></span><br><span class="line"><span class="comment"># 2、这种绑定关系只能在函数体内使用</span></span><br><span class="line"><span class="comment"># 3、实参与形参的绑定关系在函数调用时生效，函数调用结束后解除绑定关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实参是传入的值，但值可以是以下形式</span></span><br><span class="line"><span class="comment"># 形式一：</span></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 形式二：</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line">func(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 形式三：</span></span><br><span class="line">func(<span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>),<span class="number">2</span>)</span><br><span class="line"><span class="comment"># func(func1(1,2,),func2(2,3),333)</span></span><br></pre></td></tr></table></figure><h2 id="二，形参与实参的具体使用"><a href="#二，形参与实参的具体使用" class="headerlink" title="二，形参与实参的具体使用"></a>二，形参与实参的具体使用</h2><h3 id="2-1-位置参数"><a href="#2-1-位置参数" class="headerlink" title="2.1 位置参数"></a>2.1 位置参数</h3><pre><code>按照从左到右的顺序依次定义的参数称之为位置参数</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置形参：按照从左到右的顺序直接定义的&quot;变量名&quot;</span></span><br><span class="line"><span class="comment"># 特点：必须被传值，多一个不行，少一个也不行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置实参：按照从左到右的顺序依次传入的值</span></span><br><span class="line">func1(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-关键字参数"><a href="#2-2-关键字参数" class="headerlink" title="2.2 关键字参数"></a>2.2 关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关键字实参：在函数调用阶段，按照key=value的形式传入的值</span></span><br><span class="line"><span class="comment"># 特点：指名道姓给某个形参传值，可以完全不参照顺序。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">func2(y=<span class="number">2</span>,x=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 混合使用，强调</span></span><br><span class="line"><span class="comment"># 1、位置实参必须放在关键字实参前</span></span><br><span class="line">func2(<span class="number">5</span>,y=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># func2(y=1,2)  # 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、不能为同一个形参重复传值</span></span><br><span class="line"><span class="comment"># func2(5,x=3)    # 报错</span></span><br><span class="line"><span class="comment"># func2(1,2,x=3,y=4)    # 报错，原理同上</span></span><br></pre></td></tr></table></figure><h3 id="2-3-默认参数"><a href="#2-3-默认参数" class="headerlink" title="2.3 默认参数"></a>2.3 默认参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认形参：再定义函数阶段，就已经被赋值的形参，称之为默认参数/默认形参</span></span><br><span class="line"><span class="comment"># 特点：再定义阶段就已经被赋值，意味着在调用节点可以不用为其赋值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">x,y=<span class="number">3</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">func3(<span class="number">1</span>)        <span class="comment"># 1 3</span></span><br><span class="line">func3(x=<span class="number">1</span>,y=<span class="number">444</span>)    <span class="comment"># 1 444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置形参与默认形参混用，强调</span></span><br><span class="line"><span class="comment"># 1、位置形参必须在默认形参的左边</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x,y=<span class="number">2</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def test1(y=2,x):     # 报错</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、默认参数的值是在函数定义阶段被赋值的，准确的说被赋予的是值的内存地址</span></span><br><span class="line"><span class="comment"># 示范1：</span></span><br><span class="line">m = <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func4</span>(<span class="params">x,y=m</span>):   <span class="comment"># y =&gt; 2的内存地址</span></span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line">m = <span class="number">333333</span></span><br><span class="line">func4(<span class="number">1</span>)        <span class="comment"># 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示范2：</span></span><br><span class="line">n = [<span class="number">1111</span>,]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func5</span>(<span class="params">x,y=n</span>):   <span class="comment"># y =&gt; [1111,]的内存地址</span></span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">n.append(<span class="string">&#x27;22222&#x27;</span>)</span><br><span class="line">func5(<span class="number">1</span>)        <span class="comment"># 1 [1111, &#x27;22222&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、虽然默认值可以被指定为任意数据类型，但是不推荐使用可变类型</span></span><br><span class="line"><span class="comment"># 函数的规范：函数的调用只跟函数本身有关系，不被外界代码所影响</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func6</span>(<span class="params">x,y,z,l=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> l == <span class="literal">None</span>:</span><br><span class="line">        l = []</span><br><span class="line">    l.append(x)</span><br><span class="line">    l.append(y)</span><br><span class="line">    l.append(z)</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line">func6(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)    <span class="comment"># [1, 2, 3]</span></span><br><span class="line">func6(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)    <span class="comment"># [4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">new_l = [<span class="number">111</span>,<span class="number">222</span>]</span><br><span class="line">func6(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,new_l)      <span class="comment"># [111, 222, 1, 2, 3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-可变长度的参数（-与-的用法）"><a href="#2-4-可变长度的参数（-与-的用法）" class="headerlink" title="2.4 可变长度的参数（*与**的用法）"></a>2.4 可变长度的参数（*与**的用法）</h3><pre><code>说明：可变长度指的是在调用函数时，传入的值（实参）的个数不固定而实参是用来为形参赋值的，所以对应着，针对溢出的实参必须有对应的形参来接收</code></pre><h4 id="2-4-1-可变长度的位置参数"><a href="#2-4-1-可变长度的位置参数" class="headerlink" title="2.4.1 可变长度的位置参数"></a>2.4.1 可变长度的位置参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># I：形参格式（*形参名）：用来接收溢出的位置实参，溢出的位置实参会被*保存成元组的格式，然后赋值给紧跟其后的形参名。</span></span><br><span class="line"><span class="comment"># *后跟的可以是任意名字，但是约定俗成应该是args</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funca</span>(<span class="params">x,y,*z</span>):      <span class="comment"># z = (3, 4, 5, 6)</span></span><br><span class="line">    <span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line">funca(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)      <span class="comment"># 1 2 (3, 4, 5, 6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小案例：传值累加求和，不限制传值数量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sum</span>(<span class="params">*args</span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">res = my_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># 21</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># II：*可以用在实参中，实参中带*，先将*后的值打散成位置实参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcb</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line">funcb(*[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>])      <span class="comment"># 11 22 33</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">funcb(*l)       <span class="comment"># 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># III：形参与实参中都带*</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcc</span>(<span class="params">x,y,*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y,args)</span><br><span class="line"></span><br><span class="line">funcc(<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])        <span class="comment"># 1 2 ([3, 4, 5, 6],)</span></span><br><span class="line">funcc(<span class="number">1</span>,<span class="number">2</span>,*[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])       <span class="comment"># 1 2 (3,4,5,6)         # 等同于funcc(1,2,3,4,5,6)</span></span><br><span class="line">funcc(*<span class="string">&#x27;hello&#x27;</span>)     <span class="comment"># h e (&#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-4-2-可变长度的关键字参数"><a href="#2-4-2-可变长度的关键字参数" class="headerlink" title="2.4.2 可变长度的关键字参数"></a>2.4.2 可变长度的关键字参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># I：形参格式（**形参名）：用来接收溢出的关键字实参，**会将溢出的关键字实参保存成字典格式，然后赋值给紧跟其后的形参名。</span></span><br><span class="line"><span class="comment"># **后跟的可以是任意名字，但是约定俗成应该是kwargs</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funca1</span>(<span class="params">x,y,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y,kwargs)</span><br><span class="line"></span><br><span class="line">funca1(<span class="number">1</span>,y=<span class="number">2</span>,a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)   <span class="comment"># 1 2 &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># II：**可以用在实参中（**后跟的只能是字典），实参中带**，先将**后的值打散成关键字实参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funca2</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数量要和形参对应，否则报错</span></span><br><span class="line">funca2(*&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">1</span>&#125;)    <span class="comment"># x y z      # 等同于funca2(&#x27;x&#x27;,&#x27;y&#x27;,&#x27;z&#x27;)</span></span><br><span class="line">funca2(**&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">1</span>&#125;)   <span class="comment"># 1 2 1      # 等同于funca2(x=1,y=2,z=1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># III：形参与实参中都带**</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funca3</span>(<span class="params">x,y,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(x,y,kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># funca3(y=222,x=111,a=333,b=444)</span></span><br><span class="line">funca3(**&#123;<span class="string">&#x27;y&#x27;</span>:<span class="number">222</span>,<span class="string">&#x27;x&#x27;</span>:<span class="number">111</span>,<span class="string">&#x27;a&#x27;</span>:<span class="number">333</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">444</span>&#125;)     <span class="comment"># 111 222 &#123;&#x27;a&#x27;: 333, &#x27;b&#x27;: 444&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 混用*与**</span></span><br><span class="line"><span class="comment"># *args必须在**kwargs之前</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aaa</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">aaa(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,x=<span class="number">1</span>,y=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">(1, 2, 3, 4, 5, 6, 7, 8)</span></span><br><span class="line"><span class="string">&#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2, &#x27;c&#x27;: 3&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;&#x27;</span>,x,y)      <span class="comment"># ====&gt; 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">a,b</span>):</span><br><span class="line">    index(a,b)      <span class="comment"># wrapper函数是在给index函数传值</span></span><br><span class="line"></span><br><span class="line">wrapper(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="2-5-命名关键字参数"><a href="#2-5-命名关键字参数" class="headerlink" title="2.5 命名关键字参数"></a>2.5 命名关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再定义函数时，*后定义的参数，如下所示，称之为命名关键字参数</span></span><br><span class="line"><span class="comment"># 特点：</span></span><br><span class="line"><span class="comment"># 01、命名关键字实参必须按照key=value的形式为其传值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y,*,a,b</span>):    <span class="comment"># 其中，a和b称之为命名关键字参数</span></span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,a=<span class="number">3</span>,b=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y,*,a=<span class="number">111</span>,b</span>):    <span class="comment"># 解析：给a这个命名关键字参数赋了个值，所以无报错，并不是默认形参。</span></span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,b=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="2-6-组合使用"><a href="#2-6-组合使用" class="headerlink" title="2.6 组合使用"></a>2.6 组合使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置形参，默认形参，*args，命名关键字形参，**kwargs（不按这个顺序，会语法错误）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x,y=<span class="number">111</span>,*args,z,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实参混用顺序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">x,y,z,a,b,c</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func2(1,y=2,*[333,444],**&#123;&#x27;b&#x27;:555,&#x27;c&#x27;:666&#125;)   # 报错，打散之后 y=2关键字实参在位置实参333，444的前面</span></span><br><span class="line">func2(<span class="number">1</span>,*[<span class="number">333</span>,<span class="number">444</span>],a=<span class="number">2</span>,**&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">555</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">666</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的基本使用</title>
      <link href="/articles/2023/03/27/hanshu/"/>
      <url>/articles/2023/03/27/hanshu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="11、函数的基本使用"><a href="#11、函数的基本使用" class="headerlink" title="11、函数的基本使用"></a>11、函数的基本使用</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，定义函数"><a href="#一，定义函数" class="headerlink" title="一，定义函数"></a>一，定义函数</h2><blockquote><p>函数的使用必须遵循’先定义，后调用’的原则。函数的定义就相当于事先将函数体代码保存起来，然后将内存地址赋值给函数名，函数名就是对这段代码的引用，这和变量的定义是相似的。没有事先定义函数而直接调用，就相当于在引用一个不存在的’变量名’。</p></blockquote><p><strong>定义函数的语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数发生的事情：</span></span><br><span class="line"><span class="comment"># 1、申请内存空间保存函数体代码</span></span><br><span class="line"><span class="comment"># 2、将上述内存地址绑定给函数名</span></span><br><span class="line"><span class="comment"># 3、定义函数不会执行函数体代码，但是会检测函数体语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数发生的事情</span></span><br><span class="line"><span class="comment"># 1、通过函数名找到函数的内存地址</span></span><br><span class="line"><span class="comment"># 2、然后加括号就是在触发函数题代码的执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,...</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;文档描述&quot;&quot;&quot;</span></span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># def: 定义函数的关键字；</span></span><br><span class="line"><span class="comment"># 函数名：函数名指向函数内存地址，是对函数体代码的引用。函数的命名应该反映出函数的功能；</span></span><br><span class="line"><span class="comment"># 括号：括号内定义参数，参数是可有可无的，且无需指定参数的类型；</span></span><br><span class="line"><span class="comment"># 冒号：括号后要加冒号，然后在下一行开始缩进编写函数体的代码；</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;文档描述&quot;&quot;&quot;: 描述函数功能，参数介绍等信息的文档，非必要，但是建议加上，从而增强函数的可读性；</span></span><br><span class="line"><span class="comment"># 函数体：由语句和表达式组成；</span></span><br><span class="line"><span class="comment"># return 值：定义函数的返回值，return是可有可无的。</span></span><br></pre></td></tr></table></figure><pre><code>参数是函数的调用者向函数体传值的媒介，若函数体代码逻辑依赖外部传来的参数时则需要定义为参函数，</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funn</span>(<span class="params">x,y</span>):  <span class="comment"># x=1 y=2</span></span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">funn(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>否则定义为无参函数</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hahahaha&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>函数体为pass代表什么都不做，称之为空函数。定义空函数通常是有用的，因为在程序设计的开始，往往是先想好程序都需要完成什么功能，然后把所有功能都列举出来用pass充当函数体“占位符”，这将使得程序的体系结构立见，清晰且可读性强。例如要编写一个ftp程序，我们可能想到的功能有用户认证，下载，上传，浏览，切换目录等功能，可以先做出如下定义：</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">auth_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;user authentication function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;download file function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;upload file function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ls</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;list contents function&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cd</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;change directory&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>之后我们便可以统筹安排编程任务，有选择性的去实现上述功能来替换掉pass，从而提高开发效率。</p></blockquote><h2 id="二，调用函数与函数返回值"><a href="#二，调用函数与函数返回值" class="headerlink" title="二，调用函数与函数返回值"></a>二，调用函数与函数返回值</h2><h3 id="2-1-调用函数"><a href="#2-1-调用函数" class="headerlink" title="2.1 调用函数"></a>2.1 调用函数</h3><blockquote><p>函数的使用分为定义阶段与调用阶段，定义函数时只检测语法，不执行函数体代码，函数名加括号即函数调用，只有调用函数时才会执行函数体代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义阶段</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(bar)      <span class="comment"># &lt;function bar at 0x10738bdc0&gt;</span></span><br><span class="line">    bar()       <span class="comment"># from bar</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from foo&#x27;</span>)   <span class="comment"># from foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用阶段</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&lt;function bar at <span class="number">0x10ac2ce50</span>&gt;</span><br><span class="line"><span class="keyword">from</span> bar</span><br><span class="line"><span class="keyword">from</span> foo</span><br></pre></td></tr></table></figure><blockquote><p>定义阶段函数foo与bar均无语法错误，而在调用阶段调用foo()时，函数foo与bar都早已经存在于内存中了，所以不会有任何问题。</p></blockquote><p><strong>按照在程序出现的形式和位置，可将函数的调用形式分为三种</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、语句的形式：只加括号调用函数</span></span><br><span class="line">foo()</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、表达式形式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):   <span class="comment"># 参数 =》 原材料</span></span><br><span class="line">    <span class="comment"># x = 20</span></span><br><span class="line">    <span class="comment"># y = 30</span></span><br><span class="line">    res = x+y</span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="keyword">return</span> res  <span class="comment"># 返回值 =》 产品</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值表达式</span></span><br><span class="line">res = add(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数学表达式</span></span><br><span class="line">res = add(<span class="number">1</span>,<span class="number">2</span>)*<span class="number">10</span>  <span class="comment"># 先执行函数得出结果3 再乘10  最终结果30</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、函数调用可以当作参数</span></span><br><span class="line">res = add(add(<span class="number">1</span>,<span class="number">2</span>),<span class="number">10</span>)  <span class="comment"># 等同于add(3,10)</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="2-2-函数返回值"><a href="#2-2-函数返回值" class="headerlink" title="2.2 函数返回值"></a>2.2 函数返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># return是函数体代码结束的标志，即函数体代码一旦运行到return会立刻终止函数的运行，并且会将return后的值当作本次运行的结果返回:</span></span><br><span class="line"><span class="comment"># 1、返回None：函数体内没有return</span></span><br><span class="line"><span class="comment">#             return</span></span><br><span class="line"><span class="comment">#             return None</span></span><br><span class="line"><span class="comment"># 2、返回一个值：return 值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fu1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">re = fu1()</span><br><span class="line"><span class="built_in">print</span>(re)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、返回多个值：用逗号分隔开多值，会被return返回成元组</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fu2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>,<span class="string">&#x27;aa&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">re1 = fu2()</span><br><span class="line"><span class="built_in">print</span>(re1,<span class="built_in">type</span>(re1))      <span class="comment"># (10, &#x27;aa&#x27;, [1, 2]) &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>return是一个函数结束的标志,函数内可以有多个return，但只执行一次函数就结束了，并把return后定义的值作为本次调用的结果返回。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件处理</title>
      <link href="/articles/2023/03/21/wenjianchuli/"/>
      <url>/articles/2023/03/21/wenjianchuli/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="10、文件处理"><a href="#10、文件处理" class="headerlink" title="10、文件处理"></a>10、文件处理</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引入"><a href="#一，引入" class="headerlink" title="一，引入"></a>一，引入</h2><blockquote><p>应用程序运行过程中产生的数据最先都是存放于内存中的，若想永久保存下来，必须要保存于硬盘中。应用程序若想操作硬件必须通过操作系统，而文件就是操作系统提供给应用程序来操作硬盘的虚拟概念，用户或应用程序对文件的操作，就是向操作系统发起调用，然后由操作系统完成对硬盘的具体操作.</p></blockquote><h2 id="二，文件操作的基本流程"><a href="#二，文件操作的基本流程" class="headerlink" title="二，文件操作的基本流程"></a>二，文件操作的基本流程</h2><h3 id="2-1-基本流程"><a href="#2-1-基本流程" class="headerlink" title="2.1 基本流程"></a>2.1 基本流程</h3><p><strong>有了文件的概念，我们无需再去考虑操作硬盘的细节，只需要关注操作文件的流程：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件，由应用程序向操作系统发起系统调用open(...)，操作系统打开该文件，对应一块硬盘空间，并返回一个文件对象赋值给一个变量f</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#默认打开模式就为r</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 调用文件对象下的读/写方法，会被操作系统转换为读/写硬盘的操作</span></span><br><span class="line">data=f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 向操作系统发起关闭文件的请求，回收系统资源</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/21/wenjianchuli/1.png"></p><h3 id="2-2-资源回收与with上下文管理"><a href="#2-2-资源回收与with上下文管理" class="headerlink" title="2.2 资源回收与with上下文管理"></a>2.2 资源回收与with上下文管理</h3><blockquote><p>打开一个文件包含两部分资源：应用程序的变量f和操作系统打开的文件。在操作完毕一个文件时，必须把与该文件的这两部分资源全部回收，回收方法为：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、f.close() <span class="comment">#回收操作系统打开的文件资源</span></span><br><span class="line"><span class="number">2</span>、<span class="keyword">del</span> f <span class="comment">#回收应用程序级的变量</span></span><br></pre></td></tr></table></figure><blockquote><p>其中del f一定要发生在f.close()之后，否则就会导致操作系统打开的文件无法关闭，白白占用资源， 而python自动的垃圾回收机制决定了我们无需考虑del f，这就要求我们，在操作完毕文件后，一定要记住f.close()，虽然我们如此强调，但是大多数读者还是会不由自主地忘记f.close()，考虑到这一点，python提供了with关键字来帮我们管理上下文</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、在执行完子代码块后，with 会自动执行f.close()</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> f1:     <span class="comment"># f1=open(&#x27;a.txt&#x27;,mode=&#x27;rt&#x27;)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、可用用with同时打开多个文件，用逗号分隔开即可</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> f1,<span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    res1 = f1.read()</span><br><span class="line">    res2 = f2.read()</span><br><span class="line">    <span class="built_in">print</span>(res1)</span><br><span class="line">    <span class="built_in">print</span>(res2)</span><br></pre></td></tr></table></figure><h3 id="2-3-指定操作文本文件的字符编码"><a href="#2-3-指定操作文本文件的字符编码" class="headerlink" title="2.3 指定操作文本文件的字符编码"></a>2.3 指定操作文本文件的字符编码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">强调：t和b不能单独使用，必须跟r/w/a连用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    t（文本模式）</span></span><br><span class="line"><span class="string">        1、读写都是以str（unicode）位单位的</span></span><br><span class="line"><span class="string">        2、文本文件</span></span><br><span class="line"><span class="string">        3、必须指定encoding=&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 没有指定encoding参数，操作系统会使用自己默认的编码</span></span><br><span class="line"><span class="comment"># linux/mac系统默认utf-8</span></span><br><span class="line"><span class="comment"># windows系统默认gbk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = f.read()  <span class="comment"># t模式会将f.read()读出的结果解码成unicode</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(res))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存：utf-8格式的二进制 ------ 解码 ------&gt; unicode</span></span><br><span class="line"><span class="comment"># 硬盘（c.txt内容：utf-8格式的二进制）</span></span><br></pre></td></tr></table></figure><h2 id="三，文件的操作模式"><a href="#三，文件的操作模式" class="headerlink" title="三，文件的操作模式"></a>三，文件的操作模式</h2><h3 id="3-1-控制文件读写操作的模式"><a href="#3-1-控制文件读写操作的模式" class="headerlink" title="3.1 控制文件读写操作的模式"></a>3.1 控制文件读写操作的模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r（默认的）：只读模式</span><br><span class="line">w：只写模式</span><br><span class="line">a：只追加写模式</span><br></pre></td></tr></table></figure><h4 id="3-1-1-案例一：r-模式的使用"><a href="#3-1-1-案例一：r-模式的使用" class="headerlink" title="3.1.1 案例一：r 模式的使用"></a>3.1.1 案例一：r 模式的使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以t模式为基础进行内存操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、r（默认的操作模式）：只读模式，当文件不存在时会报错，当文件存在时，文件指针跳到开始位置</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第一次读&#x27;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line">    res = f.read()  <span class="comment"># 把所有内容从硬盘读入内存</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第二次读&#x27;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line">    res1 = f.read()</span><br><span class="line">    <span class="built_in">print</span>(res1)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">***********************第一次读***********************</span><br><span class="line">哈哈哈哈</span><br><span class="line">***********************第二次读***********************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：第二次读内容是空的，因为文件指针在文件结尾，除非重新<span class="built_in">open</span>文件，使文件指针跳到文件开始，才可以继续读出内容</span><br></pre></td></tr></table></figure><p><strong>案例应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此时user.txt内容：</span></span><br><span class="line">zhangsan:<span class="number">123</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">inp_username = <span class="built_in">input</span>(<span class="string">&#x27;your name: &#x27;</span>).strip()</span><br><span class="line">inp_password = <span class="built_in">input</span>(<span class="string">&#x27;your password: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;user.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> ff:</span><br><span class="line">    ress = ff.read()</span><br><span class="line">    username,password = ress.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(ress,<span class="built_in">type</span>(ress))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  inp_username == username <span class="keyword">and</span> inp_password == password:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;login seccessfull&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;username or password error&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>优化：多个账号密码的情况</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此时user.txt内容：</span></span><br><span class="line">zhangsan:<span class="number">123</span></span><br><span class="line">lisi:<span class="number">456</span></span><br><span class="line">wangwu:<span class="number">789</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">inp_username = <span class="built_in">input</span>(<span class="string">&#x27;your name: &#x27;</span>).strip()</span><br><span class="line">inp_password = <span class="built_in">input</span>(<span class="string">&#x27;your password: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;user.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> ff:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> ff:</span><br><span class="line">        <span class="comment"># 把用户输入的名字与密码与读出内容做比对</span></span><br><span class="line">        username,password=line.strip().split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> inp_username == username <span class="keyword">and</span> inp_password == password:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;login seccessfull&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;username or password error&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-1-2-案例二：w-模式的使用"><a href="#3-1-2-案例二：w-模式的使用" class="headerlink" title="3.1.2 案例二：w 模式的使用"></a>3.1.2 案例二：w 模式的使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">w：只写模式，当文件不存在时会创建空文件，当文件存在时会清空文件，指针位于开始位置。</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;d.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fw:</span><br><span class="line">        <span class="comment"># f.read()  # 报错，不可读</span></span><br><span class="line">        fw.write(<span class="string">&#x27;哈哈哈我擦嘞&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">强调1：在以w模式打开文件没有关闭的情况下，连续的写，后写的内容一定跟在前写内容的后面</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;d1.txt&#x27;</span>, mode=<span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fw1:</span><br><span class="line">    fw1.write(<span class="string">&#x27;哈哈哈我擦嘞\n&#x27;</span>)</span><br><span class="line">    fw1.write(<span class="string">&#x27;哈哈哈我擦嘞\n&#x27;</span>)</span><br><span class="line">    fw1.write(<span class="string">&#x27;哈哈哈我擦嘞\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># d1.txt文件内容：</span></span><br><span class="line">哈哈哈我擦嘞</span><br><span class="line">哈哈哈我擦嘞</span><br><span class="line">哈哈哈我擦嘞</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">强调2：如果重新以w模式打开文件，则会清空文件内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;d2.txt&#x27;</span>, mode=<span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fw2:</span><br><span class="line">    fw2.write(<span class="string">&#x27;哈哈哈我擦嘞\n&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;d2.txt&#x27;</span>, mode=<span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fw2:</span><br><span class="line">    fw2.write(<span class="string">&#x27;哈哈哈我擦嘞\n&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;d2.txt&#x27;</span>, mode=<span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fw2:</span><br><span class="line">    fw2.write(<span class="string">&#x27;哈哈哈我擦嘞\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># d2.txt文件内容：</span></span><br><span class="line">哈哈哈我擦嘞</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># w模式用来创建全新的文件</span></span><br><span class="line"><span class="comment"># 案例：文件的copy工具</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;e.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1, \</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;f.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f2 :</span><br><span class="line">    res = f1.read()</span><br><span class="line">    f2.write(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化：</span></span><br><span class="line">src_file = <span class="built_in">input</span>(<span class="string">&#x27;源文件的绝对路径：&#x27;</span>).strip()</span><br><span class="line">dst_file = <span class="built_in">input</span>(<span class="string">&#x27;目标存放绝对路径：&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(src_file),mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1, \</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">r&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(dst_file),mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f2 :</span><br><span class="line"><span class="comment">#    res = f1.read()    # 数据量大会导致内存压力很大，甚至内存溢出</span></span><br><span class="line"><span class="comment">#    f2.write(res)</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">        f2.write(line)</span><br></pre></td></tr></table></figure><h4 id="3-1-3-案例三：a-模式的使用"><a href="#3-1-3-案例三：a-模式的使用" class="headerlink" title="3.1.3 案例三：a 模式的使用"></a>3.1.3 案例三：a 模式的使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">a：只追加写，当文件不存在时，会创建空文档，在文件存在时，文件指针会直接跳到末尾。</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;e.txt&#x27;</span>,mode=<span class="string">&#x27;at&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fa:</span><br><span class="line">    <span class="comment"># fa.read()     # 报错，不能读</span></span><br><span class="line">    fa.write(<span class="string">&#x27;aaaaa\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># e.txt文件内容：</span></span><br><span class="line">aaaaa</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;e.txt&#x27;</span>,mode=<span class="string">&#x27;at&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fa:</span><br><span class="line">    fa.write(<span class="string">&#x27;bbbbbb\n&#x27;</span>)</span><br><span class="line">    fa.write(<span class="string">&#x27;cccccc\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># e.txt文件内容：</span></span><br><span class="line">aaaaa</span><br><span class="line">aaaaa   <span class="comment"># 为什么两行aaaaa，因为上面代码也运行了 也会追加写一行</span></span><br><span class="line">bbbbbb</span><br><span class="line">cccccc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#强调 w 模式与 a 模式的异同：</span></span><br><span class="line"><span class="comment"># 1 相同点：在打开的文件不关闭的情况下，连续的写入，新写的内容总会跟在前写的内容之后</span></span><br><span class="line"><span class="comment"># 2 不同点：以 a 模式重新打开文件，不会清空原文件内容，会将文件指针直接移动到文件末尾，新写的内容永远写在最后</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># a模式用来在原有的文件内容基础之上写入新的内容，比如记录日志，比如注册</span></span><br><span class="line"><span class="comment"># 案例：注册功能</span></span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;your name: &#x27;</span>)</span><br><span class="line">pwd = <span class="built_in">input</span>(<span class="string">&#x27;your pwd: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;at&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fa1:</span><br><span class="line">    fa1.write(<span class="string">&#x27;&#123;&#125;:&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(name,pwd))</span><br></pre></td></tr></table></figure><h4 id="3-1-4-案例四：-模式的使用-了解"><a href="#3-1-4-案例四：-模式的使用-了解" class="headerlink" title="3.1.4 案例四：+ 模式的使用(了解)"></a>3.1.4 案例四：+ 模式的使用(了解)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># r+ w+ a+ :可读可写</span></span><br><span class="line"><span class="comment">#在平时工作中，我们只单纯使用r/w/a，要么只读，要么只写，一般不用可读可写的模式</span></span><br></pre></td></tr></table></figure><h3 id="3-2-控制文件读写内容的模式"><a href="#3-2-控制文件读写内容的模式" class="headerlink" title="3.2 控制文件读写内容的模式"></a>3.2 控制文件读写内容的模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x：x模式（控制文件操作的模式）  --&gt; 了解</span><br><span class="line">   <span class="number">1.</span> x，只写模式【不可读；不存在则创建，存在则报错】</span><br><span class="line">   </span><br><span class="line"><span class="comment"># with open(&#x27;a.txt&#x27;,mode=&#x27;x&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     pass</span></span><br></pre></td></tr></table></figure><h4 id="3-2-1-案例一：t-模式的使用"><a href="#3-2-1-案例一：t-模式的使用" class="headerlink" title="3.2.1 案例一：t 模式的使用"></a>3.2.1 案例一：t 模式的使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># t 模式：如果我们指定的文件打开模式为r/w/a，其实默认就是rt/wt/at</span></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     res=f.read() </span><br><span class="line">     <span class="built_in">print</span>(<span class="built_in">type</span>(res)) <span class="comment"># 输出结果为：&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     s=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line">     f.write(s) <span class="comment"># 写入的也必须是字符串类型</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#强调：t 模式只能用于操作文本文件,无论读写，都应该以字符串为单位，而存取硬盘本质都是二进制的形式，当指定 t 模式时，内部帮我们做了编码与解码</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-案例二：-b-模式的使用"><a href="#3-2-2-案例二：-b-模式的使用" class="headerlink" title="3.2.2 案例二： b 模式的使用"></a>3.2.2 案例二： b 模式的使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">大前提: tb模式均不能单独使用,必须与r/w/a之一结合使用</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">控制文件读写内容的模式：</span></span><br><span class="line"><span class="string">t：</span></span><br><span class="line"><span class="string">    1、读写都是以字符串为单位</span></span><br><span class="line"><span class="string">    2、只能针对文本文件</span></span><br><span class="line"><span class="string">    3、必须指定字符编码，即必须指定encoding参数</span></span><br><span class="line"><span class="string">b：binary模式</span></span><br><span class="line"><span class="string">    1、读写都是以bytes为单位</span></span><br><span class="line"><span class="string">    2、可以针对所有文件</span></span><br><span class="line"><span class="string">    3、一定不能指定字符编码，即一定不能指定encoding参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">总结：</span></span><br><span class="line"><span class="string">1、在操作纯文本文件方面t模式帮我们省去了编码与解码的环节，b模式则需要手动编码与解码，所以此时t模式更为方便</span></span><br><span class="line"><span class="string">2、针对非文本文件（如图片、视频、音频等）只能使用b模式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误演示：t模式只能读文本文件</span></span><br><span class="line"><span class="comment"># with open(r&#x27;tupian.png&#x27;,mode=&#x27;rt&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.read()    # 硬盘的二进制读入内存 -&gt; t模式会将读入内存的内容进行decode解码操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;tupian.png&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = f.read()    <span class="comment"># 硬盘的二进制读入内存 -&gt; b模式下不做任何转换，直接读入内存</span></span><br><span class="line">    <span class="built_in">print</span>(res)  <span class="comment"># bytes类型 -&gt; 当成二进制</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(res))</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">## 文件拷贝工具</span></span><br><span class="line"></span><br><span class="line">src_file = <span class="built_in">input</span>(<span class="string">&#x27;源文件的绝对路径：&#x27;</span>).strip()</span><br><span class="line">dst_file = <span class="built_in">input</span>(<span class="string">&#x27;目标存放绝对路径：&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(src_file),mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f1, \</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">r&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(dst_file),mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f2 :</span><br><span class="line">    <span class="comment"># res = f1.read()   # 内存压力很大，甚至内存溢出</span></span><br><span class="line">    <span class="comment"># f2.write(res)</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">        f2.write(line)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">### 循环读取文件</span></span><br><span class="line"><span class="comment"># 方式一：自己控制每次读取的数据量</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;tupian.png&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = f.read(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span>  <span class="built_in">len</span>(res) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：以行为单位读，当一行内容过长时会导致一次性读入内存的数据量过大</span></span><br><span class="line"><span class="comment"># for循环</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;tupian.png&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><h2 id="四，操作文件的方法"><a href="#四，操作文件的方法" class="headerlink" title="四，操作文件的方法"></a>四，操作文件的方法</h2><h3 id="4-1-重点"><a href="#4-1-重点" class="headerlink" title="4.1 重点"></a>4.1 重点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读操作</span></span><br><span class="line">f.read()  <span class="comment"># 读取所有内容,执行完该操作后，文件指针会移动到文件末尾</span></span><br><span class="line">f.readline()  <span class="comment"># 读取一行内容,光标移动到第二行首部</span></span><br><span class="line">f.readlines()  <span class="comment"># 读取每一行内容,存放于列表中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f.readline():</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;g.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res1 = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(res1)     <span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f.readlines():</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;g.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res1 = f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(res1)     <span class="comment"># [&#x27;123\n&#x27;, &#x27;456\n&#x27;, &#x27;6798\n&#x27;, &#x27;hahah\n&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调：</span></span><br><span class="line"><span class="comment"># f.read()与f.readlines()都是将内容一次性读入内容，如果内容过大会导致内存溢出，若还想将内容全读入内存，则必须分多次读入，使用上面的循环读入</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 写操作</span></span><br><span class="line">f.write(<span class="string">&#x27;1111\n222\n&#x27;</span>)  <span class="comment"># 针对文本模式的写,需要自己写换行符</span></span><br><span class="line">f.write(<span class="string">&#x27;1111\n222\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 针对b模式的写,需要自己写换行符</span></span><br><span class="line">f.writelines([<span class="string">&#x27;333\n&#x27;</span>,<span class="string">&#x27;444\n&#x27;</span>])  <span class="comment"># 文件模式</span></span><br><span class="line">f.writelines([<span class="built_in">bytes</span>(<span class="string">&#x27;333\n&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>),<span class="string">&#x27;444\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)]) <span class="comment">#b模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f.writelines()</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;h.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;1111\n222\n3333\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入列表</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;h.txt&#x27;</span>, mode=<span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = [<span class="string">&#x27;111111\n&#x27;</span>,<span class="string">&#x27;2222&#x27;</span>,<span class="string">&#x27;3333&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> l:</span><br><span class="line">        f.write(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化：</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;h.txt&#x27;</span>, mode=<span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = [<span class="string">&#x27;111111\n&#x27;</span>, <span class="string">&#x27;2222&#x27;</span>, <span class="string">&#x27;3333&#x27;</span>]</span><br><span class="line">    f.writelines(l)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写b模式</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;h.txt&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = [</span><br><span class="line">        <span class="string">&#x27;111111\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;2222&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;3333&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">    f.writelines(l)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------</span></span><br><span class="line"><span class="comment"># 纯英文字符情况下简写：</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;h.txt&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = [</span><br><span class="line">        <span class="string">b&#x27;111111\n&#x27;</span>,</span><br><span class="line">        <span class="string">b&#x27;2222&#x27;</span>,</span><br><span class="line">        <span class="string">b&#x27;3333&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    f.writelines(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充：&#x27;上&#x27;.encode(&#x27;utf-8&#x27;) 等同于 bytes(&#x27;上&#x27;,encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;h.txt&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = [</span><br><span class="line">        <span class="built_in">bytes</span>(<span class="string">&#x27;上&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">        <span class="built_in">bytes</span>(<span class="string">&#x27;冲&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">        <span class="built_in">bytes</span>(<span class="string">&#x27;呀&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">    f.writelines(l)</span><br></pre></td></tr></table></figure><h3 id="4-2-了解"><a href="#4-2-了解" class="headerlink" title="4.2 了解"></a>4.2 了解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f.readable()  <span class="comment"># 文件是否可读</span></span><br><span class="line">f.writable()  <span class="comment"># 文件是否可读</span></span><br><span class="line">f.closed  <span class="comment"># 文件是否关闭</span></span><br><span class="line">f.encoding  <span class="comment"># 如果文件打开模式为b,则没有该属性</span></span><br><span class="line">f.flush()  <span class="comment"># 立刻将文件内容从内存刷到硬盘</span></span><br><span class="line">f.name</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 3、flush</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;h.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">    f.flush()   <span class="comment"># 立刻将文件内容从内存刷到硬盘</span></span><br></pre></td></tr></table></figure><h2 id="五，主动控制文件内指针移动"><a href="#五，主动控制文件内指针移动" class="headerlink" title="五，主动控制文件内指针移动"></a>五，主动控制文件内指针移动</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">指针移动的单位都是以bytes/字节为单位</span></span><br><span class="line"><span class="string">只有一种情况特殊：</span></span><br><span class="line"><span class="string">    t模式下的read(n)，n代表的是字符个数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;aaa.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = f.read(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)      <span class="comment"># abc你</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 之前文件内指针的移动都是由读/写操作而被动触发的，若想读取文件某一特定位置的数据，则则需要用f.seek方法主动控制文件内指针的移动，详细用法如下：</span></span><br><span class="line"><span class="string"># f.seek(指针移动的字节数,模式控制): </span></span><br><span class="line"><span class="string"># 模式控制:</span></span><br><span class="line"><span class="string"># 0: 默认的模式,该模式代表指针移动的字节数是以文件开头为参照的</span></span><br><span class="line"><span class="string"># 1: 该模式代表指针移动的字节数是以当前所在的位置为参照的</span></span><br><span class="line"><span class="string"># 2: 该模式代表指针移动的字节数是以文件末尾的位置为参照的</span></span><br><span class="line"><span class="string"># 强调:其中0模式可以在t或者b模式使用,而1跟2模式只能在b模式下用</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调：只有0模式可以在t下使用，1、2必须在b模式下使用</span></span><br><span class="line"><span class="comment"># 0：参照物是文件开头位置</span></span><br><span class="line">f.seek(<span class="number">9</span>,<span class="number">0</span>)</span><br><span class="line">f.seek(<span class="number">3</span>,<span class="number">0</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1：参照物是当前指针所在位置</span></span><br><span class="line">f.seek(<span class="number">9</span>,<span class="number">1</span>)</span><br><span class="line">f.seek(<span class="number">3</span>,<span class="number">1</span>) <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2：参照物是文件末尾位置，应该倒着移动</span></span><br><span class="line">f.seek(-<span class="number">9</span>,<span class="number">2</span>) <span class="comment"># 3</span></span><br><span class="line">f.seek(-<span class="number">3</span>,<span class="number">2</span>) <span class="comment"># 9</span></span><br></pre></td></tr></table></figure><h3 id="5-1-案例一：-0模式详解"><a href="#5-1-案例一：-0模式详解" class="headerlink" title="5.1 案例一： 0模式详解"></a>5.1 案例一： 0模式详解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aaa.txt用utf-8编码，内容如下（abc各占1个字节，中文“你好”各占3个字节）</span></span><br><span class="line">abc你好</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0模式的使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aaa.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">0</span>)     <span class="comment"># 参照文件开头移动了3个字节</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell()) <span class="comment"># 查看当前文件指针距离文件开头的位置，输出结果为3</span></span><br><span class="line">    <span class="built_in">print</span>(f.read()) <span class="comment"># 从第3个字节的位置读到文件末尾，输出结果为：你好</span></span><br><span class="line">    <span class="comment"># 注意：由于在t模式下，会将读取的内容自动解码，所以必须保证读取的内容是一个完整中文数据，否则解码失败</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aaa.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">6</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment">#输出结果为: 好</span></span><br></pre></td></tr></table></figure><h3 id="5-2-案例二：-1模式详解"><a href="#5-2-案例二：-1模式详解" class="headerlink" title="5.2 案例二： 1模式详解"></a>5.2 案例二： 1模式详解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1模式的使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aaa.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">1</span>) <span class="comment"># 从当前位置往后移动3个字节，而此时的当前位置就是文件开头</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell()) <span class="comment"># 输出结果为：3</span></span><br><span class="line">    f.seek(<span class="number">4</span>,<span class="number">1</span>)     <span class="comment"># 从当前位置往后移动4个字节，而此时的当前位置为3</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell()) <span class="comment"># 输出结果为：7</span></span><br></pre></td></tr></table></figure><h3 id="5-3-案例三：-2模式详解"><a href="#5-3-案例三：-2模式详解" class="headerlink" title="5.3 案例三： 2模式详解"></a>5.3 案例三： 2模式详解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aaa.txt用utf-8编码，内容如下（abc各占1个字节，中文“你好”各占3个字节）</span></span><br><span class="line">abc你好</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2模式的使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aaa.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">2</span>)     <span class="comment"># 参照文件末尾移动0个字节， 即直接跳到文件末尾</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell()) <span class="comment"># 输出结果为：9</span></span><br><span class="line">    f.seek(-<span class="number">3</span>,<span class="number">2</span>)     <span class="comment"># 参照文件末尾往前移动了3个字节</span></span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># 输出结果为：好</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tail -f access.log 程序详解</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;./access.log&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 1、指针跳到文件末尾</span></span><br><span class="line">    <span class="comment"># f.read()  # 错误</span></span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line=f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 没有内容</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(line.decode(<span class="string">&#x27;utf-8&#x27;</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="六，文件的修改"><a href="#六，文件的修改" class="headerlink" title="六，文件的修改"></a>六，文件的修改</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件a.txt内容如下</span></span><br><span class="line">张一蛋     山东    <span class="number">179</span>    <span class="number">49</span>    <span class="number">12344234523</span></span><br><span class="line">李二蛋     河北    <span class="number">163</span>    <span class="number">57</span>    <span class="number">13913453521</span></span><br><span class="line">王全蛋     山西    <span class="number">153</span>    <span class="number">62</span>    <span class="number">18651433422</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行操作</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;r+t&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">9</span>,<span class="number">0</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;&lt;男妇女主任&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件修改后的内容如下</span></span><br><span class="line">张一蛋&lt;男妇女主任&gt;<span class="number">9</span>    <span class="number">49</span>    <span class="number">12344234523</span></span><br><span class="line">李二蛋     河北    <span class="number">163</span>    <span class="number">57</span>    <span class="number">13913453521</span></span><br><span class="line">王全蛋     山西    <span class="number">153</span>    <span class="number">62</span>    <span class="number">18651433422</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调：</span></span><br><span class="line"><span class="comment"># 1、硬盘空间是无法修改的,硬盘中数据的更新都是用新内容覆盖旧内容</span></span><br><span class="line"><span class="comment"># 2、内存中的数据是可以修改的</span></span><br></pre></td></tr></table></figure><blockquote><p>文件对应的是硬盘空间,硬盘不能修改对应着文件本质也不能修改, 那我们看到文件的内容可以修改,是如何实现的呢? 大致的思路是将硬盘中文件内容读入内存,然后在内存中修改完毕后再覆盖回硬盘 具体的实现方式分为两种</p></blockquote><h3 id="6-1-文件修改方式一"><a href="#6-1-文件修改方式一" class="headerlink" title="6.1 文件修改方式一"></a>6.1 文件修改方式一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现思路：将文件内容发一次性全部读入内存,然后在内存中修改完毕后再覆盖写回原文件</span></span><br><span class="line"><span class="comment"># 优点: 在文件修改过程中同一份数据只有一份</span></span><br><span class="line"><span class="comment"># 缺点: 会过多地占用内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一：文本编辑器就是采用的这种方式</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;c.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = f.read()</span><br><span class="line">    data = res.replace(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;c.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    f1.write(data)</span><br></pre></td></tr></table></figure><h3 id="6-2-文件修改方式二"><a href="#6-2-文件修改方式二" class="headerlink" title="6.2 文件修改方式二"></a>6.2 文件修改方式二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现思路：以读的方式打开原文件,以写的方式打开一个临时文件,一行行读取原文件内容,修改完后写入临时文件...,删掉原文件,将临时文件重命名原文件名</span></span><br><span class="line"><span class="comment"># 优点: 不会占用过多的内存</span></span><br><span class="line"><span class="comment"># 缺点: 在文件修改过程中同一份数据存了两份</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;c.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f,\</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">r&#x27;.c.txt.swap&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        f1.write(line.replace(<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;zhouliu&#x27;</span>))</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&#x27;c.txt&#x27;</span>)      <span class="comment"># 删除原文件</span></span><br><span class="line">os.rename(<span class="string">&#x27;.c.txt.swap&#x27;</span>,<span class="string">&#x27;c.txt&#x27;</span>)    <span class="comment"># 新文件改名</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符编码</title>
      <link href="/articles/2023/03/17/zifubianma/"/>
      <url>/articles/2023/03/17/zifubianma/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="9、字符编码"><a href="#9、字符编码" class="headerlink" title="9、字符编码"></a>9、字符编码</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引入"><a href="#一，引入" class="headerlink" title="一，引入"></a>一，引入</h2><blockquote><p>字符串类型、文本文件的内容都是由字符组成的，但凡涉及到字符的存取，都需要考虑字符编码的问题。</p></blockquote><h2 id="二，知识储备"><a href="#二，知识储备" class="headerlink" title="二，知识储备"></a>二，知识储备</h2><h3 id="2-1-三大核心硬件"><a href="#2-1-三大核心硬件" class="headerlink" title="2.1 三大核心硬件"></a>2.1 三大核心硬件</h3><p><strong>所有软件都是运行硬件之上的，与运行软件相关的三大核心硬件为cpu、内存、硬盘，我们需要明确三点</strong></p><blockquote><p>1、软件运行前，软件的代码及其相关数据都是存放于硬盘中的</p><p>2、任何软件的启动都是将数据从硬盘中读入内存，然后cpu从内存中取出指令并执行</p><p>3、软件运行过程中产生的数据最先都是存放于内存中的，若想永久保存软件产生的数据，则需要将数据由内存写入硬盘</p></blockquote><p><img src="/articles/2023/03/17/zifubianma/1.png"></p><h3 id="2-2-文本编辑器读取文件内容的流程"><a href="#2-2-文本编辑器读取文件内容的流程" class="headerlink" title="2.2 文本编辑器读取文件内容的流程"></a>2.2 文本编辑器读取文件内容的流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">以python test.py为例，执行流程如下</span><br><span class="line"></span><br><span class="line"><span class="comment">#阶段1、启动python解释器，此时就相当于启动了一个文本编辑器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#阶段2、python解释器相当于文本编辑器，从硬盘上将test.py的内容读入到内存中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#阶段3、python解释器解释执行刚刚读入的内存的内容，开始识别python语法</span></span><br></pre></td></tr></table></figure><h3 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h3><p>python解释器与文件本编辑的异同如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、相同点：前两个阶段二者完全一致，都是将硬盘中文件的内容读入内存，详解如下</span></span><br><span class="line">python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、不同点：在阶段3时，针对内存中读入的内容处理方式不同，详解如下</span></span><br><span class="line">文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法</span><br></pre></td></tr></table></figure><h2 id="三，字符编码介绍"><a href="#三，字符编码介绍" class="headerlink" title="三，字符编码介绍"></a>三，字符编码介绍</h2><h3 id="3-1-什么是字符编码？"><a href="#3-1-什么是字符编码？" class="headerlink" title="3.1 什么是字符编码？"></a>3.1 什么是字符编码？</h3><blockquote><p>人类在与计算机交互时，用的都是人类能读懂的字符，如中文字符、英文字符、日文字符等</p></blockquote><blockquote><p>而计算机只能识别二进制数,详解如下</p></blockquote><pre><code>二进制数即由0和1组成的数字，例如010010101010。计算机是基于电工作的，电的特性即高低电平，人类从逻辑层面将高电平对应为数字1,低电平对应为数字0，这直接决定了计算机可以识别的是由0和1组成的数字毫无疑问，由人类的字符到计算机中的数字，必须经历一个过程，如下</code></pre><p><img src="/articles/2023/03/17/zifubianma/2.png"></p><blockquote><p>翻译的过程必须参照一个特定的标准，该标准称之为字符编码表，该表上存放的就是字符与数字一一对应的关系。</p></blockquote><blockquote><p>字符编码中的编码指的是翻译或者转换的意思，即将人能理解的字符翻译成计算机能识别的数字</p></blockquote><h3 id="3-2-字符编码表的发展史-了解"><a href="#3-2-字符编码表的发展史-了解" class="headerlink" title="3.2 字符编码表的发展史 (了解)"></a>3.2 字符编码表的发展史 (了解)</h3><p><strong>字符编码的发展经历了三个重要的阶段，如下</strong></p><h4 id="3-2-1-阶段一：一家独大"><a href="#3-2-1-阶段一：一家独大" class="headerlink" title="3.2.1 阶段一：一家独大"></a>3.2.1 阶段一：一家独大</h4><blockquote><p>现代计算机起源于美国，所以最先考虑仅仅是让计算机识别英文字符，于是诞生了ASCII表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ASCII表的特点:</span></span><br><span class="line">    1、只有英文字符与数字的一一对应关系</span><br><span class="line">    2、一个英文字符对应1Bytes，1Bytes=8bit，8bit最多包含256个数字，可以对应256个字符，足够表示所有英文字符</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/17/zifubianma/3.png"></p><h4 id="3-2-2-阶段二：诸侯割据、天下大乱"><a href="#3-2-2-阶段二：诸侯割据、天下大乱" class="headerlink" title="3.2.2 阶段二：诸侯割据、天下大乱"></a>3.2.2 阶段二：诸侯割据、天下大乱</h4><blockquote><p>为了让计算机能够识别中文和英文，中国人定制了GBK</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GBK表的特点：</span></span><br><span class="line">    1、只有中文字符、英文字符与数字的一一对应关系</span><br><span class="line">    2、一个英文字符对应1Bytes</span><br><span class="line">       一个中文字符对应2Bytes   </span><br><span class="line">       补充说明：</span><br><span class="line">       1Bytes=8bit，8bit最多包含256个数字，可以对应256个字符，足够表示所有英文字符</span><br><span class="line">       2Bytes=16bit，16bit最多包含65536个数字，可以对应65536个字符，足够表示所有中文字符</span><br></pre></td></tr></table></figure><blockquote><p>每个国家都各自的字符，为让计算机能够识别自己国家的字符外加英文字符，各个国家都制定了自己的字符编码表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Shift_JIS表的特点：</span></span><br><span class="line">    1、只有日文字符、英文字符与数字的一一对应关系</span><br><span class="line"></span><br><span class="line"><span class="comment"># Euc-kr表的特点：</span></span><br><span class="line">    1、只有韩文字符、英文字符与数字的一一对应关系</span><br></pre></td></tr></table></figure><blockquote><p>此时,美国人用的计算机里使用字符编码标准是ASCII、中国人用的计算机里使用字符编码标准是GBK、日本人用的计算机里使用字符编码标准是Shift_JIS,如下图所示，</p></blockquote><p><img src="/articles/2023/03/17/zifubianma/4.png"></p><blockquote><p>图1中，文本编辑存取文件的原理如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文本文件内容全都为字符，无论存取都是涉及到字符编码问题</span><br><span class="line"><span class="comment">#1、存文本文件</span></span><br><span class="line">人类通过文本编辑器输入的字符会被转化成ASCII格式的二进制存放于内存中，如果需要永久保存，则直接将内存中的ASCII格式的二进制写入硬盘</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、读文本文件</span></span><br><span class="line">直接将硬盘中的ASCII格式的二进制读入内存，然后通过ASCII表反解成英文字符</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>图2图3都是相同的过程，此时无论是存还是取由于采用的字符编码表一样，所以肯定不会出现乱码问题，但问题是在美国人用的计算机里只能输入英文字符，而在中国人用的计算机里只能输入中文字符和英文字符….,毫无疑问我们希望计算机允许我们输入万国字符均可识别、不乱码，而现阶段计算机采用的字符编码ASCII、GBK、Shift_JIS都无法识别万国字符，所以我们必须定制一个兼容万国字符的编码表，请看阶段三</p></blockquote><h4 id="3-2-3-阶段三：分久必合"><a href="#3-2-3-阶段三：分久必合" class="headerlink" title="3.2.3 阶段三：分久必合"></a>3.2.3 阶段三：分久必合</h4><blockquote><p>unicode于1990年开始研发，1994年正式公布，具备两大特点：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 存在所有语言中的所有字符与数字的一一对应关系,即兼容万国字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 与传统的字符编码的二进制数都有对应关系，详解如下</span></span><br></pre></td></tr></table></figure><blockquote><p>很多地方或老的系统、应用软件仍会采用各种各样传统的编码，这是历史遗留问题。此处需要强调：软件是存放于硬盘的，而运行软件是要将软件加载到内存的，面对硬盘中存放的各种传统编码的软件，想让我们的计算机能够将它们全都正常运行而不出现乱码，内存中必须有一种兼容万国的编码，并且该编码需要与其他编码有相对应的映射&#x2F;转换关系，这就是unicode的第二大特点产生的缘由</p></blockquote><p><img src="/articles/2023/03/17/zifubianma/5.png"></p><blockquote><p>文本编辑器输入任何字符都是最新存在于内存中，是unicode编码的，存放于硬盘中，则可以转换成任意其他编码，只要该编码可以支持相应的字符</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 英文字符可以被ASCII识别</span></span><br><span class="line">英文字符---&gt;unciode格式的数字---&gt;ASCII格式的数字</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文字符、英文字符可以被GBK识别</span></span><br><span class="line">中文字符、英文字符---&gt;unicode格式的数字---&gt;gbk格式的数字</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日文字符、英文字符可以被shift-JIS识别</span></span><br><span class="line">日文字符、英文字符---&gt;unicode格式的数字---&gt;shift-JIS格式的数字</span><br></pre></td></tr></table></figure><h3 id="3-3-编码与解码"><a href="#3-3-编码与解码" class="headerlink" title="3.3 编码与解码"></a>3.3 编码与解码</h3><blockquote><p>由字符转换成内存中的unicode，以及由unicode转换成其他编码的过程，都称为编码encode</p></blockquote><p><img src="/articles/2023/03/17/zifubianma/6.png"></p><blockquote><p>由内存中的unicode转换成字符，以及由其他编码转换成unicode的过程，都称为解码decode</p></blockquote><p><img src="/articles/2023/03/17/zifubianma/7.png"></p><blockquote><p>在诸多文件类型中，只有文本文件的内存是由字符组成的，因而文本文件的存取也涉及到字符编码的问题</p></blockquote><h3 id="3-4-utf-8的由来"><a href="#3-4-utf-8的由来" class="headerlink" title="3.4 utf-8的由来"></a>3.4 utf-8的由来</h3><blockquote><p>注意：如果保存到硬盘的是GBK格式二进制，当初用户输入的字符只能是中文或英文，同理如果保存到硬盘的是Shift_JIS格式二进制，当初用户输入的字符只能是日文或英文……如果我们输入的字符中包含多国字符，那么该如何处理？</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多国字符—√—》内存（unicode格式的二进制）——X—》硬盘（GBK格式的二进制）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多国字符—√—》内存（unicode格式的二进制）——X—》硬盘（Shift_JIS格式的二进制）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多国字符—√—》内存（unicode格式的二进制）——√—》硬盘（???格式的二进制）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>理论上是可以将内存中unicode格式的二进制直接存放于硬盘中的，但由于unicode固定使用两个字节来存储一个字符，如果多国字符中包含大量的英文字符时，使用unicode格式存放会额外占用一倍空间（英文字符其实只需要用一个字节存放即可），然而空间占用并不是最致命的问题，最致命地是当我们由内存写入硬盘时会额外耗费一倍的时间，所以将内存中的unicode二进制写入硬盘或者基于网络传输时必须将其转换成一种精简的格式，这种格式即utf-8（全称Unicode Transformation Format，即unicode的转换格式）</p></blockquote><pre><code># 多国字符—√—》内存（unicode格式的二进制）——√—》硬盘（utf-8格式的二进制）</code></pre><p><img src="/articles/2023/03/17/zifubianma/8.png"></p><p><strong>那为何在内存中不直接使用utf-8呢？</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">utf-8是针对Unicode的可变长度字符编码：一个英文字符占1Bytes，一个中文字符占3Bytes，生僻字用更多的Bytes存储</span><br><span class="line"></span><br><span class="line">unicode更像是一个过渡版本，我们新开发的软件或文件存入硬盘都采用utf-8格式，等过去几十年，所有老编码的文件都淘汰掉之后，会出现一个令人开心的场景，即硬盘里放的都是utf-8格式，此时unicode便可以退出历史舞台，内存里也改用utf-8，天下重新归于统一</span><br></pre></td></tr></table></figure><h2 id="四，字符编码的应用"><a href="#四，字符编码的应用" class="headerlink" title="四，字符编码的应用"></a>四，字符编码的应用</h2><pre><code>学习字符编码就是为了存取字符时不发生乱码问题：</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、内存中固定使用unicode无论输入任何字符都不会发生乱码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、我们能够修改的是存/取硬盘的编码方式，如果编码设置不正确将会出现乱码问题。乱码问题分为两种：存乱了，读乱了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.1 存乱了：如果用户输入的内容中包含中文和日文字符，如果单纯以shift_JIS存，日文可以正常写入硬盘，而由于中文字符在shift_jis中没有找到对应关系而导致存乱了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.2 读乱了：如果硬盘中的数据是shift_JIS格式存储的，采GBK格式读入内存就读乱了</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>总结：</strong></p></blockquote><ol><li>保证存的时候不乱：在由内存写入硬盘时，必须将编码格式设置为支持所输入字符的编码格式</li><li>保证存的时候不乱：在由硬盘读入内存时，必须采用与写入硬盘时相同的编码格式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&#x27;上&#x27;</span></span><br><span class="line"></span><br><span class="line">res = x.encode(<span class="string">&#x27;gbk&#x27;</span>)   <span class="comment"># unicode --&gt; gbk</span></span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))        <span class="comment"># b&#x27;\xc9\xcf&#x27; &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-1-总结"><a href="#4-1-总结" class="headerlink" title="4.1 总结"></a>4.1 总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">结论：</span><br><span class="line">    1、内存固定使用unicode，我们可以改变的是存入硬盘采用的格式</span><br><span class="line">        英文+汉字 -&gt; unicode -&gt; GBK</span><br><span class="line">        英文+日文 -&gt; unicode -&gt; shift-jis</span><br><span class="line">        万国字符  -&gt; unicode -&gt; utf-8</span><br><span class="line"></span><br><span class="line">    2、文本文件存取乱码问题</span><br><span class="line">        存乱了：解决方法是，编码格式应该设置成支持文件内容字符串的格式。</span><br><span class="line">        取乱了：解决方法是，文件是以什么编码格式存入硬盘的，就应该以什么编码格式读入内存。</span><br><span class="line"></span><br><span class="line">    3、python解释器默认读文件的编码</span><br><span class="line">        python3默认的是utf-8</span><br><span class="line">        python3默认是ASCII码</span><br><span class="line"></span><br><span class="line">        指定文件头修改默认的编码：</span><br><span class="line">        在py文件的首行写：</span><br><span class="line">            <span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line">    4、保证运行python程序前两个阶段不乱码的核心法则：</span><br><span class="line">        指定文件头</span><br><span class="line">        <span class="comment"># coding:文件当初存入硬盘是所采取的编码格式</span></span><br><span class="line"></span><br><span class="line">    5、python3的str类型默认直接存成unicode格式，无论如何都不会乱码</span><br><span class="line">        保证python2的str类型不乱码</span><br><span class="line">            x=u<span class="string">&#x27;上&#x27;</span></span><br><span class="line"></span><br><span class="line">    6、了解</span><br><span class="line">        python2解释器有两种字符串类型：str、unicode</span><br><span class="line">            <span class="comment"># str类型</span></span><br><span class="line">            x=<span class="string">&#x27;上&#x27;</span>   <span class="comment"># 字符串值会按照文件头指定的编码格式存入变量的值</span></span><br><span class="line">            <span class="comment"># unicode类型</span></span><br><span class="line">            x=u<span class="string">&#x27;上&#x27;</span>  <span class="comment"># 强制存成unicode</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本数据类型及内置方法</title>
      <link href="/articles/2023/03/16/jibenshujuleixingheneizhifangfa/"/>
      <url>/articles/2023/03/16/jibenshujuleixingheneizhifangfa/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="4、基本数据类型及内置方法"><a href="#4、基本数据类型及内置方法" class="headerlink" title="4、基本数据类型及内置方法"></a>4、基本数据类型及内置方法</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引子"><a href="#一，引子" class="headerlink" title="一，引子"></a>一，引子</h2><blockquote><p>数据类型是用来记录事物状态的，而事物的状态是不断变化的(如:一个人年龄的增长（操作int类型） ，单个人名的修改（操作str类型），学生列表中增加学生（操作list类型）等)，这意味着我们在开发程序时需要频繁对数据进行操作，为了提升我们的开发效率， python针对这些常用的操作，为每一种数据类型内置了一系列方法。本章的主题就是带大家详细了解下它们，以及每种数据类型的详细定义、类型转换。</p></blockquote><h2 id="二，数字类型int与float"><a href="#二，数字类型int与float" class="headerlink" title="二，数字类型int与float"></a>二，数字类型int与float</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一：int类型</span></span><br><span class="line"><span class="comment"># 作用：</span></span><br><span class="line"><span class="comment"># 1、定义：</span></span><br><span class="line">age = <span class="number">10</span>    <span class="comment"># age = int(10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二：float类型</span></span><br><span class="line"><span class="comment"># 1、作用：</span></span><br><span class="line"><span class="comment"># 2、定义：</span></span><br><span class="line">salary = <span class="number">3.1</span> <span class="comment"># salary = float(3.1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：名字+括号的意思就是调用某个功能，比如</span></span><br><span class="line"><span class="comment"># print(...)调用打印功能</span></span><br><span class="line"><span class="comment"># int(...)调用创建整型数据的功能</span></span><br><span class="line"><span class="comment"># float(...)调用创建浮点型数据的功能</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-进制转换-了解内容"><a href="#2-1-1-进制转换-了解内容" class="headerlink" title="2.1.1 进制转换(了解内容)"></a>2.1.1 进制转换(了解内容)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.2（了解）</span></span><br><span class="line"><span class="comment"># 10进制 ---&gt; 二进制</span></span><br><span class="line"><span class="comment"># 11 -&gt; 1011</span></span><br><span class="line"><span class="comment"># 1011 -&gt; 8+2+1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">11</span>))      <span class="comment"># 0b1011</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10进制 ---&gt; 八进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">11</span>))  <span class="comment"># 0o13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10进制 ---&gt; 十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">11</span>))      <span class="comment"># 0xb</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">123</span>))     <span class="comment"># 0x7b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他进制转换为十进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二进制 ---&gt; 10进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0b1011&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 八进制 ---&gt; 10进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0o13&#x27;</span>,<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 十六进制 ---&gt; 10进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0xb&#x27;</span>,<span class="number">16</span>))</span><br></pre></td></tr></table></figure><h3 id="2-2-类型转换"><a href="#2-2-类型转换" class="headerlink" title="2.2 类型转换"></a>2.2 类型转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.1、纯数字的字符串转成int</span></span><br><span class="line">res = <span class="built_in">int</span>(<span class="string">&#x27;100011&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">100011</span> &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2、float类型转换</span></span><br><span class="line">res = <span class="built_in">float</span>(<span class="string">&#x27;3.1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">3.1</span> &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h3><pre><code>int与float没有需要掌握的使用方法，他们使用的就是数学+比较运算</code></pre><h2 id="三，字符串"><a href="#三，字符串" class="headerlink" title="三，字符串"></a>三，字符串</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&#x27;hello&#x27;</span>  <span class="comment"># msg = str(&#x27;hello&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(msg,<span class="built_in">type</span>(msg))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">hello &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-类型转换"><a href="#3-2-类型转换" class="headerlink" title="3.2 类型转换"></a>3.2 类型转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str可以把任意类型都转成字符串</span></span><br><span class="line">res = <span class="built_in">str</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125; &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-使用"><a href="#3-3-使用" class="headerlink" title="3.3 使用"></a>3.3 使用</h3><h4 id="3-3-1-优先掌握的操作"><a href="#3-3-1-优先掌握的操作" class="headerlink" title="3.3.1 优先掌握的操作"></a>3.3.1 优先掌握的操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;hello python!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.按索引取值(正向取，反向取)：</span></span><br><span class="line"><span class="comment"># 1.1 正向取(从左往右)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[<span class="number">6</span>]</span><br><span class="line">p</span><br><span class="line"><span class="comment"># 1.2 反向取(负号表示从右往左)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[-<span class="number">4</span>]</span><br><span class="line">h</span><br><span class="line"><span class="comment"># 1.3 对于str来说，只能按照索引取值，不能改</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[<span class="number">0</span>]=<span class="string">&#x27;H&#x27;</span> <span class="comment"># 报错TypeError</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.切片(顾头不顾尾，步长)</span></span><br><span class="line"><span class="comment"># 2.1 顾头不顾尾：取出索引为0到8的所有字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[<span class="number">0</span>:<span class="number">9</span>]  </span><br><span class="line">hello pyt</span><br><span class="line"><span class="comment"># 2.2 步长：0:9:2,第三个参数2代表步长，会从0开始，每次累加一个2即可，所以会取出索引0、2、4、6、8的字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[<span class="number">0</span>:<span class="number">9</span>:<span class="number">2</span>]  </span><br><span class="line">hlopt </span><br><span class="line"><span class="comment"># 2.3 反向切片</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[::-<span class="number">1</span>]  <span class="comment"># -1表示从右往左依次取值</span></span><br><span class="line">!nohtyp olleh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.长度len</span></span><br><span class="line"><span class="comment"># 3.1 获取字符串的长度，即字符的个数，但凡存在于引号内的都算作字符)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(str1) <span class="comment"># 空格也算字符</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.成员运算 in 和 not in</span></span><br><span class="line"><span class="comment"># 4.1 int:判断hello 是否在 str1里面</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> str1  </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 4.2 not in:判断tony 是否不在 str1里面</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;tony&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> str1 </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.strip移除字符串首尾指定的字符(默认移除空格)</span></span><br><span class="line"><span class="comment"># 5.1 括号内不指定字符，默认移除首尾空白字符(空格、\n、\t)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;  life is short!  &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1.strip()  </span><br><span class="line">life <span class="keyword">is</span> short!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.2 括号内指定字符，移除首尾指定的字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">&#x27;**tony**&#x27;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2.strip(<span class="string">&#x27;*&#x27;</span>)  </span><br><span class="line">tony</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.切分split</span></span><br><span class="line"><span class="comment"># 6.1 括号内不指定字符，默认以空格作为切分符号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3=<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str3.split()</span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="comment"># 6.2 括号内指定分隔字符，则按照括号内指定的字符切割字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4.split(<span class="string">&#x27;.&#x27;</span>)  </span><br><span class="line">[<span class="string">&#x27;127&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]  <span class="comment"># 注意:split切割得到的结果是列表数据类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.循环</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str5 = <span class="string">&#x27;今天你好吗？&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> str5:  <span class="comment"># 依次取出字符串中每一个字符</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(line)</span><br><span class="line">...</span><br><span class="line">今</span><br><span class="line">天</span><br><span class="line">你</span><br><span class="line">好</span><br><span class="line">吗</span><br><span class="line">？</span><br></pre></td></tr></table></figure><h4 id="3-3-2-需要掌握的操作"><a href="#3-3-2-需要掌握的操作" class="headerlink" title="3.3.2 需要掌握的操作"></a>3.3.2 需要掌握的操作</h4><ul><li>strip,lstrip,rstrip</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msg=<span class="string">&#x27;*******zhangsan*******&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg.strip(<span class="string">&#x27;*&#x27;</span>))       <span class="comment"># 去两边</span></span><br><span class="line"><span class="built_in">print</span>(msg.lstrip(<span class="string">&#x27;*&#x27;</span>))      <span class="comment"># 去左边</span></span><br><span class="line"><span class="built_in">print</span>(msg.rstrip(<span class="string">&#x27;*&#x27;</span>))      <span class="comment"># 去右边</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">zhangsan</span><br><span class="line">zhangsan*******</span><br><span class="line">*******zhangsan</span><br></pre></td></tr></table></figure><ul><li>lower()，upper()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ms = <span class="string">&#x27;AbbbCCC&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(ms.lower())     <span class="comment"># 全小写</span></span><br><span class="line"><span class="built_in">print</span>(ms.upper())     <span class="comment"># 全大写</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">abbbccc</span><br><span class="line">ABBBCCC</span><br></pre></td></tr></table></figure><ul><li>startswith，endswith</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;zhangsan is sb&#x27;</span>.startswith(<span class="string">&#x27;zhangsan&#x27;</span>))      <span class="comment"># 是不是以zhangsan开头</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;zhangsan is sb&#x27;</span>.endswith(<span class="string">&#x27;sb&#x27;</span>))      <span class="comment"># 是不是以sb结尾</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>格式化输出之format</li></ul><blockquote><p>之前我们使用%s来做字符串的格式化输出操作，在传值时，必须严格按照位置与%s一一对应，而字符串的内置方法format则提供了一种不依赖位置的传值方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># format括号内在传参数时完全可以打乱顺序，但仍然能指名道姓地为指定的参数传值，name=‘tony’就是传给&#123;name&#125;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;my name is &#123;name&#125;, my age is &#123;age&#125;!&#x27;</span>.<span class="built_in">format</span>(age=<span class="number">18</span>,name=<span class="string">&#x27;tony&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4  </span><br><span class="line"><span class="string">&#x27;my name is tony, my age is 18!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4 = <span class="string">&#x27;my name is &#123;name&#125;&#123;name&#125;&#123;name&#125;, my age is &#123;name&#125;!&#x27;</span>.<span class="built_in">format</span>(name=<span class="string">&#x27;tony&#x27;</span>, age=<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str4  </span><br><span class="line"><span class="string">&#x27;my name is tonytonytony, my age is tony!&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>split，replit</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">&#x27;zhang:san:age:18&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(info.split(<span class="string">&#x27;:&#x27;</span>,<span class="number">1</span>))    <span class="comment"># [&#x27;zhang&#x27;, &#x27;san:age:18&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(info.rsplit(<span class="string">&#x27;:&#x27;</span>,<span class="number">1</span>))   <span class="comment"># [&#x27;zhang:san:age&#x27;, &#x27;18&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>join：把列表拼接成字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;male&#x27;</span>]</span><br><span class="line"><span class="comment"># res = l[0]+&#x27;:&#x27;+l[1]+&#x27;:&#x27;+l[2]</span></span><br><span class="line">res = <span class="string">&#x27;:&#x27;</span>.join(l)   <span class="comment"># 按照某个分隔符把元素全为纯字符串的列表，拼接成一个大字符串</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">zhangsan:<span class="number">18</span>:male</span><br></pre></td></tr></table></figure><ul><li>replace</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msgg = <span class="string">&#x27;you can you up no can no bb&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msgg.replace(<span class="string">&#x27;you&#x27;</span>,<span class="string">&#x27;YOU&#x27;</span>))    <span class="comment"># 替换</span></span><br><span class="line"><span class="built_in">print</span>(msgg.replace(<span class="string">&#x27;you&#x27;</span>,<span class="string">&#x27;YOU&#x27;</span>,<span class="number">1</span>))  <span class="comment"># 指定修改的个数</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">YOU can YOU up no can no bb</span><br><span class="line">YOU can you up no can no bb</span><br></pre></td></tr></table></figure><ul><li>isdigit</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断字符串是否是纯数字组成，返回结果为True或False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;123&#x27;</span>.isdigit())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;12a3&#x27;</span>.isdigit())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;12.3&#x27;</span>.isdigit())</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例应用</span></span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&#x27;请输入你的年龄：&#x27;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> age.isdigit():</span><br><span class="line">    age = <span class="built_in">int</span>(age)</span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;必须输入纯数字&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-3-3-了解操作"><a href="#3-3-3-了解操作" class="headerlink" title="3.3.3 了解操作"></a>3.3.3 了解操作</h4><ul><li>find，rfind，index，rindex，count</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&#x27;hello egon hahahahah&#x27;</span></span><br><span class="line"><span class="comment"># 找到返回起始索引</span></span><br><span class="line"><span class="built_in">print</span>(msg.find(<span class="string">&#x27;e&#x27;</span>))    <span class="comment"># 返回要找的字符串在大字符串中起始索引</span></span><br><span class="line"><span class="built_in">print</span>(msg.find(<span class="string">&#x27;egon&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.index(<span class="string">&#x27;e&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.index(<span class="string">&#x27;egon&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找不到</span></span><br><span class="line"><span class="built_in">print</span>(msg.find(<span class="string">&#x27;xxx&#x27;</span>))      <span class="comment"># 返回 -1，代表找不到</span></span><br><span class="line"><span class="built_in">print</span>(msg.index(<span class="string">&#x27;xxx&#x27;</span>))     <span class="comment"># 抛出异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">msg = <span class="string">&#x27;hello egon hahahahah egon、 egon&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg.count(<span class="string">&#x27;egon&#x27;</span>))        <span class="comment"># 统计个数</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.center,ljust,rjust,zfill</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=<span class="string">&#x27;tony&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.center(<span class="number">30</span>,<span class="string">&#x27;-&#x27;</span>)  <span class="comment"># 总宽度为30，字符串居中显示，不够用-填充</span></span><br><span class="line">-------------tony-------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.ljust(<span class="number">30</span>,<span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 总宽度为30，字符串左对齐显示，不够用*填充</span></span><br><span class="line">tony**************************</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.rjust(<span class="number">30</span>,<span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 总宽度为30，字符串右对齐显示，不够用*填充</span></span><br><span class="line">**************************tony</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.zfill(<span class="number">50</span>)  <span class="comment"># 总宽度为50，字符串右对齐显示，不够用0填充</span></span><br><span class="line">0000000000000000000000000000000000000000000000tony</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.expandtabs</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;tony\thello&#x27;</span>  <span class="comment"># \t表示制表符(tab键)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line">tony    hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.expandtabs(<span class="number">1</span>)  <span class="comment"># 修改\t制表符代表的空格数</span></span><br><span class="line">tony hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.captalize,swapcase,title</span></span><br><span class="line"><span class="comment"># 4.1 captalize：首字母大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;hello everyone nice to meet you!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message.capitalize()</span><br><span class="line">Hello everyone nice to meet you!  </span><br><span class="line"><span class="comment"># 4.2 swapcase：大小写翻转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message1 = <span class="string">&#x27;Hi girl, I want make friends with you!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message1.swapcase()  </span><br><span class="line">hI GIRL, i WANT MAKE FRIENDS WITH YOU!  </span><br><span class="line"><span class="comment">#4.3 title：每个单词的首字母大写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg = <span class="string">&#x27;dear my friend i miss you very much&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg.title()</span><br><span class="line">Dear My Friend I Miss You Very Much </span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.is数字系列</span></span><br><span class="line"><span class="comment">#在python3中</span></span><br><span class="line">num1 = <span class="string">b&#x27;4&#x27;</span> <span class="comment">#bytes</span></span><br><span class="line">num2 = <span class="string">u&#x27;4&#x27;</span> <span class="comment">#unicode,python3中无需加u就是unicode</span></span><br><span class="line">num3 = <span class="string">&#x27;四&#x27;</span> <span class="comment">#中文数字</span></span><br><span class="line">num4 = <span class="string">&#x27;Ⅳ&#x27;</span> <span class="comment">#罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#isdigt:bytes,unicode</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num1.isdigit()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num2.isdigit()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num3.isdigit()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num4.isdigit() </span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#isdecimal:uncicode(bytes类型无isdecimal方法)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num2.isdecimal() </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num3.isdecimal() </span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num4.isdecimal() </span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#isnumberic:unicode,中文数字,罗马数字(bytes类型无isnumberic方法)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num2.isnumeric() </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num3.isnumeric() </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num4.isnumeric() </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三者不能判断浮点数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num5 = <span class="string">&#x27;4.3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num5.isdigit()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num5.isdecimal()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num5.isnumeric()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">总结:</span></span><br><span class="line"><span class="string">    最常用的是isdigit,可以判断bytes和unicode类型,这也是最常见的数字应用场景</span></span><br><span class="line"><span class="string">    如果要判断中文数字或罗马数字,则需要用到isnumeric。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.is其他</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;tony123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isalnum() <span class="comment">#字符串中既可以包含数字也可以包含字母</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isalpha() <span class="comment">#字符串中只包含字母</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isidentifier()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.islower()  <span class="comment"># 字符串是否是纯小写</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isupper()  <span class="comment"># 字符串是否是纯大写</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.isspace()  <span class="comment"># 字符串是否全是空格</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.istitle()  <span class="comment"># 字符串中的单词首字母是否都是大写</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="四，列表"><a href="#四，列表" class="headerlink" title="四，列表"></a>四，列表</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><blockquote><p>作用：按位置存放多个值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2.2</span>,<span class="string">&#x27;a&#x27;</span>]     <span class="comment"># l = list([1,2.2,&#x27;a&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(l))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-类型转换"><a href="#4-2-类型转换" class="headerlink" title="4.2 类型转换"></a>4.2 类型转换</h3><pre><code>但凡能被for循环遍历的类型都可以当作参数传给list()转成列表</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="built_in">list</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br><span class="line"></span><br><span class="line">res1 = <span class="built_in">list</span>(&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">222</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="number">333</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[<span class="string">&#x27;k1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>, <span class="string">&#x27;k3&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="4-3-使用"><a href="#4-3-使用" class="headerlink" title="4.3 使用"></a>4.3 使用</h3><h4 id="4-3-1-优先掌握的操作"><a href="#4-3-1-优先掌握的操作" class="headerlink" title="4.3.1 优先掌握的操作"></a>4.3.1 优先掌握的操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、按索引存取值（正向存取+反向存取）：即可以取也可以改</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="comment"># 正向取</span></span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">0</span>])     <span class="comment"># 结果：111</span></span><br><span class="line"><span class="comment"># 反向取</span></span><br><span class="line"><span class="built_in">print</span>(l[-<span class="number">1</span>])    <span class="comment"># 结果：hello</span></span><br><span class="line"><span class="comment"># 可以取也可以改</span></span><br><span class="line">l[<span class="number">0</span>] = <span class="number">222</span>  <span class="comment"># 索引存在则修改对应的值</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[<span class="number">222</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无论是取值操作还是赋值操作：索引不存在，则报错</span></span><br><span class="line"><span class="comment"># l[3] = 333  # IndexError: list assignment index out of range</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、切片（顾头不顾尾，步长）</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">0</span>:<span class="number">3</span>])   <span class="comment"># [111, &#x27;zhangsan&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>])   <span class="comment"># [111, &#x27;hello&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">0</span>:<span class="built_in">len</span>(l)])  <span class="comment"># [111, &#x27;zhangsan&#x27;, &#x27;hello&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(l[:])     <span class="comment"># [111, &#x27;zhangsan&#x27;, &#x27;hello&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"></span><br><span class="line">new_l = l[:]    <span class="comment"># 切片等同于拷贝行为，而且相当于浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l))    <span class="comment"># 4518562752</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(new_l))    <span class="comment"># 4431592064</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表倒过来</span></span><br><span class="line"><span class="built_in">print</span>(l[::-<span class="number">1</span>])      <span class="comment"># [&#x27;d&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;hello&#x27;, &#x27;zhangsan&#x27;, 111]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])) <span class="comment"># 3   统计的是个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、成员运算in和not in</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aaa&#x27;</span> <span class="keyword">in</span> [<span class="string">&#x27;aaa&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>])     <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ll&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])      <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、往列表中添加值</span></span><br><span class="line"><span class="comment"># 5.1、追加</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line">l.append(<span class="number">3333</span>)</span><br><span class="line">l.append(<span class="number">4444</span>)</span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [111, &#x27;zhangsan&#x27;, &#x27;hello&#x27;, 3333, 4444]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.2、插入值</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line">l.insert(<span class="number">1</span>,<span class="string">&#x27;lisi&#x27;</span>)</span><br><span class="line">l.insert(<span class="number">0</span>,<span class="string">&#x27;wangwu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [&#x27;wangwu&#x27;, 111, &#x27;lisi&#x27;, &#x27;zhangsan&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.3、extend添加值</span></span><br><span class="line">new_l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">l = [<span class="number">111</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line">l.append(new_l)</span><br><span class="line"><span class="built_in">print</span>(l)    <span class="comment"># [111, &#x27;zhangsan&#x27;, &#x27;hello&#x27;, [1, 2, 3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码实现</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> new_l:</span><br><span class="line">    l.append(item)</span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [111, &#x27;zhangsan&#x27;, &#x27;hello&#x27;, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extend 实现了上述代码</span></span><br><span class="line">l.extend(new_l)</span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [111, &#x27;zhangsan&#x27;, &#x27;hello&#x27;, 1, 2, 3]</span></span><br><span class="line">l.extend(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [111, &#x27;zhangsan&#x27;, &#x27;hello&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、删除</span></span><br><span class="line"><span class="comment"># 方式一：通用的删除方法，没有返回值，只是单纯删除</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> l[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># x = del l[1]  # 抛出异常，不支持赋值语法</span></span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [111, &#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：l.pop() 根据索引删除,会返回删除的值</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="comment"># l.pop()       不指定索引，默认删除最后一个</span></span><br><span class="line"><span class="comment"># print(l)        # [111, &#x27;zhangsan&#x27;]</span></span><br><span class="line"></span><br><span class="line">res = l.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [111, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># zhangsan</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三：l.remove() 根据元素删除</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="string">&#x27;zhangsan&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line">l.remove([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [111, &#x27;zhangsan&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"></span><br><span class="line">res = l.remove(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、循环</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要掌握操作</span></span><br><span class="line">l = [<span class="number">111</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>]</span><br><span class="line"><span class="comment"># 1、l.count()   # 统计个数</span></span><br><span class="line"><span class="built_in">print</span>(l.count(<span class="string">&#x27;aaa&#x27;</span>))   <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、l.index()   #返回第一次找到aaa的索引值</span></span><br><span class="line"><span class="built_in">print</span>(l.index(<span class="string">&#x27;aaa&#x27;</span>))   <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、l.clear()   # 清空列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、l.reverse()     # 不是排序，就是将列表倒过来</span></span><br><span class="line">l.reverse()</span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [&#x27;aaa&#x27;, &#x27;aaa&#x27;, &#x27;aaa&#x27;, &#x27;hello&#x27;, &#x27;zhangsan&#x27;, 111]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、l.sort()：列表内元素必须是同种类型才可以排序</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">11</span>,-<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>]</span><br><span class="line">l.sort()    <span class="comment"># 默认从小到大排，升序</span></span><br><span class="line"><span class="built_in">print</span>(l)    <span class="comment"># [-3, 2, 9, 11]</span></span><br><span class="line"></span><br><span class="line">l.sort(reverse=<span class="literal">True</span>)    <span class="comment"># 降序</span></span><br><span class="line"><span class="built_in">print</span>(l)    <span class="comment"># [11, 9, 2, -3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 了解：字符串也可以比大小，按照对应的位置的字符依次pk</span></span><br><span class="line"><span class="comment"># 字符串的大小按照ASCI码表的先后顺序区别字符大小，表中排在后面的字符大于前面的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> &gt; <span class="string">&#x27;b&#x27;</span>)        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;abz&#x27;</span> &gt; <span class="string">&#x27;abcdefg&#x27;</span>)        <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 了解：列表也可以比大小，原理同字符串一样（对应位置必须为同种类型，否则报错）</span></span><br><span class="line">l1 = [<span class="number">1</span>,<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;zaa&#x27;</span>]</span><br><span class="line">l2 = [<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l1 &gt; l2)      <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-队列与堆栈"><a href="#4-3-2-队列与堆栈" class="headerlink" title="4.3.2 队列与堆栈"></a>4.3.2 队列与堆栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 补充</span></span><br><span class="line"><span class="comment"># 队列：first in first out（简称FIFO） ，先进先出</span></span><br><span class="line">ll = []</span><br><span class="line"><span class="comment"># 入队操作</span></span><br><span class="line">ll.append(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">ll.append(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">ll.append(<span class="string">&#x27;third&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ll)   <span class="comment"># [&#x27;first&#x27;, &#x27;second&#x27;, &#x27;third&#x27;]</span></span><br><span class="line"><span class="comment"># 出队操作</span></span><br><span class="line"><span class="built_in">print</span>(ll.pop(<span class="number">0</span>))        <span class="comment"># first</span></span><br><span class="line"><span class="built_in">print</span>(ll.pop(<span class="number">0</span>))        <span class="comment"># second</span></span><br><span class="line"><span class="built_in">print</span>(ll.pop(<span class="number">0</span>))        <span class="comment"># third</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆栈：last in first out（简称LIFO），后进先出</span></span><br><span class="line">lll = []</span><br><span class="line"><span class="comment"># 入队操作</span></span><br><span class="line">lll.append(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">lll.append(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">lll.append(<span class="string">&#x27;third&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lll)   <span class="comment"># [&#x27;first&#x27;, &#x27;second&#x27;, &#x27;third&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 出队操作</span></span><br><span class="line"><span class="built_in">print</span>(lll.pop())    <span class="comment"># third</span></span><br><span class="line"><span class="built_in">print</span>(lll.pop())    <span class="comment"># second</span></span><br><span class="line"><span class="built_in">print</span>(lll.pop())    <span class="comment"># first</span></span><br></pre></td></tr></table></figure><h4 id="4-3-3-了解操作"><a href="#4-3-3-了解操作" class="headerlink" title="4.3.3 了解操作"></a>4.3.3 了解操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">0</span>:<span class="number">3</span>:<span class="number">1</span>] </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># 正向步长</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">2</span>::-<span class="number">1</span>] </span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]  <span class="comment"># 反向步长</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引取值实现列表翻转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[::-<span class="number">1</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="五，元组"><a href="#五，元组" class="headerlink" title="五，元组"></a>五，元组</h2><h3 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5.1 作用"></a>5.1 作用</h3><blockquote><p>元组就是”一个不可变的列表”<br>作用：按照索引&#x2F;位置存放多个值，只用于取，不用于改</p></blockquote><h3 id="5-2-定义方式"><a href="#5-2-定义方式" class="headerlink" title="5.2 定义方式"></a>5.2 定义方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">定义：()内用逗号分隔开多个任意类型的元素</span><br><span class="line">t = (<span class="number">1</span>,<span class="number">1.3</span>,<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))      <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = (<span class="number">10</span>)    <span class="comment"># 单独一个括号代表包含的意思</span></span><br><span class="line"><span class="built_in">print</span>(x,<span class="built_in">type</span>(x))    <span class="comment"># 10 &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t1 = (<span class="number">10</span>,)  <span class="comment"># 如果元组中只有一个元素，必须加逗号分隔开</span></span><br><span class="line"><span class="built_in">print</span>(t1,<span class="built_in">type</span>(t1))  <span class="comment"># (10,) &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t2 = (<span class="number">1</span>,<span class="number">1.3</span>,<span class="string">&#x27;aa&#x27;</span>)   <span class="comment"># t2=(索引0 -&gt; 值1的内存地址，索引1 -&gt; 值1.3的内存地址，索引2 -&gt; 值&#x27;aa&#x27;的内存地址)</span></span><br><span class="line"><span class="comment"># t2[0] = 1111    # 报错：TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line"></span><br><span class="line">t3 = (<span class="number">1</span>,[<span class="number">11</span>,<span class="number">22</span>])    <span class="comment"># t3=(索引0 -&gt; 值1的内存地址，索引1 -&gt; 值[11,22]的内存地址)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(t3[<span class="number">0</span>]),<span class="built_in">id</span>(t3[<span class="number">1</span>]))      <span class="comment"># 4478720304 4479892096</span></span><br><span class="line"><span class="comment"># t3[0] = 1111111   # 报错：TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line"><span class="comment"># t3[1] = 2222222   # 报错：TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line">t3[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1111111</span></span><br><span class="line"><span class="built_in">print</span>(t3)   <span class="comment"># (1, [1111111, 22])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(t3[<span class="number">0</span>]),<span class="built_in">id</span>(t3[<span class="number">1</span>]))  <span class="comment"># 4401031472 4402203264     </span></span><br><span class="line"><span class="comment"># 原理，元组是不可变类型，元组里的元素是不可以修改的，但是元组里嵌套的列表本身不可被修改，但是列表里的值可以被修改，因为列表是可变类型</span></span><br></pre></td></tr></table></figure><h3 id="5-3-类型转换"><a href="#5-3-类型转换" class="headerlink" title="5.3 类型转换"></a>5.3 类型转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="string">&#x27;hello&#x27;</span>))           <span class="comment"># (&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;aa&#x27;</span>]))        <span class="comment"># (1, 2, &#x27;aa&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">11</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">22</span>&#125;)) <span class="comment"># (&#x27;k1&#x27;, &#x27;k2&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="5-4-内置方法"><a href="#5-4-内置方法" class="headerlink" title="5.4 内置方法"></a>5.4 内置方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优先掌握的方法</span></span><br><span class="line"><span class="comment"># 1、按索引取值（正向取、反向取）：只能取</span></span><br><span class="line">tup = (<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;ddd&#x27;</span>,<span class="string">&#x27;eee&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tup[<span class="number">0</span>])       <span class="comment"># aa</span></span><br><span class="line"><span class="built_in">print</span>(tup[-<span class="number">1</span>])      <span class="comment"># eee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、切片（顾头不顾尾，步长）</span></span><br><span class="line"><span class="built_in">print</span>(tup[<span class="number">0</span>:<span class="number">3</span>])     <span class="comment"># (&#x27;aa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(tup[::-<span class="number">1</span>])    <span class="comment"># (&#x27;eee&#x27;, &#x27;ddd&#x27;, &#x27;cc&#x27;, &#x27;bb&#x27;, &#x27;aa&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tup))     <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、成员运算in和not in</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">in</span> tup)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tup:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置方法</span></span><br><span class="line"></span><br><span class="line">tup1 = (<span class="number">2</span>,<span class="number">3</span>,<span class="number">111</span>,<span class="number">111</span>,<span class="number">111</span>,<span class="number">111</span>)</span><br><span class="line"><span class="built_in">print</span>(tup1.index(<span class="number">111</span>))      <span class="comment"># 2     # 统计第一次出现111的索引是多少</span></span><br><span class="line"><span class="built_in">print</span>(tup1.count(<span class="number">111</span>))      <span class="comment"># 4     # 统计111出现的次数</span></span><br></pre></td></tr></table></figure><h2 id="六，字典"><a href="#六，字典" class="headerlink" title="六，字典"></a>六，字典</h2><h3 id="6-1-定义方式"><a href="#6-1-定义方式" class="headerlink" title="6.1 定义方式"></a>6.1 定义方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">定义：在&#123;&#125;内用逗号分隔开多元素，每一个元素都是key:value的形式，其中value可以是任意类型，而key则必须是不可变类型，且不能重复</span><br><span class="line">d = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="number">222</span>&#125;      <span class="comment"># d = dict(...)</span></span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;k1&#x27;</span>])      <span class="comment"># 111</span></span><br><span class="line"><span class="built_in">print</span>(d[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)])   <span class="comment"># 222       # 一般没人这么做</span></span><br><span class="line"><span class="comment"># 通常key应该是str类型，因为str类型会对value有描述性的功能</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))      <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">d1 = &#123;&#125;     <span class="comment"># 默认定义的是空字典</span></span><br><span class="line"><span class="built_in">print</span>(d1,<span class="built_in">type</span>(d1))      <span class="comment"># &#123;&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">d2 = <span class="built_in">dict</span>(x=<span class="number">1</span>,y=<span class="number">2</span>,z=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(d2,<span class="built_in">type</span>(d2))      <span class="comment"># &#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2, &#x27;z&#x27;: 3&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-数据类型转换"><a href="#6-2-数据类型转换" class="headerlink" title="6.2 数据类型转换"></a>6.2 数据类型转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">info = [</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>],</span><br><span class="line">    (<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>),</span><br><span class="line">    [<span class="string">&#x27;gender&#x27;</span>,<span class="string">&#x27;male&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 需求，将info列表整合成一个字典</span></span><br><span class="line">dd = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info:       <span class="comment"># item = [&#x27;name&#x27;,&#x27;zhangsan&#x27;]</span></span><br><span class="line">    dd[item[<span class="number">0</span>]]=item[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(dd)       <span class="comment"># &#123;&#x27;name&#x27;: &#x27;zhangsan&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化</span></span><br><span class="line"></span><br><span class="line">dd1 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info:</span><br><span class="line">    dd1[k]=v</span><br><span class="line"><span class="built_in">print</span>(dd1)      <span class="comment"># &#123;&#x27;name&#x27;: &#x27;zhangsan&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行代码搞定上述for循环的工作</span></span><br><span class="line">res = <span class="built_in">dict</span>(info)</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># &#123;&#x27;name&#x27;: &#x27;zhangsan&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 造字典的方式：快速初始化字典</span></span><br><span class="line">keys = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">value = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> keys:</span><br><span class="line">    dic[k]=<span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(dic)      <span class="comment"># &#123;&#x27;name&#x27;: None, &#x27;age&#x27;: None, &#x27;gender&#x27;: None&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行实现，</span></span><br><span class="line">dic1 = &#123;&#125;.fromkeys(keys,<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(dic1)     <span class="comment"># &#123;&#x27;name&#x27;: None, &#x27;age&#x27;: None, &#x27;gender&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-内置方法"><a href="#6-3-内置方法" class="headerlink" title="6.3 内置方法"></a>6.3 内置方法</h3><h4 id="6-3-1-优先掌握的操作"><a href="#6-3-1-优先掌握的操作" class="headerlink" title="6.3.1 优先掌握的操作"></a>6.3.1 优先掌握的操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、按key取值：可存可取</span></span><br><span class="line">di = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>&#125;</span><br><span class="line"><span class="comment"># 针对赋值操作：key存在，则修改</span></span><br><span class="line">di[<span class="string">&#x27;k1&#x27;</span>] = <span class="number">222</span></span><br><span class="line"><span class="built_in">print</span>(di)       <span class="comment"># &#123;&#x27;k1&#x27;: 222&#125;</span></span><br><span class="line"><span class="comment"># 针对赋值操作：key不存在，则创建新值</span></span><br><span class="line">di[<span class="string">&#x27;k2&#x27;</span>] = <span class="number">3333</span></span><br><span class="line"><span class="built_in">print</span>(di)       <span class="comment"># &#123;&#x27;k1&#x27;: 222, &#x27;k2&#x27;: 3333&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、长度len</span></span><br><span class="line">dia = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="number">3333</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dia))     <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、成员运算in和not in：根据key判断</span></span><br><span class="line">dia1 = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="number">3333</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k1&#x27;</span> <span class="keyword">in</span> dia1)     <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">222</span> <span class="keyword">in</span> dia1)      <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、删除</span></span><br><span class="line">dia2 = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="number">3333</span>&#125;</span><br><span class="line"><span class="comment"># 4.1 通用删除</span></span><br><span class="line"><span class="keyword">del</span> dia2[<span class="string">&#x27;k1&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(dia2)     <span class="comment"># &#123;&#x27;k2&#x27;: 3333&#125;</span></span><br><span class="line"><span class="comment"># 4.2 pop删除：根据key删除元素，返回删除key对应的value值</span></span><br><span class="line">pr = dia2.pop(<span class="string">&#x27;k2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dia2)     <span class="comment"># &#123;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(pr)       <span class="comment"># 3333</span></span><br><span class="line"><span class="comment"># 4.3 popitem删除：随机删除，返回一个元组（删除的key,删除的value）</span></span><br><span class="line">dia3 = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="number">3333</span>&#125;</span><br><span class="line">res = dia3.popitem()</span><br><span class="line"><span class="built_in">print</span>(dia3)     <span class="comment"># &#123;&#x27;k1&#x27;: 222&#125;</span></span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># (&#x27;k2&#x27;, 3333)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、键keys()，值values()，键值对items()  =》 python3中做了优化</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在python2中：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Python 2.7.16 (v2.7.16:413a49145e, Mar  2 2019, 14:32:10)</span></span><br><span class="line"><span class="string">[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin</span></span><br><span class="line"><span class="string">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>dist1 = &#123;&#x27;k1&#x27;: 222, &#x27;k2&#x27;: 3333&#125;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>dist1.keys()</span></span><br><span class="line"><span class="string">[&#x27;k2&#x27;, &#x27;k1&#x27;]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>dist1.values()</span></span><br><span class="line"><span class="string">[3333, 222]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>dist1.items()</span></span><br><span class="line"><span class="string">[(&#x27;k2&#x27;, 3333), (&#x27;k1&#x27;, 222)]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>dict(dist1.items())</span></span><br><span class="line"><span class="string">&#123;&#x27;k2&#x27;: 3333, &#x27;k1&#x27;: 222&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在python3中：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Python 3.9.13 (v3.9.13:6de2ca5339, May 17 2022, 11:37:23)</span></span><br><span class="line"><span class="string">[Clang 13.0.0 (clang-1300.0.29.30)] on darwin</span></span><br><span class="line"><span class="string">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>dist1 = &#123;&#x27;k1&#x27;: 222, &#x27;k2&#x27;: 3333&#125;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>dist1.keys()</span></span><br><span class="line"><span class="string">dict_keys([&#x27;k1&#x27;, &#x27;k2&#x27;])</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>dist1.values()</span></span><br><span class="line"><span class="string">dict_values([222, 3333])</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>dist1.items()</span></span><br><span class="line"><span class="string">dict_items([(&#x27;k1&#x27;, 222), (&#x27;k2&#x27;, 3333)])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、循环</span></span><br><span class="line"></span><br><span class="line">dist1 = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="number">222</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="number">3333</span>&#125;</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> dist1.keys():</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d1 <span class="keyword">in</span> dist1:</span><br><span class="line">    <span class="built_in">print</span>(d1)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">k1</span><br><span class="line">k2</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d2 <span class="keyword">in</span> dist1.values():</span><br><span class="line">    <span class="built_in">print</span>(d2)</span><br><span class="line">    </span><br><span class="line">输出：</span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="number">3333</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dist1.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">(<span class="string">&#x27;k1&#x27;</span>, <span class="number">222</span>)</span><br><span class="line">(<span class="string">&#x27;k2&#x27;</span>, <span class="number">3333</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 做解压操作</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dist1.items():</span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">k1 <span class="number">222</span></span><br><span class="line">k2 <span class="number">3333</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dist1.keys()))       <span class="comment"># [&#x27;k1&#x27;, &#x27;k2&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dist1.values()))     <span class="comment"># [222, 3333]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dist1.items()))      <span class="comment"># [(&#x27;k1&#x27;, 222), (&#x27;k2&#x27;, 3333)]</span></span><br></pre></td></tr></table></figure><h4 id="6-3-2-需要掌握的内置方法"><a href="#6-3-2-需要掌握的内置方法" class="headerlink" title="6.3.2 需要掌握的内置方法"></a>6.3.2 需要掌握的内置方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 其他：需要掌握的内置方法</span></span><br><span class="line"></span><br><span class="line">d_1 = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、d_1.clear()   # 清空字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、d_1.update()    # 更新字典</span></span><br><span class="line">d_2 = &#123;<span class="string">&#x27;k2&#x27;</span>:<span class="number">222</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="number">333</span>&#125;</span><br><span class="line">d_1.update(d_2)</span><br><span class="line"><span class="built_in">print</span>(d_1)      <span class="comment"># &#123;&#x27;k1&#x27;: 111, &#x27;k2&#x27;: 222, &#x27;k3&#x27;: 333&#125;</span></span><br><span class="line"></span><br><span class="line">d_1.update(&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">11111111</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(d_1)      <span class="comment"># &#123;&#x27;k1&#x27;: 11111111, &#x27;k2&#x27;: 222, &#x27;k3&#x27;: 333&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d_1.get()：根据key取值，容错性好</span></span><br><span class="line"><span class="built_in">print</span>(d_1[<span class="string">&#x27;k1&#x27;</span>])    <span class="comment"># 11111111   # key不存在则报错</span></span><br><span class="line"><span class="built_in">print</span>(d_1.get(<span class="string">&#x27;k1&#x27;</span>))    <span class="comment"># 11111111</span></span><br><span class="line"><span class="built_in">print</span>(d_1.get(<span class="string">&#x27;k5&#x27;</span>))    <span class="comment"># None   # key不存在返回None</span></span><br><span class="line"><span class="comment"># 还可以附加说明</span></span><br><span class="line"><span class="built_in">print</span>(d_1.get(<span class="string">&#x27;kkk&#x27;</span>,<span class="string">&#x27;没有找到值哦～&#x27;</span>))     <span class="comment"># 没有找到值哦～</span></span><br><span class="line"><span class="built_in">print</span>(d_1.get(<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;没有找到值哦～&#x27;</span>))      <span class="comment"># 11111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d_1.setdefault()：如果k1有，则不添加，如果没有，则添加，返回值：返回字典中key对应的值</span></span><br><span class="line">pres = d_1.setdefault(<span class="string">&#x27;k1&#x27;</span>,<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(d_1)      <span class="comment"># &#123;&#x27;k1&#x27;: 11111111, &#x27;k2&#x27;: 222, &#x27;k3&#x27;: 333&#125;</span></span><br><span class="line"><span class="built_in">print</span>(pres)     <span class="comment"># 11111111</span></span><br><span class="line"></span><br><span class="line">d_1.setdefault(<span class="string">&#x27;kkk&#x27;</span>,<span class="number">123321</span>)</span><br><span class="line"><span class="built_in">print</span>(d_1)      <span class="comment"># &#123;&#x27;k1&#x27;: 11111111, &#x27;k2&#x27;: 222, &#x27;k3&#x27;: 333, &#x27;kkk&#x27;: 123321&#125;</span></span><br></pre></td></tr></table></figure><h2 id="七，集合"><a href="#七，集合" class="headerlink" title="七，集合"></a>七，集合</h2><blockquote><p>集合、list、tuple、dict一样都可以存放多个值，但是集合主要用于：去重、关系运算</p></blockquote><h3 id="7-1-定义"><a href="#7-1-定义" class="headerlink" title="7.1 定义"></a>7.1 定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">定义：在&#123;&#125;内用逗号分隔开多个元素，集合具备以下三个特点：</span></span><br><span class="line"><span class="string">     1：每个元素必须是不可变类型</span></span><br><span class="line"><span class="string">     2：集合内没有重复的元素</span></span><br><span class="line"><span class="string">     3：集合内元素无序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;  <span class="comment"># 本质 s = set(&#123;1,2,3,4&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意1：列表类型是索引对应值，字典是key对应值，均可以取得单个指定的值，而集合类型既没有索引也没有key与值对应，所以无法取得单个的值，而且对于集合来说，主要用于去重与关系元素，根本没有取出单个指定值这种需求。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意2:&#123;&#125;既可以用于定义dict，也可以用于定义集合，但是字典内的元素必须是key:value的格式，现在我们想定义一个空字典和空集合，该如何准确去定义两者?</span></span><br><span class="line">d = &#123;&#125; <span class="comment"># 默认是空字典 </span></span><br><span class="line">s = <span class="built_in">set</span>() <span class="comment"># 这才是定义空集合</span></span><br></pre></td></tr></table></figure><h3 id="7-3-类型转换"><a href="#7-3-类型转换" class="headerlink" title="7.3 类型转换"></a>7.3 类型转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set(&#123;1,2,3&#125;)</span></span><br><span class="line">res = <span class="built_in">set</span>(<span class="string">&#x27;hellolllllll&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># &#123;&#x27;e&#x27;, &#x27;l&#x27;, &#x27;h&#x27;, &#x27;o&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]))     <span class="comment"># &#123;1&#125;</span></span><br><span class="line"><span class="comment"># print(set([1,1,1,1,1,1,1,[111,222]]))       # 报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">2</span>&#125;))     <span class="comment"># &#123;&#x27;k1&#x27;, &#x27;k2&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-使用"><a href="#7-4-使用" class="headerlink" title="7.4 使用"></a>7.4 使用</h3><h4 id="7-4-1-关系运算"><a href="#7-4-1-关系运算" class="headerlink" title="7.4.1 关系运算"></a>7.4.1 关系运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">friends1 = &#123;<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;zhaoliu&#x27;</span>&#125;</span><br><span class="line">friends2 = &#123;<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;liuba&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.1、取交集：两者共同的好友</span></span><br><span class="line">res = friends1 &amp; friends2</span><br><span class="line"><span class="built_in">print</span>(res)      <span class="comment"># &#123;&#x27;wangwu&#x27;, &#x27;lisi&#x27;, &#x27;zhangsan&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方法也可以</span></span><br><span class="line"><span class="built_in">print</span>(friends1.intersection(friends2))      <span class="comment"># &#123;&#x27;zhangsan&#x27;, &#x27;lisi&#x27;, &#x27;wangwu&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.2、取并集/合集：两者所有的好友</span></span><br><span class="line"></span><br><span class="line">res1 = friends1 | friends2</span><br><span class="line"><span class="built_in">print</span>(res1)     <span class="comment"># &#123;&#x27;zhangsan&#x27;, &#x27;wangwu&#x27;, &#x27;zhaoliu&#x27;, &#x27;lisi&#x27;, &#x27;liuba&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(friends1.union(friends2))     <span class="comment"># # &#123;&#x27;zhangsan&#x27;, &#x27;wangwu&#x27;, &#x27;zhaoliu&#x27;, &#x27;lisi&#x27;, &#x27;liuba&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.3、取差集：取friend1独有的好友</span></span><br><span class="line">res2 = friends1 - friends2      <span class="comment"># 有顺序要求，保留firends1独有的好友</span></span><br><span class="line"><span class="built_in">print</span>(res2)     <span class="comment"># &#123;&#x27;zhaoliu&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(friends1.difference(friends2))     <span class="comment"># &#123;&#x27;zhaoliu&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(friends2 - friends1)      <span class="comment"># &#123;&#x27;liuba&#x27;&#125;     # 取firends2独有的好友</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.4、对称差集：取两者独有的好友（即去掉共同好友）</span></span><br><span class="line"><span class="built_in">print</span>(friends1 ^ friends2)      <span class="comment"># &#123;&#x27;zhaoliu&#x27;, &#x27;liuba&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(friends1.symmetric_difference(friends2))      <span class="comment"># &#123;&#x27;zhaoliu&#x27;, &#x27;liuba&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.5 父子集：包含的关系</span></span><br><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 不存在包含关系，下面比较均为False</span></span><br><span class="line"><span class="built_in">print</span>(s1 &gt; s2)      <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(s1 &lt; s2)      <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">s3 = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># 当s1大于或者等于s3时，才能说s1是s3的父集</span></span><br><span class="line"><span class="built_in">print</span>(s1 &gt; s3)      <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s3))        <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s3.issubset(s1))          <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">s4 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 互为父子集</span></span><br><span class="line"><span class="built_in">print</span>(s1 == s4)     <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s4))</span><br><span class="line"><span class="built_in">print</span>(s4.issuperset(s1))</span><br></pre></td></tr></table></figure><h4 id="7-4-2-去重"><a href="#7-4-2-去重" class="headerlink" title="7.4.2 去重"></a>7.4.2 去重</h4><pre><code>集合去重复有局限性    # 1. 只能针对不可变类型    # 2. 集合本身是无序的，去重之后无法保留原来的顺序</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、只能针对不可变类型去重</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]))   <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、无法保证原来的顺序</span></span><br><span class="line">l = [<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">l = <span class="built_in">list</span>(<span class="built_in">set</span>(l))</span><br><span class="line"><span class="built_in">print</span>(l)        <span class="comment"># [1, 2, &#x27;z&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lis=[</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">73</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;female&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">new_l = []</span><br><span class="line"><span class="keyword">for</span> dic <span class="keyword">in</span> lis:</span><br><span class="line">    <span class="keyword">if</span> dic <span class="keyword">not</span> <span class="keyword">in</span> new_l:</span><br><span class="line">        new_l.append(dic)</span><br><span class="line"><span class="built_in">print</span>(new_l)      </span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lili&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">73</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;female&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="7-4-3-其他操作"><a href="#7-4-3-其他操作" class="headerlink" title="7.4.3 其他操作"></a>7.4.3 其他操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其他内置方法</span></span><br><span class="line"></span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s.discard(<span class="number">3</span>)    <span class="comment"># 指定元素删除，元素不存在不报错</span></span><br><span class="line"><span class="built_in">print</span>(s)        <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s.remove(3)   # 删除不存在的元素报错</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"></span><br><span class="line">s.update(&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;)   <span class="comment"># 更新并去重</span></span><br><span class="line"><span class="built_in">print</span>(s)        <span class="comment"># &#123;1, 2, 3, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 了解</span></span><br><span class="line">s.difference_update(&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;)        <span class="comment">#取差集，不影响原集合。等于s = s.difference(&#123;3,4,5&#125;)</span></span><br><span class="line"><span class="built_in">print</span>(s)        <span class="comment"># &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="八，可变不可变类型"><a href="#八，可变不可变类型" class="headerlink" title="八，可变不可变类型"></a>八，可变不可变类型</h2><pre><code># 可变类型：值改变，id不变，证明改变的是原值，证明原值是可以被改变的# 不可变类型：值改变，id也改变。证明是产生新的值，压根没有改变原值，证明原值是不可以被修改的</code></pre><h3 id="8-1-验证"><a href="#8-1-验证" class="headerlink" title="8.1 验证"></a>8.1 验证</h3><h4 id="8-1-1-int是不可变类型"><a href="#8-1-1-int是不可变类型" class="headerlink" title="8.1.1 int是不可变类型"></a>8.1.1 int是不可变类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))        <span class="comment"># 4559862352</span></span><br><span class="line">x = <span class="number">11</span>      <span class="comment"># 产生新的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))        <span class="comment"># 4441344624</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/16/jibenshujuleixingheneizhifangfa/1.png"></p><h4 id="8-1-2-float是不可变类型"><a href="#8-1-2-float是不可变类型" class="headerlink" title="8.1.2 float是不可变类型"></a>8.1.2 float是不可变类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">3.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))        <span class="comment"># 4549023280</span></span><br><span class="line">x = <span class="number">3.2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))        <span class="comment"># 4312741360</span></span><br></pre></td></tr></table></figure><h4 id="8-1-3-str是不可变类型"><a href="#8-1-3-str是不可变类型" class="headerlink" title="8.1.3 str是不可变类型"></a>8.1.3 str是不可变类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))        <span class="comment"># 4516407088</span></span><br><span class="line">x = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))        <span class="comment"># 4383786800</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/16/jibenshujuleixingheneizhifangfa/2.png"></p><blockquote><p><strong>小结：int、float、str都被设计成了不可分割的整体，不能够被改变</strong></p></blockquote><h4 id="8-1-4-lsit是可变类型"><a href="#8-1-4-lsit是可变类型" class="headerlink" title="8.1.4 lsit是可变类型"></a>8.1.4 lsit是可变类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l))        <span class="comment"># 4415875904</span></span><br><span class="line">l[<span class="number">0</span>] = <span class="string">&#x27;AAA&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l))        <span class="comment"># 4415875904</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/16/jibenshujuleixingheneizhifangfa/3.png"></p><h4 id="8-1-5-dict是可变类型"><a href="#8-1-5-dict是可变类型" class="headerlink" title="8.1.5 dict是可变类型"></a>8.1.5 dict是可变类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">222</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dic))      <span class="comment"># 4500481664</span></span><br><span class="line">dic[<span class="string">&#x27;k1&#x27;</span>] = <span class="number">3333</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dic))      <span class="comment"># 4500481664</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关于字典补充</span></span><br><span class="line"><span class="comment"># 定义：&#123;&#125;内用逗号分隔开多key:value，其中value可以是任意类型，但是key必须是不可变类型。</span></span><br><span class="line"></span><br><span class="line">dic1 = &#123;</span><br><span class="line">    <span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>,</span><br><span class="line">    <span class="string">&#x27;k2&#x27;</span>:<span class="number">3.1</span>,</span><br><span class="line">    <span class="string">&#x27;k3&#x27;</span>:[<span class="number">333</span>,],</span><br><span class="line">    <span class="string">&#x27;k4&#x27;</span>:<span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k5&#x27;</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;,</span><br><span class="line">    <span class="number">333</span>:<span class="number">111</span>,</span><br><span class="line">    <span class="number">3.3</span>:<span class="string">&#x27;hello&#x27;</span>             <span class="comment"># 百分之99的key类型都是str</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-6-bool是不可变类型"><a href="#8-1-6-bool是不可变类型" class="headerlink" title="8.1.6 bool是不可变类型"></a>8.1.6 bool是不可变类型</h4><h2 id="九，数据类型总结"><a href="#九，数据类型总结" class="headerlink" title="九，数据类型总结"></a>九，数据类型总结</h2><p>|<strong>按存值个数区分</strong>||<br>|-|<br>|只能存一个值：可称为标量&#x2F;原子类型|数字、字符串|<br>|可以存放多个值：可称为容器类型|列表、元组、字典|<br>|<strong>按照访问方式区分</strong>||<br>|直接访问：只能通过变量名访问整个值|数字|<br>|顺序访问：可以用索引访问固定的值，索引代表顺序，又称为序列类型|字符串、列表、元组|<br>|key访问：可以用key访问指定的值，又称为映射类型|字典|<br>|<strong>按可变不可变区分</strong>||<br>|可变类型|列表、字典|<br>|不可变类型|数字、元组、字符串|</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语法入门之流程控制</title>
      <link href="/articles/2023/03/16/pythonyufarumenzhiliuchengkongzhi/"/>
      <url>/articles/2023/03/16/pythonyufarumenzhiliuchengkongzhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="7、Python语法入门之流程控制"><a href="#7、Python语法入门之流程控制" class="headerlink" title="7、Python语法入门之流程控制"></a>7、Python语法入门之流程控制</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引子"><a href="#一，引子" class="headerlink" title="一，引子"></a>一，引子</h2><blockquote><p>流程控制即控制流程，具体指控制程序的执行流程，而程序的执行流程分为三种结构：顺序结构（之前我们写的代码都是顺序结构）、分支结构（用到if判断）、循环结构（用到while与for）</p></blockquote><h2 id="二，分支结构"><a href="#二，分支结构" class="headerlink" title="二，分支结构"></a>二，分支结构</h2><h3 id="2-1-什么是分支结构"><a href="#2-1-什么是分支结构" class="headerlink" title="2.1 什么是分支结构"></a>2.1 什么是分支结构</h3><pre><code>分支结构就是根据条件判断的真假去执行不同分支对应的子代码</code></pre><h3 id="2-2-为什么要用分支结构"><a href="#2-2-为什么要用分支结构" class="headerlink" title="2.2 为什么要用分支结构"></a>2.2 为什么要用分支结构</h3><blockquote><p>人类某些时候需要根据条件来决定做什么事情，比如：如果今天下雨，就带伞</p></blockquote><blockquote><p>所以程序中必须有相应的机制来控制计算机具备人的这种判断能力</p></blockquote><h3 id="2-3-如何使用分支结构"><a href="#2-3-如何使用分支结构" class="headerlink" title="2.3 如何使用分支结构"></a>2.3 如何使用分支结构</h3><h4 id="2-3-1-if语法"><a href="#2-3-1-if语法" class="headerlink" title="2.3.1 if语法"></a>2.3.1 if语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">语法1：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if 条件：</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断年龄和美丽</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">is_beautiful = <span class="literal">True</span></span><br><span class="line">star = <span class="string">&#x27;水瓶座&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">16</span> <span class="keyword">and</span> age &lt; <span class="number">20</span> <span class="keyword">and</span> is_beautiful <span class="keyword">and</span> star == <span class="string">&#x27;水瓶座&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;喜欢&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==============&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">语法2：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if 条件：</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上案例加上else</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">is_beautiful = <span class="literal">True</span></span><br><span class="line">star = <span class="string">&#x27;水瓶座&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">16</span> <span class="keyword">and</span> age &lt; <span class="number">20</span> <span class="keyword">and</span> is_beautiful <span class="keyword">and</span> star == <span class="string">&#x27;水瓶座&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;喜欢&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;闹玩呢！&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==============&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">语法3：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if 条件1：</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">elif 条件2：</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;厉害&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> num &gt;= <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;还可以&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断成绩案例</span></span><br><span class="line">sorce = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入成绩：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sorce &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;you&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> sorce&gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;liang&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> sorce &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;jige&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">语法4：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if 条件1：</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">elif 条件2：</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">elif 条件3：</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">elif 条件4：</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断成绩优化</span></span><br><span class="line">sorce = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入成绩：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sorce &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;you&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> sorce&gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;liang&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> sorce &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;jige&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;xiaolaji&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=======&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if嵌套if</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套案例</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">is_beautiful = <span class="literal">True</span></span><br><span class="line">star = <span class="string">&#x27;水瓶座&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">16</span> <span class="keyword">and</span> age &lt; <span class="number">20</span> <span class="keyword">and</span> is_beautiful <span class="keyword">and</span> star == <span class="string">&#x27;水瓶座&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;表白&#x27;</span>)</span><br><span class="line">    is_beautiful = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> is_beautiful:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;成功了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;闹玩呢！&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==============&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="三，循环结构"><a href="#三，循环结构" class="headerlink" title="三，循环结构"></a>三，循环结构</h2><h3 id="3-1-什么是循环结构"><a href="#3-1-什么是循环结构" class="headerlink" title="3.1 什么是循环结构"></a>3.1 什么是循环结构</h3><pre><code>循环结构就是重复执行某段代码块</code></pre><h3 id="3-2-为什么要用循环结构"><a href="#3-2-为什么要用循环结构" class="headerlink" title="3.2 为什么要用循环结构"></a>3.2 为什么要用循环结构</h3><blockquote><p>人类某些时候需要重复做某件事情</p></blockquote><blockquote><p>所以程序中必须有相应的机制来控制计算机具备人的这种循环做事的能力</p></blockquote><h3 id="3-3-如何使用循环结构"><a href="#3-3-如何使用循环结构" class="headerlink" title="3.3 如何使用循环结构"></a>3.3 如何使用循环结构</h3><h4 id="3-3-1-while循环语法"><a href="#3-3-1-while循环语法" class="headerlink" title="3.3.1 while循环语法"></a>3.3.1 while循环语法</h4><pre><code>python中有while与for两种循环机制，其中while循环称之为条件循环，语法如下</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">     代码<span class="number">1</span>     </span><br><span class="line">     代码<span class="number">2</span>     </span><br><span class="line">     代码<span class="number">3</span></span><br><span class="line"><span class="keyword">while</span>的运行步骤：</span><br><span class="line">步骤<span class="number">1</span>：如果条件为真，那么依次执行：代码<span class="number">1</span>、代码<span class="number">2</span>、代码<span class="number">3</span>、......</span><br><span class="line">步骤<span class="number">2</span>：执行完毕后再次判断条件,如果条件为<span class="literal">True</span>则再次执行：代码<span class="number">1</span>、代码<span class="number">2</span>、代码<span class="number">3</span>、......，如果条件为<span class="literal">False</span>,则循环终止</span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/16/pythonyufarumenzhiliuchengkongzhi/1.png"></p><h4 id="3-3-2-while循环应用案例"><a href="#3-3-2-while循环应用案例" class="headerlink" title="3.3.2 while循环应用案例"></a>3.3.2 while循环应用案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、循环的语法与基本使用</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">while 条件:</span></span><br><span class="line"><span class="string">    代码1</span></span><br><span class="line"><span class="string">    代码2</span></span><br><span class="line"><span class="string">    代码3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dj=========&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、死循环与效率问题</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;your name &gt;&gt;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 纯计算，无io的死循环会导致致命的效率问题</span></span><br><span class="line"><span class="comment"># while True:</span></span><br><span class="line"><span class="comment">#     1+1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、循环的应用</span></span><br><span class="line">username = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">passwd = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个问题：</span></span><br><span class="line"><span class="comment"># 1、重复代码</span></span><br><span class="line"><span class="comment"># 2、输对了不应该再重复</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入账号：&#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == passwd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;账号加密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、退出循环的两种方式</span></span><br><span class="line"><span class="comment"># 方式一：将条件改为False，等到下次循环判断条件时才会生效</span></span><br><span class="line"></span><br><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入账号：&#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == passwd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line">        tag = <span class="literal">False</span>     <span class="comment"># 之后的代码还会运行，下次循环判断条件时才会生效</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;账号加密码错误&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===end===&#x27;</span>)    <span class="comment"># 这行代码亦然会执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：break，只要运行到break就会立刻终止本层循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入账号：&#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == passwd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span>     <span class="comment"># 立刻终止本层循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;账号加密码错误&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===end===&#x27;</span>)      <span class="comment"># 这个代码不会执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、while循环嵌套</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tag = True</span></span><br><span class="line"><span class="string">while tag:</span></span><br><span class="line"><span class="string">    while tag:</span></span><br><span class="line"><span class="string">        while tag:</span></span><br><span class="line"><span class="string">            tag = False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 每一层都必须配一个break</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">        while True:</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">    break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### break的方式</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入账号：&#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == passwd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd=<span class="built_in">input</span>(<span class="string">&#x27;输入编号&gt;&gt;:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;命令&#123;x&#125;正在运行&#x27;</span>.<span class="built_in">format</span>(x=cmd))</span><br><span class="line">        <span class="keyword">break</span>     <span class="comment"># 立刻终止本层循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;账号加密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 改变条件的方式</span></span><br><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入账号：&#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == passwd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> tag:</span><br><span class="line">            cmd=<span class="built_in">input</span>(<span class="string">&#x27;输入编号&gt;&gt;:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">                tag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;命令&#123;x&#125;正在运行&#x27;</span>.<span class="built_in">format</span>(x=cmd))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;账号加密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、while +continue # 结束本次循环，直接进入下一次循环</span></span><br><span class="line"><span class="comment"># 强调：在continue之后添加同级代码毫无意义，因为永远无法运行</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">4</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># count += 1        # 错误</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9、while +else     # 针对break</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">if</span>  count == <span class="number">4</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;else包含的代码会在while循环结束后，并且while循环是在没有被break打断的情况下正常结束的，才会运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不会运行</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">if</span>  count == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;else包含的代码会在while循环结束后，并且while循环是在没有被break打断的情况下正常结束的，才会运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用案例：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本1：</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    <span class="keyword">if</span>  count == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输错超过三次，退出程序&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入账号：&#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == passwd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> tag:</span><br><span class="line">            cmd=<span class="built_in">input</span>(<span class="string">&#x27;输入编号&gt;&gt;:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">                tag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;命令&#123;x&#125;正在运行&#x27;</span>.<span class="built_in">format</span>(x=cmd))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;账号加密码错误&#x27;</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版本2：优化</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入账号：&#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inp_name == username <span class="keyword">and</span> inp_pwd == passwd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd=<span class="built_in">input</span>(<span class="string">&#x27;输入编号&gt;&gt;:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;q&#x27;</span>:      <span class="comment"># 整个程序结束，退出while循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;命令&#123;x&#125;正在运行&#x27;</span>.<span class="built_in">format</span>(x=cmd))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;账号加密码错误&#x27;</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输错三次，退出&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-3-3-for循环语法"><a href="#3-3-3-for循环语法" class="headerlink" title="3.3.3 for循环语法"></a>3.3.3 for循环语法</h4><blockquote><p>循环结构的第二种实现方式是for循环，for循环可以做的事情while循环都可以实现，之所以用for循环是因为在循环取值（即遍历值）时for循环比while循环的使用更为简洁，</p></blockquote><p><strong>for循环语法如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、什么是<span class="keyword">for</span>循环</span><br><span class="line">    循环就是重复做某件事，<span class="keyword">for</span>循环是python提供的第二种循环机制</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、为何要有<span class="keyword">for</span>循环</span><br><span class="line">    理论上<span class="keyword">for</span>能做的事情，<span class="keyword">while</span>循环都可以做，之所以要有<span class="keyword">for</span>循环，是因为<span class="keyword">for</span>循环在循环取值（遍历取值）比<span class="keyword">while</span>循环更简洁</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、如何用<span class="keyword">for</span>循环</span><br><span class="line">语法：</span><br><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 可迭代对象:   <span class="comment"># 可迭代对象可以是：列表、字典、字符串、元组、集合</span></span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    代码<span class="number">3</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/16/pythonyufarumenzhiliuchengkongzhi/2.png"></p><h4 id="3-3-4-for循环应用案例"><a href="#3-3-4-for循环应用案例" class="headerlink" title="3.3.4 for循环应用案例"></a>3.3.4 for循环应用案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、基本使用之循环取值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例1：列表循环取值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单版：</span></span><br><span class="line">l = [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂版：</span></span><br><span class="line">l = [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(l[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2：字典循环取值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单版：</span></span><br><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">222</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="number">333</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(k,dic[k])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂版：while循环可以遍历字典，太麻烦了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例3：字符串循环取值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单版：</span></span><br><span class="line">msg = <span class="string">&#x27;you can you up,no can no bb&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> msg:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四，深浅copy"><a href="#四，深浅copy" class="headerlink" title="四，深浅copy"></a>四，深浅copy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">list1 = [</span><br><span class="line">    <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lxx&#x27;</span>,</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、二者分隔不开，list1改，list2也跟着改，因为指向的就是同一个地址</span></span><br><span class="line">list2 = list1     <span class="comment"># 这不叫copy</span></span><br><span class="line">list1[<span class="number">0</span>] = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、需求：</span></span><br><span class="line"><span class="comment"># 2.1、拷贝以下原列表，产生一个新的列表</span></span><br><span class="line"><span class="comment"># 2.2、想让两个列表完全独立开，针对的是改操作的独立，而不是读操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、如何copy列表</span></span><br><span class="line"><span class="comment"># 3.1、浅copy</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">浅拷贝是把原列表第一层的内存地址不加区分完全copy一份给新的列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">list1 = [</span><br><span class="line">    <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lxx&#x27;</span>,</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">list3 = list1.copy()</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1),<span class="built_in">id</span>(list1[<span class="number">0</span>]),<span class="built_in">id</span>(list1[<span class="number">1</span>]),<span class="built_in">id</span>(list1[<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list3),<span class="built_in">id</span>(list3[<span class="number">0</span>]),<span class="built_in">id</span>(list3[<span class="number">1</span>]),<span class="built_in">id</span>(list3[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lxx&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="number">4431313536</span> <span class="number">4431275824</span> <span class="number">4431313392</span> <span class="number">4431313856</span></span><br><span class="line"><span class="number">4431653376</span> <span class="number">4431275824</span> <span class="number">4431313392</span> <span class="number">4431313856</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实验1：对于不可变类型的赋值，都是产生了新值，让原列表的索引指向新的的内存地址，并不会影响新列表</span></span><br><span class="line">list1[<span class="number">0</span>] = <span class="string">&#x27;ZHANGSAN&#x27;</span></span><br><span class="line">list1[<span class="number">1</span>] = <span class="string">&#x27;LXX&#x27;</span></span><br><span class="line">list1[<span class="number">2</span>] = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实验2：但对于可变类型，我们可以改变可变类型中包含的值，但内存地址不变，即原列表的索引指向仍然指向原来的内存地址，于是新的列表也跟着一起受影响。</span></span><br><span class="line">list1[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">111</span>     <span class="comment"># 改的是列表内的列表内的值</span></span><br><span class="line">list1[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">222</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lxx&#x27;</span>, [<span class="number">111</span>, <span class="number">222</span>]]</span><br><span class="line">[<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lxx&#x27;</span>, [<span class="number">111</span>, <span class="number">222</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">综合实验1和实验2可以得出，要想copy得到的新列表与原列表的改操作完全独立开，必须有一种可以区分开可变类型与不可变类型的copy机制，这就是深copy</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2、深copy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list1 = [</span><br><span class="line">    <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lxx&#x27;</span>,</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">list3 = copy.deepcopy(list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list3))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1[<span class="number">0</span>]),<span class="built_in">id</span>(list1[<span class="number">1</span>]),<span class="built_in">id</span>(list1[<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list3[<span class="number">0</span>]),<span class="built_in">id</span>(list3[<span class="number">1</span>]),<span class="built_in">id</span>(list3[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">4326850176</span></span><br><span class="line"><span class="number">4326812544</span></span><br><span class="line"><span class="number">4326434608</span> <span class="number">4326472496</span> <span class="number">4326762432</span></span><br><span class="line"><span class="number">4326434608</span> <span class="number">4326472496</span> <span class="number">4327024704</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1[<span class="number">2</span>][<span class="number">0</span>]),<span class="built_in">id</span>(list3[<span class="number">2</span>][<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">list1[<span class="number">0</span>] = <span class="string">&#x27;ZHANGSAN&#x27;</span></span><br><span class="line">list1[<span class="number">1</span>] = <span class="string">&#x27;LXX&#x27;</span></span><br><span class="line">list1[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">111</span></span><br><span class="line">list1[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">4499180288</span></span><br><span class="line"><span class="number">4497668400</span> <span class="number">4497668400</span></span><br><span class="line">[<span class="string">&#x27;ZHANGSAN&#x27;</span>, <span class="string">&#x27;LXX&#x27;</span>, [<span class="number">111</span>, <span class="number">222</span>]]</span><br><span class="line">[<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lxx&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语法入门之与用户交互、运算符</title>
      <link href="/articles/2023/03/16/pythonyufarumenzhiyonghujiaohu-yunsuanfu/"/>
      <url>/articles/2023/03/16/pythonyufarumenzhiyonghujiaohu-yunsuanfu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="6、Python语法入门之与用户交互、运算符"><a href="#6、Python语法入门之与用户交互、运算符" class="headerlink" title="6、Python语法入门之与用户交互、运算符"></a>6、Python语法入门之与用户交互、运算符</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，程序与用户交互"><a href="#一，程序与用户交互" class="headerlink" title="一，程序与用户交互"></a>一，程序与用户交互</h2><h3 id="1-1-什么是与用户交互"><a href="#1-1-什么是与用户交互" class="headerlink" title="1.1 什么是与用户交互"></a>1.1 什么是与用户交互</h3><blockquote><p>用户交互就是人往计算机中input&#x2F;输入数据，计算机print&#x2F;输出结果</p></blockquote><h3 id="1-2-为什么要与用户交互？"><a href="#1-2-为什么要与用户交互？" class="headerlink" title="1.2 为什么要与用户交互？"></a>1.2 为什么要与用户交互？</h3><blockquote><ul><li>为了让计算机能够像人一样与用户沟通交流</li></ul></blockquote><blockquote><ul><li>比如，过去我们去银行取钱，用户需要把帐号密码告诉柜员，而现在，柜员被ATM机取代，ATM机就是一台计算机，所以用户同样需要将帐号密码告诉计算机，于是我们的程序中必须有相应的机制来控制计算机接收用户输入的内容，并且输出结果</li></ul></blockquote><h3 id="1-3-如何与用户交互"><a href="#1-3-如何与用户交互" class="headerlink" title="1.3 如何与用户交互"></a>1.3 如何与用户交互</h3><blockquote><p>交互的本质就是输入、输出</p></blockquote><h4 id="1-3-1-输入input"><a href="#1-3-1-输入input" class="headerlink" title="1.3.1 输入input"></a>1.3.1 输入input</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在python3中，input会将用户输入的所有内容都存成字符串类型。</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入您的账号：&quot;</span>)        <span class="comment"># &quot;zhangsan&quot;</span></span><br><span class="line"><span class="built_in">print</span>(username,<span class="built_in">type</span>(username))</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">请输入您的账号：zhangsan</span><br><span class="line">zhangsan &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-输出print"><a href="#1-3-2-输出print" class="headerlink" title="1.3.2 输出print"></a>1.3.2 输出print</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)  <span class="comment"># 只输出一个值</span></span><br><span class="line">hello world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;first&#x27;</span>,<span class="string">&#x27;second&#x27;</span>,<span class="string">&#x27;third&#x27;</span>)  <span class="comment"># 一次性输出多个值，值用逗号隔开</span></span><br><span class="line">first second third</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认print功能有一个end参数，该参数的默认值为&quot;\n&quot;(代表换行)，可以将end参数的值改成任意其它字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;aaaa&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bbbb&quot;</span>,end=<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cccc&quot;</span>,end=<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line"><span class="comment">#整体输出结果为：aaaabbbb&amp;cccc@</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(age,<span class="built_in">type</span>(age))</span><br><span class="line">age = <span class="built_in">int</span>(age)      <span class="comment"># int只能将纯数字的字符串转成整型</span></span><br><span class="line"><span class="built_in">print</span>(age &gt; <span class="number">16</span>)</span><br></pre></td></tr></table></figure><h4 id="1-3-3-输出之格式化输出"><a href="#1-3-3-输出之格式化输出" class="headerlink" title="1.3.3 输出之格式化输出"></a>1.3.3 输出之格式化输出</h4><ol><li>什么是格式化输出？</li></ol><blockquote><p>把一段字符串里面的某些内容替换掉之后再输出，就是格式化输出。</p></blockquote><ol start="2"><li>为什么要格式化输出？</li></ol><blockquote><p>我们经常会输出具有某种固定格式的内容，比如：’亲爱的xxx你好！你xxx月的话费是xxx，余额是xxx‘，我们需要做的就是将xxx替换为具体的内容。</p></blockquote><ol start="3"><li><p>如何格式化输出？</p><ul><li>3.1  %（最不推荐）</li></ul><blockquote><p>值按照位置与%s一一对应，少一个不行，多一个也不行</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="string">&quot;my name is %s my age is %s&quot;</span> %(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&quot;18&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">my name <span class="keyword">is</span> zhangsan my age <span class="keyword">is</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><blockquote><p>以字典的形式传值，打破位置规则</p></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="string">&quot;我的名字是%(name)s 我的年龄是%(age)s&quot;</span> %&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">我的名字是zhangsan 我的年龄是<span class="number">18</span></span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %s可以接收任意类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my age is %s&#x27;</span> %<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my age is %s&#x27;</span> %[<span class="number">1</span>,<span class="number">23</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my age is %s&#x27;</span> %&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">222</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my age is %d&#x27;</span> %<span class="number">18</span>)     <span class="comment"># %d 只能接受int</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my age is %s&#x27;</span> %<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">my age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line">my age <span class="keyword">is</span> [<span class="number">1</span>, <span class="number">23</span>]</span><br><span class="line">my age <span class="keyword">is</span> &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">222</span>&#125;</span><br><span class="line">my age <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line">my age <span class="keyword">is</span> aaa</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>3.2 str.format：特点是兼容性好（速度第二）</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照位置取</span></span><br><span class="line">res = <span class="string">&#x27;我的名字是&#123;&#125; 我的年龄是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">我的名字是zhangsan 我的年龄是<span class="number">18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;我的名字是&#123;0&#125;&#123;0&#125; 我的年龄是&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;zhangsan&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">我的名字是zhangsanzhangsan 我的年龄是<span class="number">18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打破位置限制，按照key=value传值</span></span><br><span class="line">res = <span class="string">&quot;我的名字是&#123;name&#125; 我的年龄是&#123;age&#125;&quot;</span>.<span class="built_in">format</span>(age=<span class="number">18</span>,name=<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">我的名字是zhangsan 我的年龄是<span class="number">18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># format新增：</span></span><br><span class="line"><span class="comment"># print(&#x27;&#123;x&#125;********&#x27;.format(x=&#x27;开始执行&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;x:*&lt;10&#125;&#x27;</span>.<span class="built_in">format</span>(x=<span class="string">&#x27;开始执行&#x27;</span>))      <span class="comment"># &lt;             表示居左显示，*号填充，10代表一共十位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;x:*&gt;10&#125;&#x27;</span>.<span class="built_in">format</span>(x=<span class="string">&#x27;开始执行&#x27;</span>))      <span class="comment"># &gt; 表示居右显示，*号填充，10代表一共十位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;x:*^10&#125;&#x27;</span>.<span class="built_in">format</span>(x=<span class="string">&#x27;开始执行&#x27;</span>))      <span class="comment"># ^ 表示居中显示，*号填充，10代表一共十位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四舍五入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;sal:.3f&#125;&#x27;</span>.<span class="built_in">format</span>(sal=<span class="number">123132.12351</span>))     <span class="comment"># 精确到小数点后三位   .3f表示小数点后三位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f的新用法：&#123;&#125;内的字符串可以被当作表达式运行</span></span><br><span class="line">res = <span class="string">f&#x27;<span class="subst">&#123;<span class="number">10</span> + <span class="number">3</span>&#125;</span>&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">print</span>(<span class="string">&quot;aaaa&quot;</span>)&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>3.3 f：python3.5之后才推出。（速度最快）</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">input</span>(<span class="string">&#x27;your name: &#x27;</span>)</span><br><span class="line">y = <span class="built_in">input</span>(<span class="string">&#x27;your age: &#x27;</span>)</span><br><span class="line">res = <span class="string">f&#x27;我的名字是<span class="subst">&#123;x&#125;</span>,我的年龄是<span class="subst">&#123;y&#125;</span>&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">your name: 张三</span><br><span class="line">your age: <span class="number">18</span></span><br><span class="line">我的名字是张三,我的年龄是<span class="number">18</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二，基本运算符"><a href="#二，基本运算符" class="headerlink" title="二，基本运算符"></a>二，基本运算符</h2><h3 id="2-1-算术运算符"><a href="#2-1-算术运算符" class="headerlink" title="2.1 算术运算符"></a>2.1 算术运算符</h3><blockquote><p>​ python支持的算数运算符与数学上计算的符号使用是一致的，我们以x&#x3D;9，y&#x3D;2为例来依次介绍它们</p></blockquote><table><thead><tr><th>算数运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加，两个对象相加</td><td>x + y得11</td></tr><tr><td>-</td><td>减，两个对象相减</td><td>x - y得7</td></tr><tr><td>*</td><td>乘，两个对象相乘</td><td>x * y得18</td></tr><tr><td>&#x2F;</td><td>除，相除后得到的返回值保留整数与小数部分</td><td>x &#x2F; y得4.5</td></tr><tr><td>&#x2F;&#x2F;</td><td>取整除，相除后得到的返回值只保留整数部分</td><td>x &#x2F;&#x2F; y得4</td></tr><tr><td>%</td><td>取余，相除后只返回余数</td><td>x % y得1</td></tr><tr><td>**</td><td>幂，取一个数的n次方</td><td>x ** y得81</td></tr></tbody></table><h3 id="2-2-比较运算符"><a href="#2-2-比较运算符" class="headerlink" title="2.2 比较运算符"></a>2.2 比较运算符</h3><blockquote><p>比较运算用来对两个值进行比较，返回的是布尔值True或False，我们以x&#x3D;9，y&#x3D;2为例来依次介绍它们</p></blockquote><table><thead><tr><th>比较运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于，两个对象相等则返回True，否则返回False</td><td>x &#x3D;&#x3D; y得False</td></tr><tr><td>!&#x3D;</td><td>不等于，两个对象相等则返回False，否则返回True</td><td>x !&#x3D; y得True</td></tr><tr><td>&gt;</td><td>大于</td><td>x &gt; y得True</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>x &gt;&#x3D; y得True</td></tr><tr><td>&lt;</td><td>小于</td><td>x &lt; y得False</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>x &lt;&#x3D; y得False</td></tr></tbody></table><h3 id="2-3-赋值运算符"><a href="#2-3-赋值运算符" class="headerlink" title="2.3 赋值运算符"></a>2.3 赋值运算符</h3><blockquote><p>python语法中除了有&#x3D;号这种简单的赋值运算外，还支持增量赋值、链式赋值、交叉赋值、解压赋值，这些赋值运算符存在的意义都是为了让我们的代码看起来更加精简。我们以x&#x3D;9，y&#x3D;2为例先来介绍一下增量赋值</p></blockquote><h4 id="2-3-1-增量赋值"><a href="#2-3-1-增量赋值" class="headerlink" title="2.3.1 增量赋值"></a>2.3.1 增量赋值</h4><p>|赋值运算符|描述|示例|<br>|-|<br>|&#x3D;|简单赋值运算|x &#x3D; 10|<br>|+&#x3D;|加法赋值运算|x &#x3D; 10，x +&#x3D; 1 等同于 x &#x3D; x + 1，x &#x3D; 11|<br>|-&#x3D;|减法赋值运算|y &#x3D; 20，y -&#x3D; 1 等同于 y &#x3D; y - 1，y &#x3D; 19|<br>|*&#x3D;|乘法赋值运算|同上|<br>|&#x2F;&#x3D;|除法赋值运算|同上|<br>|&#x2F;&#x2F;&#x3D;|取整除赋值运算|同上|<br>|%&#x3D;|取余赋值运算|同上|<br>|**&#x3D;|幂赋值运算|同上|</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line">age = age + <span class="number">1</span></span><br><span class="line">age += <span class="number">1</span>    <span class="comment"># 等于 age = age + 1</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"></span><br><span class="line">age *= <span class="number">3</span></span><br><span class="line">age /= <span class="number">3</span></span><br><span class="line">age %= <span class="number">3</span></span><br><span class="line">age **= <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-链式赋值"><a href="#2-3-2-链式赋值" class="headerlink" title="2.3.2 链式赋值"></a>2.3.2 链式赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = x</span><br><span class="line">z = y</span><br><span class="line">z = y = x = <span class="number">10</span>      <span class="comment"># 链式赋值</span></span><br><span class="line"><span class="built_in">print</span>(x,y,z)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x),<span class="built_in">id</span>(y),<span class="built_in">id</span>(z))</span><br></pre></td></tr></table></figure><h4 id="2-3-3-交叉赋值"><a href="#2-3-3-交叉赋值" class="headerlink" title="2.3.3 交叉赋值"></a>2.3.3 交叉赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">10</span></span><br><span class="line">n = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(m,n)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交换值</span></span><br><span class="line">temp = m</span><br><span class="line">m = n</span><br><span class="line">n = temp</span><br><span class="line"><span class="built_in">print</span>(m,n)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">20</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">m,n = n,m       <span class="comment"># 交叉赋值</span></span><br><span class="line"><span class="built_in">print</span>(m,n)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-解压赋值"><a href="#2-3-4-解压赋值" class="headerlink" title="2.3.4 解压赋值"></a>2.3.4 解压赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">salaris = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="comment"># 把五个月的工资取出来分别赋值给不同的变量名</span></span><br><span class="line">mon0 = salaris[<span class="number">0</span>]</span><br><span class="line">mon1 = salaris[<span class="number">1</span>]</span><br><span class="line">mon2 = salaris[<span class="number">2</span>]</span><br><span class="line">mon3 = salaris[<span class="number">3</span>]</span><br><span class="line">mon4 = salaris[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压赋值</span></span><br><span class="line">mon0,mon1,mon2,mon3,mon4 = salaris</span><br><span class="line"><span class="built_in">print</span>(mon0)</span><br><span class="line"><span class="built_in">print</span>(mon1)</span><br><span class="line"><span class="built_in">print</span>(mon2)</span><br><span class="line"><span class="built_in">print</span>(mon3)</span><br><span class="line"><span class="built_in">print</span>(mon4)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="number">333</span></span><br><span class="line"><span class="number">444</span></span><br><span class="line"><span class="number">555</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mon0,mon1,mon2,mon3 = salaris     # 对应的变量名少一个不行</span></span><br><span class="line"><span class="comment"># mon0,mon1,mon2,mon3,mon4,mon5 = salaris   # 对应的变量名多一个也不行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用*可以帮助我们取两头的值，无法取中间的值</span></span><br><span class="line"><span class="comment"># 取前三个值</span></span><br><span class="line">x,y,z,*_ = salaris = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]      <span class="comment"># *会将没有对应关系的值存成列表然后赋值给紧跟其后的那个变量名，此时这个变量名为_</span></span><br><span class="line"><span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">111</span> <span class="number">222</span> <span class="number">333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取后三个值</span></span><br><span class="line">*_,x,y,z = salaris = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">333</span> <span class="number">444</span> <span class="number">555</span></span><br><span class="line"></span><br><span class="line">x,*_,y,z = salaris = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">111</span> <span class="number">444</span> <span class="number">555</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压字典默认解压出来的是字典的key</span></span><br><span class="line">x,y,z = dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure><h3 id="2-4-逻辑运算符"><a href="#2-4-逻辑运算符" class="headerlink" title="2.4 逻辑运算符"></a>2.4 逻辑运算符</h3><blockquote><p>逻辑运算符用于连接多个条件，进行关联判断，会返回布尔值True或False</p></blockquote><p>|逻辑运算符|描述|示例|<br>|-|<br>|and|逻辑与，用于连接两个条件，两个条件同时成立时才返回True，但凡有一个条件为False则返回False|3&gt;1 and 4&#x3D;&#x3D;4，返回True|<br>|or|逻辑或，用于连接两个条件，两个条件但凡有一个成立就返回True，只有在两个条件同时为False则返回False|1&gt;2 or 3&gt;1，返回True|<br>|not|取反|not 1 &gt; 3 ，返回True|</p><h4 id="2-4-1-连续多个and"><a href="#2-4-1-连续多个and" class="headerlink" title="2.4.1 连续多个and"></a>2.4.1 连续多个and</h4><blockquote><p>可以用and连接多个条件，会按照从左到右的顺序依次判断，一旦某一个条件为False，则无需再往右判断，可以立即判定最终结果就为False，只有在所有条件的结果都为True的情况下，最终结果才为True。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span> != <span class="number">1</span> <span class="keyword">and</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="comment"># 判断完第二个条件，就立即结束，得的最终结果为False</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-连续多个or"><a href="#2-4-2-连续多个or" class="headerlink" title="2.4.2 连续多个or"></a>2.4.2 连续多个or</h4><blockquote><p>可以用or连接多个条件，会按照从左到右的顺序依次判断，一旦某一个条件为True，则无需再往右判断，可以立即判定最终结果就为True，只有在所有条件的结果都为False的情况下，最终结果才为False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">or</span> <span class="number">1</span> != <span class="number">1</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="comment"># 判断完第一个条件，就立即结束，得的最终结果为True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="2-4-3-优先级not-and-or"><a href="#2-4-3-优先级not-and-or" class="headerlink" title="2.4.3 优先级not&gt;and&gt;or"></a>2.4.3 优先级not&gt;and&gt;or</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># not：把紧跟其后的那个条件取反</span></span><br><span class="line"><span class="comment"># ps：not与紧跟其后的那个条件是一个不可分割的整体</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">16</span> &gt; <span class="number">13</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># and：逻辑与，and用来链接左右连个条件，两个结果同时为真，最终结果才为真</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="number">10</span> &gt; <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="number">10</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">0</span>) <span class="comment"># 条件全为真，最终结果才为True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="number">10</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span> == <span class="number">4</span>)    <span class="comment"># 偷懒原则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or：逻辑或，只要有一个条件为真，最终结果为真</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>&gt;<span class="number">2</span> <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">or</span> <span class="number">3</span> != <span class="number">2</span> <span class="keyword">or</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="keyword">or</span> <span class="literal">True</span>)        <span class="comment"># 偷懒原则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优先级</span></span><br><span class="line"><span class="comment"># 区分优先级：not &gt; and &gt; or</span></span><br><span class="line"><span class="comment"># ps：如果单独就只是一串and链接，或者说单独只是一串or链接，按照从左导游的顺序依次运算即可（偷懒原则）</span></span><br><span class="line"><span class="comment">#     如果是混用，则需要考虑优先级</span></span><br><span class="line"></span><br><span class="line">res = <span class="number">3</span> &gt; <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="number">4</span> &gt; <span class="number">3</span> <span class="keyword">or</span> <span class="number">1</span> == <span class="number">3</span> <span class="keyword">and</span> <span class="string">&#x27;x&#x27;</span> == <span class="string">&#x27;x&#x27;</span> <span class="keyword">or</span> <span class="number">3</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">res = (<span class="number">3</span> &gt; <span class="number">4</span> <span class="keyword">and</span> (<span class="keyword">not</span> <span class="number">4</span> &gt; <span class="number">3</span>)) <span class="keyword">or</span> (<span class="number">1</span> == <span class="number">3</span> <span class="keyword">and</span> <span class="string">&#x27;x&#x27;</span> == <span class="string">&#x27;x&#x27;</span>) <span class="keyword">or</span> <span class="number">3</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="2-5-成员运算符"><a href="#2-5-成员运算符" class="headerlink" title="2.5 成员运算符"></a>2.5 成员运算符</h3><p>|成员运算符|描述|<br>|-|<br>|in|某一个对象包含于另一个对象，则返回True。字符串、列表、元组、字典、集合都支持成员运算符|<br>|not in|某一个对象没有包含于另一个对象，则返回True|</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、成员运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;zhang&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;zhangsan&#x27;</span>)    <span class="comment"># 判断一个字符串是否存在于一个大字符串中</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;z&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;zhangsan&#x27;</span>)    <span class="comment"># 判断一个字符串是否存在于一个大字符串中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">111</span> <span class="keyword">in</span> [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>]) <span class="comment"># 判断元素是否存在与列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断key是否存在于字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">111</span> <span class="keyword">in</span> &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">222</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k1&#x27;</span> <span class="keyword">in</span> &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">222</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># not in</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;zhang&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;zhangsan&#x27;</span>)    <span class="comment"># 推荐使用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="string">&#x27;zhang&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;zhangsan&#x27;</span>)    <span class="comment"># 逻辑同上，但语义不明确，不推荐</span></span><br></pre></td></tr></table></figure><h3 id="2-6-身份运算符"><a href="#2-6-身份运算符" class="headerlink" title="2.6 身份运算符"></a>2.6 身份运算符</h3><p>|身份运算符|描述|<br>|-|<br>|is|is比较的是id，两个对象的id相同则返回True|<br>|is not|在两个对象点id不同时，is not会返回True|</p><p><strong>需要强调的是：&#x3D;&#x3D;双等号比较的是value是否相等，而is比较的是id是否相等</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. id相同，内存地址必定相同，意味着type和value必定相同</span></span><br><span class="line"><span class="comment">#2. value相同type肯定相同，但id可能不同,如下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="string">&#x27;Info Tony:18&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y=<span class="string">&#x27;Info Tony:18&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(x),<span class="built_in">id</span>(y) <span class="comment"># x与y的id不同，但是二者的值相同</span></span><br><span class="line">(<span class="number">4327422640</span>, <span class="number">4327422256</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == y <span class="comment"># 等号比较的是value</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(x),<span class="built_in">type</span>(y) <span class="comment"># 值相同type肯定相同</span></span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> y <span class="comment"># is比较的是id，x与y的值相等但id可以不同</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语法入门之垃圾回收机制</title>
      <link href="/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/"/>
      <url>/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="5、Python语法入门之垃圾回收机制"><a href="#5、Python语法入门之垃圾回收机制" class="headerlink" title="5、Python语法入门之垃圾回收机制"></a>5、Python语法入门之垃圾回收机制</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引入"><a href="#一，引入" class="headerlink" title="一，引入"></a>一，引入</h2><blockquote><p>解释器在执行到定义变量的语法时，会申请内存空间来存放变量的值，而内存的容量是有限的，这就涉及到变量值所占用内存空间的回收问题，当一个变量值没有用了（简称垃圾）就应该将其占用的内存给回收掉，那什么样的变量值是没有用的呢？</p></blockquote><blockquote><p>单从逻辑层面分析，我们定义变量将变量值存起来的目的是为了以后取出来使用，而取得变量值需要通过其绑定的直接引用（如x&#x3D;10，10被x直接引用）或间接引用（如l&#x3D;[x,]，x&#x3D;10，10被x直接引用，而被容器类型l间接引用），所以当一个变量值不再绑定任何引用时，我们就无法再访问到该变量值了，该变量值自然就是没有用的，就应该被当成一个垃圾回收。</p></blockquote><blockquote><p>毫无疑问，内存空间的申请与回收都是非常耗费精力的事情，而且存在很大的危险性，稍有不慎就有可能引发内存溢出问题，好在Cpython解释器提供了自动的垃圾回收机制来帮我们解决了这件事。</p></blockquote><h2 id="二，什么是垃圾回收机制？"><a href="#二，什么是垃圾回收机制？" class="headerlink" title="二，什么是垃圾回收机制？"></a>二，什么是垃圾回收机制？</h2><pre><code>垃圾回收机制（简称GC）是Python解释器自带一种机制，专门用来回收不可用的变量值所占用的内存空间</code></pre><h2 id="三，为什么要用垃圾回收机制？"><a href="#三，为什么要用垃圾回收机制？" class="headerlink" title="三，为什么要用垃圾回收机制？"></a>三，为什么要用垃圾回收机制？</h2><blockquote><p>程序运行过程中会申请大量的内存空间，而对于一些无用的内存空间如果不及时清理的话会导致内存使用殆尽（内存溢出），导致程序崩溃，因此管理内存是一件重要且繁杂的事情，而python解释器自带的垃圾回收机制把程序员从繁杂的内存管理中解放出来。</p></blockquote><h2 id="四，垃圾回收机制原理分析"><a href="#四，垃圾回收机制原理分析" class="headerlink" title="四，垃圾回收机制原理分析"></a>四，垃圾回收机制原理分析</h2><blockquote><p>Python的GC模块主要运用了“引用计数”（reference counting）来跟踪和回收垃圾。在引用计数的基础上，还可以通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用的问题，并且通过“分代回收”（generation collection）以空间换取时间的方式来进一步提高垃圾回收的效率。</p></blockquote><h3 id="4-1-什么是引用计数？"><a href="#4-1-什么是引用计数？" class="headerlink" title="4.1 什么是引用计数？"></a>4.1 什么是引用计数？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">引用计数就是：变量值被变量名关联的次数</span><br><span class="line"></span><br><span class="line">如：age=18</span><br><span class="line"></span><br><span class="line">变量值18被关联了一个变量名age，称之为引用计数为1</span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">引用计数增加：</span><br><span class="line"></span><br><span class="line">age=18 （此时，变量值18的引用计数为1）</span><br><span class="line"></span><br><span class="line">m=age （把age的内存地址给了m，此时，m,age都关联了18，所以变量值18的引用计数为2）</span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/2.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">引用计数减少：</span><br><span class="line"></span><br><span class="line">age=10（名字age先与值18解除关联，再与3建立了关联，变量值18的引用计数为1）</span><br><span class="line"></span><br><span class="line">del m（del的意思是解除变量名x与变量值18的关联关系，此时，变量18的引用计数为0）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/3.png"></p><pre><code>值18的引用计数一旦变为0，其占用的内存地址就应该被解释器的垃圾回收机制回收</code></pre><h3 id="4-2-引用计数扩展阅读"><a href="#4-2-引用计数扩展阅读" class="headerlink" title="4.2 引用计数扩展阅读"></a>4.2 引用计数扩展阅读</h3><pre><code>变量值被关联次数的增加或减少，都会引发引用计数机制的执行（增加或减少值的引用计数），这存在明显的效率问题。如果说执行效率还仅仅是引用计数机制的一个软肋的话，那么很不幸，引用计数机制还存在着一个致命的弱点，即循环引用（也称交叉引用）</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下我们定义了两个列表，简称列表1与列表2，变量名l1指向列表1，变量名l2指向列表2</span></span><br><span class="line">&gt;&gt;&gt; l1=[<span class="string">&#x27;xxx&#x27;</span>]  <span class="comment"># 列表1被引用一次，列表1的引用计数变为1   </span></span><br><span class="line">&gt;&gt;&gt; l2=[<span class="string">&#x27;yyy&#x27;</span>]  <span class="comment"># 列表2被引用一次，列表2的引用计数变为1   </span></span><br><span class="line">&gt;&gt;&gt; l1.append(l2)             <span class="comment"># 把列表2追加到l1中作为第二个元素，列表2的引用计数变为2</span></span><br><span class="line">&gt;&gt;&gt; l2.append(l1)             <span class="comment"># 把列表1追加到l2中作为第二个元素，列表1的引用计数变为2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># l1与l2之间有相互引用</span></span><br><span class="line"><span class="comment"># l1 = [&#x27;xxx&#x27;的内存地址,列表2的内存地址]</span></span><br><span class="line"><span class="comment"># l2 = [&#x27;yyy&#x27;的内存地址,列表1的内存地址]</span></span><br><span class="line">&gt;&gt;&gt; l1</span><br><span class="line">[<span class="string">&#x27;xxx&#x27;</span>, [<span class="string">&#x27;yyy&#x27;</span>, [...]]]</span><br><span class="line">&gt;&gt;&gt; l2</span><br><span class="line">[<span class="string">&#x27;yyy&#x27;</span>, [<span class="string">&#x27;xxx&#x27;</span>, [...]]]</span><br><span class="line">&gt;&gt;&gt; l1[1][4][0]</span><br><span class="line"><span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>循环引用会导致：值不再被任何名字关联，但是值的引用计数并不会为0，应该被回收但不能被回收，什么意思呢？试想一下，请看如下操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; del l1 <span class="comment"># 列表1的引用计数减1，列表1的引用计数变为1</span></span><br><span class="line">&gt;&gt;&gt; del l2 <span class="comment"># 列表2的引用计数减1，列表2的引用计数变为1</span></span><br></pre></td></tr></table></figure><blockquote><p>此时，只剩下列表1与列表2之间的相互引用，两个列表的引用计数均不为0，但两个列表不再被任何其他对象关联，没有任何人可以再引用到它们，所以它俩占用内存空间应该被回收，但由于相互引用的存在，每一个对象的引用计数都不为0，因此这些对象所占用的内存永远不会被释放，所以循环引用是致命的，这与手动进行内存管理所产生的内存泄露毫无区别。 所以Python引入了“标记-清除” 与“分代回收”来分别解决引用计数的循环引用与效率低的问题</p></blockquote><h4 id="4-2-1-标记-清除"><a href="#4-2-1-标记-清除" class="headerlink" title="4.2.1 标记-清除"></a>4.2.1 标记-清除</h4><blockquote><p>容器对象（比如：list，set，dict，class，instance）都可以包含对其他对象的引用，所以都可能产生循环引用。而“标记-清除”计数就是为了解决循环引用的问题。</p></blockquote><blockquote><p>在了解标记清除算法前，我们需要明确一点，关于变量的存储，内存中有两块区域：堆区与栈区，在定义变量时，变量名与值内存地址的关联关系存放于栈区，变量值存放于堆区，内存管理回收的则是堆区的内容，详解如下图,</p></blockquote><blockquote><p>定义了两个变量x &#x3D; 10、y &#x3D; 20</p></blockquote><p><img src="/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/4.png"></p><blockquote><p>当我们执行x&#x3D;y时，内存中的栈区与堆区变化如下</p></blockquote><p><img src="/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/5.png"></p><pre><code>标记/清除算法的做法是当应用程序可用的内存空间被耗尽的时，就会停止整个程序，然后进行两项工作，第一项则是标记，第二项则是清除</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、标记</span></span><br><span class="line">通俗地讲就是：标记的过程就行相当于从栈区出发一条线，“连接”到堆区，再由堆区间接“连接”到其他地址，凡是被这条自栈区起始的线连接到内存空间都属于可以访达的，会被标记为存活</span><br><span class="line"></span><br><span class="line">具体地：标记的过程其实就是，遍历所有的GC Roots对象(栈区中的所有内容或者线程都可以作为GC Roots对象），然后将所有GC Roots的对象可以直接或间接访问到的对象标记为存活的对象，其余的均为非存活对象，应该被清除。</span><br><span class="line">                          </span><br><span class="line"><span class="comment">#2、清除</span></span><br><span class="line">清除的过程将遍历堆中所有的对象，将没有标记存活的对象全部清除掉。</span><br></pre></td></tr></table></figure><blockquote><p>直接引用指的是从栈区出发直接引用到的内存地址，间接引用指的是从栈区出发引用到堆区后再进一步引用到的内存地址，以我们之前的两个列表l1与l2为例画出如下图像</p></blockquote><p><img src="/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/6.png"></p><blockquote><p>当我们同时删除l1与l2时，会清理到栈区中l1与l2的内容</p></blockquote><p><img src="/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/7.png"></p><blockquote><p>这样在启用标记清除算法时，发现栈区内不再有l1与l2（只剩下堆区内二者的相互引用），于是列表1与列表2都没有被标记为存活，二者会被清理掉，这样就解决了循环引用带来的内存泄漏问题。</p></blockquote><h4 id="4-2-2-分代回收"><a href="#4-2-2-分代回收" class="headerlink" title="4.2.2 分代回收"></a>4.2.2 分代回收</h4><blockquote><p><strong>背景：</strong><br>基于引用计数的回收机制，每次回收内存，都需要把所有对象的引用计数都遍历一遍，这是非常消耗时间的，于是引入了分代回收来提高回收效率，分代回收采用的是用“空间换时间”的策略。</p></blockquote><p><strong>分代：</strong></p><pre><code>分代回收的核心思想是：在历经多次扫描的情况下，都没有被回收的变量，gc机制就会认为，该变量是常用变量，gc对其扫描的频率会降低，具体实现原理如下：</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分代指的是根据存活时间来为变量划分不同等级（也就是不同的代）</span><br><span class="line"></span><br><span class="line">新定义的变量，放到新生代这个等级中，假设每隔1分钟扫描新生代一次，如果发现变量依然被引用，那么该对象的权重（权重本质就是个整数）加一，当变量的权重大于某个设定得值（假设为3），会将它移动到更高一级的青春代，青春代的gc扫描的频率低于新生代（扫描时间间隔更长），假设5分钟扫描青春代一次，这样每次gc需要扫描的变量的总个数就变少了，节省了扫描的总时间，接下来，青春代中的对象，也会以同样的方式被移动到老年代中。也就是等级（代）越高，被垃圾回收机制扫描的频率越低</span><br></pre></td></tr></table></figure><p><strong>回收：</strong></p><pre><code>回收依然是使用引用计数作为回收的依据</code></pre><p><img src="/articles/2023/03/16/pythonyufarumenzhilajihuishoujizhi/8.png"></p><blockquote><p>虽然分代回收可以起到提升效率的效果，但也存在一定的缺点：</p></blockquote><pre><code>例如一个变量刚刚从新生代移入青春代，该变量的绑定关系就解除了，该变量应该被回收，但青春代的扫描频率低于新生代，所以该变量的回收就会被延迟。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语法入门之基本数据类型</title>
      <link href="/articles/2023/03/16/pythonyufarumenzhishujuleixing/"/>
      <url>/articles/2023/03/16/pythonyufarumenzhishujuleixing/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="4、Python语法入门之基本数据类型"><a href="#4、Python语法入门之基本数据类型" class="headerlink" title="4、Python语法入门之基本数据类型"></a>4、Python语法入门之基本数据类型</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引入"><a href="#一，引入" class="headerlink" title="一，引入"></a>一，引入</h2><blockquote><p>我们学习变量是为了让计算机能够像人一样去记忆事物的某种状态，而变量的值就是用来存储事物状态的，很明显事物的状态分成不同种类的（比如人的年龄，身高，职位，工资等等），所以变量值也应该有不同的类型，例如</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salary = 3.1 <span class="comment"># 用浮点型去记录薪资</span></span><br><span class="line">age = 18 <span class="comment"># 用整型去记录年龄</span></span><br><span class="line">name = <span class="string">&#x27;lisi&#x27;</span> <span class="comment"># 用字符串类型去记录人名</span></span><br></pre></td></tr></table></figure><h2 id="二，数字类型"><a href="#二，数字类型" class="headerlink" title="二，数字类型"></a>二，数字类型</h2><h3 id="2-1-int整型"><a href="#2-1-int整型" class="headerlink" title="2.1 int整型"></a>2.1 int整型</h3><h4 id="2-1-1-作用"><a href="#2-1-1-作用" class="headerlink" title="2.1.1 作用"></a>2.1.1 作用</h4><pre><code>记录年龄、身份证号、个数等整数相关的状态</code></pre><h4 id="2-1-2-定义"><a href="#2-1-2-定义" class="headerlink" title="2.1.2 定义"></a>2.1.2 定义</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = 18</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(age))        <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-float浮点型"><a href="#2-2-float浮点型" class="headerlink" title="2.2 float浮点型"></a>2.2 float浮点型</h3><h4 id="2-2-1-作用"><a href="#2-2-1-作用" class="headerlink" title="2.2.1 作用"></a>2.2.1 作用</h4><pre><code>用来记录人的身高，体重，薪资等小数相关的状态</code></pre><h4 id="2-2-2-定义"><a href="#2-2-2-定义" class="headerlink" title="2.2.2 定义"></a>2.2.2 定义</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">height=173.3</span><br><span class="line">weight=73.5</span><br><span class="line">salary=15000.89</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(height))     <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-数字类型的使用"><a href="#2-3-数字类型的使用" class="headerlink" title="2.3 数字类型的使用"></a>2.3 数字类型的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数学运算</span></span><br><span class="line">level = 1</span><br><span class="line">level = level + 1</span><br><span class="line"><span class="built_in">print</span>(level)</span><br><span class="line"><span class="built_in">print</span>(10 * 3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(10+3.3)       <span class="comment"># int 与 float之间可以相加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">2</span><br><span class="line">30</span><br><span class="line">13.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较大小</span></span><br><span class="line">age = 19</span><br><span class="line"><span class="built_in">print</span>(age &gt; 18)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="三，字符串类型str"><a href="#三，字符串类型str" class="headerlink" title="三，字符串类型str"></a>三，字符串类型str</h2><h3 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用"></a>3.1 作用</h3><pre><code>用来记录人的名字，家庭住址，性别等描述性质的状态</code></pre><h3 id="3-2-定义"><a href="#3-2-定义" class="headerlink" title="3.2 定义"></a>3.2 定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"></span><br><span class="line">address = <span class="string">&#x27;北京市海淀区&#x27;</span></span><br><span class="line"></span><br><span class="line">sex = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>用单引号、双引号、多引号，都可以定义字符串，本质上是没有区别的，但是</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、需要考虑引号嵌套的配对问题</span></span><br><span class="line">msg = <span class="string">&quot;My name is Tony , I&#x27;m 18 years old!&quot;</span> <span class="comment">#内层有单引号，外层就需要用双引号</span></span><br><span class="line"><span class="comment">#2、多引号可以写多行字符串</span></span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">        天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。</span></span><br><span class="line"><span class="string">        照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。</span></span><br><span class="line"><span class="string">        不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆。</span></span><br><span class="line"><span class="string">      &#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-使用"><a href="#3-3-使用" class="headerlink" title="3.3 使用"></a>3.3 使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数字可以进行加减乘除等运算，字符串呢？也可以，但只能进行<span class="string">&quot;相加&quot;</span>和<span class="string">&quot;相乘&quot;</span>运算。</span><br><span class="line">&gt;&gt;&gt; name = <span class="string">&#x27;tony&#x27;</span></span><br><span class="line">&gt;&gt;&gt; age = <span class="string">&#x27;18&#x27;</span></span><br><span class="line">&gt;&gt;&gt; name + age <span class="comment">#相加其实就是简单的字符串拼接</span></span><br><span class="line"><span class="string">&#x27;tony18&#x27;</span></span><br><span class="line">&gt;&gt;&gt; name * 5 <span class="comment">#相乘就相当于将字符串相加了5次</span></span><br><span class="line"><span class="string">&#x27;tonytonytonytonytony&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>使用案例</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">zhangsan</span><br><span class="line"></span><br><span class="line">x = 18</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line">x = <span class="string">&quot;18&quot;</span>        <span class="comment"># 由数字组成的字符串，是字符串类型，不是int类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&lt;class <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line">&lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;name&#x27; = &quot;zhangsan&quot;  # 语法错误，等号左边是变量名，变量名的命名不能有引号</span></span><br><span class="line"><span class="comment"># xxx   # 代表访问变量的名字</span></span><br><span class="line"><span class="comment">#  &#x27;xxx&#x27; # 代表的是值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他作用：</span></span><br><span class="line"><span class="comment"># 字符串的嵌套，注意：外层用单引号，内层用双引号，反之亦然</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my name is &quot;zhangsan&quot;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my name is \&#x27;</span>zhangsan\&#x27;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">my name is &quot;zhangsan&quot;</span></span><br><span class="line"><span class="string">my name is &#x27;</span>zhangsan<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 字符串之间可以相加，但仅限于str与str之间进行，代表字符串的拼接。了解即可，不推荐使用，因为str之间的相加效率非常低</span></span><br><span class="line"><span class="string">print(&#x27;</span>my name is <span class="string">&#x27;+&#x27;</span>zhangsan<span class="string">&#x27; )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">my name is zhangsan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(&#x27;</span>=<span class="string">&#x27;*20)</span></span><br><span class="line"><span class="string">print(&#x27;</span>hello world<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">print(&#x27;</span>=<span class="string">&#x27;*20)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">====================</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">====================</span></span><br></pre></td></tr></table></figure><h2 id="四，列表list"><a href="#四，列表list" class="headerlink" title="四，列表list"></a>四，列表list</h2><h3 id="4-1-作用"><a href="#4-1-作用" class="headerlink" title="4.1 作用"></a>4.1 作用</h3><pre><code>按位置记录多个值（同一个人的多个爱好、同一个班级的多个姓名等），并且可以按照索引取指定位置的值</code></pre><h3 id="4-2-定义"><a href="#4-2-定义" class="headerlink" title="4.2 定义"></a>4.2 定义</h3><pre><code>在[]内用逗号分隔开多个任意类型的值，一个值称之为一个元素</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l = [10,3.1,<span class="string">&#x27;aaa&#x27;</span>,[<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>],<span class="string">&#x27;ddd&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="4-3-使用"><a href="#4-3-使用" class="headerlink" title="4.3 使用"></a>4.3 使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表类型是用索引来对应值，索引代表的是数据的位置，从0开始计数</span></span><br><span class="line">l = [10,3.1,<span class="string">&#x27;aaa&#x27;</span>,[<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>],<span class="string">&#x27;ddd&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="built_in">print</span>(l[1])</span><br><span class="line"><span class="built_in">print</span>(l[2])</span><br><span class="line"><span class="built_in">print</span>(l[3][1]) <span class="comment"># 取列表里的ccc</span></span><br><span class="line"><span class="built_in">print</span>(l[-1])   <span class="comment"># 倒着取 -1</span></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">[10, 3.1, <span class="string">&#x27;aaa&#x27;</span>, [<span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>], <span class="string">&#x27;ddd&#x27;</span>]</span><br><span class="line">3.1</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表可以嵌套，嵌套取值如下</span></span><br><span class="line">students_info=[</span><br><span class="line">    [<span class="string">&#x27;tony&#x27;</span>,18,[<span class="string">&#x27;jack&#x27;</span>,]],</span><br><span class="line">    [<span class="string">&#x27;jason&#x27;</span>,18,[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>]]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 取出第一个学生的第一个爱好</span></span><br><span class="line"><span class="built_in">print</span>(students_info[0][2][0])</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">jack</span><br></pre></td></tr></table></figure><h2 id="五，字典dict"><a href="#五，字典dict" class="headerlink" title="五，字典dict"></a>五，字典dict</h2><h3 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5.1 作用"></a>5.1 作用</h3><pre><code>key对应值，其中key通常为字符串类型，所以key对值可以有描述性的功能，默认是无序的索引反应的是顺序、位置，对值没有任何描述性的功能用来存多个值，每个值都有唯一一个key与其对应，key对值有描述行功能</code></pre><h3 id="5-2-定义"><a href="#5-2-定义" class="headerlink" title="5.2 定义"></a>5.2 定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:1,<span class="string">&#x27;b&#x27;</span>:2&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&lt;class <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="5-3-使用"><a href="#5-3-使用" class="headerlink" title="5.3 使用"></a>5.3 使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">person_info=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tony&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:18,</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span>:185.3</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(person_info[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">tony</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典可以嵌套，嵌套取值如下</span></span><br><span class="line">students=[</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:38,<span class="string">&#x27;hobbies&#x27;</span>:[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:18,<span class="string">&#x27;hobbies&#x27;</span>:[<span class="string">&#x27;read&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;rose&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:58,<span class="string">&#x27;hobbies&#x27;</span>:[<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;read&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>]&#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(students[1][<span class="string">&#x27;hobbies&#x27;</span>][1]) <span class="comment">#取第二个学生的第二个爱好</span></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="built_in">sleep</span></span><br></pre></td></tr></table></figure><h2 id="六，布尔bool"><a href="#六，布尔bool" class="headerlink" title="六，布尔bool"></a>六，布尔bool</h2><h3 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1 作用"></a>6.1 作用</h3><pre><code>用来记录真假这两种状态</code></pre><h3 id="6-2-定义"><a href="#6-2-定义" class="headerlink" title="6.2 定义"></a>6.2 定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">is_ok = True</span><br><span class="line">is_ok = False</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(is_ok))</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&lt;class <span class="string">&#x27;bool&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="6-3-使用"><a href="#6-3-使用" class="headerlink" title="6.3 使用"></a>6.3 使用</h3><pre><code>通常用来当作判断的条件，我们将在if判断中用到它</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语法入门之变量</title>
      <link href="/articles/2023/03/16/pythonyufarumenzhibianliang/"/>
      <url>/articles/2023/03/16/pythonyufarumenzhibianliang/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="3、Python语法入门之变量"><a href="#3、Python语法入门之变量" class="headerlink" title="3、Python语法入门之变量"></a>3、Python语法入门之变量</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引入"><a href="#一，引入" class="headerlink" title="一，引入"></a>一，引入</h2><blockquote><p>我们知道学习 Python 语言的目的是为了与计算机进行沟通&#x2F;交流，从而控制计算机帮助我们做一些事情，所以，在 Python 语言的所有语法中，每个语法存在的意义都是为了让计算机能够像人类一样，直白地讲，就是让计算机具备我们人类的某一项技能。这是我们理解后续所有 Python 语法的根本，一定要熟记。</p></blockquote><h2 id="二，变量"><a href="#二，变量" class="headerlink" title="二，变量"></a>二，变量</h2><h3 id="2-1-什么是变量？"><a href="#2-1-什么是变量？" class="headerlink" title="2.1 什么是变量？"></a>2.1 什么是变量？</h3><pre><code>变量就是可以变化的量，量指的是事物的状态，比如人的年龄、性别，游戏角色的等级、金钱等等</code></pre><h3 id="2-2-为什么要有变量？"><a href="#2-2-为什么要有变量？" class="headerlink" title="2.2 为什么要有变量？"></a>2.2 为什么要有变量？</h3><pre><code>为了让计算机能够像人一样去记忆事物的某种状态，并且状态是可以发生变化的详细地说：程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态，以及状态的变化。</code></pre><h3 id="2-3-怎么使用变量（先定义、后使用）"><a href="#2-3-怎么使用变量（先定义、后使用）" class="headerlink" title="2.3 怎么使用变量（先定义、后使用）"></a>2.3 怎么使用变量（先定义、后使用）</h3><h4 id="2-3-1-变量的定义与使用"><a href="#2-3-1-变量的定义与使用" class="headerlink" title="2.3.1 变量的定义与使用"></a>2.3.1 变量的定义与使用</h4><blockquote><p>变量的定义由三部分组成，如下图</p></blockquote><p><img src="/articles/2023/03/16/pythonyufarumenzhibianliang/1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Jason&#x27;</span> <span class="comment"># 记下人的名字为&#x27;Jason&#x27;</span></span><br><span class="line">sex = <span class="string">&#x27;男&#x27;</span>    <span class="comment"># 记下人的性别为男性</span></span><br><span class="line">age = 18      <span class="comment"># 记下人的年龄为18岁</span></span><br><span class="line">salary = 30000.1  <span class="comment"># 记下人的薪资为30000.1元</span></span><br></pre></td></tr></table></figure><p>解释器执行到变量定义的代码时会申请内存空间存放变量值，然后将变量值的内存地址绑定给变量名，以变量的定义age&#x3D;18为例，如下图</p><p>插图：定义变量申请内存</p><p>通过变量名即可引用到对应的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过变量名即可引用到值，我们可以结合print()功能将其打印出来</span></span><br><span class="line"><span class="built_in">print</span>(age) <span class="comment"># 通过变量名age找到值18，然后执行print(18),输出：18</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-变量名的命名规范"><a href="#2-3-2-变量名的命名规范" class="headerlink" title="2.3.2 变量名的命名规范"></a>2.3.2 变量名的命名规范</h4><blockquote><p>变量名的命名应该见名知意</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果我们要存储的数据18代表的是一个人的年龄，那么变量名推荐命名为age</span></span><br><span class="line">age = 18 </span><br><span class="line"><span class="comment"># 如果我们要存储的数据18代表的是一个人的等级，那么变量名推荐命名为level</span></span><br><span class="line">level = 18</span><br></pre></td></tr></table></figure><p><strong>其他详细规范如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命名规范</span></span><br><span class="line">1. 变量名只能是 字母、数字或下划线的任意组合</span><br><span class="line">2. 变量名的第一个字符不能是数字</span><br><span class="line">3. 关键字不能声明为变量名，常用关键字如下</span><br><span class="line">[<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>,<span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示范如下：</span></span><br><span class="line">*a=123</span><br><span class="line"><span class="variable">$b</span>=456</span><br><span class="line">c$=789</span><br><span class="line">2_name=<span class="string">&#x27;lili&#x27;</span></span><br><span class="line">123=<span class="string">&#x27;lili&#x27;</span></span><br><span class="line">and=123</span><br><span class="line">年龄=18 <span class="comment"># 强烈建议不要使用中文命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确示范如下</span></span><br><span class="line">age_of_jason=31</span><br><span class="line">page1=<span class="string">&#x27;首页&#x27;</span></span><br><span class="line">_class=<span class="string">&#x27;终极一班&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3-变量名的命名风格"><a href="#2-3-3-变量名的命名风格" class="headerlink" title="2.3.3 变量名的命名风格"></a>2.3.3 变量名的命名风格</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 风格一：驼峰体</span></span><br><span class="line">AgeOfTony = 56 </span><br><span class="line">NumberOfStudents = 80</span><br><span class="line"><span class="comment"># 风格二：纯小写下划线(在python中，变量名的命名推荐使用该风格)</span></span><br><span class="line">age_of_tony = 56 </span><br><span class="line">number_of_students = 80</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-3-4-变量值的三大特性"><a href="#2-3-4-变量值的三大特性" class="headerlink" title="2.3.4 变量值的三大特性"></a>2.3.4 变量值的三大特性</h4><p><em>变量的值具备三大特性</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、id</span></span><br><span class="line">反应的是变量在内存中的唯一编号，内存地址不同<span class="built_in">id</span>肯定不同</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、type</span></span><br><span class="line">变量值的类型</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、value</span></span><br><span class="line">变量值</span><br></pre></td></tr></table></figure><blockquote><p>查看变量值三大特性的方式如下，我们将会在运算符中用到变量值的三大特性</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ python3</span><br><span class="line">Python 3.9.13 (v3.9.13:6de2ca5339, May 17 2022, 11:37:23)</span><br><span class="line">[Clang 13.0.0 (clang-1300.0.29.30)] on darwin</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; x = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">id</span>(x),<span class="built_in">type</span>(x),x</span><br><span class="line">(4389636528, &lt;class <span class="string">&#x27;str&#x27;</span>&gt;, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="三，常量"><a href="#三，常量" class="headerlink" title="三，常量"></a>三，常量</h2><h3 id="3-1-什么是常量？"><a href="#3-1-什么是常量？" class="headerlink" title="3.1 什么是常量？"></a>3.1 什么是常量？</h3><pre><code>常量指在程序运行过程中不会改变的量</code></pre><h3 id="3-2-为什么要有常量？"><a href="#3-2-为什么要有常量？" class="headerlink" title="3.2 为什么要有常量？"></a>3.2 为什么要有常量？</h3><pre><code>在程序运行过程中，有些值是固定的、不应该被改变，比如圆周率 3.141592653...</code></pre><h3 id="3-3-怎么使用常量？"><a href="#3-3-怎么使用常量？" class="headerlink" title="3.3 怎么使用常量？"></a>3.3 怎么使用常量？</h3><pre><code>在Python中没有一个专门的语法定义常量，约定俗成是用全部大写的变量名表示常量。如：PI=3.14159。所以单从语法层面去讲，常量的使用与变量完全一致。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程语言与Python介绍</title>
      <link href="/articles/2023/03/16/bianchengyuyanpythonjieshao/"/>
      <url>/articles/2023/03/16/bianchengyuyanpythonjieshao/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="2、编程语言与Python介绍"><a href="#2、编程语言与Python介绍" class="headerlink" title="2、编程语言与Python介绍"></a>2、编程语言与Python介绍</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引子"><a href="#一，引子" class="headerlink" title="一，引子"></a>一，引子</h2><blockquote><p>基于上一章所学，有了计算机硬件，再在硬件之上安装好操作系统，我们就有了一个应用程序的运行平台，我们接下来的任务就是学习如何使用某款编程语言来开发应用程序。</p></blockquote><pre><code>本章的主题是先带大家了解下编程语言，然后重点介绍python这门编程语言</code></pre><h2 id="二，编程语言分类"><a href="#二，编程语言分类" class="headerlink" title="二，编程语言分类"></a>二，编程语言分类</h2><h3 id="2-1-机器语言"><a href="#2-1-机器语言" class="headerlink" title="2.1 机器语言"></a>2.1 机器语言</h3><blockquote><p>机器语言是站在计算机(奴隶)的角度，说计算机能听懂&#x2F;理解的语言，而计算机能直接理解的就是二进制指令，所以机器语言就是直接用二进制编程，这意味着机器语言是直接操作硬件的，因此机器语言属于低级语言，此处的低级指的是底层、贴近计算机硬件（贴近代指需要详细了解计算机硬件细节、直接控制硬件），详解如下</p></blockquote><p><img src="/articles/2023/03/16/bianchengyuyanpythonjieshao/1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#机器语言</span></span><br><span class="line">    用二进制代码0和1描述的指令称为机器指令，由于计算机内部是基于二进制指令工作的，所以机器语言是直接控制计算机硬件。</span><br><span class="line"></span><br><span class="line">    用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令代码以及代码的含义，然后在编写程序时，程序员得自己处理每条指令和每一数据的存储分配和输入输出，还得记住编程过程中每步所使用的工作单元处在何种状态。这是一件十分繁琐的工作。编写程序花费的时间往往是实际运行时间的几十倍或几百倍。而且，编出的程序全是些0和1的指令代码，直观性差，不便阅读和书写，还容易出错，且依赖于具体的计算机硬件型号，局限性很大。除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。</span><br><span class="line"></span><br><span class="line">    机器语言是被微处理器理解和使用的，存在有多至100000种机器语言的指令，下述是一些简单示例</span><br><span class="line"></span><br><span class="line">    <span class="comment">#指令部份的示例</span></span><br><span class="line">    0000 代表 加载（LOAD）</span><br><span class="line">    0001 代表 存储（STORE）</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">#暂存器部份的示例</span></span><br><span class="line">    0000 代表暂存器 A</span><br><span class="line">    0001 代表暂存器 B</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">#存储器部份的示例</span></span><br><span class="line">    000000000000 代表地址为 0 的存储器</span><br><span class="line">    000000000001 代表地址为 1 的存储器</span><br><span class="line">    000000010000 代表地址为 16 的存储器</span><br><span class="line">    100000000000 代表地址为 2^11 的存储器</span><br><span class="line"></span><br><span class="line">    <span class="comment">#集成示例</span></span><br><span class="line">    0000,0000,000000010000 代表 LOAD A, 16</span><br><span class="line">    0000,0001,000000000001 代表 LOAD B, 1</span><br><span class="line">    0001,0001,000000010000 代表 STORE B, 16</span><br><span class="line">    0001,0001,000000000001 代表 STORE B, 1[1]</span><br></pre></td></tr></table></figure><p><strong>总结机器语言</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率最高</span></span><br><span class="line">编写的程序可以被计算机无障碍理解、直接运行，执行效率高 。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率最低</span></span><br><span class="line">复杂，开发效率低</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">贴近/依赖具体的硬件，跨平台性差</span><br></pre></td></tr></table></figure><h3 id="2-2-汇编语言"><a href="#2-2-汇编语言" class="headerlink" title="2.2 汇编语言"></a>2.2 汇编语言</h3><blockquote><p>汇编语言仅仅是用一个英文标签代表一组二进制指令，毫无疑问，比起机器语言，汇编语言是一种进步，但汇编语言的本质仍然是直接操作硬件，因此汇编语言仍是比较低级&#x2F;底层的语言、贴近计算机硬件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#汇编语言</span></span><br><span class="line">汇编语言的实质和机器语言是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，更容易识别和记忆。它同样需要编程者将每一步具体的操作用命令的形式写出来。汇编程序的每一句指令只能对应实际操作过程中的一个很细微的动作。例如移动、自增，因此汇编源程序一般比较冗长、复杂、容易出错，而且使用汇编语言编程需要有更多的计算机专业知识，但汇编语言的优点也是显而易见的，用汇编语言所能完成的操作不是一般高级语言所能够实现的，而且源程序经汇编生成的可执行文件不仅比较小，而且执行速度很快。</span><br><span class="line"></span><br><span class="line">汇编的hello world，打印一句hello world, 需要写十多行，如下</span><br><span class="line"></span><br><span class="line">; hello.asm </span><br><span class="line">section .data            ; 数据段声明</span><br><span class="line">        msg db <span class="string">&quot;Hello, world!&quot;</span>, 0xA     ; 要输出的字符串</span><br><span class="line">        len equ $ - msg                 ; 字串长度</span><br><span class="line">        section .text            ; 代码段声明</span><br><span class="line">        global _start            ; 指定入口函数</span><br><span class="line">        _start:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, len     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, 1       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, 4       ; 系统调用号(sys_write) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br><span class="line">                         ; 退出程序</span><br><span class="line">        mov ebx, 0       ; 参数一：退出代码</span><br><span class="line">        mov eax, 1       ; 系统调用号(sys_exit) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br></pre></td></tr></table></figure><p><strong>总结汇编语言</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率高</span></span><br><span class="line">相对于机器语言，使用英文标签编写程序相对简单，执行效率高，但较之机器语言稍低，</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率低：</span></span><br><span class="line">仍然是直接操作硬件，比起机器语言来说，复杂度稍低，但依旧居高不下，所以开发效率依旧较低</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">同样依赖具体的硬件，跨平台性差</span><br></pre></td></tr></table></figure><h3 id="2-3-高级语言"><a href="#2-3-高级语言" class="headerlink" title="2.3 高级语言"></a>2.3 高级语言</h3><blockquote><p>高级语言是站在人(奴隶主)的角度，说人话，即用人类的字符去编写程序，而人类的字符是在向操作系统发送指令，而非直接操作硬件，所以高级语言是与操作系统打交道的，此处的高级指的是高层、开发者无需考虑硬件细节，因而开发效率可以得到极大的提升，但正因为高级语言离硬件较远，更贴近人类语言，人类可以理解，而计算机则需要通过翻译才能理解，所以执行效率会低于低级语言。</p></blockquote><pre><code>按照翻译的方式的不同，高级语言又分为两种：</code></pre><h4 id="2-3-1-编译型（如C语言）"><a href="#2-3-1-编译型（如C语言）" class="headerlink" title="2.3.1  编译型（如C语言）"></a>2.3.1  编译型（如C语言）</h4><blockquote><p>类似谷歌翻译，是把程序所有代码编译成计算机能识别的二进制指令，之后操作系统会拿着编译好的二进制指令直接操作硬件，详细如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率高</span></span><br><span class="line">编译是指在应用源程序执行之前，就将程序源代码“翻译”成目标代码（即机器语言），</span><br><span class="line">因此其目标程序可以脱离其语言环境独立执行，使用比较方便，执行效率较高。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率低：</span></span><br><span class="line">应用程序一旦需要修改，必须先修改源代码，然后重新编译、生成新的目标文件才能执行，</span><br><span class="line">而在只有目标文件而没有源代码，修改会很不方便。所以开发效率低于解释型</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">编译型代码是针对某一个平台翻译的，当前平台翻译的结果无法拿到不同的平台使用，针对不同的平台必须重新编译，即跨平台性差</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">现在大多数的编程语言都是编译型的。</span><br><span class="line">编译程序将源程序翻译成目标程序后保存在另一个文件中，该目标程序可脱离编译程序直接在计算机上多次运行。</span><br><span class="line">大多数软件产品都是以目标程序形式发行给用户的，不仅便于直接运行，同时又使他人难于盗用其中的技术。</span><br><span class="line">C、C++、Ada、Pascal都是编译实现的</span><br></pre></td></tr></table></figure><h4 id="2-3-2-解释型（如python）"><a href="#2-3-2-解释型（如python）" class="headerlink" title="2.3.2 解释型（如python）"></a>2.3.2 解释型（如python）</h4><blockquote><p>类似同声翻译，需要有一个解释器，解释器会读取程序代码，一边翻译一边执行，详细如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率低</span></span><br><span class="line">解释型语言的实现中，翻译器并不产生目标机器代码，而是产生易于执行的中间代码。</span><br><span class="line">这种中间代码与机器代码是不同的，中间代码的解释是由软件支持的，不能直接使用硬件，</span><br><span class="line">软件解释器通常会导致执行效率较低。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率高</span></span><br><span class="line">用解释型语言编写的程序是由另一个可以理解中间代码的解释程序执行的，与编译程序不同的是，</span><br><span class="line">解释程序的任务是逐一将源程序的语句解释成可执行的机器指令，不需要将源程序翻译成目标代码再执行。</span><br><span class="line">解释程序的优点是当语句出现语法错误时，可以立即引起程序员的注意，而程序员在程序开发期间就能进行校正。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性强</span></span><br><span class="line">代码运行是依赖于解释器，不同平台有对应版本的解释器，所以解释型的跨平台性强</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">对于解释型Basic语言，需要一个专门的解释器解释执行Basic程序，每条语句只有在执行时才被翻译，</span><br><span class="line">这种解释型语言每执行一次就翻译一次，因而效率低下。一般地，动态语言都是解释型的，</span><br><span class="line">例如：Tcl、Perl、Ruby、VBScript、JavaScript等</span><br></pre></td></tr></table></figure><p><strong>ps：混合型语言</strong></p><pre><code>Java是一类特殊的编程语言，Java程序也需要编译，但是却没有直接编译为机器语言，而是编译为字节码，然后在Java虚拟机上以解释方式执行字节码。</code></pre><h3 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h3><blockquote><p>综上选择不同编程语言来开发应用程序对比</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、执行效率：机器语言&gt;汇编语言&gt;高级语言（编译型&gt;解释型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、开发效率：机器语言&lt;汇编语言&lt;高级语言（编译型&lt;解释型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、跨平台性：解释型具有极强的跨平台型</span></span><br></pre></td></tr></table></figure><h3 id="三，python介绍"><a href="#三，python介绍" class="headerlink" title="三，python介绍"></a>三，python介绍</h3><blockquote><p>谈及python，涉及两层意思，一层代表的是python这门语言的语法风格，另外一层代表的则是专门用来解释该语法风格的应用程序：python解释器。</p></blockquote><blockquote><p>python的创始人为吉多·范罗苏姆（Guido van Rossum）。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus，他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，语法能够像shell一样简洁，易学易用、可拓展性强，同时兼顾C的强大功能。于是Guido在1989年的圣诞节期间，开始编写能够解释Python语言语法的解释器。</p></blockquote><blockquote><p>Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。最新的TIOBE排行榜<a href="https://www.tiobe.com/tiobe-index/%EF%BC%8CPython%E5%B7%B2%E9%A3%99%E5%8D%87%E8%87%B3%E4%B8%96%E7%95%8C%E7%AC%AC%E4%B8%89%E3%80%82">https://www.tiobe.com/tiobe-index/，Python已飙升至世界第三。</a></p></blockquote><blockquote><p>Python可以应用于众多领域，如：人工智能、数据分析、爬虫、金融量化、云计算、WEB开发、自动化运维&#x2F;测试、游戏开发、网络服务、图像处理等众多领域。目前业内几乎所有大中型互联网企业都在使用Python，如：Youtube、Dropbox、BT、Quora（中国知乎）、豆瓣、知乎、Google、Yahoo!、Facebook、NASA、百度、腾讯、汽车之家、美团等。</p></blockquote><h3 id="3-1-Python解释器的发展史"><a href="#3-1-Python解释器的发展史" class="headerlink" title="3.1 Python解释器的发展史"></a>3.1 Python解释器的发展史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1989年，Guido开始写Python语言的编译器。 1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</span><br><span class="line"></span><br><span class="line">Granddaddy of Python web frameworks, Zope 1 was released <span class="keyword">in</span> 1999</span><br><span class="line"></span><br><span class="line">Python 1.0 - January 1994 增加了 lambda, map, filter and reduce.</span><br><span class="line"></span><br><span class="line">Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础</span><br><span class="line"></span><br><span class="line">Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生</span><br><span class="line"></span><br><span class="line">Python 2.5 - September 19, 2006</span><br><span class="line"></span><br><span class="line">Python 2.6 - October 1, 2008</span><br><span class="line"></span><br><span class="line">Python 2.7 - July 3, 2010</span><br><span class="line"></span><br><span class="line">In November 2014, it was announced that Python 2.7 would be supported <span class="keyword">until</span> 2020, and reaffirmed that there would be no 2.8 release as <span class="built_in">users</span> were expected to move to Python 3.4+ as soon as possible</span><br><span class="line"></span><br><span class="line">Python 3.0 - December 3, 2008 (细心的读者会发现，08年时就推出了3.0，2010年反而又推出了2.7？是因为3.0不向下兼容2.0，而很多公司已经基于2.0版本开发出了大量程序，公司已然投入了大量的人财物力，这就导致大家都拒绝升级3.0，无奈官方只能推出2.7过渡版本，之后我们都应该采用3.0解释器开发程序，但为了方便读者维护2.0版本的软件，我们在遇到两种版本的差异时会专门指出来)</span><br><span class="line"></span><br><span class="line">Python 3.1 - June 27, 2009</span><br><span class="line"></span><br><span class="line">Python 3.2 - February 20, 2011</span><br><span class="line"></span><br><span class="line">Python 3.3 - September 29, 2012</span><br><span class="line"></span><br><span class="line">Python 3.4 - March 16, 2014</span><br><span class="line"></span><br><span class="line">Python 3.5 - September 13, 2015</span><br><span class="line"></span><br><span class="line">Python 3.6 - 2016-12-23 发布python3.6.0版</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-Python解释器有哪些种类"><a href="#3-2-Python解释器有哪些种类" class="headerlink" title="3.2 Python解释器有哪些种类?"></a>3.2 Python解释器有哪些种类?</h3><blockquote><p>官方的Python解释器本质就是基于C语言开发的一个软件，该软件的功能就是读取以.py结尾的文件内容，然后按照Guido定义好的语法和规则去翻译并执行相应的代码。这种用C实现的解释器称为CPython，它是python领域性能最好，应用最广泛的一款解释器，我们在后面提到的解释器指的都是Cpython解释器。但其实解释器作为一款应用软件，完全可以采用其他语言来开发，只要能解释python这门语言的语法即可。Python解释器的一些种类如下，简单了解即可</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Jython</span></span><br><span class="line">JPython解释器是用JAVA编写的python解释器，可以直接把Python代码编译成Java字节码并执行，它不但使基于java的项目之上嵌入python脚本成为可能，同时也可以将java程序引入到python程序之中。</span><br><span class="line"></span><br><span class="line"><span class="comment"># IPython</span></span><br><span class="line">IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。这就好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。</span><br><span class="line">CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。</span><br><span class="line"></span><br><span class="line"><span class="comment"># PyPy</span></span><br><span class="line">PyPy是Python开发者为了更好地Hack Python而用Python语言实现的Python解释器。PyPy提供了JIT编译器和沙盒功能，对Python代码进行动态编译（注意不是解释），因此运行速度比CPython还要快。</span><br><span class="line"></span><br><span class="line"><span class="comment"># IronPython</span></span><br><span class="line">IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</span><br></pre></td></tr></table></figure><h2 id="四，第一个python程序"><a href="#四，第一个python程序" class="headerlink" title="四，第一个python程序"></a>四，第一个python程序</h2><h3 id="4-1-运行python程序有两种方式"><a href="#4-1-运行python程序有两种方式" class="headerlink" title="4.1 运行python程序有两种方式"></a>4.1 运行python程序有两种方式</h3><p><strong>方式一： 交互式模式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop python3</span><br><span class="line">Python 3.9.13 (v3.9.13:6de2ca5339, May 17 2022, 11:37:23)</span><br><span class="line">[Clang 13.0.0 (clang-1300.0.29.30)] on darwin</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p><strong>方式二：脚本文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="built_in">cat</span> test.py</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">➜  ~ python3 test.py</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><pre><code>总结:#1、交互式模式下可以即时得到代码执行结果，调试程序十分方便#2、若想将代码永久保存下来，则必须将代码写入文件中#3、我们以后主要就是在代码写入文件中，偶尔需要打开交互式模式调试某段代码、验证结果</code></pre><h3 id="4-2-注释"><a href="#4-2-注释" class="headerlink" title="4.2 注释"></a>4.2 注释</h3><h4 id="4-2-1-什么是注释"><a href="#4-2-1-什么是注释" class="headerlink" title="4.2.1 什么是注释"></a>4.2.1 什么是注释</h4><pre><code>注释就是就是对代码的解释说明，注释的内容不会被当作代码运行</code></pre><h4 id="4-2-2-为什么要注释"><a href="#4-2-2-为什么要注释" class="headerlink" title="4.2.2 为什么要注释"></a>4.2.2 为什么要注释</h4><pre><code>增强代码的可读性</code></pre><h4 id="4-2-3-怎么用注释"><a href="#4-2-3-怎么用注释" class="headerlink" title="4.2.3 怎么用注释?"></a>4.2.3 怎么用注释?</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">代码注释分单行和多行注释</span><br><span class="line"></span><br><span class="line">1、单行注释用#号，可以跟在代码的正上方或者正后方</span><br><span class="line"></span><br><span class="line">2、多行注释可以用三对双引号<span class="string">&quot;&quot;</span><span class="string">&quot; &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-4-代码注释的原则"><a href="#4-2-4-代码注释的原则" class="headerlink" title="4.2.4 代码注释的原则"></a>4.2.4 代码注释的原则</h4><blockquote><p>1、不用全部加注释，只需要为自己觉得重要或不好理解的部分加注释即可</p></blockquote><blockquote><p>2、注释可以用中文或英文，但不要用拼音</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机核心基础</title>
      <link href="/articles/2023/03/16/jisuanjihexinjichu/"/>
      <url>/articles/2023/03/16/jisuanjihexinjichu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="1、计算机核心基础"><a href="#1、计算机核心基础" class="headerlink" title="1、计算机核心基础"></a>1、计算机核心基础</h1><p>特别鸣谢：<br>        — b站老男孩agen老师</p><h2 id="一，引子"><a href="#一，引子" class="headerlink" title="一，引子"></a>一，引子</h2><blockquote><p>接下来一段时间，我们的目标的是：学会使用python这门编程语言来编写ATM+购物车程序，那么问题来了:</p></blockquote><h3 id="1-1-什么是语言？什么是编程语言？为何要有编程语言？"><a href="#1-1-什么是语言？什么是编程语言？为何要有编程语言？" class="headerlink" title="1.1 什么是语言？什么是编程语言？为何要有编程语言？"></a>1.1 什么是语言？什么是编程语言？为何要有编程语言？</h3><blockquote><p>语言其实就是人与人之间沟通的介质，如英语，汉语，俄语等。</p></blockquote><blockquote><p>而编程语言则是人与计算机之间沟通的介质。</p></blockquote><blockquote><p>那么为何要有编程语言，或者说人为何要与计算机沟通呢？这是因为在编程的世界里，计算机就好比是人的奴隶，人与计算机沟通的目的就是为了奴役计算机，让计算机按照人类的思维逻辑自发地去工作从而把人力解放出来。</p></blockquote><ul><li>此处我们可以提炼出如下两个重要的概念</li></ul><h3 id="1-2-什么是编程？为什么要编程？"><a href="#1-2-什么是编程？为什么要编程？" class="headerlink" title="1.2 什么是编程？为什么要编程？"></a>1.2 什么是编程？为什么要编程？</h3><blockquote><p>编程就是人把自己想命令计算机干的事用编程语言翻译出来并写到文件里（这一系列的文件就是程序），那么为什么要编程？</p></blockquote><blockquote><p>小人类编程的目的就是为了让计算机按照人类的思维逻辑(程序)自发地去工作从而把人力解放出来。</p></blockquote><blockquote><p>综上，我们接下来的学习应该分为两个层面</p></blockquote><ul><li>为了更好地控制人类的奴隶（即计算机），我们需要学习计算机是由什么组成的、它能做什么事、它是怎样工作的（详见计算机组成原理、操作系统概述）</li><li>我们需要学习编程语言，从而把原来需要人力来完成的业务（比如ATM和购物）交给计算机去做</li></ul><h2 id="二，计算机组成原理"><a href="#二，计算机组成原理" class="headerlink" title="二，计算机组成原理"></a>二，计算机组成原理</h2><h3 id="2-1-什么是计算机？"><a href="#2-1-什么是计算机？" class="headerlink" title="2.1 什么是计算机？"></a>2.1 什么是计算机？</h3><blockquote><p>俗称电脑，即通电的大脑，电脑二字蕴含了人类对计算机的终极期望，希望它能真的像人脑一样去工作，从而解放人力。</p></blockquote><h3 id="2-2-为什么要用计算机？"><a href="#2-2-为什么要用计算机？" class="headerlink" title="2.2 为什么要用计算机？"></a>2.2 为什么要用计算机？</h3><blockquote><p>世界是由聪明的懒人统治的，任何时期，总有一群聪明的懒人想要奴隶别人。在奴隶制社会，聪明的懒人奴役的是真正的人，而人是无法不吃、不喝、不睡觉一直工作的，但是计算机作为一台机器是可以做到的，所以把计算机当奴隶是上上之选。</p></blockquote><h3 id="2-3-计算机的五大组成部分"><a href="#2-3-计算机的五大组成部分" class="headerlink" title="2.3 计算机的五大组成部分"></a>2.3 计算机的五大组成部分</h3><blockquote><p>计算机有五大组成部分，既然计算机是人的奴隶，那么计算机设计核心肯定也是在模仿真正的人，所以我们完全可以把计算机的五大组件比喻成人类的各种器官</p></blockquote><h4 id="2-3-1-控制器"><a href="#2-3-1-控制器" class="headerlink" title="2.3.1 控制器"></a>2.3.1 控制器</h4><pre><code>控制器是计算机的指挥系统，用来控制计算机其他组件的运行，相当于人类的大脑</code></pre><h4 id="2-3-2-运算器"><a href="#2-3-2-运算器" class="headerlink" title="2.3.2 运算器"></a>2.3.2 运算器</h4><pre><code>运算器是计算机的运算功能，用来做算术运算和逻辑运算，相当于人脑。ps：控制器+运算器=CPU，cpu相当于人的大脑</code></pre><h4 id="2-3-3-存储器"><a href="#2-3-3-存储器" class="headerlink" title="2.3.3 存储器"></a>2.3.3 存储器</h4><pre><code>存储器是计算机的记忆功能，用来存取数据。存储器主要分为内存与外存：- 内存相当于人的短期记忆。断电数据丢失- 外存(如磁盘),相当于记事的本子，断电数据不会丢失，是用来永久保存数据的ps：内存的存取速度要远远高于外存</code></pre><h4 id="2-3-4-输入设备input"><a href="#2-3-4-输入设备input" class="headerlink" title="2.3.4 输入设备input"></a>2.3.4 输入设备input</h4><pre><code>输入设备是计算接收外界输入数据的工具，如键盘、鼠标，相当于人的眼睛或耳朵。</code></pre><h4 id="2-3-5-输出设备output"><a href="#2-3-5-输出设备output" class="headerlink" title="2.3.5 输出设备output"></a>2.3.5 输出设备output</h4><pre><code>输出设备是计算机向外输出数据的工具，如显示器、打印机，相当于人说的话，写出的文章。ps：存储器如内存、磁盘等既是输入设备又是输出设备，统称为IO设备</code></pre><p><strong>一个非常重要的基础知识:与运行程序相关的三大核心硬件</strong></p><ul><li><p>我们编写的程序一定是要运行于计算机硬件之上，而站在硬件的角度，与运行程序有关的三大核心硬件为CPU、内存、硬盘。</p></li><li><p>程序最先是存放于硬盘中的，程序的运行是先从硬盘把代码加载到内存中，然后cpu是从内存中读取指令运行。</p></li></ul><h2 id="三，操作系统概述"><a href="#三，操作系统概述" class="headerlink" title="三，操作系统概述"></a>三，操作系统概述</h2><h3 id="3-1-操作系统的由来"><a href="#3-1-操作系统的由来" class="headerlink" title="3.1 操作系统的由来"></a>3.1 操作系统的由来</h3><blockquote><p>大前提：我们编程目的就是为了奴役计算机，让计算机硬件自发地运行起来，然而硬件毕竟是”死的“，硬件的运行都是由软件支配。</p></blockquote><blockquote><p>倘若我们要开发一个应用程序，比如暴风音影，该软件的一个核心业务就是播放视频，开发者若要编写程序完成播放视频这个业务逻辑，必先涉及到底层硬件硬盘的基本运作（视频文件都是先存放于硬盘中），这意味着开发者在编写业务逻辑代码之前，必须先编写一个控制硬盘基本运行的控制程序，然而这仅仅只是一个开始，事实上，在编写应用程序的业务逻辑前，需要开发者编写出一套完整的控制程序用来控制所有硬件的基本运行（这要求开发者需要详细了解计算机硬件的各种控制细节，例如我们必须把CPU里面所有指令集都掌握一遍），如此，所有的开发者在开发程序时都必须依次开发两种：</p></blockquote><blockquote><ul><li>编写一套完整的的控制程序，用来控制硬件的基本运行，以及把复杂的硬件的操作封装成简单的接口</li></ul></blockquote><ul><li>基于控制程序的接口开发包含一系列业务逻辑的程序，为了与控制程序区分，可以称为应用程序，以ATM这款应用程序为例，业务逻辑有提款、转账、查询余额等</li></ul><blockquote><p>综上，对于不同公司的开发者来说，应用程序的业务逻辑各不相同，但硬件的控制程序都大致相同，为了避免所有程序员做重复劳动，以及不用再耗费精力去了解所有硬件的运行细节，有公司专门跳出来承担起控制程序的开发任务，这里所说的控制程序指的就是操作系统。</p></blockquote><pre><code>操作系统的功能就是帮我们把复杂的硬件的控制封装成简单的接口，对于开发应用程序来说只需要调用操作系统提供给我们的接口即可</code></pre><h3 id="3-2-系统软件与应用软件"><a href="#3-2-系统软件与应用软件" class="headerlink" title="3.2 系统软件与应用软件"></a>3.2 系统软件与应用软件</h3><blockquote><p>硬件以上运行的都是软件，而软件分为两类：</p></blockquote><pre><code>1.应用软件（例如qq、word、暴风影音，我们学习python就是为了开发应用软件的）2.操作系统，操作系统应用软件与硬件之间的一个桥梁，是协调、管理、控制计算机硬件与应用软件资源的控制程序。</code></pre><h3 id="3-3-计算机系统三层结构"><a href="#3-3-计算机系统三层结构" class="headerlink" title="3.3 计算机系统三层结构"></a>3.3 计算机系统三层结构</h3><blockquote><p>综上，我们开发应用程序本质是在控制硬件，但是我们直接打交道的是操作系统，应用程序都是通过操作系统来间接地操作硬件的，所以一套完整的计算机系统分为三层，如下</p></blockquote><p><img src="/articles/2023/03/16/jisuanjihexinjichu/1.png"></p><p><strong>一个非常重要的基础概念：平台</strong></p><pre><code>应用程序都是运行于操作系统之上，而操作系统则是运行于硬件之上的，所以承载应用程序的是一台运行有操作系统的计算机，称之为应用程序的运行平台，即：硬件 + 操作系统 == 平台</code></pre><p><img src="/articles/2023/03/16/jisuanjihexinjichu/2.png"></p><blockquote><p>常见的平台有：windows系统+某款硬件、linux系统+某款硬件、ubuntu+某款硬件等，我们在开发应用程序时就需要考虑到应用程序的跨平台性，如果能开发出一款可以在任意平台运行的应用程序，那对于开发者来说真是极大的福音。而决定应用软件的跨平台性的关键因素往往是编程语言的选择，python恰好是一款跨平台性语言，这也是我们学习它的原因之一。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节点加入k8s集群如何获取token等参数值</title>
      <link href="/articles/2020/09/24/jiedianjiaruk8sjiqunruhehuodetoken/"/>
      <url>/articles/2020/09/24/jiedianjiaruk8sjiqunruhehuodetoken/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="节点加入k8s集群如何获取token等参数值"><a href="#节点加入k8s集群如何获取token等参数值" class="headerlink" title="节点加入k8s集群如何获取token等参数值"></a>节点加入k8s集群如何获取token等参数值</h1><p><strong>在 kubeadm 初始话集群成功后会返回join 命令，里面有 token，discovery-token-ca-cert-hash等参数，需要记下来。</strong></p><blockquote><p>有关 token 的过期时间是24小时<br>certificate-key 过期时间是2小时</p></blockquote><p><strong>如果是不记得，请执行以下命令获取</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 在master节点执行kubeadm token list获取token（注意查看是否过期）</span><br><span class="line"></span><br><span class="line">2. 如果没有--discovery-token-ca-cert-hash值，也可以通过以下命令获取</span><br><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed <span class="string">&#x27;s/^.* //&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>如果是过期了，需要重新生成</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 执行kubeadm token create --print-join-command，重新生成，重新生成基础的 <span class="built_in">join</span> 命令（对于添加 master 节点还需要重新生成certificate-key，见下一步）</span><br><span class="line"><span class="comment"># 如果是添加 worker 节点，不需要执行这一步，直接使用上面返回的 join 命令加入集群。</span></span><br><span class="line">2. 使用 kubeadm init phase upload-certs --experimental-upload-certs 重新生成certificate-key</span><br><span class="line"><span class="comment"># 添加 master 节点：用上面第1步生成的 join 命令和第2步生成的--certificate-key 值拼接起来执行</span></span><br><span class="line"></span><br><span class="line">参考</span><br><span class="line">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/#token-based-discovery-with-ca-pinning</span><br><span class="line">https://kubernetes.io/docs/setup/independent/high-availability/#steps-for-the-first-control-plane-node (其中的note)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kuberbetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 之离线安装</title>
      <link href="/articles/2020/04/09/dockerzhilixiananzhuang/"/>
      <url>/articles/2020/04/09/dockerzhilixiananzhuang/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Docker-之离线安装"><a href="#Docker-之离线安装" class="headerlink" title="Docker 之离线安装"></a>Docker 之离线安装</h1><h2 id="离线安装docker-ce"><a href="#离线安装docker-ce" class="headerlink" title="离线安装docker-ce"></a>离线安装docker-ce</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据机器架构进行选择，其中centos64是 x86_64</span></span><br><span class="line"><span class="comment"># 这里以18.09.4版本为例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar xf docker-18.09.4.tar -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/docker/* /usr/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># service和socket文件</span></span><br><span class="line"><span class="comment"># 在  https://github.com/moby/moby/tree/master/contrib/init/systemd  </span></span><br><span class="line">vim /usr/lib/systemd/system/docker.service</span><br><span class="line">vim /usr/lib/systemd/system/docker.socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加docker组</span></span><br><span class="line">groupadd docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次起服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在有网的机器上下载docker-compose可执行文件</span></span><br><span class="line"><span class="built_in">sudo</span> curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m`</span><br><span class="line"></span><br><span class="line"><span class="comment">## copy该文件到断网机器</span></span><br><span class="line"><span class="built_in">cp</span> to  /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment">## 给可执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="迁移一个镜像到其他机器"><a href="#迁移一个镜像到其他机器" class="headerlink" title="迁移一个镜像到其他机器"></a>迁移一个镜像到其他机器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker save mysql:5.7 &gt; mysql\:5.7</span><br><span class="line"></span><br><span class="line">docker load &lt; mysql\:5.7</span><br></pre></td></tr></table></figure><h2 id="迁移一个容器到其他机器"><a href="#迁移一个容器到其他机器" class="headerlink" title="迁移一个容器到其他机器"></a>迁移一个容器到其他机器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> 3ef747139cb8 &gt; test_project-v1.1.tar</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> test_project-v1.1.tar | docker import - test_project:v1.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes calico网络之基于canel的网络策略</title>
      <link href="/articles/2019/08/23/kubernetescalicowangluozhijiyucanceldewangluocelue/"/>
      <url>/articles/2019/08/23/kubernetescalicowangluozhijiyucanceldewangluocelue/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="kubernetes-calico网络之基于canel的网络策略"><a href="#kubernetes-calico网络之基于canel的网络策略" class="headerlink" title="kubernetes calico网络之基于canel的网络策略"></a>kubernetes calico网络之基于canel的网络策略</h1><h2 id="一，为什么要使用canel网络策略"><a href="#一，为什么要使用canel网络策略" class="headerlink" title="一，为什么要使用canel网络策略"></a>一，为什么要使用canel网络策略</h2><blockquote><ul><li>在kubernetes集群中flannel网络插件为集群提供了pod网段一致性的功能，但是我们可能还希望在单个pod或者单个对单个pod进出站做一些类似于物理务器的iptables的网络策略限制 </li><li>那么我们就需要安装calico，但是calico是基于bgp的网络协议才能提供它的网络功能，所以我们在此也仅仅是使用它的canel的网络策略</li></ul></blockquote><h3 id="1-1-canal-通过-Egress-和Ingress来控制不同的网络策略"><a href="#1-1-canal-通过-Egress-和Ingress来控制不同的网络策略" class="headerlink" title="1.1 canal 通过 Egress 和Ingress来控制不同的网络策略"></a>1.1 canal 通过 Egress 和Ingress来控制不同的网络策略</h3><blockquote><p><strong>Egress： 表示出栈 代表pod作为一个源地址 对客户端访问进行响应 自己端口可预测</strong><br><strong>Ingress：表示入栈 代表pod作为一个客户端 对别的pod的原地址进行访问 对方端口可预测</strong></p></blockquote><h1 id="二，部署canel"><a href="#二，部署canel" class="headerlink" title="#二，部署canel"></a>#二，部署canel</h1><blockquote><p>calico官网：<a href="https://docs.projectcalico.org/">https://docs.projectcalico.org</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以直接从官网下载官方的安装yaml文件进行安装</span><br><span class="line"></span><br><span class="line">curl https://docs.projectcalico.org/v3.7/manifests/canal.yaml -O</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处注意 官方的文件下载下来以后需要对文件进行修改 将其里边的一个ip网段进行修改 需要与在创建etcd时添加的ip地址段一样</span></span><br></pre></td></tr></table></figure><h3 id="2-1-创建canel"><a href="#2-1-创建canel" class="headerlink" title="2.1 创建canel"></a>2.1 创建canel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yaml]# kubectl create -f canal.yaml </span><br><span class="line">configmap/canal-config created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/canal-flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/canal-calico created</span><br><span class="line">daemonset.extensions/canal created</span><br><span class="line">serviceaccount/canal created</span><br><span class="line">[root@localhost yaml]# kubectl get pods -n kube-system</span><br><span class="line">NAME                                    READY   STATUS            RESTARTS   AGE</span><br><span class="line">canal-5qjdm                             1/2     Running           0          5s</span><br><span class="line">canal-rmx7c                             0/2     PodInitializing   0          5s</span><br></pre></td></tr></table></figure><h3 id="2-2-创建pod进行策略测试"><a href="#2-2-创建pod进行策略测试" class="headerlink" title="2.2 创建pod进行策略测试"></a>2.2 创建pod进行策略测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建两个网络名称空间 然后进行相关测试</span></span><br><span class="line">[root@localhost yaml]# kubectl create namespace dev</span><br><span class="line">namespace/dev created</span><br><span class="line">[root@localhost yaml]# kubectl create namespace pord</span><br><span class="line">namespace/pord created</span><br><span class="line">[root@localhost yaml]# kubectl get ns</span><br><span class="line">NAME            STATUS   AGE</span><br><span class="line">default         Active   46d</span><br><span class="line">dev             Active   16s</span><br><span class="line">ingress-nginx   Active   18d</span><br><span class="line">kube-public     Active   46d</span><br><span class="line">kube-system     Active   46d</span><br><span class="line">pord            Active   5s</span><br></pre></td></tr></table></figure><h3 id="2-3-创建规则文件"><a href="#2-3-创建规则文件" class="headerlink" title="2.3 创建规则文件"></a>2.3 创建规则文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yaml]# vim ingresspolicy.yaml </span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: deny-all-ingress</span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125; <span class="comment">#这里标签选择器空表示对此名称空间下的所有pod生效此规则</span></span><br><span class="line">  policyTypes:</span><br><span class="line">  - Ingress <span class="comment">#只对入栈进行规则策略 默认什么都不加是拒绝所有入栈</span></span><br><span class="line">[root@localhost yaml]# kubectl apply -f ingresspolicy.yaml -n dev</span><br><span class="line">networkpolicy.networking.k8s.io/deny-all-ingress created</span><br><span class="line"><span class="comment">#规则就已经创建好了 接下来在此名称空间下创建一个pod进行访问测试</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-创建pod基于dev空间"><a href="#2-4-创建pod基于dev空间" class="headerlink" title="2.4 创建pod基于dev空间"></a>2.4 创建pod基于dev空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yaml]# vim pod-dev.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    liang: jing</span><br><span class="line">  name: pod-test</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: 192.168.12.132/shendun/fengkongvue:v8</span><br><span class="line">    name: pod-fenkong</span><br><span class="line">    ports:</span><br><span class="line">    - name: fengkong-port</span><br><span class="line">      containerPort: 80</span><br><span class="line">  imagePullSecrets:</span><br><span class="line">  - name: registry-secret</span><br><span class="line"><span class="comment">#创建此pod 查看pod</span></span><br><span class="line">[root@localhost yaml]# kubectl create -f pod-dev.yaml </span><br><span class="line">pod/pod-test created</span><br><span class="line">[root@localhost yaml]# kubectl get pods -n dev</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-test   1/1     Running   0          6s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三，规则模板"><a href="#三，规则模板" class="headerlink" title="三，规则模板"></a>三，规则模板</h2><h3 id="3-1-拒绝所有"><a href="#3-1-拒绝所有" class="headerlink" title="3.1 拒绝所有"></a>3.1 拒绝所有</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: deny-all-ingress</span><br><span class="line">  namespace: dev </span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125;</span><br><span class="line">  policyTypes:      <span class="comment">#用来控制Ingress和Egress哪个生效。 </span></span><br><span class="line">  - Ingress</span><br><span class="line">  - Egress</span><br><span class="line"></span><br><span class="line"><span class="comment">#此规则创建于名称空间 dev </span></span><br><span class="line"><span class="comment">#podSelector pod选择器空 表示为此名称空间的所有pod</span></span><br><span class="line"><span class="comment">#policyTypes </span></span><br><span class="line">Ingress 后边如果不加规则，表示默认拒绝所有入栈此名称空间所有pod的访问</span><br><span class="line">Egress 后边如果不加规则，表示默认拒绝所有pod出栈此名称空间</span><br><span class="line"></span><br><span class="line">*********************</span><br><span class="line"><span class="comment">#如果不写Ingress的话，默认都可以访问</span></span><br><span class="line"><span class="comment">#如果写上Ingress的话，默认都不能访问</span></span><br><span class="line">*********************</span><br><span class="line"></span><br><span class="line">该条规则的意思就是，拒绝所有其他名称空间的pod或者其他访问dev名称空间的所有pod 也限定此名称空间的所有pod访问其他名称空间的pod</span><br></pre></td></tr></table></figure><h3 id="3-2-允许所有访问"><a href="#3-2-允许所有访问" class="headerlink" title="3.2 允许所有访问"></a>3.2 允许所有访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: deny-all-ingress</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125;</span><br><span class="line">  ingress:</span><br><span class="line">  - &#123;&#125;  <span class="comment">#入栈添加规则为空 表示默认允许所有入栈访问</span></span><br><span class="line">  egress:</span><br><span class="line">  - &#123;&#125; <span class="comment">#出栈添加规则为空 表示默认允许所有出栈访问</span></span><br><span class="line">  policyTypes:</span><br><span class="line">  - Ingress</span><br><span class="line">  - Egress</span><br><span class="line"> </span><br><span class="line"><span class="comment">#该条规则意思为 在dev名称空间中的pod，可以被所有其他名称空间pod进行入栈访问，也允许该名称空间中的所有pod对其他名称空间中的pod进行出栈访问</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-放行特定入栈规则"><a href="#3-3-放行特定入栈规则" class="headerlink" title="3.3 放行特定入栈规则"></a>3.3 放行特定入栈规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: allow-app-flaskapp1</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: flaskapp1</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - ipBlock: <span class="comment">#指定ip网段 允许10.244.0.0/16这个网段的所有pod及机器访问此labels下的pod</span></span><br><span class="line">        cidr: 10.244.0.0/16</span><br><span class="line">        except: <span class="comment">#允许整个网段的同时怕排出网段中的一个ip地址 禁止访问32掩码表示单个ip</span></span><br><span class="line">        - 10.244.1.19/32</span><br><span class="line">    ports: <span class="comment">#可以访问标签选择器下的labels下的pod的哪个端口</span></span><br><span class="line">    - port: 80</span><br><span class="line"></span><br><span class="line"><span class="comment">#该跳规则的意思是 该规则对标签选择器下含有app:flaskapp1的所有pod生效 访问策略是:</span></span><br><span class="line">允许整个10.244.0.0/16网段的所有机器对本标签下所有pod的80端口进行访问但是排出网段中10.244.1.19此ip地址的访问权限，不让此ip地址的机器访问</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4-对选定的pod进行出栈全部限制"><a href="#3-4-对选定的pod进行出栈全部限制" class="headerlink" title="3.4 对选定的pod进行出栈全部限制"></a>3.4 对选定的pod进行出栈全部限制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: deny-all-egress</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: flaskapp1</span><br><span class="line">  policyTypes:</span><br><span class="line">  - Egress</span><br><span class="line"></span><br><span class="line"><span class="comment">#对标签选择器 选定的pod进行出栈拒绝 拒绝访问其他的所有pod 只能访问pod本身自己</span></span><br></pre></td></tr></table></figure><h3 id="3-5-对特定pod进行特定的出栈限制"><a href="#3-5-对特定pod进行特定的出栈限制" class="headerlink" title="3.5 对特定pod进行特定的出栈限制"></a>3.5 对特定pod进行特定的出栈限制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: deny-all-egress</span><br><span class="line">  namespace: dev</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: flaskapp1</span><br><span class="line">  egress:</span><br><span class="line">  - to:</span><br><span class="line">    - podSelector: <span class="comment">#ju标签选择器</span></span><br><span class="line">        matchLabels:</span><br><span class="line">          app: flaskapp1 <span class="comment">#对标签选择器下的pod访问放行</span></span><br><span class="line">  policyTypes:</span><br><span class="line">  - Egress</span><br><span class="line"><span class="comment">#该条规则意思为 对标签选择器下的pod出栈访问进行全部限制 然后放行这些pod只能访问第二个标签选择器下的pod</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus 之 AlertManager 接入企业微信报警</title>
      <link href="/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/"/>
      <url>/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Prometheus-之-AlertManager-接入企业微信报警"><a href="#Prometheus-之-AlertManager-接入企业微信报警" class="headerlink" title="Prometheus 之 AlertManager 接入企业微信报警"></a>Prometheus 之 AlertManager 接入企业微信报警</h1><h2 id="一，通过企业微信接收告警"><a href="#一，通过企业微信接收告警" class="headerlink" title="一，通过企业微信接收告警"></a>一，通过企业微信接收告警</h2><blockquote><p>Alertmanger从v0.12开始已经默认支持企业微信了，下面我们就一起体验一下。</p></blockquote><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><ul><li><p>第1步：访问网站注册企业微信账号（不需要企业认证）。</p></li><li><p>第2步：访问应用创建第三方应用，点击创建应用按钮- &gt;填写应用信息：</p></li></ul><p><img src="/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/1.png"></p><h3 id="1-2-详细配置"><a href="#1-2-详细配置" class="headerlink" title="1.2 详细配置"></a>1.2 详细配置</h3><blockquote><p>一路和我配置下来的同学，那么此时只要修改AlertManager configmap文件即可！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# <span class="built_in">cd</span> alert/</span><br><span class="line">[root@k8s-master01 alert]# vim prometheus-alert-conf.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: alert-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  config.yml: |-</span><br><span class="line">    global:</span><br><span class="line">      resolve_timeout: 5m</span><br><span class="line">    route:</span><br><span class="line">      group_by: [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">      group_wait: 30s</span><br><span class="line">      group_interval: 5m</span><br><span class="line">      repeat_interval: 5m</span><br><span class="line">      receiver: <span class="string">&#x27;wechat&#x27;</span></span><br><span class="line">    receivers:</span><br><span class="line">    - name: <span class="string">&#x27;wechat&#x27;</span></span><br><span class="line">      wechat_configs:</span><br><span class="line">      - corp_id: <span class="string">&#x27;wwb289cff51760b25e&#x27;</span></span><br><span class="line">        to_party: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        agent_id: <span class="string">&#x27;1000003&#x27;</span></span><br><span class="line">        api_secret: <span class="string">&#x27;Hu4HAoj_i6b1I6fFwraipkNFKksIr4SRLDvcpaHiCEg&#x27;</span></span><br><span class="line">        send_resolved: <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#配置文件详解：</span></span><br><span class="line">resolve_timeout：该参数定义了当Alertmanager持续多长时间未接收到告警后标记告警状态为resolved（已解决）</span><br><span class="line">group_wait：发送一组新的警报的初始等待时间,也就是初次发警报的延时</span><br><span class="line">group_interval：初始警报组如果已经发送，需要等待多长时间再发送同组新产生的其他报警</span><br><span class="line">repeat_interval：如果警报已经成功发送，间隔多长时间再重复发送</span><br><span class="line">corp_id：企业微信账号唯一ID，可以在我的企业中查看。</span><br><span class="line">to_party：需要发送的组。</span><br><span class="line">agent_id：第三方企业应用的ID，可以在自己创建的第三方企业应用详情页面查看。</span><br><span class="line">api_secret：第三方企业应用的密钥，可以在自己创建的第三方企业应用详情页面查看。</span><br><span class="line">send_resolved：发送报警恢复消息。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3-更新配置文件"><a href="#1-3-更新配置文件" class="headerlink" title="1.3 更新配置文件"></a>1.3 更新配置文件</h3><blockquote><p>注意多reload几次。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">kubectl create -f prometheus.configmap.yaml</span><br><span class="line">kubectl delete -f alert/prometheus-alert-conf.yaml</span><br><span class="line">kubectl create -f alert/prometheus-alert-conf.yaml</span><br><span class="line">curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br><span class="line">curl -X POST <span class="string">&quot;http://10.108.79.122:9093/-/reload&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-查看报警信息"><a href="#1-4-查看报警信息" class="headerlink" title="1.4 查看报警信息"></a>1.4 查看报警信息</h3><p><img src="/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/2.png"></p><h3 id="1-5-报警信息格式化"><a href="#1-5-报警信息格式化" class="headerlink" title="1.5 报警信息格式化"></a>1.5 报警信息格式化</h3><blockquote><p><strong>由于默认的报警消息太不优雅了！！！鄙人实在是受不了，故此做了一下格式化：</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改AlertManager configmap 配置文件</span></span><br><span class="line">[root@k8s-master01 alert]# vim prometheus-alert-conf.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: alert-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  config.yml: |-</span><br><span class="line">    global:</span><br><span class="line">      resolve_timeout: 5m</span><br><span class="line">    templates:</span><br><span class="line">    - /etc/alertmanager/wechat.tmpl     <span class="comment">#引用一个模版配置文件，因为我们AlertManager configmap挂载在/etc/alertmanager路径下，故此在此创建一个模版配置文件。</span></span><br><span class="line">    route:</span><br><span class="line">      group_by: [<span class="string">&#x27;alertname&#x27;</span>]</span><br><span class="line">      group_wait: 30s</span><br><span class="line">      group_interval: 5m</span><br><span class="line">      repeat_interval: 5m</span><br><span class="line">      receiver: <span class="string">&#x27;wechat&#x27;</span></span><br><span class="line">    receivers:</span><br><span class="line">    - name: <span class="string">&#x27;wechat&#x27;</span></span><br><span class="line">      wechat_configs:</span><br><span class="line">      - corp_id: <span class="string">&#x27;wwb289cff51760b25e&#x27;</span></span><br><span class="line">        to_party: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        agent_id: <span class="string">&#x27;1000003&#x27;</span></span><br><span class="line">        api_secret: <span class="string">&#x27;Hu4HAoj_i6b1I6fFwraipkNFKksIr4SRLDvcpaHiCEg&#x27;</span></span><br><span class="line">        send_resolved: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  wechat.tmpl: |        <span class="comment">#模版配置文件信息如下：</span></span><br><span class="line">    &#123;&#123;- define <span class="string">&quot;__text_alert_list&quot;</span> -&#125;&#125;</span><br><span class="line">    &#123;&#123;- range .Alerts.Firing -&#125;&#125;</span><br><span class="line">    Alerts Firing:</span><br><span class="line">    告警级别: &#123;&#123; .Labels.severity &#125;&#125;</span><br><span class="line">    告警类型: &#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class="line">    故障主机: &#123;&#123; .Labels.cluster &#125;&#125;</span><br><span class="line">    告警主题: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line">    告警详情: &#123;&#123; .Annotations.description &#125;&#125;</span><br><span class="line">    触发时间: &#123;&#123; (.StartsAt.Add 28800e9).Format <span class="string">&quot;2006-01-02 15:04:05&quot;</span> &#125;&#125;</span><br><span class="line">    &#123;&#123; end &#125;&#125;</span><br><span class="line">    &#123;&#123;- range .Alerts.Resolved -&#125;&#125;</span><br><span class="line">    Alerts Resolved:</span><br><span class="line">    告警级别: &#123;&#123; .Labels.severity &#125;&#125;</span><br><span class="line">    告警类型: &#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class="line">    故障主机: &#123;&#123; .Labels.cluster &#125;&#125;</span><br><span class="line">    告警主题: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class="line">    触发时间: &#123;&#123; (.StartsAt.Add 28800e9).Format <span class="string">&quot;2006-01-02 15:04:05&quot;</span> &#125;&#125;</span><br><span class="line">    恢复时间: &#123;&#123; (.EndsAt.Add 28800e9).Format <span class="string">&quot;2006-01-02 15:04:05&quot;</span> &#125;&#125;</span><br><span class="line">    &#123;&#123; end &#125;&#125;</span><br><span class="line">    &#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;- define <span class="string">&quot;wechat.default.message&quot;</span> -&#125;&#125;</span><br><span class="line">    &#123;&#123;- <span class="keyword">if</span> gt (len .Alerts.Firing) 0 -&#125;&#125;</span><br><span class="line">    &#123;&#123; template <span class="string">&quot;__text_alert_list&quot;</span> . &#125;&#125;</span><br><span class="line">    &#123;&#123;- end &#125;&#125;</span><br><span class="line">    &#123;&#123;- <span class="keyword">if</span> gt (len .Alerts.Resolved) 0 -&#125;&#125;</span><br><span class="line">    &#123;&#123; template <span class="string">&quot;__text_alert_list&quot;</span> . &#125;&#125;</span><br><span class="line">    &#123;&#123;- end &#125;&#125;</span><br><span class="line">    &#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-格式化之后的报警消息查看"><a href="#1-6-格式化之后的报警消息查看" class="headerlink" title="1.6 格式化之后的报警消息查看"></a>1.6 格式化之后的报警消息查看</h3><p><img src="/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/3.png"></p><blockquote><p><strong>这样看来 优雅多啦！！</strong></p></blockquote><h3 id="1-7-再添加一条报警规则"><a href="#1-7-再添加一条报警规则" class="headerlink" title="1.7 再添加一条报警规则"></a>1.7 再添加一条报警规则</h3><blockquote><p>为了测试 ，CPU使用率大于百分之0.01就触发报警。（最开始阈值设置为2%，但是我的CPU利用率实在是太低了，没办法）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改rules.yml文件（添加如下内容）</span></span><br><span class="line">      - alert: NodeCpuUsage</span><br><span class="line">        <span class="built_in">expr</span>: <span class="built_in">sum</span>(<span class="built_in">sum</span> by (container_name)( rate(container_cpu_usage_seconds_total&#123;image!=<span class="string">&quot;&quot;</span>&#125;[1m] ) )) / count(node_cpu_seconds_total&#123;mode=<span class="string">&quot;system&quot;</span>&#125;) * 100 &gt; 0.01</span><br><span class="line">        <span class="keyword">for</span>: 1m</span><br><span class="line">        labels:</span><br><span class="line">          cpu: node</span><br><span class="line">        annotations:</span><br><span class="line">          summary: <span class="string">&quot;&#123;&#123;<span class="variable">$labels</span>.instance&#125;&#125;: High NodeCpu usage detected&quot;</span></span><br><span class="line">          description: <span class="string">&quot;&#123;&#123;<span class="variable">$labels</span>.instance&#125;&#125;: NodeCpu usage is above 0.01% (current value is: &#123;&#123; <span class="variable">$value</span> &#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>下方直接跳转到<code>完整配置文件展示</code></p></blockquote><hr><p>###附录：</p><blockquote><p><strong>说明：</strong><br>上述配置文件中，有个<code>labels</code>字段，prometheus可根据labels进行分流报警。因为AlertManager configmap配置文件我只配置了一个报警媒介，下面我给大家展示邮件和企业微信两个媒介同时存在并报警分流的模版</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: alert-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  config.yml: |-</span><br><span class="line">    global:</span><br><span class="line">      resolve_timeout: 5m</span><br><span class="line">      smtp_smarthost: <span class="string">&#x27;smtp.exmail.qq.com:465&#x27;</span></span><br><span class="line">      smtp_from: <span class="string">&#x27;zhaoshuo@gagogroup.com&#x27;</span></span><br><span class="line">      smtp_auth_username: <span class="string">&#x27;zhaoshuo@gagogroup.com&#x27;</span></span><br><span class="line">      smtp_auth_password: <span class="string">&#x27;授权密码&#x27;</span></span><br><span class="line">      smtp_hello: <span class="string">&#x27;exmail.qq.com&#x27;</span></span><br><span class="line">      smtp_require_tls: <span class="literal">false</span></span><br><span class="line">    route:</span><br><span class="line">      group_by: [<span class="string">&#x27;alertname&#x27;</span>, <span class="string">&#x27;cluster&#x27;</span>]</span><br><span class="line">      group_wait: 30s</span><br><span class="line">      group_interval: 5m</span><br><span class="line">      repeat_interval: 5m</span><br><span class="line">      receiver: wechat</span><br><span class="line">      routes:</span><br><span class="line">      - receiver: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">        group_wait: 10s</span><br><span class="line">        match:      <span class="comment">#这里定义了匹配的标签，需要和prometheus里面的规则文件的标签一致，也就是有team: node标签的告警，通过邮件来告警。</span></span><br><span class="line">          team: node</span><br><span class="line">      - receiver: <span class="string">&#x27;wechat&#x27;</span></span><br><span class="line">        group_wait: 10s</span><br><span class="line">        match:      </span><br><span class="line">          cpu: node     <span class="comment">#符合cpu: node标签实现wechat报警。</span></span><br><span class="line">    receivers:</span><br><span class="line">    - name: <span class="string">&#x27;wechat&#x27;</span></span><br><span class="line">      wechat_configs:</span><br><span class="line">      - corp_id: <span class="string">&#x27;wwb289cff51760b25e&#x27;</span></span><br><span class="line">        to_party: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        agent_id: <span class="string">&#x27;1000003&#x27;</span></span><br><span class="line">        api_secret: <span class="string">&#x27;Hu4HAoj_i6b1I6fFwraipkNFKksIr4SRLDvcpaHiCEg&#x27;</span></span><br><span class="line">        send_resolved: <span class="literal">true</span></span><br><span class="line">    - name: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">      email_configs:</span><br><span class="line">      - to: <span class="string">&#x27;zhaoshuo@gagogroup.com&#x27;</span></span><br><span class="line">        send_resolved: <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>看，下面图片里的配置文件，两个报警规则里面的labels不一样，那么这样就实现了Menory报警发送到邮件，CPU报警发送到企业微信中。</strong></p></blockquote><hr><p><strong>完整配置文件展示</strong></p><p><img src="/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/4.png"></p><p><strong>更新配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">kubectl create -f prometheus.configmap.yaml</span><br><span class="line">kubectl delete -f alert/prometheus-alert-conf.yaml</span><br><span class="line">kubectl create -f alert/prometheus-alert-conf.yaml</span><br><span class="line">curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br><span class="line">curl -X POST <span class="string">&quot;http://10.108.79.122:9093/-/reload&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/5.png"></p><blockquote><p>警报添加成功！！！</p></blockquote><p><img src="/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/6.png"></p><p><img src="/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/7.png"></p><blockquote><p>已经发送报警</p></blockquote><p><strong>查看企业微信报警信息</strong></p><p><img src="/articles/2019/08/21/prometheuszhialertmanagerjieruqiyeweixinbaojing/8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus 之 AlertManager 报警组件+邮件报警</title>
      <link href="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/"/>
      <url>/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Prometheus-之-AlertManager-报警组件-邮件报警"><a href="#Prometheus-之-AlertManager-报警组件-邮件报警" class="headerlink" title="Prometheus 之 AlertManager 报警组件+邮件报警"></a>Prometheus 之 AlertManager 报警组件+邮件报警</h1><h2 id="一，AlertManager-简介"><a href="#一，AlertManager-简介" class="headerlink" title="一，AlertManager 简介"></a>一，AlertManager 简介</h2><blockquote><p>prometheus的兄弟alertmanager就是一个专门负责报警的组建，它独立于prometheus项目，自行运行并接收来自prometheus的请求，然后使用多种方式进行报警，之所以不是直接集成到prometheus中。</p></blockquote><blockquote><p>Prometheus包含了一个报警模块，那就是AlertManager，主要用于接受Prometheus发送的告警信息，它支持丰富的告警通知渠道，而且很容易做到告警信息进行去重，降噪，分组等，是一个前卫的告警通知系统</p></blockquote><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/1.png"></p><h2 id="二，安装-AlerManager"><a href="#二，安装-AlerManager" class="headerlink" title="二，安装 AlerManager"></a>二，安装 AlerManager</h2><blockquote><p>prometheus配置文件官方文档<br><a href="https://prometheus.io/docs/alerting/configuration/">https://prometheus.io/docs/alerting/configuration/</a></p><blockquote><p>首先，我们需要先指定配置文件 ，这里我们还是创建一个ConfigMap资源对象</p></blockquote></blockquote><h3 id="2-1-创建alert的ConfigMap"><a href="#2-1-创建alert的ConfigMap" class="headerlink" title="2.1 创建alert的ConfigMap"></a>2.1 创建alert的ConfigMap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 alert]# vim prometheus-alert-conf.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: alert-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  config.yml: |-</span><br><span class="line">    global:</span><br><span class="line">      <span class="comment"># 在没有报警的情况下声明为已解决的时间</span></span><br><span class="line">      resolve_timeout: 5m</span><br><span class="line">      <span class="comment"># 配置邮件发送信息</span></span><br><span class="line">      smtp_smarthost: <span class="string">&#x27;smtp.exmail.qq.com:465&#x27;</span></span><br><span class="line">      smtp_from: <span class="string">&#x27;zhaoshuo@gagogroup.com&#x27;</span></span><br><span class="line">      smtp_auth_username: <span class="string">&#x27;zhaoshuo@gagogroup.com&#x27;</span></span><br><span class="line">      smtp_auth_password: <span class="string">&#x27;授权密码&#x27;</span></span><br><span class="line">      smtp_hello: <span class="string">&#x27;exmail.qq.com&#x27;</span></span><br><span class="line">      smtp_require_tls: <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 所有报警信息进入后的根路由，用来设置报警的分发策略</span></span><br><span class="line">    route:</span><br><span class="line">      <span class="comment"># 这里的标签列表是接收到报警信息后的重新分组标签，例如，接收到的报警信息里面有许多具有 cluster=A 和 alertname=LatncyHigh 这样的标签的报警信息将会批量被聚合到一个分组里面</span></span><br><span class="line">      group_by: [<span class="string">&#x27;alertname&#x27;</span>, <span class="string">&#x27;cluster&#x27;</span>]</span><br><span class="line">      <span class="comment"># 当一个新的报警分组被创建后，需要等待至少group_wait时间来初始化通知，这种方式可以确保您能有足够的时间为同一分组来获取多个警报，然后一起触发这个报警信息。</span></span><br><span class="line">      group_wait: 30s</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 当第一个报警发送后，等待&#x27;group_interval&#x27;时间来发送新的一组报警信息。</span></span><br><span class="line">      group_interval: 5m</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 如果一个报警信息已经发送成功了，等待&#x27;repeat_interval&#x27;时间来重新发送他们</span></span><br><span class="line">      repeat_interval: 5m</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 默认的receiver：如果一个报警没有被一个route匹配，则发送给默认的接收器</span></span><br><span class="line">      receiver: default</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 上面所有的属性都由所有子路由继承，并且可以在每个子路由上进行覆盖。</span></span><br><span class="line">      routes:</span><br><span class="line">      - receiver: email</span><br><span class="line">        group_wait: 10s</span><br><span class="line">        match:      <span class="comment">#这里定义了匹配的标签，需要和prometheus里面的规则文件的标签一致，也就是有team: node标签的告警，通过邮件来告警。</span></span><br><span class="line">          team: node</span><br><span class="line">    receivers:</span><br><span class="line">    - name: <span class="string">&#x27;default&#x27;</span></span><br><span class="line">      email_configs:</span><br><span class="line">      - to: <span class="string">&#x27;zhaoshuo@gagogroup.com&#x27;</span></span><br><span class="line">        send_resolved: <span class="literal">true</span></span><br><span class="line">    - name: <span class="string">&#x27;email&#x27;</span></span><br><span class="line">      email_configs:</span><br><span class="line">      - to: <span class="string">&#x27;zhaoshuo@gagogroup.com&#x27;</span></span><br><span class="line">        send_resolved: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>创建alertmanager的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 alert]# kubectl create -f prometheus-alert-conf.yaml</span><br><span class="line">configmap/alert-config created</span><br><span class="line">[root@k8s-master01 alert]# kubectl get cm -n kube-system</span><br><span class="line">NAME                                 DATA   AGE</span><br><span class="line">alert-config                         1      8s</span><br><span class="line">coredns                              1      10d</span><br><span class="line">extension-apiserver-authentication   6      10d</span><br><span class="line">kube-flannel-cfg                     2      10d</span><br><span class="line">kube-proxy                           2      10d</span><br><span class="line">kubeadm-config                       2      10d</span><br><span class="line">kubelet-config-1.14                  1      10d</span><br><span class="line">prometheus-config                    1      3d18h</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里已经显示我们创建好的alert-config</span></span><br></pre></td></tr></table></figure><h3 id="2-2-在之前的prometheus-pod的yaml文件中添加这个容器"><a href="#2-2-在之前的prometheus-pod的yaml文件中添加这个容器" class="headerlink" title="2.2 在之前的prometheus pod的yaml文件中添加这个容器"></a>2.2 在之前的prometheus pod的yaml文件中添加这个容器</h3><blockquote><p>这里我们将上面创建的aler-config这个configmap资源对象volume的形式挂载到&#x2F;etc&#x2F;alertmanager目录下去，然后在启动参数中指定–config.file&#x3D;&#x2F;etc&#x2F;alertmanager&#x2F;config.yml</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- name: alermanager</span><br><span class="line">  image: prom/alertmanager:v0.15.3</span><br><span class="line">  imagePullPolicy: IfNotPresent</span><br><span class="line">  args:</span><br><span class="line">  - <span class="string">&quot;--config.file=/etc/alertmanager/config.yml&quot;</span></span><br><span class="line">  - <span class="string">&quot;--storage.path=/alertmanager/data&quot;</span></span><br><span class="line">  ports:</span><br><span class="line">  - containerPort: 9093</span><br><span class="line">    name: http</span><br><span class="line">  volumeMounts:</span><br><span class="line">  - mountPath: <span class="string">&quot;/etc/alertmanager&quot;</span></span><br><span class="line">    name: alertcfg</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      cpu: 100m</span><br><span class="line">      memory: 256Mi</span><br><span class="line">    limits:</span><br><span class="line">      cpu: 200m</span><br><span class="line">      memory: 1024Mi</span><br><span class="line">securityContext:</span><br><span class="line">  runAsUser: 0</span><br><span class="line">volumes:</span><br><span class="line">- name: data</span><br><span class="line">  persistentVolumeClaim:</span><br><span class="line">    claimName: prometheus</span><br><span class="line">- configMap:</span><br><span class="line">    name: prometheus-config</span><br><span class="line">  name: config-volume</span><br><span class="line">- name: alertcfg</span><br><span class="line">  configMap:</span><br><span class="line">    name: alert-config</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong><br>在0.15版本，alertmanager的WORKDIR发生了变化，变成&#x2F;etc&#x2F;alertmanager默认情况下存储路径–storage.path是相对目录data&#x2F;，因此alertmanager会在我们上面挂载的ConfigMap中去创建这个目录，所以会报错，这里通过–storage.path参数来解决</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新deployment</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl apply -f prometheus.deploy.yaml</span><br><span class="line">Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply</span><br><span class="line">deployment.extensions/prometheus configured</span><br></pre></td></tr></table></figure><p><strong>下面为完整的yaml</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: prometheus</span><br><span class="line">      containers:</span><br><span class="line">      - image: prom/prometheus:v2.4.3</span><br><span class="line">        name: prometheus</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="string">&quot;/bin/prometheus&quot;</span></span><br><span class="line">        args:</span><br><span class="line">        - <span class="string">&quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span></span><br><span class="line">        - <span class="string">&quot;--storage.tsdb.path=/prometheus&quot;</span></span><br><span class="line">        - <span class="string">&quot;--storage.tsdb.retention=7d&quot;</span></span><br><span class="line">        - <span class="string">&quot;--web.enable-admin-api&quot;</span>  <span class="comment"># 控制对admin HTTP API的访问，其中包括删除时间序列等功能</span></span><br><span class="line">        - <span class="string">&quot;--web.enable-lifecycle&quot;</span>  <span class="comment"># 支持热更新，直接执行localhost:9090/-/reload立即生效</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9090</span><br><span class="line">          protocol: TCP</span><br><span class="line">          name: http</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">&quot;/prometheus&quot;</span></span><br><span class="line">          subPath: prometheus</span><br><span class="line">          name: data</span><br><span class="line">        - mountPath: <span class="string">&quot;/etc/prometheus&quot;</span></span><br><span class="line">          name: config-volume</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 400m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 400m</span><br><span class="line">            memory: 2Gi</span><br><span class="line">      - name: alermanager</span><br><span class="line">        image: prom/alertmanager:v0.15.3</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        args:</span><br><span class="line">        - <span class="string">&quot;--config.file=/etc/alertmanager/config.yml&quot;</span></span><br><span class="line">        - <span class="string">&quot;--storage.path=/alertmanager/data&quot;</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9093</span><br><span class="line">          name: http</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">&quot;/etc/alertmanager&quot;</span></span><br><span class="line">          name: alertcfg</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 256Mi</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 200m</span><br><span class="line">            memory: 1024Mi</span><br><span class="line">      securityContext:</span><br><span class="line">        runAsUser: 0</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: prometheus</span><br><span class="line">      - configMap:</span><br><span class="line">          name: prometheus-config</span><br><span class="line">        name: config-volume</span><br><span class="line">      - name: alertcfg</span><br><span class="line">        configMap:</span><br><span class="line">          name: alert-config</span><br></pre></td></tr></table></figure><p><strong>查看一下pod启动状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl get pod -n kube-system |grep prometheus</span><br><span class="line">prometheus-5bc9b9c67c-4wcm5            2/2     Running     0          43s</span><br></pre></td></tr></table></figure><h3 id="2-3-修改prometheus的configmap"><a href="#2-3-修改prometheus的configmap" class="headerlink" title="2.3 修改prometheus的configmap"></a>2.3 修改prometheus的configmap</h3><blockquote><p>AlertManager容器启动之后，我们还需要在Prometheus中配置下AlertManager的地址，让Prometheus能够访问AlertManager</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">      - targets: [<span class="string">&quot;localhost:9093&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>配置截图</strong></p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/2.png"></p><p><strong>更新configmap配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">configmap <span class="string">&quot;prometheus-config&quot;</span> deleted</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br><span class="line">[root@k8s-master01 prometheus]# curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#确保更新配置没有报错（刷新比较慢可以等等）</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>现在prometheus alertmanager并没有告警的规则，还需要我们添加报警规则</strong></p></blockquote><h2 id="三，Prometheus-报警规则"><a href="#三，Prometheus-报警规则" class="headerlink" title="三，Prometheus 报警规则"></a>三，Prometheus 报警规则</h2><blockquote><p>上面我们将prometheus和alertmanager进行了关联，但是现在并没有报警规则，所以这里还需要配置一些报警规则。让prometheus触发报警</p></blockquote><h3 id="3-1-添加报警规则"><a href="#3-1-添加报警规则" class="headerlink" title="3.1 添加报警规则"></a>3.1 添加报警规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先在prometheus.configmap.yaml文件中添加报警规则，下面的文件就是prometheus报警的规则文件</span></span><br><span class="line">    rule_files:</span><br><span class="line">    - /etc/prometheus/rules.yml</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/3.png"></p><p>报警规则允许基于Prometheus表达式语言来定义报警规则条件，并在出发报警时发送给外部</p><blockquote><p>我们上面已经将&#x2F;etc&#x2F;promtehus进行挂载了，所以这里只需要修改prometheus-configmap就可以了。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  rules.yml: |</span><br><span class="line">    <span class="built_in">groups</span>:</span><br><span class="line">    - name: abcdocker-test-rule</span><br><span class="line">      rules:</span><br><span class="line">      - alert: NodeMemoryUsage</span><br><span class="line">        <span class="built_in">expr</span>: (node_memory_MemTotal_bytes - (node_memory_MemFree_bytes+node_memory_Buffers_bytes + node_memory_Cached_bytes)) / node_memory_MemTotal_bytes * 100 &gt; 50</span><br><span class="line">        <span class="keyword">for</span>: 1m</span><br><span class="line">        labels:</span><br><span class="line">          team: node</span><br><span class="line">        annotations:</span><br><span class="line">          summary: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125;：High Memory Usage detected&quot;</span></span><br><span class="line">          description: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125;: Memory usage us avive 50% (current value is :: &#123;&#123; <span class="variable">$value</span> &#125;&#125;)&quot;</span></span><br><span class="line">          </span><br><span class="line"></span><br><span class="line"><span class="comment">#配置相关参数说明</span></span><br><span class="line">  rules.yml: |</span><br><span class="line">    <span class="built_in">groups</span>:</span><br><span class="line">    - name: abcdocker-test-rule</span><br><span class="line">      rules:  <span class="comment">#规则</span></span><br><span class="line">      - alert: NodeMemoryUsage <span class="comment">#报警名称(内存报警)</span></span><br><span class="line">        <span class="built_in">expr</span>: (node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)) / node_memory_MemTotal_bytes * 100 &gt; 50 <span class="comment">#规则表达式</span></span><br><span class="line">        <span class="keyword">for</span>: 1m  <span class="comment">#等待1分钟执行查询条件</span></span><br><span class="line">        labels:</span><br><span class="line">          team: node   <span class="comment">#当我们触发报警后，带有team=node的标签，并且这里走的是我们alertmanager node标签，这里对应的就是我们的email接收器</span></span><br><span class="line">        annotations:  <span class="comment">#指定另外一组标签，不会将这个标签当做我们告警的身份标示（不会在我们报警信息里操作）这里主要是用于额外的展示，例如发送给邮件里面&gt;的报警信息</span></span><br><span class="line">          summary: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125;：High Memory Usage detected&quot;</span>   <span class="comment">#label标签，instance代表节点名称</span></span><br><span class="line">          description: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.instance &#125;&#125;: Memory usage us avive 50% (current value is :: &#123;&#123; <span class="variable">$value</span> &#125;&#125;)&quot;</span> <span class="comment">#描述：相当于报警信息 $value代表当前值</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明一点expr所执行的命令是可以在prometheus上获取到数据的</strong></p></blockquote><p><strong>配置截图</strong></p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/4.png"></p><blockquote><p><strong>报警说明</strong></p><ul><li>本次报警大概意思是当服务器内存百分比大于80的时候，就进行报警，并且通过labels标签关联team:node (这里team&#x3D;node是在我们alertmanager里面配置的接收器，默认是default)，并且报警内容添加主机和当前内存使用率</li><li>接下来我们访问prometheus，点击alerts，就可以看到我们添加的NodeMemoryUsage</li><li>我这里将脚本改成&gt;30   (为了测试，正常值应为80或者85)</li></ul></blockquote><p><strong>更新配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">configmap <span class="string">&quot;prometheus-config&quot;</span> deleted</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br><span class="line">[root@k8s-master01 prometheus]# curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/5.png"></p><p><strong>等待1分钟后</strong></p><blockquote><p>prometheus进入了等待PENDING状态</p></blockquote><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/6.png"></p><p><strong>当前值已经大于我们设置的30%，现在已经出发报警</strong></p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/7.png"></p><p><strong>邮件内容如下</strong></p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/8.png"></p><h3 id="3-2-alertManager-Ui界面"><a href="#3-2-alertManager-Ui界面" class="headerlink" title="3.2 alertManager Ui界面"></a>3.2 alertManager Ui界面</h3><blockquote><p>我们可以在邮件内容中看到包含View in AlertManager的链接，这是alertmanager自带的Ui界面。我们可以使用NodePort进行访问</p></blockquote><p><strong>这里需要修改一下prometheus的service</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# vim prometeheus-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - name: web</span><br><span class="line">      port: 9090</span><br><span class="line">      targetPort: http</span><br><span class="line">    - name: alertmanager</span><br><span class="line">      port: 9093</span><br><span class="line">      targetPort: 9093</span><br></pre></td></tr></table></figure><p><strong>如果前面也是按照我的文档操作的，可以在prometheus后面添加一个svc端口接口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- name: alertmanager</span><br><span class="line">  port: 9093</span><br><span class="line">  targetPort: 9093</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新prometheus的svc</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl apply -f prometeheus-svc.yaml</span><br><span class="line">Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply</span><br><span class="line">service/prometheus configured</span><br><span class="line"></span><br><span class="line"><span class="comment">#我们查看一下node-port端口</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get svc -n kube-system |grep prometheus</span><br><span class="line">prometheus           NodePort    10.108.79.122    &lt;none&gt;        9090:31062/TCP,9093:30798/TCP   5d2h</span><br></pre></td></tr></table></figure><p><strong>访问alertmanager端口为9093&#x3D;30798 (集群任一节点访问即可)</strong></p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/9.png"></p><p><strong>在上面的图片，我们可以看到hostname为k8s-master01一直在报警，如果不想接收这个IP报警。可以点击Slience</strong></p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/10.png"></p><blockquote><p>注意Prometheus有8小时时区问题</p></blockquote><p>这时候报警匹配为k8s-master01的hostname，在2个小时内。不进行报警，我们点击创建就可以。在Comment输入提交内容就可以了</p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/11.png"></p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/12.png"></p><p><strong>这里我们已经看不到报警内容了</strong></p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/13.png"></p><p><strong>点击Silences可以看到被禁用的监控</strong></p><p><img src="/articles/2019/08/20/prometheuszhialertmanagerbaojingzujian-youjianbaojing/14.png"></p>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus 之接入Grafana</title>
      <link href="/articles/2019/08/19/prometheusjierugrafana/"/>
      <url>/articles/2019/08/19/prometheusjierugrafana/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Prometheus-之接入Grafana"><a href="#Prometheus-之接入Grafana" class="headerlink" title="Prometheus 之接入Grafana"></a>Prometheus 之接入Grafana</h1><h2 id="一，Grafana介绍"><a href="#一，Grafana介绍" class="headerlink" title="一，Grafana介绍"></a>一，Grafana介绍</h2><pre><code>由于Prometheus自带的web Ui图标功能相对较弱，所以一般情况下我们会使用一个第三方的工具来展示这些数据</code></pre><blockquote><ul><li>Grafana是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。</li><li>grafana 是一个可视化面包，有着非常漂亮的图片和布局展示，功能齐全的度量仪表盘和图形化编辑器，支持Graphite、Zabbix、InfluxDB、Prometheus、OpenTSDB、Elasticasearch等作为数据源，比Prometheus自带的图标展示功能强大很多，更加灵活，有丰富的插件.</li></ul></blockquote><h3 id="1-1-部署Grafana"><a href="#1-1-部署Grafana" class="headerlink" title="1.1 部署Grafana"></a>1.1 部署Grafana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 grafana]# vim grafana_deployment.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">spec:</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: grafana</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: grafana</span><br><span class="line">        image: grafana/grafana:5.3.4</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3000</span><br><span class="line">          name: grafana</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: GF_SECURITY_ADMIN_USER</span><br><span class="line">          value: admin</span><br><span class="line">        - name: GF_SECURITY_ADMIN_PASSWORD</span><br><span class="line">          value: admin</span><br><span class="line">        readinessProbe:</span><br><span class="line">          failureThreshold: 10</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /api/health</span><br><span class="line">            port: 3000</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          timeoutSeconds: 30</span><br><span class="line">        livenessProbe:</span><br><span class="line">          failureThreshold: 3</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /api/health</span><br><span class="line">            port: 3000</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          timeoutSeconds: 1</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 300m</span><br><span class="line">            memory: 1024Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 300m</span><br><span class="line">            memory: 1024Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /var/lib/grafana</span><br><span class="line">          subPath: grafana</span><br><span class="line">          name: storage</span><br><span class="line">      securityContext:</span><br><span class="line">        fsGroup: 472</span><br><span class="line">        runAsUser: 472</span><br><span class="line">      volumes:</span><br><span class="line">      - name: storage</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: grafana</span><br></pre></td></tr></table></figure><blockquote><ul><li>这里使用了grafana 5.3.4的镜像，添加了监控检查、资源声明，比较重要的变量是GF_SECURITY_ADMIN_USER和GF_SECURITY_ADMIN_PASSWORD为grafana的账号和密码。</li><li>由于grafana将dashboard、插件这些数据保留在&#x2F;var&#x2F;lib&#x2F;grafana目录下，所以我们这里需要做持久化，同时要针对这个目录做挂载声明，由于5.3.4版本用户的userid和groupid都有所变化，所以这里添加了一个securityContext设置用户ID</li></ul></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/1.png"></p><h3 id="1-2-添加pv-pvc"><a href="#1-2-添加pv-pvc" class="headerlink" title="1.2 添加pv pvc"></a>1.2 添加pv pvc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl get pv</span><br><span class="line">NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                    STORAGECLASS   REASON   AGE</span><br><span class="line">nfs-pv01   1Gi        RWX            Retain           Bound       default/www-web-0                                5d18h</span><br><span class="line">nfs-pv02   2Gi        RWX            Retain           Bound       default/www-web-1                                5d18h</span><br><span class="line">nfs-pv03   3Gi        RWO            Retain           Available                                                    5d18h</span><br><span class="line">nfs-pv04   4Gi        RWX            Retain           Bound       default/www-web-2                                5d18h</span><br><span class="line">nfs-pv05   5Gi        RWX            Retain           Bound       kube-system/prometheus                           5d18h</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：可以看到我们还有一个可以使用的pv，故此不用创建pv了，直接创建一个pvc，用于绑定Grafana。</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">mkdir</span> grafana</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">cd</span> grafana/</span><br><span class="line">[root@k8s-master01 grafana]# vim grafana_pvc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 3Gi</span><br></pre></td></tr></table></figure><h3 id="1-3-创建service，使用NodePort"><a href="#1-3-创建service，使用NodePort" class="headerlink" title="1.3 创建service，使用NodePort"></a>1.3 创建service，使用NodePort</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 grafana]# vim grafana_svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 3000</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br></pre></td></tr></table></figure><h3 id="1-4-创建一个job"><a href="#1-4-创建一个job" class="headerlink" title="1.4 创建一个job"></a>1.4 创建一个job</h3><blockquote><p>由于5.1 (可以选择5.1之前的docker镜像，可以避免此类错误) 版本后groupid更改，同时我们将&#x2F;var&#x2F;lib&#x2F;grafana挂载到pvc后，目录拥有者可能不是grafana用户，所以我们还需要添加一个Job用于授权目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 grafana]# vim grafana_job.yaml</span><br><span class="line">apiVersion: batch/v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana-chown</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    spec:</span><br><span class="line">      restartPolicy: Never</span><br><span class="line">      containers:</span><br><span class="line">      - name: grafana-chown</span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">&quot;chown&quot;</span>, <span class="string">&quot;-R&quot;</span>, <span class="string">&quot;472:472&quot;</span>, <span class="string">&quot;/var/lib/grafana&quot;</span>]</span><br><span class="line">        image: busybox</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: storage</span><br><span class="line">          subPath: grafana</span><br><span class="line">          mountPath: /var/lib/grafana</span><br><span class="line">      volumes:</span><br><span class="line">      - name: storage</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: grafana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里使用一个busybox镜像将/var/lib/grafana目录修改为权限472</span></span><br></pre></td></tr></table></figure><h3 id="1-5-创建所有资源（注意创建顺序）"><a href="#1-5-创建所有资源（注意创建顺序）" class="headerlink" title="1.5 创建所有资源（注意创建顺序）"></a>1.5 创建所有资源（注意创建顺序）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建pvc</span></span><br><span class="line">[root@k8s-master01 grafana]# kubectl create -f grafana_pvc.yaml</span><br><span class="line">persistentvolumeclaim/grafana created</span><br><span class="line">[root@k8s-master01 grafana]# kubectl get pvc -n kube-system | grep grafana</span><br><span class="line">grafana      Bound    nfs-pv03   3Gi        RWO                           29s</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建job</span></span><br><span class="line">[root@k8s-master01 grafana]# kubectl create -f grafana_job.yaml</span><br><span class="line">job.batch/grafana-chown created</span><br><span class="line">[root@k8s-master01 grafana]# kubectl get job -n kube-system</span><br><span class="line">NAME            COMPLETIONS   DURATION   AGE</span><br><span class="line">grafana-chown   1/1           10s        20s</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建deployment</span></span><br><span class="line">[root@k8s-master01 grafana]# kubectl create -f grafana_deployment.yaml</span><br><span class="line">deployment.extensions/grafana created</span><br><span class="line">[root@k8s-master01 grafana]# kubectl get deploy -n kube-system</span><br><span class="line">NAME                 READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">coredns              2/2     2            2           9d</span><br><span class="line">grafana              1/1     1            1           4m    <span class="comment">#启动成功</span></span><br><span class="line">kube-state-metrics   1/1     1            1           2d17h</span><br><span class="line">prometheus           1/1     1            1           3d23h</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建service</span></span><br><span class="line">[root@k8s-master01 grafana]# kubectl create -f grafana_svc.yaml</span><br><span class="line">service/grafana created</span><br></pre></td></tr></table></figure><h3 id="1-6-创建完成后我们打开grafana的dashboard界面"><a href="#1-6-创建完成后我们打开grafana的dashboard界面" class="headerlink" title="1.6 创建完成后我们打开grafana的dashboard界面"></a>1.6 创建完成后我们打开grafana的dashboard界面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 grafana]# kubectl get svc -n kube-system | grep gra</span><br><span class="line">grafana              NodePort    10.101.203.108   &lt;none&gt;        3000:30123/TCP           23s</span><br></pre></td></tr></table></figure><p><strong>然后我们在任意集群中的节点访问端口为30123</strong></p><blockquote><p>这里的集群密码就是上面我们创建deployment里面设置的变量，我这里用户设置为admin密码admin</p></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/2.png"></p><h2 id="二，Grafana-web-基本操作"><a href="#二，Grafana-web-基本操作" class="headerlink" title="二，Grafana web 基本操作"></a>二，Grafana web 基本操作</h2><h3 id="2-1-登陆grafana"><a href="#2-1-登陆grafana" class="headerlink" title="2.1 登陆grafana"></a>2.1 登陆grafana</h3><blockquote><p>首次登陆提示修改密码，我们不做修改。</p></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/3.png"></p><h3 id="2-2-登陆到grafana就显示到了引导界面"><a href="#2-2-登陆到grafana就显示到了引导界面" class="headerlink" title="2.2 登陆到grafana就显示到了引导界面"></a>2.2 登陆到grafana就显示到了引导界面</h3><p><img src="/articles/2019/08/19/prometheusjierugrafana/4.png"></p><h3 id="2-3-第一次创建grafana需要添加数据源"><a href="#2-3-第一次创建grafana需要添加数据源" class="headerlink" title="2.3 第一次创建grafana需要添加数据源"></a>2.3 第一次创建grafana需要添加数据源</h3><p><img src="/articles/2019/08/19/prometheusjierugrafana/5.png"></p><h3 id="2-4-类型选择prometheus"><a href="#2-4-类型选择prometheus" class="headerlink" title="2.4 类型选择prometheus"></a>2.4 类型选择prometheus</h3><blockquote><p><strong>这里的地址我们填写下面的url</strong><br><code>http://prometheus.kube-system.svc.cluster.local:9090</code></p><blockquote><ul><li>这里的prometheus代表service名称</li><li>kube-system代表命名空间</li></ul></blockquote></blockquote><blockquote><p><strong>这里的Access配置要说明一下:</strong></p><blockquote><ul><li>服务器(Server)访问模式（默认）：所有请求都将从浏览器发送到 Grafana 后端的服务器，后者又将请求转发到数据源，通过这种方式可以避免一些跨域问题，其实就是在 Grafana 后端做了一次转发，需要从Grafana 后端服务器访问该 URL。</li><li>浏览器(Browser)访问模式：所有请求都将从浏览器直接发送到数据源，但是有可能会有一些跨域的限制，使用此访问模式，需要从浏览器直接访问该 URL。</li></ul></blockquote></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/6.png"></p><p><img src="/articles/2019/08/19/prometheusjierugrafana/7.png"></p><p><strong>检查一下数据源是否配置成功</strong></p><p><img src="/articles/2019/08/19/prometheusjierugrafana/8.png"></p><h3 id="2-5-数据源添加完毕后，接下来添加New-dashboard"><a href="#2-5-数据源添加完毕后，接下来添加New-dashboard" class="headerlink" title="2.5 数据源添加完毕后，接下来添加New dashboard"></a>2.5 数据源添加完毕后，接下来添加New dashboard</h3><p><img src="/articles/2019/08/19/prometheusjierugrafana/9.png"></p><blockquote><p><strong>这里我们可以自定义模板，或者可以使用别人写好的模板 （写好的模板后面是需要我们自己修改的）</strong></p></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/10.png"></p><blockquote><p><strong>grafana提供了很多模板，类似和docker镜像仓库一下。导入模板也极其简单。点击上方的Dashboard</strong></p></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/11.png"></p><p><img src="/articles/2019/08/19/prometheusjierugrafana/12.png"></p><blockquote><p><strong>这里面的模板都是公共的，可以免费使用</strong></p></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/13.png"></p><blockquote><ul><li>点进去任意一个模板后，我们可以看到ID，复制ID然后在返回grafana</li><li>我这里添加一个监控Kubernetes集群。显示整体群集CPU、内存、磁盘使用情况以及单个pod统计信息。</li><li><a href="https://grafana.com/grafana/dashboards/8588">https://grafana.com/grafana/dashboards/8588</a></li></ul></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/14.png"></p><h3 id="2-6-点击导入模板"><a href="#2-6-点击导入模板" class="headerlink" title="2.6 点击导入模板"></a>2.6 点击导入模板</h3><blockquote><ul><li>在这里我们输入<code>8588</code>或者<code>url</code>，会自动跳转到配置页面</li><li><a href="https://grafana.com/grafana/dashboards/8588">https://grafana.com/grafana/dashboards/8588</a></li></ul></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/15.png"></p><p><img src="/articles/2019/08/19/prometheusjierugrafana/16.png"></p><p><strong>选择好数据源之后，我们在点击Import即可</strong></p><p><img src="/articles/2019/08/19/prometheusjierugrafana/17.png"></p><blockquote><ul><li>这里就会将模板8588给我们导入进行</li><li>这里就会获取我们prometheus里面的数据了</li></ul></blockquote><h3 id="2-7-现在的模板还没有进行保存，我们要点击保存一下"><a href="#2-7-现在的模板还没有进行保存，我们要点击保存一下" class="headerlink" title="2.7 现在的模板还没有进行保存，我们要点击保存一下"></a>2.7 现在的模板还没有进行保存，我们要点击保存一下</h3><p><img src="/articles/2019/08/19/prometheusjierugrafana/18.png"></p><p><img src="/articles/2019/08/19/prometheusjierugrafana/19.png"></p><blockquote><p>至此，Grafana接入Prometheus完毕！！！</p></blockquote><h2 id="三，附录"><a href="#三，附录" class="headerlink" title="三，附录"></a>三，附录</h2><blockquote><p><strong>以上模版为8588模版，首排监控的deployment的信息，哪我们想看集群的资源占用怎么办呢？可以在创建一个162模版。</strong></p></blockquote><h3 id="3-1-grafana模板修改"><a href="#3-1-grafana模板修改" class="headerlink" title="3.1 grafana模板修改"></a>3.1 grafana模板修改</h3><h4 id="3-1-1Cluster-memory-usage-集群内存使用率"><a href="#3-1-1Cluster-memory-usage-集群内存使用率" class="headerlink" title="3.1.1Cluster memory usage (集群内存使用率)"></a>3.1.1Cluster memory usage (集群内存使用率)</h4><p><img src="/articles/2019/08/19/prometheusjierugrafana/20.png"></p><blockquote><p><code>计算方式就是(整个集群的内存-(整个集群剩余的内存以及Buffer和Cached))/整</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">sum</span>(node_memory_MemTotal_bytes) - <span class="built_in">sum</span>(node_memory_MemFree_bytes + node_memory_Buffers_bytes+node_memory_Cached_bytes)) / <span class="built_in">sum</span>(node_memory_MemTotal_bytes) * 100</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/19/prometheusjierugrafana/21.png"></p><p><strong>这里要说明一点，这里填写的是PromSQL，也就是说是可以在prometheus查询到的。 如果查询不到grafana也是会获取不到数据的</strong></p><blockquote><p>这里在prometheus是可以获取到的</p></blockquote><p><img src="/articles/2019/08/19/prometheusjierugrafana/22.png"></p><h4 id="3-1-2-Cluster-memory-usage-配置如下-集群内存使用率"><a href="#3-1-2-Cluster-memory-usage-配置如下-集群内存使用率" class="headerlink" title="3.1.2 Cluster memory usage 配置如下 (集群内存使用率)"></a>3.1.2 Cluster memory usage 配置如下 (集群内存使用率)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(<span class="built_in">sum</span> by (container_name)( rate(container_cpu_usage_seconds_total&#123;image!=<span class="string">&quot;&quot;</span>&#125;[1m] ) )) / count(node_cpu_seconds_total&#123;mode=<span class="string">&quot;system&quot;</span>&#125;) * 100</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/19/prometheusjierugrafana/23.png"></p><h4 id="3-1-3-Cluster-filesystem-usage-集群文件系统使用率"><a href="#3-1-3-Cluster-filesystem-usage-集群文件系统使用率" class="headerlink" title="3.1.3 Cluster filesystem usage 集群文件系统使用率"></a>3.1.3 Cluster filesystem usage 集群文件系统使用率</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">sum</span>(node_filesystem_size_bytes&#123;device=<span class="string">&quot;tmpfs&quot;</span>&#125;) - <span class="built_in">sum</span>(node_filesystem_free_bytes&#123;device=<span class="string">&quot;tmpfs&quot;</span>&#125;) ) / <span class="built_in">sum</span>(node_filesystem_size_bytes&#123;device=<span class="string">&quot;tmpfs&quot;</span>&#125;) * 100</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/19/prometheusjierugrafana/24.png"></p><h4 id="3-1-4-配置集群中Pod-cpu使用率"><a href="#3-1-4-配置集群中Pod-cpu使用率" class="headerlink" title="3.1.4 配置集群中Pod cpu使用率"></a>3.1.4 配置集群中Pod cpu使用率</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> by (pod_name)(rate(container_cpu_usage_seconds_total&#123;image!=<span class="string">&quot;&quot;</span>, pod_name!=<span class="string">&quot;&quot;</span>&#125;[1m]))</span><br></pre></td></tr></table></figure><p><strong>下面显示的地方配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pod_name &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/19/prometheusjierugrafana/25.png"></p><h4 id="3-1-5-集群pod-内存使用率"><a href="#3-1-5-集群pod-内存使用率" class="headerlink" title="3.1.5 集群pod 内存使用率"></a>3.1.5 集群pod 内存使用率</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort_desc(<span class="built_in">sum</span> (container_memory_usage_bytes&#123;image!=<span class="string">&quot;&quot;</span>, pod_name!=<span class="string">&quot;&quot;</span>&#125;) by(pod_name))</span><br></pre></td></tr></table></figure><p><strong>下面显示的名称同样也是<code>&#123;&#123; pod_name &#125;&#125;</code></strong></p><p><img src="/articles/2019/08/19/prometheusjierugrafana/26.png"></p><h4 id="3-1-6-配置Pod-网络监控"><a href="#3-1-6-配置Pod-网络监控" class="headerlink" title="3.1.6 配置Pod 网络监控"></a>3.1.6 配置Pod 网络监控</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.入口流量</span><br><span class="line">sort_desc(<span class="built_in">sum</span> by (pod_name) (rate (container_network_receive_bytes_total&#123;name!=<span class="string">&quot;&quot;</span>&#125;[1m]) ))</span><br><span class="line"></span><br><span class="line">2.出口流量</span><br><span class="line">sort_desc(<span class="built_in">sum</span> by (pod_name) (rate (container_network_transmit_bytes_total&#123;name!=<span class="string">&quot;&quot;</span>&#125;[1m]) ))</span><br><span class="line"></span><br><span class="line"><span class="comment">#监控时间为1分钟</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/19/prometheusjierugrafana/27.png"></p><blockquote><p><strong>说明：</strong></p><ul><li>如要配置，配置完毕记得保存！！！！</li><li>所有的PromSQL都是可以在prometheus获取到数据的！</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus 监控 Kubernetes 集群节点及应用</title>
      <link href="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/"/>
      <url>/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Prometheus-监控-Kubernetes-集群节点及应用"><a href="#Prometheus-监控-Kubernetes-集群节点及应用" class="headerlink" title="Prometheus 监控 Kubernetes 集群节点及应用"></a>Prometheus 监控 Kubernetes 集群节点及应用</h1><h2 id="一，Prometheus监控Kubernetes-集群节点及应用"><a href="#一，Prometheus监控Kubernetes-集群节点及应用" class="headerlink" title="一，Prometheus监控Kubernetes 集群节点及应用"></a>一，Prometheus监控Kubernetes 集群节点及应用</h2><blockquote><p>对于Kubernetes的集群监控一般我们需要考虑一下几方面:</p><blockquote><ul><li>Kubernetes节点的监控；比如节点的cpu、load、fdisk、memory等指标</li></ul></blockquote></blockquote><ul><li>内部系统组件的状态；比如kube-scheduler、kube-controller-manager、kubedns&#x2F;coredns等组件的运行状态</li><li>编排级的metrics；比如Deployment的状态、资源请求、调度和API延迟等数据指标</li></ul><h3 id="1-1-监控方案"><a href="#1-1-监控方案" class="headerlink" title="1.1 监控方案"></a>1.1 监控方案</h3><p><strong>Kubernetes集群的监控方案主要有以下几种方案</strong></p><ul><li>Heapster:Herapster是一个集群范围的监控和数据聚合工具，以Pod的形式运行在集群中</li></ul><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/1.png"></p><p>Kubelet&#x2F;cAdvisor之外，我们还可以向Heapster添加其他指标源数据，比如kube-state-metrics</p><blockquote><p>Heapster已经被废弃，使用metrics-server代替</p></blockquote><ul><li><p>cAvisor:cAdvisor是Google开源的容器资源监控和性能分析工具，它是专门为容器而生，本身也支持Docker容器，Kubernetes中，我们不需要单独去安装，cAdvisor作为kubelet内置的一部分程序可以直接使用</p></li><li><p>Kube-state-metrics:通过监听API Server生成有关资源对象的状态指标，比如Deployment、Node、Pod，需要注意的是kube-state-metrics只是简单的提供一个metrics数据，并不会存储这些指标数据，所以我们可以使用Prometheus来抓取这些数据然后存储</p></li><li><p>metrics-server:metrics-server也是一个集群范围内的资源数据局和工具，是Heapster的代替品，同样的，metrics-server也只是显示数据，并不提供数据存储服务。</p></li></ul><p><strong>不过<code>kube-state-metrics</code>和<code>metrics-server</code>之前还有很大不同的，二者主要区别如下</strong></p><blockquote></blockquote><ol><li>kube-state-metrics主要关注的是业务相关的一些元数据，比如Deployment、Pod、副本状态等</li><li>metrics-service主要关注的是资源度量API的实现，比如CPU、文件描述符、内存、请求延时等指标</li></ol><h2 id="二，监控集群节点"><a href="#二，监控集群节点" class="headerlink" title="二，监控集群节点"></a>二，监控集群节点</h2><blockquote><p>首先需要我们监控集群的节点，要监控节点其实我们已经有很多非常成熟的方案了，比如Nagios、Zabbix，甚至可以我们自己收集数据，这里我们通过prometheus来采集节点的监控指标，可以通过node_exporter获取，node_exporter就是抓取用于采集服务器节点的各种运行指标，目前node_exporter几乎支持所有常见的监控点，比如cpu、distats、loadavg、meminfo、netstat等，详细的监控列表可以参考github repo</p></blockquote><p>这里使用DeamonSet控制器来部署该服务，这样每一个节点都会运行一个Pod，如果我们从集群中删除或添加节点后，也会进行自动扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 k8s]# vim prometheus-node-exporter.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: node-exporter</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    name: node-exporter</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: node-exporter</span><br><span class="line">    spec:</span><br><span class="line">      hostPID: <span class="literal">true</span></span><br><span class="line">      hostIPC: <span class="literal">true</span></span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: node-exporter</span><br><span class="line">        image: prom/node-exporter:v0.16.0</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9100</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 0.15</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: <span class="literal">true</span></span><br><span class="line">        args:</span><br><span class="line">        - --path.procfs</span><br><span class="line">        - /host/proc</span><br><span class="line">        - --path.sysfs</span><br><span class="line">        - /host/sys</span><br><span class="line">        - --collector.filesystem.ignored-mount-points</span><br><span class="line">        - <span class="string">&#x27;&quot;^/(sys|proc|dev|host|etc)($|/)&quot;&#x27;</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: dev</span><br><span class="line">          mountPath: /host/dev</span><br><span class="line">        - name: proc</span><br><span class="line">          mountPath: /host/proc</span><br><span class="line">        - name: sys</span><br><span class="line">          mountPath: /host/sys</span><br><span class="line">        - name: rootfs</span><br><span class="line">          mountPath: /rootfs</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: <span class="string">&quot;node-role.kubernetes.io/master&quot;</span></span><br><span class="line">        operator: <span class="string">&quot;Exists&quot;</span></span><br><span class="line">        effect: <span class="string">&quot;NoSchedule&quot;</span></span><br><span class="line">      volumes:</span><br><span class="line">        - name: proc</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /proc</span><br><span class="line">        - name: dev</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /dev</span><br><span class="line">        - name: sys</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /sys</span><br><span class="line">        - name: rootfs</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建node-exporter并检查pod</span></span><br><span class="line">[root@k8s-master01 k8s]# kubectl create -f prometheus-node-exporter.yaml</span><br><span class="line">daemonset.extensions/node-exporter created</span><br><span class="line">[root@k8s-master01 k8s]# kubectl get pod -n kube-system -o wide|grep node-exoorter</span><br><span class="line">[root@k8s-master01 k8s]# kubectl get pod -n kube-system -o wide|grep node-exporter   <span class="comment">#这里我们可以看到，我们有3个节点，在所有的节点上都启动了一个对应Pod进行获取数据</span></span><br><span class="line">node-exporter-88hlw                    1/1     Running   0          52s     192.168.101.61    k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-exporter-vw7v6                    1/1     Running   0          52s     192.168.101.125   k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-exporter-zrdp6                    1/1     Running   0          52s     192.168.101.62    k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-1-node-exporter-yaml文件说明"><a href="#2-1-node-exporter-yaml文件说明" class="headerlink" title="2.1 node-exporter.yaml文件说明"></a>2.1 node-exporter.yaml文件说明</h3><blockquote><p>由于我们要获取的数据是主机的监控指标数据，而我们的node-exporter是运行在容器中的，所以我们在Pod中需要配置一些Pod的安全策略</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hostPID:<span class="literal">true</span></span><br><span class="line">hostIPC:<span class="literal">true</span></span><br><span class="line">hostNetwork:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这三个配置主要用于主机的PID namespace、IPC namespace以及主机网络，这里需要注意的是namespace是用于容器隔离的关键技术，这里的namespace和集群中的namespace是两个完全不同的概念</span></span><br></pre></td></tr></table></figure><p>另外我们还需要将主机&#x2F;dev、&#x2F;proc、&#x2F;sys这些目录挂在到容器中，这些因为我们采集的很多节点数据都是通过这些文件来获取系统信息</p><blockquote><p>比如我们在执行top命令可以查看当前cpu使用情况，数据就来源于&#x2F;proc&#x2F;stat，使用free命令可以查看当前内存使用情况，其数据来源是&#x2F;proc&#x2F;meminfo文件</p></blockquote><p><strong>另外如果是使用kubeadm搭建的，同时需要监控master节点的，则需要添加下方的相应内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- key: <span class="string">&quot;node-role.kubernetes.io/master&quot;</span></span><br><span class="line">  operator: <span class="string">&quot;Exists&quot;</span></span><br><span class="line">  effect: <span class="string">&quot;NoSchedule</span></span><br></pre></td></tr></table></figure><h3 id="2-2-node-exporter容器相关启动参数"><a href="#2-2-node-exporter容器相关启动参数" class="headerlink" title="2.2 node-exporter容器相关启动参数"></a>2.2 node-exporter容器相关启动参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">args:</span><br><span class="line">- --path.procfs     <span class="comment">#配置挂载宿主机（node节点）的路径</span></span><br><span class="line">- /host/proc</span><br><span class="line">- --path.sysfs      <span class="comment">#配置挂载宿主机（node节点）的路径</span></span><br><span class="line">- /host/sys</span><br><span class="line">- --collector.filesystem.ignored-mount-points</span><br><span class="line">- <span class="string">&#x27;&quot;^/(sys|proc|dev|host|etc)($|/)&quot;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：<br>在我们的yaml文件中加入了hostNetwork:true会直接将我们的宿主机的9100端口映射出来，从而不需要创建service 在我们的宿主机上就会有一个9100的端口</strong></p></blockquote><p><code>容器的9100---&gt;映射到宿主机9100</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hostNetwork: <span class="literal">true</span></span><br><span class="line">containers:</span><br><span class="line">- name: node-exporter</span><br><span class="line">  image: prom/node-exporter:v0.16.0</span><br><span class="line">  ports:</span><br><span class="line">  - containerPort: 9100</span><br></pre></td></tr></table></figure><p>上面我们检查了Pod的运行状态都是正常的，接下来我们要查看一下Pod日志，以及node-exporter中的metrics</p><p><strong>使用命令<code>kubectl logs -n 命名空间 node-exporter中Pod名称</code>检查Pod日志是否有额外报错</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 k8s]# kubectl <span class="built_in">log</span> -n kube-system node-exporter-88hlw</span><br><span class="line"><span class="built_in">log</span> is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use logs instead.</span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot;Starting node_exporter (version=0.16.0, branch=HEAD, revision=d42bd70f4363dced6b77d8fc311ea57b63387e4f)&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:82&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot;Build context (go=go1.9.6, user=root@a67a9bc13a69, date=20180515-15:52:42)&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:83&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot;Enabled collectors:&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:90&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - arp&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - bcache&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - bonding&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - conntrack&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - cpu&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - diskstats&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - edac&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - entropy&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - filefd&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - filesystem&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - hwmon&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - infiniband&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - ipvs&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - loadavg&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - mdadm&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - meminfo&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - netdev&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - netstat&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - nfs&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - nfsd&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - sockstat&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - stat&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - textfile&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - time&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - timex&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - uname&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - vmstat&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - wifi&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - xfs&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot; - zfs&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line"><span class="keyword">time</span>=<span class="string">&quot;2019-08-16T03:09:18Z&quot;</span> level=info msg=<span class="string">&quot;Listening on :9100&quot;</span> <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:111&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#############################################</span></span><br><span class="line">接下来，我们在任意集群节点curl 9100/metrics</span><br><span class="line"><span class="comment">#############################################</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 k8s]# curl 127.0.0.1:9100/metrics</span><br><span class="line"><span class="comment"># HELP go_gc_duration_seconds A summary of the GC invocation durations.</span></span><br><span class="line"><span class="comment"># TYPE go_gc_duration_seconds summary</span></span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0&quot;</span>&#125; 0</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0.25&quot;</span>&#125; 0</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0.5&quot;</span>&#125; 0</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0.75&quot;</span>&#125; 0</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;1&quot;</span>&#125; 0</span><br><span class="line">go_gc_duration_seconds_sum 0</span><br><span class="line">go_gc_duration_seconds_count 0</span><br><span class="line"><span class="comment"># HELP go_goroutines Number of goroutines that currently exist.</span></span><br><span class="line"><span class="comment"># TYPE go_goroutines gauge</span></span><br><span class="line">go_goroutines 6</span><br><span class="line"><span class="comment"># HELP go_info Information about the Go environment.</span></span><br><span class="line"><span class="comment"># TYPE go_info gauge</span></span><br><span class="line">go_info&#123;version=<span class="string">&quot;go1.9.6&quot;</span>&#125; 1</span><br><span class="line"><span class="comment"># HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.</span></span><br><span class="line"><span class="comment"># TYPE go_memstats_alloc_bytes gauge</span></span><br><span class="line">go_memstats_alloc_bytes 1.385208e+06</span><br><span class="line"></span><br><span class="line">···省略若干···</span><br><span class="line"></span><br><span class="line">promhttp_metric_handler_requests_in_flight 1</span><br><span class="line"><span class="comment"># HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.</span></span><br><span class="line"><span class="comment"># TYPE promhttp_metric_handler_requests_total counter</span></span><br><span class="line">promhttp_metric_handler_requests_total&#123;code=<span class="string">&quot;200&quot;</span>&#125; 0</span><br><span class="line">promhttp_metric_handler_requests_total&#123;code=<span class="string">&quot;500&quot;</span>&#125; 0</span><br><span class="line">promhttp_metric_handler_requests_total&#123;code=<span class="string">&quot;503&quot;</span>&#125; 0</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">只要metrics可以获取到数据说明node-exporter没有问题</span><br></pre></td></tr></table></figure><h3 id="2-3-服务发现"><a href="#2-3-服务发现" class="headerlink" title="2.3 服务发现"></a>2.3 服务发现</h3><blockquote><ul><li>我们这里三个节点都运行了node-exporter程序，如果我们通过一个Server来将数据收集在一起，用静态的方式配置到prometheus就会显示一条数据，我们得自己在指标中过滤每个节点的数据，配置比较麻烦。 这里就采用服务发现</li><li>在Kubernetes下，Prometheus通过Kubernetes API基础，目前主要支持5种服务发现，分别是node、Server、Pod、Endpoints、Ingress</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要我们在Prometheus配置文件中，添加如下三行</span></span><br><span class="line"></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-node&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过制定Kubernetes_sd_config的模式为node，prometheus就会自动从Kubernetes中发现所有的node节点并作为当前job监控的目标实例，发现的节点/metrics接口是默认的kubelet的HTTP接口</span></span><br></pre></td></tr></table></figure><p><strong>完整版configmap如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 15s</span><br><span class="line">      scrape_timeout: 15s</span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;redis.zhaoshuo.svc.cluster.local:9121&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-node&#x27;</span>       <span class="comment">#新添加行</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#接下来我们更新配置文件</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">configmap <span class="string">&quot;prometheus-config&quot;</span> deleted</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get svc -n kube-system |grep prometheus</span><br><span class="line">prometheus   NodePort    10.108.79.122   &lt;none&gt;        9090:31062/TCP           23h</span><br><span class="line"></span><br><span class="line"><span class="comment">#热更新刷新配置（可能稍微需要等待一小会）</span></span><br><span class="line">[root@k8s-master01 prometheus]# curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br></pre></td></tr></table></figure><p><strong>此时进行web访问：</strong></p><p>现在我们可以看到已经获取到我们的Node节点的IP，但是由于metrics监听的端口是10250而并不是我们设置的9100，所以提示我们节点属于Down的状态</p><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/2.png"></p><blockquote><p>这里我们就需要使用Prometheus提供的<code>relabel_configs</code>中的<code>replace</code>能力了，relabel可以在Prometheus采集数据之前，通过Target实例的Metadata信息，动态重新写入Label的值。除此之外，我们还能根据Target实例的Metadata信息选择是否采集或者忽略该Target实例。这里使用<code>__address__</code>标签替换10250端口为9100</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里使用正则进行替换端口，添加到configmap中</span></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-node&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      relabel_configs:                <span class="comment">#新增字段</span></span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        regex: <span class="string">&#x27;(.*):10250&#x27;</span></span><br><span class="line">        replacement: <span class="string">&#x27;$&#123;1&#125;:9100&#x27;</span></span><br><span class="line">        target_label: __address__</span><br><span class="line">        action: replace</span><br></pre></td></tr></table></figure><p><strong>完整版如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 15s</span><br><span class="line">      scrape_timeout: 15s</span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;redis.zhaoshuo.svc.cluster.local:9121&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-node&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        regex: <span class="string">&#x27;(.*):10250&#x27;</span></span><br><span class="line">        replacement: <span class="string">&#x27;$&#123;1&#125;:9100&#x27;</span></span><br><span class="line">        target_label: __address__</span><br><span class="line">        action: replace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#接下来我们更新一下配置</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">configmap <span class="string">&quot;prometheus-config&quot;</span> deleted</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get svc -n kube-system |grep prometheus</span><br><span class="line">prometheus   NodePort    10.108.79.122   &lt;none&gt;        9090:31062/TCP           23h</span><br><span class="line">[root@k8s-master01 prometheus]# curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br></pre></td></tr></table></figure><p><strong>此时集群显示正常</strong></p><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/3.png"></p><p><strong>目前状态已经正常，但是还有一个问题就是我们的采集数据只显示了IP地址，对于我们监控分组分类不是很方便，这里可以通过labelmap这个属性来将Kubernetes的Label标签添加为Prometheus的指标标签</strong></p><blockquote><p>此处为可选配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- job_name: <span class="string">&#x27;kubernetes-node&#x27;</span></span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: node</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__address__]</span><br><span class="line">    regex: <span class="string">&#x27;(.*):10250&#x27;</span></span><br><span class="line">    replacement: <span class="string">&#x27;$&#123;1&#125;:9100&#x27;</span></span><br><span class="line">    target_label: __address__</span><br><span class="line">    action: replace</span><br><span class="line">  - action: labelmap                <span class="comment">#新增labelmap action</span></span><br><span class="line">    regex: __meta_kubernetes_node_label_(.+)</span><br></pre></td></tr></table></figure><p>添加了一个action为<code>labelmap</code>，正则表达式是<code>__meta_kubernetes_node(.+)</code>的配置，这里的意思就是表达式中匹配的数据也添加到指标数据的Label标签中去。</p><p><strong>完整配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 15s</span><br><span class="line">      scrape_timeout: 15s</span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;redis.zhaoshuo.svc.cluster.local:9121&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-node&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        regex: <span class="string">&#x27;(.*):10250&#x27;</span></span><br><span class="line">        replacement: <span class="string">&#x27;$&#123;1&#125;:9100&#x27;</span></span><br><span class="line">        target_label: __address__</span><br><span class="line">        action: replace</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#更新配置</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">configmap <span class="string">&quot;prometheus-config&quot;</span> deleted</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get svc -n kube-system |grep prometheus</span><br><span class="line">prometheus   NodePort    10.108.79.122   &lt;none&gt;        9090:31062/TCP           26h</span><br><span class="line">[root@k8s-master01 prometheus]# curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/4.png"></p><p><strong>实际上就是获取我们的标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl get nodes --show-labels</span><br><span class="line">NAME           STATUS   ROLES    AGE    VERSION   LABELS</span><br><span class="line">k8s-master01   Ready    master   7d2h   v1.14.1   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-master01,kubernetes.io/os=linux,node-role.kubernetes.io/master=</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;   7d2h   v1.14.1   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node01,kubernetes.io/os=linux</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;   7d2h   v1.14.1   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=k8s-node02,kubernetes.io/os=linux</span><br></pre></td></tr></table></figure><blockquote><p><strong>对于Kubernetes_sd_configs下面可用的元标签如下</strong></p><ul><li><code>__meta_kubernetes_node_name</code>: 节点对象的名称</li><li><code>_meta_kubernetes_node_label</code>: 节点对象中的每个标签</li><li><code>_meta_kubernetes_node_annotation</code>: 来自节点对象的每个注释</li></ul></blockquote><p><strong><code>_meta_kubernetes_node_address</code>: 每个节点地址类型的第一个地址(如果存在) 关于kubernetes_sd_configs更多信息可以查看官方文档: <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/">https://prometheus.io/docs/prometheus/latest/configuration/configuration/</a></strong></p><h3 id="2-4-查看图形"><a href="#2-4-查看图形" class="headerlink" title="2.4 查看图形"></a>2.4 查看图形</h3><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/5.png"></p><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/6.png"></p><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/7.png"></p><h2 id="三，容器监控"><a href="#三，容器监控" class="headerlink" title="三，容器监控"></a>三，容器监控</h2><blockquote><ul><li>cAdvisor是一个容器资源监控工具，包括容器的内存，CPU，网络IO，资源IO等资源，同时提供了一个Web页面用于查看容器的实时运行状态。</li><li>cAvisor已经内置在了kubelet组件之中，所以我们不需要单独去安装，cAdvisor的数据路径为&#x2F;api&#x2F;v1&#x2F;nodes&#x2F;&#x2F;proxy&#x2F;metrics</li></ul></blockquote><p><strong>action 使用labelkeep或者labeldrop则可以对Target标签进行过滤，仅保留符合过滤条件的标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- job_name: <span class="string">&#x27;kubernetes-cadvisor&#x27;</span></span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: node</span><br><span class="line">  scheme: https</span><br><span class="line">  tls_config:</span><br><span class="line">    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">  - target_label: __address__</span><br><span class="line">    replacement: kubernetes.default.svc:443</span><br><span class="line">  - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">    regex: (.+)</span><br><span class="line">    target_label: __metrics_path__</span><br><span class="line">    replacement: /api/v1/nodes/<span class="variable">$&#123;1&#125;</span>/proxy/metrics/cadvisor</span><br></pre></td></tr></table></figure><p><strong>完整版配置信息如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 15s</span><br><span class="line">      scrape_timeout: 15s</span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;redis.zhaoshuo.svc.cluster.local:9121&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-node&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        regex: <span class="string">&#x27;(.*):10250&#x27;</span></span><br><span class="line">        replacement: <span class="string">&#x27;$&#123;1&#125;:9100&#x27;</span></span><br><span class="line">        target_label: __address__</span><br><span class="line">        action: replace</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-cadvisor&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: kubernetes.default.svc:443</span><br><span class="line">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">        regex: (.+)</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        replacement: /api/v1/nodes/<span class="variable">$&#123;1&#125;</span>/proxy/metrics/cadvisor</span><br><span class="line"></span><br><span class="line">这里稍微说一下:</span><br><span class="line">tls_config配置的证书地址是每个Pod连接apiserver所使用的地址，基本上写死了。并且我们在配置文件添加了一个labelmap标签。在最下面使用了一个正则替换了cAdvisor的一个metrics地址</span><br><span class="line"></span><br><span class="line">证书是我们Pod启动的时候kubelet给pod注入的一个证书，所有的pod启动的时候都会有一个ca证书注入进来</span><br><span class="line"></span><br><span class="line">如要想要访问apiserver的信息，还需要配置一个token_file</span><br></pre></td></tr></table></figure><p><strong>修改完成之后，我们需要更新configmap并且使用curl进行热更新(过程比较慢，需要等待会</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">kubectl create -f prometheus.configmap.yaml</span><br><span class="line">curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br><span class="line"><span class="comment">#curl可以多刷几次</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/8.png"></p><p>现在我们可以到Graph路径下面查询容器的相关数据</p><blockquote><p>这里演示查询集群中所有Pod的CPU使用情况，查询指标<code>container_cpu_usage_seconds_total</code>并且查询1分钟之内的数据</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里演示一下使用函数rate和不使用函数的一个过滤功能</span></span><br><span class="line">container_cpu_usage_seconds_total&#123;image!=<span class="string">&quot;&quot;</span>,pod_name!=<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">rate(container_cpu_usage_seconds_total&#123;image!=<span class="string">&quot;&quot;</span>,pod_name!=<span class="string">&quot;&quot;</span>&#125;[1m])</span><br></pre></td></tr></table></figure><p><strong>执行下方命令，过滤1分钟内的数据</strong></p><p><code>rate(container_cpu_usage_seconds_total&#123;image!=&quot;&quot;,pod_name!=&quot;&quot;&#125;[1m])</code></p><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/9.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">还可以使用<span class="built_in">sum</span>函数,pod在1分钟内的使用率，同时将pod名称打印出来</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> by (pod_name)(rate(container_cpu_usage_seconds_total&#123;image!=<span class="string">&quot;&quot;</span>, pod_name!=<span class="string">&quot;&quot;</span>&#125;[1m] ))</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/10.png"></p><h2 id="四，Api-Service-监控"><a href="#四，Api-Service-监控" class="headerlink" title="四，Api-Service 监控"></a>四，Api-Service 监控</h2><blockquote><p>apiserver作为Kubernetes最核心的组件，它的监控也是非常有必要的，对于apiserver的监控，我们可以直接通过kubernetes的service来获取</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl get svc</span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP    7d3h</span><br></pre></td></tr></table></figure><blockquote><p>上面的service是我们集群的apiserver内部的service的地址，要自动发现service类型的服务，需要使用<code>role</code>为<code>Endpoints</code>的<code>kubernetes_sd_configs (自动发现)</code>，我们只需要在configmap里面在添加Endpoints类型的服务发现</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- job_name: <span class="string">&#x27;kubernetes-apiserver&#x27;</span></span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: endpoints</span><br></pre></td></tr></table></figure><p><strong>完整版configmap如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 15s</span><br><span class="line">      scrape_timeout: 15s</span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;redis.zhaoshuo.svc.cluster.local:9121&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-node&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        regex: <span class="string">&#x27;(.*):10250&#x27;</span></span><br><span class="line">        replacement: <span class="string">&#x27;$&#123;1&#125;:9100&#x27;</span></span><br><span class="line">        target_label: __address__</span><br><span class="line">        action: replace</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-cadvisor&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: kubernetes.default.svc:443</span><br><span class="line">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">        regex: (.+)</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        replacement: /api/v1/nodes/<span class="variable">$&#123;1&#125;</span>/proxy/metrics/cadvisor</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-apiserver&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新配置文件</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">configmap <span class="string">&quot;prometheus-config&quot;</span> deleted</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br><span class="line">[root@k8s-master01 prometheus]# curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>更新完成后，我们可以看到kubernetes-apiserver下面出现了很多实例，这是因为我们这里使用的Endpoints类型的服务发现，所以prometheus把所有的Endpoints服务都抓取过来了，同样的我们要监控的kubernetes也在列表中。</p></blockquote><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/11.png"></p><blockquote><p>这里我们使用<code>keep</code>动作，将符合配置的保留下来，例如我们过滤default命名空间下服务名称为<code>kubernetes</code>的元数据，这里可以根据<code>__meta_kubernetes_namespace</code>和<code>__mate_kubertnetes_service_name</code>2个元数据进行relabel</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    - job_name: <span class="string">&#x27;kubernetes-apiservers&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: default;kubernetes;https</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数解释</span></span><br><span class="line">action: keep  <span class="comment">#保留哪些标签</span></span><br><span class="line">regex: default;kubernetes;https  <span class="comment">#匹配namespace下的default命名空间下的kubernetes service 最后https协议</span></span><br><span class="line">可以通过`kubectl describe svc kubernetes`查看到</span><br></pre></td></tr></table></figure><p><strong>完整版配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 15s</span><br><span class="line">      scrape_timeout: 15s</span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;redis.zhaoshuo.svc.cluster.local:9121&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-node&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        regex: <span class="string">&#x27;(.*):10250&#x27;</span></span><br><span class="line">        replacement: <span class="string">&#x27;$&#123;1&#125;:9100&#x27;</span></span><br><span class="line">        target_label: __address__</span><br><span class="line">        action: replace</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-cadvisor&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: kubernetes.default.svc:443</span><br><span class="line">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">        regex: (.+)</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        replacement: /api/v1/nodes/<span class="variable">$&#123;1&#125;</span>/proxy/metrics/cadvisor</span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-apiserver&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: default;kubernetes;https</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新配置</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">configmap <span class="string">&quot;prometheus-config&quot;</span> deleted</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br><span class="line">[root@k8s-master01 prometheus]# curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/12.png"></p><p><strong>前往Greph上查看采集到的数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(rate(apiserver_request_count[1m]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里使用的promql里面的rate和sun函数，意思是apiserver在1分钟内请求的数</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/13.png"></p><blockquote><p><strong>如果我们要监控其他系统组件，比如kube-controller-manager、kube-scheduler的话就需要单独手动创建service，因为apiserver服务默认在default，而其他组件在kube-steam这个namespace下。其中kube-sheduler的指标数据端口为10251，kube-controller-manager对应端口为10252</strong></p></blockquote><h2 id="五，Service-监控"><a href="#五，Service-监控" class="headerlink" title="五，Service 监控"></a>五，Service 监控</h2><blockquote><p>apiserver实际上是一种特殊的Service，现在配置一个专门发现普通类型的Service</p></blockquote><p><strong>这里我们对service进行过滤，只有在service配置了<code>prometheus.io/scrape: &quot;true&quot;</code>过滤出来</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">    - job_name: <span class="string">&#x27;kubernetes-service-endpoints&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: <span class="literal">true</span></span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __scheme__</span><br><span class="line">        regex: (https?)</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        regex: (.+)</span><br><span class="line">      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __address__</span><br><span class="line">        regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">        replacement: <span class="variable">$1</span>:<span class="variable">$2</span></span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################        </span></span><br><span class="line"><span class="comment">#Serivce自动发现参数说明 （并不是所有创建的service都可以被prometheus发现）</span></span><br><span class="line"><span class="comment">#1.参数解释</span></span><br><span class="line">relabel_configs:</span><br><span class="line">-source_labels:[__meta_kubernetes_service_annotation_prometheus_io_scrape]</span><br><span class="line">action: keep </span><br><span class="line">regex: <span class="literal">true</span>  保留标签</span><br><span class="line">source_labels: [__meta_kubernetes_service_annotation_prometheus_io_cheme]</span><br><span class="line"></span><br><span class="line">这行配置代表我们只去筛选有__meta_kubernetes_service_annotation_prometheus_io_scrape的service，只有添加了这个声明才可以自动发现其他service</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.参数解释</span></span><br><span class="line">  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __address__</span><br><span class="line">    regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">    replacement: <span class="variable">$1</span>:<span class="variable">$2</span></span><br><span class="line"><span class="comment">#指定一个抓取的端口，有的service可能有多个端口（比如之前的redis）。默认使用的是我们添加是使用kubernetes_service端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.参数解释</span></span><br><span class="line">  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __scheme__</span><br><span class="line">    regex: (https?)</span><br><span class="line"><span class="comment">#这里如果是https证书类型，我们还需要在添加证书和token</span></span><br><span class="line"><span class="comment">############################################################</span></span><br></pre></td></tr></table></figure><p><strong>继续重复步骤，刷新配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">configmap <span class="string">&quot;prometheus-config&quot;</span> deleted</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br><span class="line">[root@k8s-master01 prometheus]# curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/14.png"></p><blockquote><ul><li>我们可以看到这里的服务的core DNS,为什么那么多service只有coreDNS可以被收集到呢？</li><li>上面也说了，我们有过滤条件，只有复合条件的才进行过滤</li></ul></blockquote><p><strong>core DNS serviceYaml 文件包含true参数，所以会被匹配到</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl get svc -n kube-system kube-dns -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/port: <span class="string">&quot;9153&quot;</span>          <span class="comment">#符合过滤条件</span></span><br><span class="line">    prometheus.io/scrape: <span class="string">&quot;true&quot;</span>        <span class="comment">#符合过滤条件</span></span><br><span class="line">  creationTimestamp: <span class="string">&quot;2019-08-09T03:28:02Z&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">&quot;true&quot;</span></span><br><span class="line">    kubernetes.io/name: KubeDNS</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">&quot;205&quot;</span></span><br><span class="line">  selfLink: /api/v1/namespaces/kube-system/services/kube-dns</span><br><span class="line">  uid: b1c27878-ba55-11e9-b09b-005056a6c65d</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.96.0.10</span><br><span class="line">  ports:</span><br><span class="line">  - name: dns</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: UDP</span><br><span class="line">    targetPort: 53</span><br><span class="line">  - name: dns-tcp</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 53</span><br><span class="line">  - name: metrics</span><br><span class="line">    port: 9153</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 9153</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>案例：之前我们配置了一个Redis的一个exporter，我们通过redis进行暴露监控</strong></p><blockquote><p>我们在之前的Redis上添加prometheus.io&#x2F;scrape&#x3D;true</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改后如下：</span></span><br><span class="line">[root@k8s-master01 prometheus]# vim prometheus-redis-exporter.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis</span><br><span class="line">  namespace: zhaoshuo</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">&quot;true&quot;</span></span><br><span class="line">    prometheus.io/port: <span class="string">&quot;9121&quot;</span></span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: redis</span><br><span class="line">        image: redis:4</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br><span class="line">      - name: redis-exporter</span><br><span class="line">        image: oliver006/redis_exporter:latest</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9121</span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: redis</span><br><span class="line">  namespace: zhaoshuo</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">&quot;true&quot;</span></span><br><span class="line">    prometheus.io/port: <span class="string">&quot;9121&quot;</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: redis</span><br><span class="line">  ports:</span><br><span class="line">  - name: redis</span><br><span class="line">    port: 6379</span><br><span class="line">    targetPort: 6379</span><br><span class="line">  - name: prom</span><br><span class="line">    port: 9121</span><br><span class="line">    targetPort: 9121</span><br></pre></td></tr></table></figure><p><strong>刷新Redis的Service配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl apply -f prometheus-redis-exporter.yaml</span><br><span class="line">Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply</span><br><span class="line">deployment.extensions/redis configured</span><br><span class="line">Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply</span><br><span class="line">service/redis configured</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/15.png"></p><h2 id="六，kube-state-metrics"><a href="#六，kube-state-metrics" class="headerlink" title="六，kube-state-metrics"></a>六，kube-state-metrics</h2><blockquote><ul><li>kube-state-metrics是一个简单的服务，它监听Kubernetes API服务器并生成相关指标数据，它不单关注单个Kubernetes组件的运行情况，而是关注内部各种对象的运行状况</li><li>在K8s集群上Pod、DaemonSet、Deployment、Job、CronJob等各种资源对象的状态也需要监控，这些指标主要来自于apiserver和kubelet中集成的cAvisor，但是并没有具体的各种资源对象的状态指标。对于Prometheus来说，当然是需要引入新的exporter来暴露这些指标，Kubernetes提供了一个kube-state-metrics</li></ul></blockquote><p><strong>kube-state-metrics已经给出了在Kubernetes部署的文件，我们直接将代码Clone到集群中执行yaml文件即可</strong></p><blockquote><p>将kube-state-metrics部署在kubernetes上之后，会发现kubernetes集群中的prometheus会在kube-state-metrics这个job下自动发现kube-state-metrics，并开始拉去metrics，这是因为部署kube-state-metrics的manifest定义文件kube-state-metrics-server.yaml对Service的定义包含prometheus.io&#x2F;scrape: ‘true’这样的一个annotation。因此kube-state-metrics的endpoint可以被Prometheus自动发现</p></blockquote><blockquote><blockquote><p>关于kube-state-metrics暴露所有监控指标可以参考kube-state-metrics的文档<a href="https://github.com/kubernetes/kube-state-metrics/tree/master/docs">https://github.com/kubernetes/kube-state-metrics/tree/master/docs</a></p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#克隆kube-state-metrics代码</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 prometheus]# git <span class="built_in">clone</span> https://github.com/kubernetes/kube-state-metrics.git</span><br><span class="line">正克隆到 <span class="string">&#x27;kube-state-metrics&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 19, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (19/19), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (16/16), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 15136 (delta 4), reused 6 (delta 1), pack-reused 15117</span><br><span class="line">接收对象中: 100% (15136/15136), 13.09 MiB | 69.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">处理 delta 中: 100% (9374/9374), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">#部署kube-state-metrics</span></span><br><span class="line">[root@k8s-master01 prometheus]# <span class="built_in">cd</span> kube-state-metrics/kubernetes/</span><br><span class="line">[root@k8s-master01 kubernetes]# <span class="built_in">ls</span></span><br><span class="line">kube-state-metrics-cluster-role-binding.yaml  kube-state-metrics-cluster-role.yaml  kube-state-metrics-deployment.yaml  kube-state-metrics-service-account.yaml  kube-state-metrics-service.yaml</span><br><span class="line">[root@k8s-master01 kubernetes]# kubectl create -f ./</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kube-state-metrics created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kube-state-metrics created</span><br><span class="line">deployment.apps/kube-state-metrics created</span><br><span class="line">serviceaccount/kube-state-metrics created</span><br><span class="line">service/kube-state-metrics created</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/16.png"></p><p><strong>可以通过Graph进行测试一下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">官方文档给出了一个例子是按照Pod内存使用情况进行绘图</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(kube_pod_container_resource_requests_memory_bytes) by (namespace, pod, node)</span><br><span class="line">  * on (pod) group_left()  (<span class="built_in">sum</span>(kube_pod_status_phase&#123;phase=<span class="string">&quot;Running&quot;</span>&#125;) by (pod, namespace) == 1)</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/08/16/prometheusjiankongkubernetesjiqunjieidanjiyingyong/17.png"></p>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus Exporter 监控 Redis</title>
      <link href="/articles/2019/08/15/prometheusjiankongredis/"/>
      <url>/articles/2019/08/15/prometheusjiankongredis/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Prometheus-Exporter-监控-Redis"><a href="#Prometheus-Exporter-监控-Redis" class="headerlink" title="Prometheus Exporter 监控 Redis"></a>Prometheus Exporter 监控 Redis</h1><h2 id="一，Exporter简介"><a href="#一，Exporter简介" class="headerlink" title="一，Exporter简介"></a>一，Exporter简介</h2><pre><code>    Redis应用没有自带的/metrics接口，我们就需要利用exporter服务来为prometheus提供指标数据了。Prometheus官方为许多应用提供了exporter应用</code></pre><blockquote><p>Prometheus已经成为云原生应用监控行业的标准，在很多流行的监控系统中都已经实现了Prometheus的监控接口，例如etcd、Kubernetes、CoreDNS等，他们可以直接被Prometheus监控，但是大多数监控对象都没办法直接提供监控接口，主要原因有:</p><blockquote><ul><li>很多系统在Prometheus诞生前很多年就已经发布，例如MySQL、Redis等</li><li>它们本身不支持HTTP接口，例如对于硬件性能指标，操作系统并没有原生的HTTP接口可以获取；</li><li>考虑到安全性、稳定性及代码耦合等因素的影响</li></ul></blockquote></blockquote><blockquote><p><strong>在这个背景之下，exporter诞生，exporter是一个采集监控数据并通过Prometheus监控规范对外提供数据的组件。除了官方实现的exporter如Node exporter、HAProxy exporter、Mysql exporter，还有很多第三方的如Redis exporter和Rabbitmq exporter</strong></p></blockquote><p><img src="/articles/2019/08/15/prometheusjiankongredis/1.png"></p><p><strong>这些exporter主要通过被监控对象提供的监控相关的接口获取监控数据，这些接口主要通过以下方式对外提供服务。</strong></p><ol><li><p>HTTP&#x2F;HTTPS方式。例如Rabbitmq exporter通过Rabbitmq的HTTPS接口获取监控数据</p></li><li><p>TCP方式。例如Redis exporter通过Redis提供的系统监控相关命令获取监控指标，MySQL server exporter 通过MySQL开放的监控相关的表获取监控指标</p></li><li><p>本地文件方式。 例如Node exporter通过读取proc文件系统下的文件，计算得出整个操作系统状态</p></li><li><p>标准协议方式。例如IPMI exporter通过IPMI协议获取硬件相关信息。这些exporter将不同规范和格式的监控指标进行转化，输出prometheus能够识别的监控数据格式，从而极大扩展prometheus采集数据的能力</p></li></ol><h2 id="二，使用exporter-监控Redis"><a href="#二，使用exporter-监控Redis" class="headerlink" title="二，使用exporter 监控Redis"></a>二，使用exporter 监控Redis</h2><blockquote><ul><li>Redis应用没有自带的&#x2F;metrics接口，我们就需要利用exporter服务来为prometheus提供指标数据了。Prometheus官方为许多应用提供了exporter应用</li><li>我们这次使用Reedis exporter进行演示，对于这类应用，我们一般会以 sidecar 的形式和主应用部署在同一个 Pod 中，比如我们这里来部署一个 redis 应用，并用 redis-exporter 的方式来采集监控数据供 Prometheus 使用</li></ul></blockquote><h3 id="2-1-创建一个Redis项目，包含2个pod"><a href="#2-1-创建一个Redis项目，包含2个pod" class="headerlink" title="2.1 创建一个Redis项目，包含2个pod"></a>2.1 创建一个Redis项目，包含2个pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# vim prometheus-redis-exporter.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis</span><br><span class="line">  namespace: zhaoshuo</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: redis</span><br><span class="line">        image: redis:4</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br><span class="line">      - name: redis-exporter</span><br><span class="line">        image: oliver006/redis_exporter:latest</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9121</span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: redis</span><br><span class="line">  namespace: zhaoshuo</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: redis</span><br><span class="line">  ports:</span><br><span class="line">  - name: redis</span><br><span class="line">    port: 6379</span><br><span class="line">    targetPort: 6379</span><br><span class="line">  - name: prom</span><br><span class="line">    port: 9121</span><br><span class="line">    targetPort: 9121</span><br></pre></td></tr></table></figure><blockquote><p>在命名空间中，我们将命名空间指定到<code>zhaoshuo</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建命名空间</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create namespace zhaoshuo</span><br><span class="line">namespace/zhaoshuo created</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建redis项目</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus-redis-exporter.yaml</span><br><span class="line">deployment.extensions/redis created</span><br><span class="line">service/redis created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看redis pod是否正常</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get pod -n zhaoshuo</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">redis-66844d86b7-vks29   2/2     Running   0          2m50s</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看svc是否正常</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get svc -n zhaoshuo</span><br><span class="line">NAME    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)             AGE</span><br><span class="line">redis   ClusterIP   10.107.60.195   &lt;none&gt;        6379/TCP,9121/TCP   3m22s</span><br></pre></td></tr></table></figure><p><strong>创建完毕之后，在redis-exporter里面已经包含了metrics，我们访问一下service的metrics接口即可</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# curl 10.107.60.195:9121/metrics</span><br><span class="line"><span class="comment"># HELP exporter_scrape_duration_seconds Duration of scrape by the exporter</span></span><br><span class="line"><span class="comment"># TYPE exporter_scrape_duration_seconds summary</span></span><br><span class="line">exporter_scrape_duration_seconds&#123;quantile=<span class="string">&quot;0.5&quot;</span>&#125; NaN</span><br><span class="line">exporter_scrape_duration_seconds&#123;quantile=<span class="string">&quot;0.9&quot;</span>&#125; NaN</span><br><span class="line">exporter_scrape_duration_seconds&#123;quantile=<span class="string">&quot;0.99&quot;</span>&#125; NaN</span><br><span class="line">exporter_scrape_duration_seconds_sum 0</span><br><span class="line">exporter_scrape_duration_seconds_count 0</span><br><span class="line"><span class="comment"># HELP go_gc_duration_seconds A summary of the GC invocation durations.</span></span><br><span class="line"><span class="comment"># TYPE go_gc_duration_seconds summary</span></span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0&quot;</span>&#125; 0</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0.25&quot;</span>&#125; 0</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0.5&quot;</span>&#125; 0</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;0.75&quot;</span>&#125; 0</span><br><span class="line">go_gc_duration_seconds&#123;quantile=<span class="string">&quot;1&quot;</span>&#125; 0</span><br><span class="line"></span><br><span class="line">···省略若干···</span><br><span class="line"></span><br><span class="line"><span class="comment"># TYPE redis_up gauge</span></span><br><span class="line">redis_up 1</span><br><span class="line"><span class="comment"># HELP redis_uptime_in_seconds uptime_in_seconds metric</span></span><br><span class="line"><span class="comment"># TYPE redis_uptime_in_seconds gauge</span></span><br><span class="line">redis_uptime_in_seconds 432</span><br></pre></td></tr></table></figure><h3 id="2-2-Redis创建完毕，还需要修改prometheus配置文件-ConfigMap"><a href="#2-2-Redis创建完毕，还需要修改prometheus配置文件-ConfigMap" class="headerlink" title="2.2 Redis创建完毕，还需要修改prometheus配置文件(ConfigMap)"></a>2.2 Redis创建完毕，还需要修改prometheus配置文件(ConfigMap)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加如下</span></span><br><span class="line">    - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;redis.zhaoshuo.svc.cluster.local:9121&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#job_name 是显示在prometheus监控项的名称</span></span><br><span class="line"><span class="comment">#redis 为service名称</span></span><br><span class="line"><span class="comment">#zhaoshuo为命名空间（如果和prometheus在一个命名空间下可以不写）</span></span><br><span class="line"><span class="comment">#svc.cluster.local固定格式</span></span><br><span class="line"><span class="comment">#9121为service端口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#完整版如下</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 15s</span><br><span class="line">      scrape_timeout: 15s</span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    - job_name: <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">      static_configs:</span><br><span class="line">      - targets: [<span class="string">&#x27;redis.zhaoshuo.svc.cluster.local:9121&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>更新configmap文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl delete -f prometheus.configmap.yaml</span><br><span class="line">configmap <span class="string">&quot;prometheus-config&quot;</span> deleted</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看service是否正常</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get svc -n kube-system |grep prometheus</span><br><span class="line">prometheus   NodePort    10.108.79.122   &lt;none&gt;        9090:31062/TCP           3h52m</span><br><span class="line"></span><br><span class="line"><span class="comment">#我们需要通过curl命令，对prometheus进行热更新</span></span><br><span class="line">[root@k8s-master01 prometheus]# curl -X POST <span class="string">&quot;http://10.108.79.122:9090/-/reload&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-更新完毕后，在prometheus-Web-Ui界面就可以看到展示结果"><a href="#2-3-更新完毕后，在prometheus-Web-Ui界面就可以看到展示结果" class="headerlink" title="2.3 更新完毕后，在prometheus Web Ui界面就可以看到展示结果"></a>2.3 更新完毕后，在prometheus Web Ui界面就可以看到展示结果</h3><p><img src="/articles/2019/08/15/prometheusjiankongredis/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus 之持久化安装</title>
      <link href="/articles/2019/08/14/prometheuszhichijiuhuaanzhuang/"/>
      <url>/articles/2019/08/14/prometheuszhichijiuhuaanzhuang/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Prometheus-之持久化安装"><a href="#Prometheus-之持久化安装" class="headerlink" title="Prometheus 之持久化安装"></a>Prometheus 之持久化安装</h1><h2 id="一，简介"><a href="#一，简介" class="headerlink" title="一，简介"></a>一，简介</h2><blockquote><p>在早期的版本中 Kubernetes 提供了 heapster、influxDB、grafana 的组合来监控系统，所以我们可以在 Dashboard 中看到 heapster 提供的一些图表信息，在后续的版本中会陆续移除掉 heapster，现在更加流行的监控工具是 prometheus，prometheus 是 Google 内部监控报警系统的开源版本，是 Google SRE 思想在其内部不断完善的产物，它的存在是为了更快和高效的发现问题，快速的接入速度，简单灵活的配置都很好的解决了这一切，而且是已经毕业的 CNCF 项目。</p></blockquote><h2 id="二，集群部署Promethues"><a href="#二，集群部署Promethues" class="headerlink" title="二，集群部署Promethues"></a>二，集群部署Promethues</h2><blockquote><p>prometheus的方式有很多，为了兼容k8s环境，我们将prometheus搭建在k8s里，除了使用docker镜像的方式安装，还可以使用二进制的方式进行安装，支持mac、Linux、windows</p></blockquote><h3 id="2-1-创建Prometheus-ConfigMap"><a href="#2-1-创建Prometheus-ConfigMap" class="headerlink" title="2.1 创建Prometheus ConfigMap"></a>2.1 创建Prometheus ConfigMap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">mkdir</span> prometheus &amp;&amp; <span class="built_in">cd</span> prometheus</span><br><span class="line">[root@k8s-master01 promethues]# <span class="built_in">cat</span> &gt;&gt; prometheus.configmap.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: ConfigMap</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: prometheus-config</span></span><br><span class="line"><span class="string">  namespace: kube-system</span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">  prometheus.yml: |</span></span><br><span class="line"><span class="string">    global:</span></span><br><span class="line"><span class="string">      scrape_interval: 15s</span></span><br><span class="line"><span class="string">      scrape_timeout: 15s</span></span><br><span class="line"><span class="string">    scrape_configs:</span></span><br><span class="line"><span class="string">    - job_name: &#x27;prometheus&#x27;</span></span><br><span class="line"><span class="string">      static_configs:</span></span><br><span class="line"><span class="string">      - targets: [&#x27;localhost:9090&#x27;]</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件解释（这里的configmap实际上就是prometheus的配置）</span></span><br><span class="line">上面包含了3个模块global、rule_files和scrape_configs</span><br><span class="line"></span><br><span class="line">其中global模块控制Prometheus Server的全局配置</span><br><span class="line">scrape_interval:表示prometheus抓取指标数据的频率，默认是15s，我们可以覆盖这个值</span><br><span class="line">evaluation_interval:用来控制评估规则的频率，prometheus使用规则产生新的时间序列数据或者产生警报</span><br><span class="line"></span><br><span class="line">rule_files模块制定了规则所在的位置，prometheus可以根据这个配置加载规则，用于生产新的时间序列数据或者报警信息，当前我们没有配置任何规则，后期会添加</span><br><span class="line"></span><br><span class="line">scrape_configs用于控制prometheus监控哪些资源。由于prometheus通过http的方式来暴露它本身的监控数据，prometheus也能够监控本身的健康情况。在默认的配置有一个单独的job，叫做prometheus，它采集prometheus服务本身的时间序列数据。这个job包含了一个单独的、静态配置的目标；监听localhost上的9090端口。</span><br><span class="line">prometheus默认会通过目标的/metrics路径采集metrics。所以，默认的job通过URL：http://localhost:9090/metrics采集metrics。收集到时间序列包含prometheus服务本身的状态和性能。如果我们还有其他的资源需要监控，可以直接配置在该模块下即可</span><br></pre></td></tr></table></figure><p><strong>创建该资源对象：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 promethues]# kubectl create -f prometheus.configmap.yaml</span><br><span class="line">configmap/prometheus-config created</span><br></pre></td></tr></table></figure><blockquote><p>配置文件创建完成，如果以后我们有新的资源需要被监控，我们只需要将ConfigMap对象更新即可</p></blockquote><h3 id="2-2-创建rbac认证"><a href="#2-2-创建rbac认证" class="headerlink" title="2.2 创建rbac认证"></a>2.2 创建rbac认证</h3><blockquote><p>这里还需要创建rbac认证，因为prometheus需要访问k8s集群内部的资源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# vim prometheus-rbac.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">&quot;&quot;</span></span><br><span class="line">  resources:</span><br><span class="line">  - nodes</span><br><span class="line">  - services</span><br><span class="line">  - endpoints</span><br><span class="line">  - pods</span><br><span class="line">  - nodes/proxy</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">&quot;&quot;</span></span><br><span class="line">  resources:</span><br><span class="line">  - configmaps</span><br><span class="line">  - nodes/metrics</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">- nonResourceURLs:</span><br><span class="line">  - /metrics</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: prometheus</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><blockquote><p>由于我们要获取的资源，在每一个namespace下面都有可能存在，所以我们这里使用的是ClusterRole的资源对象，nonResourceURLs是用来对非资源型metrics进行操作的权限声明</p></blockquote><p><strong>创建rbac文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus-rbac.yaml</span><br><span class="line">serviceaccount/prometheus created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/prometheus created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/prometheus created</span><br></pre></td></tr></table></figure><h3 id="2-3-创建pv-pvc"><a href="#2-3-创建pv-pvc" class="headerlink" title="2.3 创建pv pvc"></a>2.3 创建pv pvc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#由于我之前已经准备好了pv，故此直接创建pvc即可。</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get pv</span><br><span class="line">NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM               STORAGECLASS   REASON   AGE</span><br><span class="line">nfs-pv01   1Gi        RWX            Retain           Bound       default/www-web-0                           44h</span><br><span class="line">nfs-pv02   2Gi        RWX            Retain           Bound       default/www-web-1                           44h</span><br><span class="line">nfs-pv03   3Gi        RWO            Retain           Available                                               44h</span><br><span class="line">nfs-pv04   4Gi        RWX            Retain           Bound       default/www-web-2                           44h</span><br><span class="line">nfs-pv05   5Gi        RWX            Retain           Available     </span><br><span class="line">                                          44h</span><br><span class="line"></span><br><span class="line"><span class="comment">##创建pvc</span></span><br><span class="line">[root@k8s-master01 prometheus]# vim prometheus-pvc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 5Gi</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus-pvc.yaml     <span class="comment">#创建pvc</span></span><br><span class="line">persistentvolumeclaim/prometheus created</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get pv</span><br><span class="line">NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                    STORAGECLASS   REASON   AGE</span><br><span class="line">nfs-pv01   1Gi        RWX            Retain           Bound       default/www-web-0                                44h</span><br><span class="line">nfs-pv02   2Gi        RWX            Retain           Bound       default/www-web-1                                44h</span><br><span class="line">nfs-pv03   3Gi        RWO            Retain           Available                                                    44h</span><br><span class="line">nfs-pv04   4Gi        RWX            Retain           Bound       default/www-web-2                                44h</span><br><span class="line">nfs-pv05   5Gi        RWX            Retain           Bound       kube-system/prometheus                           44h</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get pvc -n kube-system</span><br><span class="line">NAME         STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">prometheus   Bound    nfs-pv05   5Gi        RWX                           29s</span><br></pre></td></tr></table></figure><h3 id="2-4-创建Prometheus-Pod-资源"><a href="#2-4-创建Prometheus-Pod-资源" class="headerlink" title="2.4 创建Prometheus Pod 资源"></a>2.4 创建Prometheus Pod 资源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# vim prometheus.deploy.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: prometheus</span><br><span class="line">      containers:</span><br><span class="line">      - image: prom/prometheus:v2.4.3</span><br><span class="line">        name: prometheus</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="string">&quot;/bin/prometheus&quot;</span></span><br><span class="line">        args:</span><br><span class="line">        - <span class="string">&quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span></span><br><span class="line">        - <span class="string">&quot;--storage.tsdb.path=/prometheus&quot;</span></span><br><span class="line">        - <span class="string">&quot;--storage.tsdb.retention=30d&quot;</span></span><br><span class="line">        - <span class="string">&quot;--web.enable-admin-api&quot;</span>  <span class="comment"># 控制对admin HTTP API的访问，其中包括删除时间序列等功能</span></span><br><span class="line">        - <span class="string">&quot;--web.enable-lifecycle&quot;</span>  <span class="comment"># 支持热更新，直接执行localhost:9090/-/reload立即生效</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9090</span><br><span class="line">          protocol: TCP</span><br><span class="line">          name: http</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">&quot;/prometheus&quot;</span></span><br><span class="line">          subPath: prometheus</span><br><span class="line">          name: data</span><br><span class="line">        - mountPath: <span class="string">&quot;/etc/prometheus&quot;</span></span><br><span class="line">          name: config-volume</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 512Mi</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 512Mi</span><br><span class="line">      securityContext:</span><br><span class="line">        runAsUser: 0</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: prometheus</span><br><span class="line">      - configMap:</span><br><span class="line">          name: prometheus-config</span><br><span class="line">        name: config-volume</span><br></pre></td></tr></table></figure><p><strong>创建prometheus.deploy.yaml，运行prometheus服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometheus.deploy.yaml</span><br><span class="line">deployment.extensions/prometheus created</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get pod -n kube-system |grep prometheus</span><br><span class="line">prometheus-59895659-wnxw7              1/1     Running   0          18s</span><br></pre></td></tr></table></figure><h3 id="2-5-为-Prometheus-创建-Service"><a href="#2-5-为-Prometheus-创建-Service" class="headerlink" title="2.5 为 Prometheus 创建 Service"></a>2.5 为 Prometheus 创建 Service</h3><blockquote><p>现在我们prometheus服务状态是已经正常了，但是我们在浏览器是无法访问prometheus的 webui服务。那么我们还需要创建一个service</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 prometheus]# vim prometeheus-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - name: web</span><br><span class="line">      port: 9090</span><br><span class="line">      targetPort: http</span><br></pre></td></tr></table></figure><blockquote><p>为了方便测试，我这里使用的是NodePort，我们也可以创建一个Ingress对象使用域名访问</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建service</span></span><br><span class="line">[root@k8s-master01 prometheus]# kubectl create -f prometeheus-svc.yaml</span><br><span class="line">service/prometheus created</span><br><span class="line">[root@k8s-master01 prometheus]# kubectl get svc -n kube-system |grep prometheus</span><br><span class="line">prometheus   NodePort    10.108.79.122   &lt;none&gt;        9090:31062/TCP           5s</span><br></pre></td></tr></table></figure><h3 id="2-6-Web访问Prometheus"><a href="#2-6-Web访问Prometheus" class="headerlink" title="2.6 Web访问Prometheus"></a>2.6 Web访问Prometheus</h3><p><strong>这里定义的端口为31062,我们直接在浏览器上任意节点输入node ip+端口即可</strong></p><p><img src="/articles/2019/08/14/prometheuszhichijiuhuaanzhuang/1.png"><br><img src="/articles/2019/08/14/prometheuszhichijiuhuaanzhuang/2.png"></p><p><strong>查看一下当前监控规则</strong></p><blockquote><p>默认prometheus会监控自己<code>Status--&gt;Targets</code></p></blockquote><p><img src="/articles/2019/08/14/prometheuszhichijiuhuaanzhuang/3.png"></p><p><strong>查看一下数据，是否收集到数据</strong></p><p><img src="/articles/2019/08/14/prometheuszhichijiuhuaanzhuang/4.png"></p><blockquote><p>比如我们这里就选择scrape_duration_seconds这个指标，然后点击Execute，如果这个时候没有查询到任何数据，我们可以切换到Graph这个 tab 下面重新选择下时间，选择到当前的时间点，重新执行，就可以看到类似于下面的图表数据了：</p></blockquote><p><code>一定要设置好时间，否则不出图</code></p><p><img src="/articles/2019/08/14/prometheuszhichijiuhuaanzhuang/5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus 之原理介绍</title>
      <link href="/articles/2019/08/13/prometheuszhiyuanlijieshao/"/>
      <url>/articles/2019/08/13/prometheuszhiyuanlijieshao/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Prometheus-之原理介绍"><a href="#Prometheus-之原理介绍" class="headerlink" title="Prometheus 之原理介绍"></a>Prometheus 之原理介绍</h1><h2 id="一，Prometheus简介"><a href="#一，Prometheus简介" class="headerlink" title="一，Prometheus简介"></a>一，Prometheus简介</h2><pre><code>Prometheus由Go语言编写而成，采用Pull方式获取监控信息，并提供了多维度的数据模型和灵活的查询接口。Prometheus不仅可以通过静态文件配置监控对象，还支持自动发现机制，能通过Kubernetes、Consl、DNS等多种方式动态获取监控对象。在数据采集方面，借助Go语音的高并发特性，单机Prometheus可以采取数百个节点的监控数据；在数据存储方面，随着本地时序数据库的不断优化，单机Prometheus每秒可以采集一千万个指标，如果需要存储大量的历史监控数据，则还支持远程存储。</code></pre><blockquote><p>Prometheus是由SoundCloud开发的开源监控系统的开源版本。2016年，由Google发起的Linux基金会(Cloud Native Computing Foundation,CNCF)将Prometheus纳入其第二大开源项目。Prometheus在开源社区也十分活跃</p></blockquote><h3 id="1-1-Prometheus优缺点"><a href="#1-1-Prometheus优缺点" class="headerlink" title="1.1 Prometheus优缺点"></a>1.1 Prometheus优缺点</h3><blockquote><ol><li>提供多维度数据模型和灵活的查询方式，通过将监控指标关联多个tag，来将监控数据进行任意维度的组合，并且提供简单的PromQL查询方式，还提供HTTP查询接口，可以很方便地结合Grafana等GUI组件展示数据</li><li>在不依赖外部存储的情况下，支持服务器节点的本地存储，通过Prometheus自带的时序数据库，可以完成每秒千万级的数据存储；不仅如此，在保存大量历史数据的场景中，Prometheus可以对接第三方时序数据库和OpenTSDB等。</li><li>定义了开放指标数据标准，以基于HTTP的Pull方式采集时序数据，只有实现了Prometheus监控数据才可以被Prometheus采集、汇总、并支持Push方式向中间网关推送时序列数据，能更加灵活地应对多种监控场景</li><li>支持通过静态文件配置和动态发现机制发现监控对象，自动完成数据采集。Prometheus目前已经支持Kubernetes、etcd、Consul等多种服务发现机制</li><li>易于维护，可以通过二进制文件直接启动，并且提供了容器化部署镜像。</li><li>支持数据的分区采样和联邦部署，支持大规模集群监控</li></ol></blockquote><h3 id="1-2-Prometheus-架构"><a href="#1-2-Prometheus-架构" class="headerlink" title="1.2 Prometheus 架构"></a>1.2 Prometheus 架构</h3><blockquote><p>Prometheus的基本原理是通过HTTP周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口并符合Prometheus定义的数据格式，就可以介入Prometheus监控</p></blockquote><p><img src="/articles/2019/08/13/prometheuszhiyuanlijieshao/1.png"></p><pre><code>Prometheus Server负载定时在目标上抓取metrics(指标)数据，每个抓取目标都需要暴露一个HTTP服务接口用于Prometheus定时抓取。这种调用被监控对象获取监控数据的方式被称为Pull(拉)。Pull方式体现了Prometheus独特的设计哲学与大多数采用Push(推)方式的监控不同</code></pre><blockquote><p>Pull方式的优势是能够自动进行上游监控和水平监控，配置更少，更容易扩展，更灵活，更容易实现高可用。简单来说就是Pull方式可以降低耦合。由于在推送系统中很容易出现因为向监控系统推送数据失败而导致被监控系统瘫痪的问题。所以通过Pull方式，被采集端无需感知监控系统的存在，完全独立于监控系统之外，这样数据的采集完全由监控系统控制</p></blockquote><h3 id="1-3-Prometheus支持两种Pull方式采集数据"><a href="#1-3-Prometheus支持两种Pull方式采集数据" class="headerlink" title="1.3 Prometheus支持两种Pull方式采集数据"></a>1.3 Prometheus支持两种Pull方式采集数据</h3><blockquote><ul><li>通过配置文件、文本等进行静态配置</li><li>支持Zookeeper、Consul、Kubernetes等方式进行动态发现，例如对Kuernetes的动态发现，Prometheus使用Kubernetes的API查询和监控容器信息的变化，动态更新监控对象，这样容器的创建和删除都可以被Prometheus感知</li></ul></blockquote><p><strong>Storage通过一定的规则清理和整理数据，并把得到的结果从年初到新的时间序列中，这里存储的方式有两种</strong></p><ol><li><p>本地存储。通过Prometheus自带的时序数据库将数据库数据保存在本地磁盘。但是本地存储的容量毕竟有限，建议不要保存超过一个月的数据</p></li><li><p>另一种是远程存储，适用于存储大量监控数据。通过中间层的适配器的转发，目前Prometheus支持OpenTsdb、InfluxDB、Elasticsearch等后端存储，通过适配器实现Prometheus存储的remote write和remote read接口，便可以接入Prometheus作为远程存储使用。</p></li></ol><blockquote><ul><li><input checked="" disabled="" type="checkbox"> Prometheus通过PromQL和其他API可视化地展示收集的数据。Prometheus支持多种方式的图标可视化，例如Grafana、自带的PromDash及自身提供的模板引擎等。Prometheus还提供HTTP API查询方法，自定义所需要的输出</li><li><input checked="" disabled="" type="checkbox"> Prometheus通过Pull方式拉取数据，但某些现有系统是通过Push方式实现的，为了接入这些系统，Prometheus提供了对PushGateway的支持，这些系统主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据</li></ul></blockquote><p><img src="/articles/2019/08/13/prometheuszhiyuanlijieshao/2.png"></p><blockquote><p><strong>AlertManager是独立于Prometheus的一个组件，在出发了预先设置在Prometheus中的高级规则后，Prometheus便会推送告警信息到AlertManager。AlertManager提供了十分灵活的告警方式，可以通过邮件、slack或者钉钉等途径推送。并且AlertManager支持高可用部署，为了解决多个AlertManager重复告警的问题，引用了Gossip，在多个AlertManager直接通过Gossip同步告警信息</strong></p></blockquote><h3 id="1-4-Promethues-特征"><a href="#1-4-Promethues-特征" class="headerlink" title="1.4 Promethues 特征"></a>1.4 Promethues 特征</h3><p><strong>Prometheus 相比于其他传统监控工具主要由以下几个特点：</strong></p><ul><li>具有由metric名称和键值对标示的时间序列数据的多位数据模型</li><li>有一个灵活的查询语言promQL</li><li>不依赖分布式存储，只和本地磁盘有关</li><li>通过HTTP的服务拉取时间序列数据</li><li>也支持推送的方式来添加时间序列数据</li><li>支持通过服务发现和静态配置发现目标</li><li>多种图形和仪表盘支持</li></ul><h3 id="1-5-Prometheus-组件"><a href="#1-5-Prometheus-组件" class="headerlink" title="1.5 Prometheus 组件"></a>1.5 Prometheus 组件</h3><blockquote><p><strong>Prometheus由多个组件组成，但是其中许多组件是可选的</strong></p><ul><li>Prometheus Server 用于抓取指标、存储时间序列数据</li><li>exporter 暴露指标让任务抓取</li><li>Pushgateway push的方式将指标数据推送到网关</li><li>alertmanager 处理报警的报警组件</li><li>adhoc 用于数据查询</li></ul></blockquote><pre><code>大多数Prometheus组件都是使用go编写的，因此很容易构建和部署静态的二进制文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes之StatefulSet（有状态）</title>
      <link href="/articles/2019/08/12/kuberneteszhiStatefulSet/"/>
      <url>/articles/2019/08/12/kuberneteszhiStatefulSet/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Kubernetes之StatefulSet（有状态）"><a href="#Kubernetes之StatefulSet（有状态）" class="headerlink" title="Kubernetes之StatefulSet（有状态）"></a>Kubernetes之StatefulSet（有状态）</h1><h2 id="一，StatefulSet概述"><a href="#一，StatefulSet概述" class="headerlink" title="一，StatefulSet概述"></a>一，StatefulSet概述</h2><blockquote><p>statefulset是kubernetes提供的管理有状态应用的负载管理控制器API在pod管理的基础上保证pod的顺序和一致性与部署一样statefulset也是使用容器的spec来创建pod与之不同的是statefulset创建的pod在生命周期中会保持持久的标记比如pod name</p></blockquote><h3 id="1-1-前提"><a href="#1-1-前提" class="headerlink" title="1.1 前提"></a>1.1 前提</h3><ol><li>Kubernetes集群的版本 &gt;&#x3D;1.5</li><li>安装好DNS集群插件，版本 &gt;&#x3D;15</li></ol><h3 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h3><blockquote><p><strong>StatefulSet(1.5版本之前叫做PetSet)为什么适合有状态的程序，因为它相比于Deployment有以下特点：</strong></p><ol><li>稳定的，唯一的网络标识，可以用来发现集群内部的其他成员。比如StatefulSet的名字叫kafka,那么第一个起来的Pet叫kafka-0,第二个叫 kafk-1,依次类推。</li><li>稳定的持久化存储：通过Kubernetes的PV&#x2F;PVC或者外部存储(预先提供的)来实现</li><li>启动或关闭时保证有序：优雅的部署和伸缩性: 操作第n个pod时，前n-1个pod已经是运行且准备好的状态。 有序的，优雅的删除和终止操作:从 n, n-1, … 1, 0 这样的顺序删除</li></ol></blockquote><pre><code>上述提到的“稳定”指的是Pod在多次重新调度时保持稳定，即存储，DNS名称，hostname都是跟Pod绑定到一起的，跟Pod被调度到哪个节点没关系。所以Zookeeper, Etcd 或 Elasticsearch这类需要稳定的集群成员的应用时，就可以用StatefulSet。通过查询无头服务域名的A记录，就可以得到集群内成员的域名信息。</code></pre><h3 id="1-3-限制"><a href="#1-3-限制" class="headerlink" title="1.3 限制"></a>1.3 限制</h3><blockquote><p><strong>StatefulSet也有一些限制：</strong></p><ol><li>Pod的存储必须是通过 PersistentVolume Provisioner基于 storeage类来提供，或者是管理员预先提供的外部存储</li><li>删除或者缩容不会删除跟StatefulSet相关的卷，这是为了保证数据的安全</li><li>StatefulSet现在需要一个无头服务(Headless Service)来负责生成Pods的唯一网络标示，需要开发人员创建这个服务</li><li>对StatefulSet的升级是一个手工的过程</li></ol></blockquote><h3 id="1-4-无头服务"><a href="#1-4-无头服务" class="headerlink" title="1.4 无头服务"></a>1.4 无头服务</h3><blockquote><p>要定义一个服务(Service)为无头服务(Headless Service)，需要把Service定义中的ClusterIP配置项设置为空: <code>spec.clusterIP:None</code>。和普通Service相比，Headless Service没有ClusterIP(所以没有负载均衡),它会给一个集群内部的每个成员提供一个唯一的DNS域名来作为每个成员的网络标识，集群内部成员之间使用域名通信。无头服务管理的域名是如下的格式：<code>$(service_name).$(k8s_namespace).svc.cluster.local</code>。其中的 “cluster.local”是集群的域名,除非做了配置，否则集群域名默认就是cluster.local。StatefulSet下创建的每个Pod，得到一个对应的DNS子域名，格式如下：<br><code>$(podname).$(governing_service_domain)</code>,这里 <code>governing_service_domain</code>是由StatefulSet中定义的serviceName来决定。举例子，无头服务管理的kafka的域名是：<code>kafka.test.svc.cluster.local</code>, 创建的Pod得到的子域名是 <code>kafka-1.kafka.test.svc.cluster.local</code>。注意这里提到的域名，都是由kuber-dns组件管理的集群内部使用的域名，可以通过命令来查询：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@gago-dev-k8s-master ~]# kubectl <span class="built_in">exec</span> -it aws-dev-adminx-v4-5c5d8f4dfc-67j5v -n api nslookup alarm</span><br><span class="line">Server:         10.96.0.10</span><br><span class="line">Address:        10.96.0.10#53</span><br><span class="line"></span><br><span class="line">Name:   alarm.api.svc.cluster.local</span><br><span class="line">Address: 10.105.135.71</span><br></pre></td></tr></table></figure><blockquote><ul><li>而普通Service情况下，Pod名字后面是随机数，需要通过Service来做负载均衡。</li><li>当一个StatefulSet挂掉，新创建的StatefulSet会被赋予跟原来的Pod一样的名字，通过这个名字来匹配到原来的存储，实现了状态保存。因为上文提到了，每个Pod的标识附着在Pod上，无论pod被重新调度到了哪里。</li></ul></blockquote><h2 id="二，创建简单的statefuleset控制器pod"><a href="#二，创建简单的statefuleset控制器pod" class="headerlink" title="二，创建简单的statefuleset控制器pod"></a>二，创建简单的statefuleset控制器pod</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# vim nginx-statsfulset.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service   <span class="comment">#需要创建一个无头服务关联pod 然后statefulset通过这个管理它的后端pod</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    name: web</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: web</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx <span class="comment">#staefulset的标签选择器必须基于模板定义的</span></span><br><span class="line">  serviceName: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  replicas: 3 <span class="comment"># by default is 1</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx <span class="comment"># has to match .spec.selector.matchLabels</span></span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 10</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: web</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: www</span><br><span class="line">          mountPath: /usr/share/nginx/html  <span class="comment">#将下边的存储挂载到容器的哪里</span></span><br><span class="line">  volumeClaimTemplates:     <span class="comment">#创建挂载pv的pvc模板</span></span><br><span class="line">  - metadata:</span><br><span class="line">      name: www</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">&quot;ReadWriteMany&quot;</span> ]      <span class="comment">#访问方式</span></span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 1Gi      <span class="comment">#需要大小</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# kubectl create -f nginx-statsfulset.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################</span></span><br><span class="line"><span class="comment">#yaml语法检查方法</span></span><br><span class="line">[root@k8s-master01 configmap]# kubectl create -f pod-config.yaml --dry-run       <span class="comment">#--dry-run 检查yaml文件是否有错误。</span></span><br><span class="line">pod/pod-test created (dry run)  <span class="comment">#代表无错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################</span></span><br></pre></td></tr></table></figure><h3 id="2-1-查看创建的pod"><a href="#2-1-查看创建的pod" class="headerlink" title="2.1 查看创建的pod"></a>2.1 查看创建的pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl get pods</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-test   1/1     Running   0          24h</span><br><span class="line">web-0      1/1     Running   0          69s</span><br><span class="line">web-1      1/1     Running   0          58s</span><br><span class="line">web-2      1/1     Running   0          33s</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pv绑定情况</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pv</span><br><span class="line">NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM               STORAGECLASS   REASON   AGE</span><br><span class="line">nfs-pv01   1Gi        RWX            Retain           Bound       default/www-web-0                           78m</span><br><span class="line">nfs-pv02   2Gi        RWX            Retain           Bound       default/www-web-1                           78m</span><br><span class="line">nfs-pv03   3Gi        RWO            Retain           Available                                               78m</span><br><span class="line">nfs-pv04   4Gi        RWX            Retain           Bound       default/www-web-2                           78m</span><br><span class="line">nfs-pv05   5Gi        RWX            Retain           Available</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pvc的创建</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pvc</span><br><span class="line">NAME        STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">www-web-0   Bound    nfs-pv01   1Gi        RWX                           4m55s</span><br><span class="line">www-web-1   Bound    nfs-pv02   2Gi        RWX                           4m44s</span><br><span class="line">www-web-2   Bound    nfs-pv04   4Gi        RWX                           4m19s</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看statefulset的创建</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get sts</span><br><span class="line">NAME   READY   AGE</span><br><span class="line">web    3/3     5m14s</span><br></pre></td></tr></table></figure><blockquote><p>它也可以通过scale进行扩容缩容亦可以通过set-image实现版本更换<br>它进行创建的时候是顺序创建先创建第一个再创建第二个依次类推那么如果是删除镜像或者版本迭代它是逆序的先进行最后一个然后倒数第二个依次类推的进行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes之ConfigMap</title>
      <link href="/articles/2019/08/01/kuberneteszhiconfigmap/"/>
      <url>/articles/2019/08/01/kuberneteszhiconfigmap/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Kubernetes之ConfigMap"><a href="#Kubernetes之ConfigMap" class="headerlink" title="Kubernetes之ConfigMap"></a>Kubernetes之ConfigMap</h1><h2 id="一，目的"><a href="#一，目的" class="headerlink" title="一，目的"></a>一，目的</h2><blockquote><p>把应用的代码和配置分开，通过配置configmap管理pod，一种统一的集群配置管理方案。ConcigMap API资源提供了将配置数据注入容器的方式，同时保持容器是不知道Kubernetes的。ConfigMap可以被用来保存单个属性，也可以用来保存整个配置文件或者JSON二进制等对象。</p></blockquote><h2 id="二，基本原理"><a href="#二，基本原理" class="headerlink" title="二，基本原理"></a>二，基本原理</h2><blockquote><ul><li>ConfigMap是存储通用的配置变量的.ConfigMap有点儿像一个统一的配置文件，使用户可以将分布式系统中用于不同模块的环境变量统一到一个对象中管理;而它与配置文件的区别在于它是存在集群的“环境”中的，并且支持K8S集群中所有通用的操作调用方式。</li><li>而资源的使用者可以通过ConfigMap来存储这个资源的配置，这样需要访问这个资源的应用就可以同通过ConfigMap来引用这个资源。相当通过创建Configmap封装资源配置。</li><li>configmap以一个或者多个键：值的形式保存在K8S系统中供应用使用，既可以用于表示一个变量的值（eg.apploglevel：信息），也可以用于表示一个完整配置文件的内容（例如， ：server.xml &#x3D; &lt;？xml …&gt; …）</li><li>可以通过yaml配置文件或者直接用kubectl create configmap命令行的方式来创建ConfigMap。</li></ul></blockquote><p><strong>简单来说：</strong></p><pre><code>configmap的作用就是让配置信息与应用程序镜像解耦配置信息可以通过configmap注入到应用程序容器中，在configmap中所有的数据以键值的方式保存</code></pre><h2 id="三，ConfigMap"><a href="#三，ConfigMap" class="headerlink" title="三，ConfigMap"></a>三，ConfigMap</h2><h3 id="3-1-创建configmap"><a href="#3-1-创建configmap" class="headerlink" title="3.1 创建configmap"></a>3.1 创建configmap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接给定键值的方式创建 还可以指定文件作为键然后里边的内容作为值</span></span><br><span class="line">[root@k8s-master01 configmap]# vim configmap.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    config: map1</span><br><span class="line">  name: configmap1</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  nginx_port: <span class="string">&quot;8080&quot;</span></span><br><span class="line">  server_name: www.zhaoshuo.com</span><br><span class="line">  </span><br><span class="line">[root@k8s-master01 configmap]# kubectl create -f configmap.yaml</span><br><span class="line">configmap/configmap1 created</span><br><span class="line">[root@k8s-master01 configmap]# kubectl get cm</span><br><span class="line">NAME         DATA   AGE</span><br><span class="line">configmap1   2      9s</span><br><span class="line">[root@k8s-master01 configmap]# kubectl describe cm configmap1</span><br><span class="line">Name:         configmap1</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       config=map1</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">nginx_port:</span><br><span class="line">----</span><br><span class="line">8080</span><br><span class="line">server_name:</span><br><span class="line">----</span><br><span class="line">www.zhaoshuo.com</span><br><span class="line">Events:  &lt;none&gt;</span><br><span class="line"><span class="comment">#那么这个直接赋予键值的configmap就创建完了</span></span><br></pre></td></tr></table></figure><h3 id="3-2-创建以文件为键值的configmap"><a href="#3-2-创建以文件为键值的configmap" class="headerlink" title="3.2 创建以文件为键值的configmap"></a>3.2 创建以文件为键值的configmap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">先创建一个要引用的文件 比如nginx配置文件</span><br><span class="line">[root@k8s-master01 configmap]# vim www.conf</span><br><span class="line">server &#123;</span><br><span class="line">        server_name www.zhaoshuo.com;</span><br><span class="line">        listen 90;</span><br><span class="line">        root html/zhao/ ;</span><br><span class="line">        root index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在创建以文件为键值的configmap时 如果我们不指定键名称那么它默认以文件名作为键 文件内容作为值</span></span><br><span class="line">[root@k8s-master01 configmap]# kubectl create configmap config-file --from-file=./www.conf</span><br><span class="line">configmap/config-file created</span><br><span class="line">[root@k8s-master01 configmap]# kubectl get cm</span><br><span class="line">NAME          DATA   AGE</span><br><span class="line">config-file   1      110s</span><br><span class="line">configmap1    2      22m</span><br><span class="line">[root@k8s-master01 configmap]# kubectl describe cm config-file</span><br><span class="line">Name:         config-file</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">www.conf:</span><br><span class="line">----</span><br><span class="line">server &#123;</span><br><span class="line">        server_name www.zhaoshuo.com;</span><br><span class="line">        listen 90;</span><br><span class="line">        root html/zhao/ ;</span><br><span class="line">        root index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-为pod传递环境变量引用configmap"><a href="#3-3-为pod传递环境变量引用configmap" class="headerlink" title="3.3 为pod传递环境变量引用configmap"></a>3.3 为pod传递环境变量引用configmap</h3><blockquote><p>当使用环境变量的方式将配置注入镜像时只在镜像启动时获取那么中途配置发生改变镜像内的环境变量不会根据configmap的改变而发生改变</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 configmap]#</span><br><span class="line">[root@k8s-master01 configmap]# vim pod-config.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    zhao: shuo</span><br><span class="line">  name: pod-test</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx</span><br><span class="line">    name: pod-nginx</span><br><span class="line">    ports:</span><br><span class="line">    - name: port</span><br><span class="line">      containerPort: 80</span><br><span class="line">    <span class="built_in">env</span>:    <span class="comment">#使用env的方式将configmap中的key注入到镜像</span></span><br><span class="line">    - name: nginx_server_port   <span class="comment">#此处注入了两个key</span></span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: configmap1  <span class="comment">#这个名称为你创建的configmap的名字</span></span><br><span class="line">          key: nginx_port   <span class="comment">#这个就是定义的key </span></span><br><span class="line">    - name: nginx_server_name</span><br><span class="line">      valueFrom:</span><br><span class="line">        configMapKeyRef:</span><br><span class="line">          name: configmap1</span><br><span class="line">          key: server_name</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 configmap]# kubectl create -f pod-config.yaml</span><br><span class="line">pod/pod-test created</span><br></pre></td></tr></table></figure><blockquote><p>编辑configmap中的密钥发生改变查看pod中的环境变量是否改变</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此前我们创建的configmap中的key与值</span></span><br><span class="line">[root@k8s-master01 configmap]# kubectl describe cm configmap1</span><br><span class="line">Name:         configmap1</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       config=map1</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">nginx_port:</span><br><span class="line">----</span><br><span class="line">8080</span><br><span class="line">server_name:</span><br><span class="line">----</span><br><span class="line">www.zhaoshuo.com</span><br><span class="line">Events:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#先查看我们已经注入的configmap中的key</span></span><br><span class="line">[root@k8s-master01 configmap]# kubectl <span class="built_in">exec</span> -it pod-test -- /bin/sh</span><br><span class="line"><span class="comment"># printenv</span></span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">HOSTNAME=pod-test</span><br><span class="line">HOME=/root</span><br><span class="line">PKG_RELEASE=1~buster</span><br><span class="line">TERM=xterm</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">NGINX_VERSION=1.17.2</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">NJS_VERSION=0.3.3</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">nginx_server_port=8080      <span class="comment">#这是我们configmap中以环境变量的方式注入的key</span></span><br><span class="line">nginx_server_name=www.zhaoshuo.com  <span class="comment">#这是我们configmap中以环境变量的方式注入的key</span></span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br><span class="line">PWD=/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑configmap 然后查看pod中的环境变量是否也会发生改变</span></span><br><span class="line">[root@k8s-master01 configmap]#</span><br><span class="line">[root@k8s-master01 configmap]# vim configmap.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    config: map1</span><br><span class="line">  name: configmap1</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  nginx_port: <span class="string">&quot;9090&quot;</span></span><br><span class="line">  server_name: www.zhaoshuo.com</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 configmap]# kubectl apply -f configmap.yaml</span><br><span class="line">Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply   <span class="comment">#警告可以忽略</span></span><br><span class="line">configmap/configmap1 configured</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看configmap1中的端口改为9090 接下来查看pod是否发生变化</span></span><br><span class="line">[root@k8s-master01 configmap]# kubectl describe cm configmap1</span><br><span class="line">Name:         configmap1</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       config=map1</span><br><span class="line">Annotations:  kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                &#123;<span class="string">&quot;apiVersion&quot;</span>:<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;nginx_port&quot;</span>:<span class="string">&quot;9090&quot;</span>,<span class="string">&quot;server_name&quot;</span>:<span class="string">&quot;www.zhaoshuo.com&quot;</span>&#125;,<span class="string">&quot;kind&quot;</span>:<span class="string">&quot;ConfigMap&quot;</span>,<span class="string">&quot;metadata&quot;</span>:&#123;<span class="string">&quot;annotations&quot;</span>:&#123;&#125;,<span class="string">&quot;labels&quot;</span>:...</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">nginx_port:</span><br><span class="line">----</span><br><span class="line">9090</span><br><span class="line">server_name:</span><br><span class="line">----</span><br><span class="line">www.zhaoshuo.com</span><br><span class="line">Events:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 configmap]# kubectl <span class="built_in">exec</span> -it pod-test -- /bin/sh</span><br><span class="line"><span class="comment"># printenv</span></span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">HOSTNAME=pod-test</span><br><span class="line">HOME=/root</span><br><span class="line">PKG_RELEASE=1~buster</span><br><span class="line">TERM=xterm</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">NGINX_VERSION=1.17.2</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">NJS_VERSION=0.3.3</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">nginx_server_port=8080      <span class="comment">#没有发生变化</span></span><br><span class="line">nginx_server_name=www.zhaoshuo.com</span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br><span class="line">PWD=/</span><br></pre></td></tr></table></figure><h3 id="3-4-为pod创建卷的方式注入configmap配置"><a href="#3-4-为pod创建卷的方式注入configmap配置" class="headerlink" title="3.4 为pod创建卷的方式注入configmap配置"></a>3.4 为pod创建卷的方式注入configmap配置</h3><blockquote><p>使用文件作为键值，挂载的方式将配置注入pod可以实现配置中心的配置发生改变那么镜像内也发生改变</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 configmap]# vim pod-config.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    zhao: shuo</span><br><span class="line">  name: pod-test</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx</span><br><span class="line">    name: pod-nginx</span><br><span class="line">    ports:</span><br><span class="line">    - name: port</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: nginxconf       <span class="comment">#下边的卷名称</span></span><br><span class="line">      mountPath: /usr/local/nginx/conf/conf.d   <span class="comment">#指定要挂载到哪里 如果没有自动创建</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: nginxconf     <span class="comment">#创建卷名称 </span></span><br><span class="line">    configMap:      <span class="comment">#类型为configMap</span></span><br><span class="line">      name: config-file <span class="comment">#将这个以文件为key的configmap信息挂载进去</span></span><br><span class="line">      </span><br><span class="line">[root@k8s-master01 configmap]# kubectl create -f pod-config.yaml</span><br><span class="line">pod/pod-test created</span><br><span class="line">[root@k8s-master01 configmap]# kubectl get pod</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod-test   1/1     Running   0          11s</span><br><span class="line">[root@k8s-master01 configmap]# kubectl <span class="built_in">exec</span> -it pod-test -- /bin/sh</span><br><span class="line"><span class="comment"># cat /usr/local/nginx/conf/conf.d/www.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        server_name www.zhaoshuo.com;</span><br><span class="line">        listen 90;</span><br><span class="line">        root html/zhao/ ;</span><br><span class="line">        root index.html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#已经挂载进来了,那我们现在改变外边configmap中的信息查看此文件是否会改变</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 configmap]# kubectl edit cm config-file</span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a &#x27;#&#x27; will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  www.conf: |+</span><br><span class="line">    server &#123;</span><br><span class="line">            server_name www.zhaoshuo.com;</span><br><span class="line">            listen 10;      <span class="comment">#将监听的端口90改为10</span></span><br><span class="line">            root html/zhao/ ;</span><br><span class="line">            root index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2019-08-12T07:22:24Z&quot;</span></span><br><span class="line">  name: config-file</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;396933&quot;</span></span><br><span class="line">  selfLink: /api/v1/namespaces/default/configmaps/config-file</span><br><span class="line">  uid: eeab0d4c-bcd1-11e9-b09b-005056a6c65d</span><br><span class="line">  </span><br><span class="line"><span class="comment">#再次进入容器查看</span></span><br><span class="line">[root@k8s-master01 configmap]# kubectl <span class="built_in">exec</span> -it pod-test -- /bin/sh</span><br><span class="line"><span class="comment"># cat /usr/local/nginx/conf/conf.d/www.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        server_name www.zhaoshuo.com;</span><br><span class="line">        listen 10;      <span class="comment">#端口已经被发生改变</span></span><br><span class="line">        root html/zhao/ ;</span><br><span class="line">        root index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#至此configmap完毕</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群之Hbase</title>
      <link href="/articles/2019/07/11/hadoopjiqunzhihbase/"/>
      <url>/articles/2019/07/11/hadoopjiqunzhihbase/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Hadoop集群之Hbase"><a href="#Hadoop集群之Hbase" class="headerlink" title="Hadoop集群之Hbase"></a>Hadoop集群之Hbase</h1><h2 id="一，概述"><a href="#一，概述" class="headerlink" title="一，概述"></a>一，概述</h2><blockquote><ul><li>HBase是一个构建在HDFS上的分布式列存储系统；</li><li>HBase是基于Google BigTable模型开发的，典型的key&#x2F;value系统；</li><li>HBase是Apache Hadoop生态系统中的重要一员，主要用于海量结构化数据存储；</li><li>从逻辑上讲，HBase将数据按照表、行和列进行存储。</li><li>与hadoop一样，Hbase目标主要依靠横向扩展，通过不断增加廉价的商用服务器，来增加计算和存储能力。</li></ul></blockquote><h3 id="1-1-Hbase表的特点"><a href="#1-1-Hbase表的特点" class="headerlink" title="1.1 Hbase表的特点"></a>1.1 Hbase表的特点</h3><ul><li>**大：**一个表可以有数十亿行，上百万列；</li><li>**无模式：**每行都有一个可排序的主键和任意多的列，列可以根据需要动态的增加，同一张表中不同的行可以有截然不同的列；</li><li>**面向列：**面向列（族）的存储和权限控制，列（族）独立检索；</li><li>**稀疏：**空（null）列并不占用存储空间，表可以设计的非常稀疏；</li><li>**数据多版本：**每个单元中的数据可以有多个版本，默认情况下版本号自动分配，是单元格插入时的时间戳；</li><li>**数据类型单一：**Hbase中的数据都是字符串，没有类型。</li></ul><h3 id="1-2-Hbase逻辑视图"><a href="#1-2-Hbase逻辑视图" class="headerlink" title="1.2 Hbase逻辑视图"></a>1.2 Hbase逻辑视图</h3><p><img src="/articles/2019/07/11/hadoopjiqunzhihbase/1.png"></p><h3 id="1-3-Hbase基本概念"><a href="#1-3-Hbase基本概念" class="headerlink" title="1.3 Hbase基本概念"></a>1.3 Hbase基本概念</h3><blockquote><ul><li>RowKey：是Byte array，是表中每条记录的“主键”，方便快速查找，Rowkey的设计非常重要。</li><li>Column Family：列族，拥有一个名称(string)，包含一个或者多个相关列</li><li>Column：属于某一个columnfamily，familyName:columnName，每条记录可动态添加</li><li>Version Number：类型为Long，默认值是系统时间戳，可由用户自定义</li><li>Value(Cell)：Byte array</li></ul></blockquote><p>###1.4 Hbase基本组件说明</p><p><strong>Client</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 包含访问Hbase的接口，并维护cache来加快对Hbase的访问，比如region的位置信息。</li></ul><p><strong>Master</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 为Region server分配region</li><li><input checked="" disabled="" type="checkbox"> 负责Region server的负载均衡</li><li><input checked="" disabled="" type="checkbox"> 发现失效的Region server并重新分配其上的Region</li><li><input checked="" disabled="" type="checkbox"> 管理用户对table的增删改查操作</li></ul><p><strong>Region server</strong></p><ul><li><input checked="" disabled="" type="checkbox"> Region server维护region，处理对这些region的IO请求。</li><li><input checked="" disabled="" type="checkbox"> Region server负责切分在运行中变得过大的region。</li></ul><p><strong>Zookeeper的作用</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 通过选举，保证任何时候，集群中只有一个master，master和Region server启动时会向zookeeper注册。</li><li><input checked="" disabled="" type="checkbox"> 存贮所有Region的寻址入口</li><li><input checked="" disabled="" type="checkbox"> 实时监控Region server的上线和下线信息。并实时通知给Master</li><li><input checked="" disabled="" type="checkbox"> 存储HBase的schema和table元数据</li><li><input checked="" disabled="" type="checkbox"> 默认情况下，HBase管理ZooKeeper实例，比如，启动或者停止ZooKeeper</li><li><input checked="" disabled="" type="checkbox"> Zookeeper的引入使得Master不再是单点故障</li></ul><p><img src="/articles/2019/07/11/hadoopjiqunzhihbase/2.png"></p><h2 id="二，Hbase部署搭建"><a href="#二，Hbase部署搭建" class="headerlink" title="二，Hbase部署搭建"></a>二，Hbase部署搭建</h2><h3 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h3><table><thead><tr><th>主机名</th><th>ip地址</th><th>用户名</th><th>运行组件</th></tr></thead><tbody><tr><td>zhaohadoop1</td><td>192.168.101.150</td><td>hadoop</td><td>DataNode、NodeManager、Hbase</td></tr><tr><td>zhaohadoop2</td><td>192.168.101.154</td><td>hadoop</td><td>DataNode、NodeManager、SecondaryNameNode、zookeeper、Hbase</td></tr><tr><td>zhaohadoop3</td><td>192.168.101.156</td><td>hadoop</td><td>NameNode、ResourceManager、zookeeper、Hbase</td></tr><tr><td>zhaohadoop4</td><td>192.168.101.157</td><td>hadoop</td><td>DataNode、NodeManager、zookeeper、Hbase</td></tr></tbody></table><h3 id="2-2-安装Hbase"><a href="#2-2-安装Hbase" class="headerlink" title="2.2 安装Hbase"></a>2.2 安装Hbase</h3><blockquote><p>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/">https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先在hadoop-master安装配置好之后，在复制到从节点</span></span><br><span class="line">[root@zhaohadoop1 ~]# wget https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/2.2.0/hbase-2.2.0-bin.tar.gz</span><br><span class="line">[root@zhaohadoop1 ~]# tar xf hbase-2.2.0-bin.tar.gz -C /usr/local/</span><br><span class="line">[root@zhaohadoop1 ~]# <span class="built_in">mv</span> /usr/local/hbase-2.2.0 /usr/local/hbase</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop1 ~]# vim /etc/profile</span><br><span class="line"><span class="comment">#添加如下两行：</span></span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/usr/local/hbase</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HBASE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使立即生效</span></span><br><span class="line">[root@zhaohadoop1 ~]# <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop1 ~]# <span class="built_in">cd</span> /usr/local/hbase/conf/</span><br><span class="line">[root@zhaohadoop1 conf]# <span class="built_in">ls</span></span><br><span class="line">hadoop-metrics2-hbase.properties  hbase-env.cmd  hbase-env.sh  hbase-policy.xml  hbase-site.xml  log4j.properties  regionservers</span><br><span class="line">[root@zhaohadoop1 conf]# <span class="built_in">cp</span> hbase-env.sh&#123;,.bak&#125;</span><br></pre></td></tr></table></figure><p><strong>修改hbase-env.sh文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop1 conf]# vim hbase-env.sh</span><br><span class="line"><span class="comment">#修改如下内容：</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk/</span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>修改hbase-site.xml文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop1 conf]# <span class="built_in">cp</span> hbase-site.xml&#123;,.bak&#125;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * Licensed to the Apache Software Foundation (ASF) under one</span><br><span class="line"> * or more contributor license agreements.  See the NOTICE file</span><br><span class="line"> * distributed with this work <span class="keyword">for</span> additional information</span><br><span class="line"> * regarding copyright ownership.  The ASF licenses this file</span><br><span class="line"> * to you under the Apache License, Version 2.0 (the</span><br><span class="line"> * <span class="string">&quot;License&quot;</span>); you may not use this file except <span class="keyword">in</span> compliance</span><br><span class="line"> * with the License.  You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line"> * distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;zhaohadoop2:2181,zhaohadoop3:2181,zhaohadoop4:2181&lt;/value&gt;</span><br><span class="line">            &lt;description&gt;The directory shared by RegionServers.</span><br><span class="line">            &lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;hdfs://zhaohadoop1:9000/hbase&lt;/value&gt;</span><br><span class="line">            &lt;description&gt;The directory shared by RegionServers.</span><br><span class="line">            &lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">            &lt;description&gt;The mode the cluster will be <span class="keyword">in</span>. Possible values are</span><br><span class="line">            <span class="literal">false</span>: standalone and pseudo-distributed setups with managed ZooKeeper</span><br><span class="line">            <span class="literal">true</span>: fully-distributed with unmanaged ZooKeeper Quorum (see hbase-env.sh)</span><br><span class="line">            &lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>hbase.zookeeper.quorum：</strong> 这个参数是用来设置zookeeper服务列表，每个服务器之间使用使用逗号分隔，2181是zookeeper默认端口号，你可以自行根据你的端口号添加，默认的端口号加不加都无所谓。<br><strong>hbase.rootdir:</strong> 这个参数是用来设置RegionServer 的共享目录，用来存放HBase数据。特别需要注意的是 hbase.rootdir 里面的 HDFS 地址是要跟 Hadoop 的 core-site.xml 里面的 fs.defaultFS 的 HDFS 的 IP 地址或者域名、端口必须一致。<br><strong>hbase.cluster.distributed：</strong> HBase 的运行模式。为 false 表示单机模式，为 true 表示分布式模式。</p></blockquote><p><strong>编辑regionservers文件，配置从服务器，去掉 localhost，添加 slaves 节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop1 conf]# vim regionservers</span><br><span class="line">zhaohadoop2</span><br><span class="line">zhaohadoop3</span><br><span class="line">zhaohadoop4</span><br></pre></td></tr></table></figure><p><strong>把 hadoop 的 hdfs-site.xml 复制一份到 hbase 的 conf 目录下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop1 conf]# <span class="built_in">cp</span> /usr/local/hadoop/etc/hadoop/hdfs-site.xml /usr/local/hbase/conf/</span><br><span class="line"></span><br><span class="line"><span class="comment">#将配置好的 habase 分发到其它节点对应的路径下</span></span><br><span class="line">[root@zhaohadoop1 conf]# scp -r /usr/local/hbase root@192.168.101.154:/usr/local/</span><br><span class="line">[root@zhaohadoop1 conf]# scp -r /usr/local/hbase root@192.168.101.156:/usr/local/</span><br><span class="line">[root@zhaohadoop1 conf]# scp -r /usr/local/hbase root@192.168.101.157:/usr/local/</span><br></pre></td></tr></table></figure><p><strong>三台从节点配好环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#zhaohadoop2节点，zhaohadoop3节点，zhaohadoop4节点：</span></span><br><span class="line">[root@zhaohadoop2 ~]# vim /etc/profile</span><br><span class="line"><span class="comment">#追加如下内容</span></span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/usr/local/hbase</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HBASE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#立即生效：</span></span><br><span class="line">[root@zhaohadoop2 ~]# <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-3-启动Hbase"><a href="#2-3-启动Hbase" class="headerlink" title="2.3 启动Hbase"></a>2.3 启动Hbase</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#做好ssh免密：</span></span><br><span class="line">[root@zhaohadoop1 hbase]# ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:LU5bIl22f3fmLR7yQZT25KgEGSP563LRlSNVYBiEXzY root@zhaohadoop1</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|        ..oooooo.|</span></span><br><span class="line"><span class="string">|        ...+..E. |</span></span><br><span class="line"><span class="string">|         .=. ++o.|</span></span><br><span class="line"><span class="string">|       . +.ooo+= |</span></span><br><span class="line"><span class="string">|      . S +o.oo.o|</span></span><br><span class="line"><span class="string">|       + =oo.o   |</span></span><br><span class="line"><span class="string">|        o. .+ + +|</span></span><br><span class="line"><span class="string">|        . o  +.*o|</span></span><br><span class="line"><span class="string">|         o   .o.o|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">[root@zhaohadoop1 hbase]# ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.101.154</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="string">root@192.168.101.154&#x27;</span>s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">&quot;ssh &#x27;192.168.101.154&#x27;&quot;</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop1 hbase]# ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.101.156</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: <span class="string">&quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.101.156<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   &quot;ssh &#x27;</span>192.168.101.156<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@zhaohadoop1 hbase]# ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.101.157</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="string">root@192.168.101.157&#x27;</span>s password:</span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">&quot;ssh &#x27;192.168.101.157&#x27;&quot;</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动服务：</span></span><br><span class="line">[root@zhaohadoop1 hbase]# ./bin/start-hbase.sh</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hbase/lib/client-facing-thirdparty/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings <span class="keyword">for</span> an explanation.</span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.slf4j.impl.Log4jLoggerFactory]</span><br><span class="line">running master, logging to /usr/local/hbase/logs/hbase-root-master-zhaohadoop1.out</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hbase/lib/client-facing-thirdparty/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings <span class="keyword">for</span> an explanation.</span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.slf4j.impl.Log4jLoggerFactory]</span><br><span class="line">zhaohadoop2: regionserver running as process 27254. Stop it first.</span><br><span class="line">zhaohadoop3: regionserver running as process 3619. Stop it first.</span><br><span class="line">zhaohadoop4: regionserver running as process 4569. Stop it first.</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看四台机器jps命令：</span></span><br><span class="line">[root@zhaohadoop1 hbase]# jps</span><br><span class="line">2018 NameNode</span><br><span class="line">2298 ResourceManager</span><br><span class="line">25245 HMaster       <span class="comment">#成功</span></span><br><span class="line">25439 Jps</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop2 ~]# jps</span><br><span class="line">2134 SecondaryNameNode</span><br><span class="line">27254 HRegionServer</span><br><span class="line">2215 NodeManager</span><br><span class="line">2029 DataNode</span><br><span class="line">3309 QuorumPeerMain</span><br><span class="line">28015 Jps</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop3 ~]# jps</span><br><span class="line">3619 HRegionServer</span><br><span class="line">7189 QuorumPeerMain</span><br><span class="line">4248 Jps</span><br><span class="line">1948 NodeManager</span><br><span class="line">1838 DataNode</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop4 ~]# jps</span><br><span class="line">1873 DataNode</span><br><span class="line">5298 Jps</span><br><span class="line">6837 QuorumPeerMain</span><br><span class="line">4569 HRegionServer</span><br><span class="line">1983 NodeManager</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群之Hive</title>
      <link href="/articles/2019/07/09/hadoopjiqunzhihive/"/>
      <url>/articles/2019/07/09/hadoopjiqunzhihive/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Hadoop集群之Hive"><a href="#Hadoop集群之Hive" class="headerlink" title="Hadoop集群之Hive"></a>Hadoop集群之Hive</h1><h2 id="一，Hive概述"><a href="#一，Hive概述" class="headerlink" title="一，Hive概述"></a>一，Hive概述</h2><h3 id="1-1-数据仓库的概念"><a href="#1-1-数据仓库的概念" class="headerlink" title="1.1 数据仓库的概念"></a>1.1 数据仓库的概念</h3><blockquote><p>数据仓库（Data Warehouse）是一个面向主题的（Subject Oriented）、集成的（Integrated）、相对稳定的（Non-Volatile）、反映历史变化（Time Variant）的数据集合，用于支持管理决策。</p></blockquote><p><strong>传统数据仓库面临的挑战：</strong></p><ol><li>无法满足快速增长的海量数据存储需求。</li><li>无法有效处理不同类型的数据。</li><li>计算和处理能力不足。</li></ol><h3 id="1-2-Hive简介"><a href="#1-2-Hive简介" class="headerlink" title="1.2 Hive简介"></a>1.2 Hive简介</h3><blockquote><ul><li>Hive是一个构建于Hadoop顶层的数据仓库工具，可以查询和管理PB级别的分布式数据。</li><li>支持大规模数据存储、分析，具有良好的可扩展性</li><li>某种程度上可以看作是用户编程接口，本身不存储和处理数据。</li><li>依赖分布式文件系统HDFS存储数据。</li><li>依赖分布式并行计算模型MapReduce处理数据。</li><li>定义了简单的类似SQL 的查询语言——HiveQL。</li><li>用户可以通过编写的HiveQL语句运行MapReduce任务。</li><li>可以很容易把原来构建在关系数据库上的数据仓库应用程序移植到Hadoop平台上。</li><li>是一个可以提供有效、合理、直观组织和使用数据的分析工具。</li></ul></blockquote><p>Hive具有的特点非常适用于数据仓库。</p><p><strong>（1）采用批处理方式处理海量数据</strong></p><ul><li>Hive需要把HiveQL语句转换成MapReduce任务进行运行。</li><li>数据仓库存储的是静态数据，对静态数据的分析适合采用批处理方式，不需要快速响应给出结果，而且数据本身也不会频繁变化。</li></ul><p><strong>（2）提供适合数据仓库操作的工具</strong></p><ul><li>Hive本身提供了一系列对数据进行提取、转换、加载（ETL）的工具，可以存储、查询和分析存储在Hadoop中的大规模数据。</li><li>这些工具能够很好地满足数据仓库各种应用场景。</li></ul><p><strong>（3）支持MapReduce，Tez，Spark等多种计算引擎。</strong></p><p><strong>（4）可以直接访问HDFS文件以及HBase。</strong></p><p><strong>（5）易用易编程。</strong></p><h3 id="1-3-Hive与Hadoop生态系统中其他组件的关系"><a href="#1-3-Hive与Hadoop生态系统中其他组件的关系" class="headerlink" title="1.3 Hive与Hadoop生态系统中其他组件的关系"></a>1.3 Hive与Hadoop生态系统中其他组件的关系</h3><p><img src="/articles/2019/07/09/hadoopjiqunzhihive/1.png"></p><blockquote><ul><li>Hive依赖于HDFS 存储数据</li><li>Hive依赖于MapReduce 处理数据</li><li>在某些场景下Pig可以作为Hive的替代工具</li><li>HBase 提供数据的实时访问</li></ul></blockquote><h3 id="1-4-Hive的优缺点"><a href="#1-4-Hive的优缺点" class="headerlink" title="1.4 Hive的优缺点"></a>1.4 Hive的优缺点</h3><p><strong>Hive的优点：</strong></p><blockquote><ul><li>高可靠、高容错：HiveServer采用集群模式。双MetaStor。超时重试机制。</li><li>类SQL：类似SQL语法，内置大量函数。</li><li>可扩展：自定义存储格式，自定义函数。</li><li>多接口：Beeline，JDBC，ODBC，Python，Thrift。</li></ul></blockquote><p><strong>Hive的缺点：</strong></p><blockquote><ul><li>延迟较高：默认MR为执行引擎，MR延迟较高。</li><li>不支持雾化视图：Hive支持普通视图，不支持雾化视图。Hive不能再视图上更新、插入、删除数据。</li><li>不适用OLTP：暂不支持列级别的数据添加、更新、删除操作。</li><li>暂不支持存储过程：当前版本不支持存储过程，只能通过UDF来实现一些逻辑处理。</li></ul></blockquote><h2 id="二，Hive部署安装"><a href="#二，Hive部署安装" class="headerlink" title="二，Hive部署安装"></a>二，Hive部署安装</h2><p><strong>环境介绍</strong></p><table><thead><tr><th>主机名</th><th>ip地址</th><th>用户名</th><th>运行组件</th></tr></thead><tbody><tr><td>zhaohadoop1</td><td>192.168.101.150</td><td>hadoop</td><td>DataNode、NodeManager</td></tr><tr><td>zhaohadoop2</td><td>192.168.101.154</td><td>hadoop</td><td>DataNode、NodeManager、SecondaryNameNode</td></tr><tr><td>zhaohadoop3</td><td>192.168.101.156</td><td>hadoop</td><td>NameNode、ResourceManager、Hive</td></tr><tr><td>zhaohadoop4</td><td>192.168.101.157</td><td>hadoop</td><td>DataNode、NodeManager</td></tr></tbody></table><h3 id="2-1-下载hive软件包"><a href="#2-1-下载hive软件包" class="headerlink" title="2.1 下载hive软件包"></a>2.1 下载hive软件包</h3><blockquote><p>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hive/">https://mirrors.tuna.tsinghua.edu.cn/apache/hive/</a><br>（采用清华的镜像库）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装hive2.3.5版本</span></span><br><span class="line">[root@zhaohadoop3 ~]# wget https://mirrors.tuna.tsinghua.edu.cn/apache/hive/hive-2.3.5/apache-hive-2.3.5-bin.tar.gz</span><br><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg  apache-hive-2.3.5-bin.tar.gz  hadoop-2.9.2.tar.gz  jdk-8u181-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-2-解压并配置环境变量"><a href="#2-2-解压并配置环境变量" class="headerlink" title="2.2 解压并配置环境变量"></a>2.2 解压并配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 ~]# tar xf apache-hive-2.3.5-bin.tar.gz -C /usr/local/</span><br><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">mv</span> /usr/local/apache-hive-2.3.5-bin /usr/local/hive</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置环境变量</span></span><br><span class="line">[root@zhaohadoop3 ~]# vim /etc/profile</span><br><span class="line">在最下面追加：</span><br><span class="line"><span class="comment">#hive</span></span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/usr/local/hive</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-3-配置Hive文件"><a href="#2-3-配置Hive文件" class="headerlink" title="2.3 配置Hive文件"></a>2.3 配置Hive文件</h3><h4 id="2-3-1-修改hive-env-sh"><a href="#2-3-1-修改hive-env-sh" class="headerlink" title="2.3.1 修改hive-env.sh"></a>2.3.1 修改hive-env.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">cd</span> /usr/local/hive/conf/</span><br><span class="line">[root@zhaohadoop3 conf]# <span class="built_in">cp</span> hive-env.sh.template hive-env.sh</span><br><span class="line">[root@zhaohadoop3 conf]# vim hive-env.sh</span><br><span class="line"><span class="comment"># HADOOP_HOME=$&#123;bin&#125;/../../hadoop</span></span><br><span class="line"><span class="comment"># export HIVE_CONF_DIR=</span></span><br><span class="line"><span class="comment">#改为：</span></span><br><span class="line">HADOOP_HOME=/usr/local/hadoop</span><br><span class="line"><span class="built_in">export</span> HIVE_CONF_DIR=/usr/local/hive/conf</span><br></pre></td></tr></table></figure><h4 id="2-3-2-修改hive-log4j-properties"><a href="#2-3-2-修改hive-log4j-properties" class="headerlink" title="2.3.2 修改hive-log4j.properties"></a>2.3.2 修改hive-log4j.properties</h4><blockquote><p>修改hive的log存放日志到&#x2F;usr&#x2F;local&#x2F;hive&#x2F;logs</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop1 conf]# <span class="built_in">cp</span> hive-log4j2.properties.template hive-log4j2.properties</span><br><span class="line">[root@zhaohadoop3 conf]# vim hive-log4j2.properties</span><br><span class="line">property.hive.log.dir = <span class="variable">$&#123;sys:java.io.tmpdir&#125;</span>/<span class="variable">$&#123;sys:user.name&#125;</span></span><br><span class="line"><span class="comment">#改为：</span></span><br><span class="line">property.hive.log.dir = /usr/local/hive/logs</span><br></pre></td></tr></table></figure><h4 id="2-3-3-运行hive"><a href="#2-3-3-运行hive" class="headerlink" title="2.3.3 运行hive"></a>2.3.3 运行hive</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 conf]# /usr/local/hadoop/bin/hdfs dfs -<span class="built_in">ls</span> -R /</span><br><span class="line">drwx-wx-wx   - root supergroup          0 2019-07-10 14:14 /tmp</span><br><span class="line">drwx-wx-wx   - root supergroup          0 2019-07-10 14:14 /tmp/hive</span><br><span class="line">drwx------   - root supergroup          0 2019-07-10 14:14 /tmp/hive/root</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop3 conf]# /usr/local/hadoop/bin/hadoop fs -<span class="built_in">mkdir</span> -p /user/hive/warehouse</span><br><span class="line">[root@zhaohadoop3 conf]# /usr/local/hadoop/bin/hadoop fs -<span class="built_in">chmod</span> g+w   /user/hive/warehouse</span><br><span class="line">[root@zhaohadoop3 conf]# /usr/local/hadoop/bin/hdfs dfs -<span class="built_in">ls</span> -R /</span><br><span class="line">drwx-wx-wx   - root supergroup          0 2019-07-10 14:14 /tmp</span><br><span class="line">drwx-wx-wx   - root supergroup          0 2019-07-10 14:14 /tmp/hive</span><br><span class="line">drwx------   - root supergroup          0 2019-07-10 14:14 /tmp/hive/root</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2019-07-17 09:40 /user</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2019-07-17 09:40 /user/hive</span><br><span class="line">drwxrwxr-x   - root supergroup          0 2019-07-17 09:40 /user/hive/warehouse</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件：</span></span><br><span class="line">[root@zhaohadoop3 conf]# <span class="built_in">cp</span> hive-default.xml.template hive-stze.xml</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;&lt;!--</span><br><span class="line">   Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line">   contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line">   this work <span class="keyword">for</span> additional information regarding copyright ownership.</span><br><span class="line">   The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line">   (the <span class="string">&quot;License&quot;</span>); you may not use this file except <span class="keyword">in</span> compliance with</span><br><span class="line">   the License.  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">   Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">   distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span><br><span class="line">   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">   See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">   limitations under the License.</span><br><span class="line">--&gt;&lt;configuration&gt;</span><br><span class="line">  &lt;!-- WARNING!!! This file is auto generated <span class="keyword">for</span> documentation purposes ONLY! --&gt;</span><br><span class="line">  &lt;!-- WARNING!!! Any changes you make to this file will be ignored by Hive.   --&gt;</span><br><span class="line">  &lt;!-- WARNING!!! You must make your changes <span class="keyword">in</span> hive-site.xml instead.         --&gt;</span><br><span class="line">  &lt;!-- Hive Execution Parameters --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;system:java.io.tmpdir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/tmp/hive/java&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;system:user.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="variable">$&#123;user.name&#125;</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;datanucleus.schema.autoCreateAll&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;     <span class="comment">#开启生成元数据表</span></span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化元数据：</span></span><br><span class="line">[root@zhaohadoop3 hive]# <span class="variable">$HIVE_HOME</span>/bin/schematool -dbType derby -initSchema</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hive/lib/log4j-slf4j-impl-2.6.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings <span class="keyword">for</span> an explanation.</span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Metastore connection URL: jdbc:derby:;databaseName=metastore_db;create=<span class="literal">true</span></span><br><span class="line">Metastore Connection Driver : org.apache.derby.jdbc.EmbeddedDriver</span><br><span class="line">Metastore connection User: APP</span><br><span class="line">Starting metastore schema initialization to 2.3.0</span><br><span class="line">Initialization script hive-schema-2.3.0.derby.sql</span><br><span class="line">Initialization script completed</span><br><span class="line">schemaTool completed</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行hive：</span></span><br><span class="line">[root@zhaohadoop3 hive]# ./bin/hive</span><br><span class="line"><span class="built_in">which</span>: no hbase <span class="keyword">in</span> (/usr/local/jdk/bin:/usr/local/jdk/jre/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/hadoop/sbin:/usr/local/hadoop/bin:/usr/local/hive/bin:/root/bin)</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hive/lib/log4j-slf4j-impl-2.6.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings <span class="keyword">for</span> an explanation.</span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line"></span><br><span class="line">Logging initialized using configuration <span class="keyword">in</span> file:/usr/local/hive/conf/hive-log4j2.properties Async: <span class="literal">true</span></span><br><span class="line">Hive-on-MR is deprecated <span class="keyword">in</span> Hive 2 and may not be available <span class="keyword">in</span> the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.</span><br><span class="line">hive&gt; show databases;       <span class="comment">#默认有个default库</span></span><br><span class="line">OK</span><br><span class="line">default</span><br><span class="line">Time taken: 4.938 seconds, Fetched: 1 row(s)</span><br><span class="line">hive&gt; use default;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.03 seconds</span><br><span class="line">hive&gt; show tables;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.037 seconds</span><br><span class="line">hive&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-使用MySQL作为hive的元数据库"><a href="#2-4-使用MySQL作为hive的元数据库" class="headerlink" title="2.4 使用MySQL作为hive的元数据库"></a>2.4 使用MySQL作为hive的元数据库</h3><h4 id="2-4-1-下载MySQL-5-6-JDBC包"><a href="#2-4-1-下载MySQL-5-6-JDBC包" class="headerlink" title="2.4.1 下载MySQL 5.6 JDBC包"></a>2.4.1 下载MySQL 5.6 JDBC包</h4><blockquote><p>mysql5.6下载地址：<a href="http://ftp.iij.ad.jp/pub/db/mysql/Downloads/MySQL-5.6/">http://ftp.iij.ad.jp/pub/db/mysql/Downloads/MySQL-5.6/</a><br>mysql JDBC 下载地址：<a href="https://dev.mysql.com/downloads/connector/j/">https://dev.mysql.com/downloads/connector/j/</a><br>postgresql JDBC下载地址：下载地址：<a href="https://jdbc.postgresql.org/download.html">https://jdbc.postgresql.org/download.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载mysql的JDBC</span></span><br><span class="line">[root@zhaohadoop3 ~]# wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.16.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2-4-2-安装-MySQL"><a href="#2-4-2-安装-MySQL" class="headerlink" title="2.4.2 安装 MySQL"></a>2.4.2 安装 MySQL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">#查看系统中是否已经安装了MySQL</span><br><span class="line">[root@zhaohadoop3 ~]# rpm -qa | grep mysql      #没有安装</span><br><span class="line"></span><br><span class="line">#安装mysql 5.6</span><br><span class="line">[root@zhaohadoop3 ~]# rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line"></span><br><span class="line">#查看mysql可用安装</span><br><span class="line">[root@zhaohadoop3 ~]# yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line">mysql-connectors-community/x86_64       MySQL Connectors Community           108</span><br><span class="line">mysql-tools-community/x86_64            MySQL Tools Community                 90</span><br><span class="line">mysql56-community/x86_64                MySQL 5.6 Community Server           463</span><br><span class="line"></span><br><span class="line">#安装mysql 5.6</span><br><span class="line">[root@zhaohadoop3 ~]# yum -y install mysql-community-server</span><br><span class="line"></span><br><span class="line">#加入开机启动，启动服务</span><br><span class="line">[root@zhaohadoop3 ~]# systemctl enable mysqld</span><br><span class="line">[root@zhaohadoop3 ~]# systemctl start mysqld</span><br><span class="line"></span><br><span class="line">#配置mysql（设置root密码等）：</span><br><span class="line">[root@zhaohadoop3 ~]# mysql_secure_installation</span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MySQL to secure it, we&#x27;ll need the current</span><br><span class="line">password for the root user.  If you&#x27;ve just installed MySQL, and</span><br><span class="line">you haven&#x27;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MySQL</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] y          [设置root用户密码]</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MySQL installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MySQL without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n] y     [删除匿名用户]</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &#x27;localhost&#x27;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] n       [禁止root远程登录]</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n] y      [删除test数据库]</span><br><span class="line"> - Dropping test database...</span><br><span class="line">ERROR 1008 (HY000) at line 1: Can&#x27;t drop database &#x27;test&#x27;; database doesn&#x27;t exist</span><br><span class="line"> ... Failed!  Not critical, keep moving...</span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] y        [刷新权限]</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">All done!  If you&#x27;ve completed all of the above steps, your MySQL</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MySQL!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">#配置完毕，测试mysql</span><br><span class="line">[root@zhaohadoop3 ~]# mysql -uroot -p123456</span><br><span class="line">Warning: Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 12</span><br><span class="line">Server version: 5.6.44 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">3 rows in set (0.00 sec)            #mysql 搭建完毕</span><br><span class="line"></span><br><span class="line">#设置任意机器都可以远程登陆mysql</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select user,host,password from user;</span><br><span class="line">+------+-------------+-------------------------------------------+</span><br><span class="line">| user | host        | password                                  |</span><br><span class="line">+------+-------------+-------------------------------------------+</span><br><span class="line">| root | localhost   | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| root | zhaohadoop1 | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| root | 127.0.0.1   | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| root | ::1         | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">+------+-------------+-------------------------------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update user set host=&#x27;%&#x27; where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select user,host,password from user;</span><br><span class="line">+------+-------------+-------------------------------------------+</span><br><span class="line">| user | host        | password                                  |</span><br><span class="line">+------+-------------+-------------------------------------------+</span><br><span class="line">| root | %           | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| root | zhaohadoop1 | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| root | 127.0.0.1   | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| root | ::1         | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">+------+-------------+-------------------------------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#删除无用账号</span><br><span class="line">mysql&gt; delete from user where user=&#x27;root&#x27; and host=&#x27;zhaohadoop3&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from user where user=&#x27;root&#x27; and host=&#x27;127.0.0.1&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from user where user=&#x27;root&#x27; and host=&#x27;::1&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select user,host,password from user;</span><br><span class="line">+------+------+-------------------------------------------+</span><br><span class="line">| user | host | password                                  |</span><br><span class="line">+------+------+-------------------------------------------+</span><br><span class="line">| root | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">+------+------+-------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-4-3-修改hive-site-xml"><a href="#2-4-3-修改hive-site-xml" class="headerlink" title="2.4.3 修改hive-site.xml"></a>2.4.3 修改hive-site.xml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 conf]# <span class="built_in">cp</span> hive-default.xml.template hive-site.xml</span><br><span class="line">[root@zhaohadoop3 conf]# vim hive-site.xml</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;&lt;!--</span><br><span class="line">   Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line">   contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line">   this work <span class="keyword">for</span> additional information regarding copyright ownership.</span><br><span class="line">   The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line">   (the <span class="string">&quot;License&quot;</span>); you may not use this file except <span class="keyword">in</span> compliance with</span><br><span class="line">   the License.  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">   Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">   distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span><br><span class="line">   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">   See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">   limitations under the License.</span><br><span class="line">--&gt;&lt;configuration&gt;</span><br><span class="line">  &lt;!-- WARNING!!! This file is auto generated <span class="keyword">for</span> documentation purposes ONLY! --&gt;</span><br><span class="line">  &lt;!-- WARNING!!! Any changes you make to this file will be ignored by Hive.   --&gt;</span><br><span class="line">  &lt;!-- WARNING!!! You must make your changes <span class="keyword">in</span> hive-site.xml instead.         --&gt;</span><br><span class="line">  &lt;!-- Hive Execution Parameters --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;jdbc:mysql://192.168.101.156:3306/metastore?createDatabaseIfNotExist=<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;JDBC connect string <span class="keyword">for</span> a JDBC metastore&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Driver class name <span class="keyword">for</span> a JDBC metastore&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Username to use against metastore database&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;123456&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;password to use against metastore database&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;beeline.hs2.connection.user&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;beeline.hs2.connection.password&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;123456&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;beeline.hs2.connection.hosts&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;localhost:10000&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.server2.thrift.port&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;10000&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.server2.thrift.client.user&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Username to use against thrift client&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.server2.thrift.client.password&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;123456&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Password to use against thrift client&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="2-4-4-将mysql-JDBC解压并拷贝到hive的lib路径"><a href="#2-4-4-将mysql-JDBC解压并拷贝到hive的lib路径" class="headerlink" title="2.4.4 将mysql JDBC解压并拷贝到hive的lib路径"></a>2.4.4 将mysql JDBC解压并拷贝到hive的lib路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg               hadoop-2.9.2.tar.gz         MySQL-client-5.6.44-1.el7.x86_64.rpm  MySQL-server-5.6.44-1.el7.x86_64.rpm</span><br><span class="line">apache-hive-2.3.5-bin.tar.gz  jdk-8u181-linux-x64.tar.gz  mysql-connector-java-8.0.16.tar.gz    postgresql-9.4.1212.jar</span><br><span class="line">[root@zhaohadoop3 ~]# tar xf mysql-connector-java-8.0.16.tar.gz</span><br><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">cd</span> mysql-connector-java-8.0.16</span><br><span class="line">[root@zhaohadoop3 mysql-connector-java-8.0.16]# <span class="built_in">ls</span></span><br><span class="line">build.xml  CHANGES  INFO_BIN  INFO_SRC  LICENSE  mysql-connector-java-8.0.16.jar  README  src</span><br><span class="line">[root@zhaohadoop3 mysql-connector-java-8.0.16]# <span class="built_in">cp</span> mysql-connector-java-8.0.16.jar /usr/local/hive/lib/</span><br></pre></td></tr></table></figure><h3 id="2-5-启动hive并查看数据库的变化"><a href="#2-5-启动hive并查看数据库的变化" class="headerlink" title="2.5 启动hive并查看数据库的变化"></a>2.5 启动hive并查看数据库的变化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 hive]# <span class="variable">$HIVE_HOME</span>/bin/schematool -dbType mysql -initSchema     <span class="comment">#初始化元数据</span></span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hive/lib/log4j-slf4j-impl-2.6.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings <span class="keyword">for</span> an explanation.</span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Metastore connection URL: jdbc:mysql://192.168.101.156:3306/metastore?createDatabaseIfNotExist=<span class="literal">true</span></span><br><span class="line">Metastore Connection Driver : com.mysql.cj.jdbc.Driver</span><br><span class="line">Metastore connection User: root</span><br><span class="line">Starting metastore schema initialization to 2.3.0</span><br><span class="line">Initialization script hive-schema-2.3.0.mysql.sql</span><br><span class="line">Initialization script completed</span><br><span class="line">schemaTool completed</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop3 hive]# ./bin/hive     <span class="comment">#运行hive</span></span><br><span class="line"><span class="built_in">which</span>: no hbase <span class="keyword">in</span> (/usr/local/jdk/bin:/usr/local/jdk/jre/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/hadoop/sbin:/usr/local/hadoop/bin:/usr/local/hive/bin:/root/bin)</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hive/lib/log4j-slf4j-impl-2.6.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings <span class="keyword">for</span> an explanation.</span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line"></span><br><span class="line">Logging initialized using configuration <span class="keyword">in</span> file:/usr/local/hive/conf/hive-log4j2.properties Async: <span class="literal">true</span></span><br><span class="line">Hive-on-MR is deprecated <span class="keyword">in</span> Hive 2 and may not be available <span class="keyword">in</span> the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.</span><br><span class="line">hive&gt; show databases;</span><br><span class="line">OK</span><br><span class="line">default</span><br><span class="line">Time taken: 4.174 seconds, Fetched: 1 row(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看数据库的变化</span></span><br><span class="line">[root@zhaohadoop3 ~]# mysql -uroot -p123456</span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 50</span><br><span class="line">Server version: 5.6.44 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| metastore          |      <span class="comment">#数据库已经被创建</span></span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use metastore ;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;         <span class="comment">#数据表已经生成</span></span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_metastore       |</span><br><span class="line">+---------------------------+</span><br><span class="line">| AUX_TABLE                 |</span><br><span class="line">| BUCKETING_COLS            |</span><br><span class="line">| CDS                       |</span><br><span class="line">| COLUMNS_V2                |</span><br><span class="line">| COMPACTION_QUEUE          |</span><br><span class="line">| COMPLETED_COMPACTIONS     |</span><br><span class="line">| COMPLETED_TXN_COMPONENTS  |</span><br><span class="line">| DATABASE_PARAMS           |</span><br><span class="line">| DBS                       |</span><br><span class="line">| DB_PRIVS                  |</span><br><span class="line">| DELEGATION_TOKENS         |</span><br><span class="line">| FUNCS                     |</span><br><span class="line">| FUNC_RU                   |</span><br><span class="line">| GLOBAL_PRIVS              |</span><br><span class="line">| HIVE_LOCKS                |</span><br><span class="line">| IDXS                      |</span><br><span class="line">| INDEX_PARAMS              |</span><br><span class="line">| KEY_CONSTRAINTS           |</span><br><span class="line">| MASTER_KEYS               |</span><br><span class="line">| NEXT_COMPACTION_QUEUE_ID  |</span><br><span class="line">| NEXT_LOCK_ID              |</span><br><span class="line">| NEXT_TXN_ID               |</span><br><span class="line">| NOTIFICATION_LOG          |</span><br><span class="line">| NOTIFICATION_SEQUENCE     |</span><br><span class="line">| NUCLEUS_TABLES            |</span><br><span class="line">| PARTITIONS                |</span><br><span class="line">| PARTITION_EVENTS          |</span><br><span class="line">| PARTITION_KEYS            |</span><br><span class="line">| PARTITION_KEY_VALS        |</span><br><span class="line">| PARTITION_PARAMS          |</span><br><span class="line">| PART_COL_PRIVS            |</span><br><span class="line">| PART_COL_STATS            |</span><br><span class="line">| PART_PRIVS                |</span><br><span class="line">| ROLES                     |</span><br><span class="line">| ROLE_MAP                  |</span><br><span class="line">| SDS                       |</span><br><span class="line">| SD_PARAMS                 |</span><br><span class="line">| SEQUENCE_TABLE            |</span><br><span class="line">| SERDES                    |</span><br><span class="line">| SERDE_PARAMS              |</span><br><span class="line">| SKEWED_COL_NAMES          |</span><br><span class="line">| SKEWED_COL_VALUE_LOC_MAP  |</span><br><span class="line">| SKEWED_STRING_LIST        |</span><br><span class="line">| SKEWED_STRING_LIST_VALUES |</span><br><span class="line">| SKEWED_VALUES             |</span><br><span class="line">| SORT_COLS                 |</span><br><span class="line">| TABLE_PARAMS              |</span><br><span class="line">| TAB_COL_STATS             |</span><br><span class="line">| TBLS                      |</span><br><span class="line">| TBL_COL_PRIVS             |</span><br><span class="line">| TBL_PRIVS                 |</span><br><span class="line">| TXNS                      |</span><br><span class="line">| TXN_COMPONENTS            |</span><br><span class="line">| TYPES                     |</span><br><span class="line">| TYPE_FIELDS               |</span><br><span class="line">| VERSION                   |</span><br><span class="line">| WRITE_SET                 |</span><br><span class="line">+---------------------------+</span><br><span class="line">57 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7部署Hadoop集群（完全分布式）</title>
      <link href="/articles/2019/07/08/centos7bushuhadoopjiqun/"/>
      <url>/articles/2019/07/08/centos7bushuhadoopjiqun/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="CentOS-7部署Hadoop集群（完全分布式）"><a href="#CentOS-7部署Hadoop集群（完全分布式）" class="headerlink" title="CentOS 7部署Hadoop集群（完全分布式）"></a>CentOS 7部署Hadoop集群（完全分布式）</h1><p><strong>测试环境</strong></p><blockquote><p>Linux版本： CentOS 7 64位<br>Hadoop版本： hadoop-2.9.2<br>Java版本： jdk-8u181-linux-x64</p></blockquote><hr><h2 id="一，集群服务器节点与进程"><a href="#一，集群服务器节点与进程" class="headerlink" title="一，集群服务器节点与进程"></a>一，集群服务器节点与进程</h2><blockquote><p>Hadoop中的HDFS和YARN都是主从结构，主从结构中的主节点和从节点有多重概念方式：</p></blockquote><table><thead><tr><th>主节点</th><th>从节点</th></tr></thead><tbody><tr><td>master</td><td>slave</td></tr><tr><td>管理者</td><td>工作者</td></tr><tr><td>leader</td><td>followe</td></tr></tbody></table><blockquote><p>Hadoop集群中各个角色的名称：</p></blockquote><table><thead><tr><th>服务</th><th>主节点</th><th>从节点</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td>DataNode</td></tr><tr><td>YARN</td><td>ResourceManager</td><td>NodeManager</td></tr></tbody></table><h3 id="1-1-HDFS"><a href="#1-1-HDFS" class="headerlink" title="1.1 HDFS"></a>1.1 HDFS</h3><p><strong>NameNode</strong></p><blockquote><p>主Master，整个Hadoop集群只能有一个，管理HDFS文件系统的命名空间，维护元数据信息，管理副本的配置和信息（默认三个副本），处理客户端读写请求。</p></blockquote><p><strong>DataNode</strong></p><blockquote><p>Slave 工作节点，集群一般会启动多个，负责存储数据块和数据块校验，执行客户端的读写请求，通过心跳机制定期向NameNode汇报运行状态和本地所有块的列表信息，在集群启动时DataNode项NameNode提供存储Block块的列表信息。</p></blockquote><h3 id="1-2-YARN"><a href="#1-2-YARN" class="headerlink" title="1.2 YARN"></a>1.2 YARN</h3><p><strong>ResourceManager</strong></p><blockquote><p>整个集群只有一个Master，Slave可以有多个，支持高可用，处理客户端Client请求，启动／管理／监控ApplicationMaster，监控NodeManager，资源的分配和调度。</p></blockquote><p><strong>NodeManager</strong></p><blockquote><p>每个节点只有一个，一般与Data Node部署在同一台机器上且一一对应，定时向Resource Manager汇报本机资源的使用状况，处理来自Resource Manager的作业请求，为作业分配Container，处理来自Application Master的请求，启动和停止Container</p></blockquote><h3 id="1-3-为增加集群的容灾性，将对SecondaryNameNode进行配置"><a href="#1-3-为增加集群的容灾性，将对SecondaryNameNode进行配置" class="headerlink" title="1.3 为增加集群的容灾性，将对SecondaryNameNode进行配置"></a>1.3 为增加集群的容灾性，将对SecondaryNameNode进行配置</h3><blockquote><p>**SecondaryNameNode：**备份所有数据分布情况，当Namenode服务器宕机（日常所说的死机）时，可通过该服务器来恢复数据。</p></blockquote><h3 id="1-4-集群部署规划"><a href="#1-4-集群部署规划" class="headerlink" title="1.4 集群部署规划"></a>1.4 集群部署规划</h3><table><thead><tr><th>主机名</th><th>ip地址</th><th>用户名</th><th>运行组件</th></tr></thead><tbody><tr><td>zhaohadoop1</td><td>192.168.101.150</td><td>hadoop</td><td>DataNode、NodeManager</td></tr><tr><td>zhaohadoop2</td><td>192.168.101.154</td><td>hadoop</td><td>DataNode、NodeManager、SecondaryNameNode</td></tr><tr><td>zhaohadoop3</td><td>192.168.101.156</td><td>hadoop</td><td>NameNode、ResourceManager</td></tr><tr><td>zhaohadoop4</td><td>192.168.101.157</td><td>hadoop</td><td>DataNode、NodeManager</td></tr></tbody></table><h3 id="1-5-系统信息"><a href="#1-5-系统信息" class="headerlink" title="1.5 系统信息"></a>1.5 系统信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br><span class="line">[root@zhaohadoop1 ~]# <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-862.el7.x86_64</span><br></pre></td></tr></table></figure><h2 id="二，配置Java环境"><a href="#二，配置Java环境" class="headerlink" title="二，配置Java环境"></a>二，配置Java环境</h2><h3 id="2-1-下载所需安装包"><a href="#2-1-下载所需安装包" class="headerlink" title="2.1 下载所需安装包"></a>2.1 下载所需安装包</h3><blockquote><p>jdk下载地址：<a href="https://github.com/frekele/oracle-java/releases">https://github.com/frekele/oracle-java/releases</a><br>hadoop下载地址：<a href="http://mirror.bit.edu.cn/apache/hadoop/common/">http://mirror.bit.edu.cn/apache/hadoop/common/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装包已经下载完毕</span></span><br><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">ls</span></span><br><span class="line">hadoop-2.9.2.tar.gz  jdk-8u181-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-2-安装java-jdk（所有机器）"><a href="#2-2-安装java-jdk（所有机器）" class="headerlink" title="2.2 安装java jdk（所有机器）"></a>2.2 安装java jdk（所有机器）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 ~]# tar xf jdk-8u181-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">ln</span> -s /usr/local/jdk1.8.0_181 /usr/local/jdk</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置java环境变量</span></span><br><span class="line">[root@zhaohadoop3 ~]# sed -i.ori <span class="string">&#x27;$a export JAVA_HOME=/usr/local/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar&#x27;</span> /etc/profile</span><br><span class="line">[root@zhaohadoop1 ~]# <span class="built_in">tail</span> -3 /etc/profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.<span class="variable">$CLASSPATH</span>:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">[root@zhaohadoop1 ~]# <span class="built_in">source</span> /etc/profile</span><br><span class="line">[root@zhaohadoop1 ~]# <span class="built_in">which</span> java</span><br><span class="line">/usr/local/jdk/bin/java</span><br><span class="line">[root@zhaohadoop1 ~]# java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_181&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure><h2 id="三，安装Hadoop"><a href="#三，安装Hadoop" class="headerlink" title="三，安装Hadoop"></a>三，安装Hadoop</h2><h3 id="3-1-解压tar包（所有机器）"><a href="#3-1-解压tar包（所有机器）" class="headerlink" title="3.1 解压tar包（所有机器）"></a>3.1 解压tar包（所有机器）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 ~]# tar xf hadoop-2.9.2.tar.gz -C /usr/local/</span><br><span class="line">[root@zhaohadoop3 ~]# <span class="built_in">mv</span> /usr/local/hadoop-2.9.2 /usr/local/hadoop</span><br></pre></td></tr></table></figure><p>###3.2 配置hadoop环境变量（所有机器）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#配置hadoop环境变量</span><br><span class="line">[root@zhaohadoop3 ~]# vim /etc/profile</span><br><span class="line">#追加以下两行内容</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop3 ~]# source /etc/profile   #即时生效</span><br><span class="line"></span><br><span class="line">#关闭防火墙和selinux</span><br><span class="line">[root@zhaohadoop3 ~]# systemctl stop firewalld</span><br><span class="line">[root@zhaohadoop3 ~]# systemctl disable firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop3 ~]# vim /etc/selinux/config</span><br><span class="line">SELINUX=enforcing</span><br><span class="line">#改为：</span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line">[root@zhaohadoop1 ~]# setenforce 0</span><br><span class="line">[root@zhaohadoop1 ~]# reboot</span><br></pre></td></tr></table></figure><h3 id="3-3-修改hosts文件并配置ssh免密码登陆（所有机器）"><a href="#3-3-修改hosts文件并配置ssh免密码登陆（所有机器）" class="headerlink" title="3.3  修改hosts文件并配置ssh免密码登陆（所有机器）"></a>3.3  修改hosts文件并配置ssh免密码登陆（所有机器）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改hosts文件</span></span><br><span class="line">[root@zhaohadoop1 ~]# vim /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.101.150 zhaohadoop1</span><br><span class="line">192.168.101.154 zhaohadoop2</span><br><span class="line">192.168.101.156 zhaohadoop3</span><br><span class="line">192.168.101.157 zhaohadoop4</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置ssh免密码（四台都做）</span></span><br><span class="line">[root@zhaohadoop3 ~]$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa):</span><br><span class="line">Created directory <span class="string">&#x27;/root/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:jmmRonhMA5TtED+EmDQTrlanZm3HP09WLccEQatgcH0 hadoop@zhaohadoop1</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|oO*.   . .. .+.  |</span></span><br><span class="line"><span class="string">|=+=.    o  . Eo  |</span></span><br><span class="line"><span class="string">|..o+ .   o  .. . |</span></span><br><span class="line"><span class="string">|....= ... . . +  |</span></span><br><span class="line"><span class="string">|..o+.oooS  . o + |</span></span><br><span class="line"><span class="string">|.+oo...=.   . o  |</span></span><br><span class="line"><span class="string">|. +   + .o o     |</span></span><br><span class="line"><span class="string">| .   .    =      |</span></span><br><span class="line"><span class="string">|           .     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">[root@zhaohadoop3 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.101.150</span></span><br><span class="line"><span class="string">[root@zhaohadoop3 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.101.154</span></span><br><span class="line"><span class="string">[root@zhaohadoop3 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.101.156</span></span><br><span class="line"><span class="string">[root@zhaohadoop3 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.101.157</span></span><br></pre></td></tr></table></figure><h3 id="3-4-修改Hadoop配置文件"><a href="#3-4-修改Hadoop配置文件" class="headerlink" title="3.4 修改Hadoop配置文件"></a>3.4 修改Hadoop配置文件</h3><blockquote><p>均使用hadoop用户操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 ~]$ <span class="built_in">cd</span> /usr/local/hadoop/etc/hadoop/</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改hadoop-env.sh</span></span><br><span class="line">[root@zhaohadoop3 hadoop]$ vim hadoop-env.sh</span><br><span class="line"><span class="comment">#export JAVA_HOME=$&#123;JAVA_HOME&#125;      #注释原配置</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk     <span class="comment">#增加新配置</span></span><br></pre></td></tr></table></figure><h4 id="3-4-1-修改core-site-xml文件"><a href="#3-4-1-修改core-site-xml文件" class="headerlink" title="3.4.1 修改core-site.xml文件"></a>3.4.1 修改core-site.xml文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 hadoop]$ vim core-site.xml</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">&quot;License&quot;</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;指定hadoop运行时产生文件的存储路径&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hdfs://zhaohadoop3:9000&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;hdfs namenode的通信地址,通信端口&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hadoop.proxyuser.root.users&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="3-4-2-修改hdfs-site-xml"><a href="#3-4-2-修改hdfs-site-xml" class="headerlink" title="3.4.2 修改hdfs-site.xml"></a>3.4.2 修改hdfs-site.xml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 hadoop]$ vim hdfs-site.xml</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">&quot;License&quot;</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line">&lt;!-- 该文件指定与HDFS相关的配置信息。</span><br><span class="line">     需要修改HDFS默认的块的副本属性，因为HDFS默认情况下每个数据块保存3个副本，</span><br><span class="line">而在伪分布式模式下运行时，由于只有一个数据节点，</span><br><span class="line">所以需要将副本个数改为1；否则Hadoop程序会报错。 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">&lt;value&gt;3&lt;/value&gt;</span><br><span class="line">&lt;description&gt;指定HDFS存储数据的副本数目，默认情况下是3份&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;file:/usr/local/hadoop/hadoopdata/namenode&lt;/value&gt;</span><br><span class="line">&lt;description&gt;namenode存放数据的目录&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;file:/usr/local/hadoop/hadoopdata/datanode&lt;/value&gt;</span><br><span class="line">&lt;description&gt;datanode存放block块的目录&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.secondary.http.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;zhaohadoop2:50090&lt;/value&gt;</span><br><span class="line">&lt;description&gt;secondarynamenode 运行节点的信息，和 namenode 不同节点&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.permissions.enabled&lt;/name&gt;</span><br><span class="line">&lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line">&lt;description&gt;关闭权限验证&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="3-4-3-修改mapred-site-xml"><a href="#3-4-3-修改mapred-site-xml" class="headerlink" title="3.4.3 修改mapred-site.xml"></a>3.4.3 修改mapred-site.xml</h4><blockquote><p>&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;etc&#x2F;hadoop文件夹中并没有mapred-site.xml文件，但提供了模板mapred-site.xml.template，将其复制一份重命名为mapred-site.xml 即可</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 hadoop]$ <span class="built_in">cp</span> mapred-site.xml.template mapred-site.xml</span><br><span class="line">[root@zhaohadoop3 hadoop]$ vim mapred-site.xml</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">&quot;License&quot;</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line">&lt;!-- 在该配置文件中指定与MapReduce作业相关的配置属性，需要指定JobTracker运行的主机地址--&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;指定mapreduce运行在yarn上&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="3-4-4-修改yarn-site-xml"><a href="#3-4-4-修改yarn-site-xml" class="headerlink" title="3.4.4 修改yarn-site.xml"></a>3.4.4 修改yarn-site.xml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 hadoop]$ vim yarn-site.xml</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">&quot;License&quot;</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">&quot;AS IS&quot;</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;zhaohadoop3&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;yarn总管理器的IPC通讯地址&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;mapreduce执行shuffle时获取数据的方式&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="3-4-5-修改slaves文件"><a href="#3-4-5-修改slaves文件" class="headerlink" title="3.4.5 修改slaves文件"></a>3.4.5 修改slaves文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 hadoop]$ vim slaves</span><br><span class="line">zhaohadoop1</span><br><span class="line">zhaohadoop2</span><br><span class="line">zhaohadoop4</span><br></pre></td></tr></table></figure><h4 id="3-4-6-拷贝配置文件到其他机器"><a href="#3-4-6-拷贝配置文件到其他机器" class="headerlink" title="3.4.6 拷贝配置文件到其他机器"></a>3.4.6 拷贝配置文件到其他机器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 hadoop]$ scp -r /usr/local/hadoop/etc/hadoop/* zhaohadoop1:/usr/local/hadoop/etc/hadoop</span><br><span class="line">[root@zhaohadoop3 hadoop]$ scp -r /usr/local/hadoop/etc/hadoop/* zhaohadoop2:/usr/local/hadoop/etc/hadoop</span><br><span class="line">[root@zhaohadoop3 hadoop]$ scp -r /usr/local/hadoop/etc/hadoop/* zhaohadoop4:/usr/local/hadoop/etc/hadoop</span><br></pre></td></tr></table></figure><h2 id="四，HDFS初始化"><a href="#四，HDFS初始化" class="headerlink" title="四，HDFS初始化"></a>四，HDFS初始化</h2><blockquote><p>Hadoop配置完后，在zhaohadoop3上格式化namenode</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 hadoop]$ hdfs namenode -format</span><br><span class="line">************************************************************/</span><br><span class="line">19/07/08 17:14:03 INFO namenode.NameNode: registered UNIX signal handlers <span class="keyword">for</span> [TERM, HUP, INT]</span><br><span class="line">19/07/08 17:14:03 INFO namenode.NameNode: createNameNode [-format]</span><br><span class="line">Formatting using clusterid: CID-483fe437-8b37-4415-be1a-709cc42576d2</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSEditLog: Edit logging is async:<span class="literal">true</span></span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: KeyProvider: null</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: fsLock is fair: <span class="literal">true</span></span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: Detailed lock hold <span class="keyword">time</span> metrics enabled: <span class="literal">false</span></span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: fsOwner             = hadoop (auth:SIMPLE)</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: supergroup          = supergroup</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: isPermissionEnabled = <span class="literal">false</span></span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: HA Enabled: <span class="literal">false</span></span><br><span class="line">19/07/08 17:14:03 INFO common.Util: dfs.datanode.fileio.profiling.sampling.percentage <span class="built_in">set</span> to 0. Disabling file IO profiling</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.DatanodeManager: dfs.block.invalidate.limit: configured=1000, counted=60, effected=1000</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.DatanodeManager: dfs.namenode.datanode.registration.ip-hostname-check=<span class="literal">true</span></span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: dfs.namenode.startup.delay.block.deletion.sec is <span class="built_in">set</span> to 000:00:00:00.000</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: The block deletion will start around 2019 Jul 08 17:14:03</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: Computing capacity <span class="keyword">for</span> map BlocksMap</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: VM <span class="built_in">type</span>       = 64-bit</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: 2.0% max memory 889 MB = 17.8 MB</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: capacity      = 2^21 = 2097152 entries</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: dfs.block.access.token.enable=<span class="literal">false</span></span><br><span class="line">19/07/08 17:14:03 WARN conf.Configuration: No unit <span class="keyword">for</span> dfs.heartbeat.interval(3) assuming SECONDS</span><br><span class="line">19/07/08 17:14:03 WARN conf.Configuration: No unit <span class="keyword">for</span> dfs.namenode.safemode.extension(30000) assuming MILLISECONDS</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManagerSafeMode: dfs.namenode.safemode.threshold-pct = 0.9990000128746033</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManagerSafeMode: dfs.namenode.safemode.min.datanodes = 0</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManagerSafeMode: dfs.namenode.safemode.extension = 30000</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: defaultReplication         = 3</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: maxReplication             = 512</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: minReplication             = 1</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: maxReplicationStreams      = 2</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: replicationRecheckInterval = 3000</span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: encryptDataTransfer        = <span class="literal">false</span></span><br><span class="line">19/07/08 17:14:03 INFO blockmanagement.BlockManager: maxNumBlocksToLog          = 1000</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: Append Enabled: <span class="literal">true</span></span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSDirectory: GLOBAL serial map: bits=24 maxEntries=16777215</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: Computing capacity <span class="keyword">for</span> map INodeMap</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: VM <span class="built_in">type</span>       = 64-bit</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: 1.0% max memory 889 MB = 8.9 MB</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: capacity      = 2^20 = 1048576 entries</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSDirectory: ACLs enabled? <span class="literal">false</span></span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSDirectory: XAttrs enabled? <span class="literal">true</span></span><br><span class="line">19/07/08 17:14:03 INFO namenode.NameNode: Caching file names occurring more than 10 <span class="built_in">times</span></span><br><span class="line">19/07/08 17:14:03 INFO snapshot.SnapshotManager: Loaded config captureOpenFiles: falseskipCaptureAccessTimeOnlyChange: <span class="literal">false</span></span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: Computing capacity <span class="keyword">for</span> map cachedBlocks</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: VM <span class="built_in">type</span>       = 64-bit</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: 0.25% max memory 889 MB = 2.2 MB</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: capacity      = 2^18 = 262144 entries</span><br><span class="line">19/07/08 17:14:03 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.window.num.buckets = 10</span><br><span class="line">19/07/08 17:14:03 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.num.users = 10</span><br><span class="line">19/07/08 17:14:03 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.windows.minutes = 1,5,25</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: Retry cache on namenode is enabled</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry <span class="keyword">time</span> is 600000 millis</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: Computing capacity <span class="keyword">for</span> map NameNodeRetryCache</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: VM <span class="built_in">type</span>       = 64-bit</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: 0.029999999329447746% max memory 889 MB = 273.1 KB</span><br><span class="line">19/07/08 17:14:03 INFO util.GSet: capacity      = 2^15 = 32768 entries</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSImage: Allocated new BlockPoolId: BP-365528711-192.168.101.150-1562577243952</span><br><span class="line">19/07/08 17:14:03 INFO common.Storage: Storage directory /usr/local/hadoop/hadoopdata/namenode has been successfully formatted.</span><br><span class="line">19/07/08 17:14:03 INFO namenode.FSImageFormatProtobuf: Saving image file /usr/local/hadoop/hadoopdata/namenode/current/fsimage.ckpt_0000000000000000000 using no compression</span><br><span class="line">19/07/08 17:14:04 INFO namenode.FSImageFormatProtobuf: Image file /usr/local/hadoop/hadoopdata/namenode/current/fsimage.ckpt_0000000000000000000 of size 325 bytes saved <span class="keyword">in</span> 0 seconds .</span><br><span class="line">19/07/08 17:14:04 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid &gt;= 0</span><br><span class="line">19/07/08 17:14:04 INFO namenode.NameNode: SHUTDOWN_MSG:</span><br><span class="line">/************************************************************</span><br><span class="line">SHUTDOWN_MSG: Shutting down NameNode at zhaohadoop3/192.168.101.156</span><br><span class="line">************************************************************/</span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化成功！！</span></span><br></pre></td></tr></table></figure><h3 id="4-1-启动Hadoop"><a href="#4-1-启动Hadoop" class="headerlink" title="4.1 启动Hadoop"></a>4.1 启动Hadoop</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动HDFS(注意：不管在集群中的那个节点都可以)</span></span><br><span class="line">[root@zhaohadoop3 hadoop]$ <span class="built_in">pwd</span></span><br><span class="line">/usr/local/hadoop/etc/hadoop</span><br><span class="line">[root@zhaohadoop3 hadoop]$ <span class="built_in">cd</span> /usr/local/hadoop/sbin/</span><br><span class="line">[root@zhaohadoop3 sbin]$ start-dfs.sh</span><br><span class="line"></span><br><span class="line">可看到如下信息：</span><br><span class="line"></span><br><span class="line">Starting namenodes on [zhaohadoop3]</span><br><span class="line">The authenticity of host <span class="string">&#x27;zhaohadoop3 (192.168.101.156)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:KK9Y/ZvfUvjLWVE0bK1MKrWypjpRLYbx2EyToUNJMCI.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:e9:31:13:fd:78:ae:ac:d0:97:6e:76:6d:ba:ed:00:8f.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">zhaohadoop3: Warning: Permanently added &#x27;</span>zhaohadoop3<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">zhaohadoop3: starting namenode, logging to /usr/local/hadoop/logs/hadoop-hadoop-namenode-zhaohadoop3.out</span></span><br><span class="line"><span class="string">zhaohadoop2: starting datanode, logging to /usr/local/hadoop/logs/hadoop-hadoop-datanode-zhaohadoop2.out</span></span><br><span class="line"><span class="string">zhaohadoop4: starting datanode, logging to /usr/local/hadoop/logs/hadoop-hadoop-datanode-zhaohadoop4.out</span></span><br><span class="line"><span class="string">zhaohadoop1: starting datanode, logging to /usr/local/hadoop/logs/hadoop-hadoop-datanode-zhaohadoop1.out</span></span><br><span class="line"><span class="string">Starting secondary namenodes [zhaohadoop2]</span></span><br><span class="line"><span class="string">zhaohadoop2: starting secondarynamenode, logging to /usr/local/hadoop/logs/hadoop-hadoop-secondarynamenode-zhaohadoop2.out</span></span><br></pre></td></tr></table></figure><p><strong>启动YARN</strong></p><blockquote><p>注意：只能在主节点中进行启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaohadoop3 sbin]$ start-yarn.sh</span><br><span class="line"></span><br><span class="line">可看到如下信息：</span><br><span class="line"></span><br><span class="line">starting yarn daemons</span><br><span class="line">starting resourcemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-resourcemanager-zhaohadoop3.out</span><br><span class="line">zhaohadoop4: starting nodemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-nodemanager-zhaohadoop4.out</span><br><span class="line">zhaohadoop2: starting nodemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-nodemanager-zhaohadoop2.out</span><br><span class="line">zhaohadoop1: starting nodemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-nodemanager-zhaohadoop3.out</span><br></pre></td></tr></table></figure><h3 id="4-2-查看服务器进程"><a href="#4-2-查看服务器进程" class="headerlink" title="4.2 查看服务器进程"></a>4.2 查看服务器进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#zhaohadoop3：</span></span><br><span class="line">[hadoop@zhaohadoop1 sbin]$ jps</span><br><span class="line">2018 NameNode</span><br><span class="line">2569 Jps</span><br><span class="line">2298 ResourceManager</span><br><span class="line"></span><br><span class="line"><span class="comment">#zhaohadoop2：</span></span><br><span class="line">[hadoop@zhaohadoop2 ~]$ jps</span><br><span class="line">2134 SecondaryNameNode</span><br><span class="line">2358 Jps</span><br><span class="line">2215 NodeManager</span><br><span class="line">2029 DataNode</span><br><span class="line"></span><br><span class="line"><span class="comment">#zhaohadoop1：</span></span><br><span class="line">[hadoop@zhaohadoop3 ~]$ jps</span><br><span class="line">2069 Jps</span><br><span class="line">1948 NodeManager</span><br><span class="line">1838 DataNode</span><br><span class="line"></span><br><span class="line"><span class="comment">#zhaohadoop4：</span></span><br><span class="line">[hadoop@zhaohadoop4 ~]$ jps</span><br><span class="line">1873 DataNode</span><br><span class="line">2105 Jps</span><br><span class="line">1983 NodeManager</span><br></pre></td></tr></table></figure><blockquote><p>可以看到与我们集群规划所分配的进程是一致的</p></blockquote><p>###4.3 启动HDFS和YARN的web管理界面</p><p>HDFS : <a href="http://192.168.101.150:50070/">http://192.168.101.150:50070</a></p><p>YARN : <a href="http://192.168.101.150:8088/">http://192.168.101.150:8088</a></p><p><strong>HDFS界面</strong></p><p><img src="/articles/2019/07/08/centos7bushuhadoopjiqun/1.png"></p><p><strong>YARN界面</strong></p><p><img src="/articles/2019/07/08/centos7bushuhadoopjiqun/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s apiserver证书轮换更新（kubeadm）</title>
      <link href="/articles/2019/07/04/k8s-apiserver-zhengshulunhuangengxin-kubeadm/"/>
      <url>/articles/2019/07/04/k8s-apiserver-zhengshulunhuangengxin-kubeadm/</url>
      
        <content type="html"><![CDATA[<h2 id="一，确认kubeadm版本"><a href="#一，确认kubeadm版本" class="headerlink" title="一，确认kubeadm版本"></a>一，确认kubeadm版本</h2><blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><blockquote><p>如果使用的事kubeadm 1.8之前的版本，那么需要手动更新证书。或者重建集群。或者升级为1.8版本之后，即可使用命令轮换更新。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kubeadm更新方法示例：</span></span><br><span class="line">$ <span class="built_in">sudo</span> curl -sSL https://dl.k8s.io/release/v1.8.15/bin/linux/amd64/kubeadm &gt; ./kubeadm.1.8.15</span><br><span class="line">$ <span class="built_in">chmod</span> a+rx kubeadm.1.8.15</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/bin/kubeadm /usr/bin/kubeadm.1.7</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> kubeadm.1.8.15 /usr/bin/kubeadm</span><br></pre></td></tr></table></figure><h2 id="二，更新证书流程"><a href="#二，更新证书流程" class="headerlink" title="二，更新证书流程"></a>二，更新证书流程</h2><blockquote><p>因我的kubeadm版本为1.9，故不需要更新。</p></blockquote><h3 id="2-1-备份旧的apiserver，apiserver-kubelet-client和前端代理客户端证书和密钥。"><a href="#2-1-备份旧的apiserver，apiserver-kubelet-client和前端代理客户端证书和密钥。" class="headerlink" title="2.1 备份旧的apiserver，apiserver-kubelet-client和前端代理客户端证书和密钥。"></a>2.1 备份旧的apiserver，apiserver-kubelet-client和前端代理客户端证书和密钥。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/pki/apiserver.key /etc/kubernetes/pki/apiserver.key.old</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/pki/apiserver.crt /etc/kubernetes/pki/apiserver.crt.old</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/pki/apiserver-kubelet-client.crt /etc/kubernetes/pki/apiserver-kubelet-client.crt.old</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/pki/apiserver-kubelet-client.key /etc/kubernetes/pki/apiserver-kubelet-client.key.old</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/pki/front-proxy-client.crt /etc/kubernetes/pki/front-proxy-client.crt.old</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/pki/front-proxy-client.key /etc/kubernetes/pki/front-proxy-client.key.old</span><br></pre></td></tr></table></figure><h3 id="2-2-生成新的apiserver，apiserver-kubelet-client和front-proxy-client证书和密钥。"><a href="#2-2-生成新的apiserver，apiserver-kubelet-client和front-proxy-client证书和密钥。" class="headerlink" title="2.2 生成新的apiserver，apiserver-kubelet-client和front-proxy-client证书和密钥。"></a>2.2 生成新的apiserver，apiserver-kubelet-client和front-proxy-client证书和密钥。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> kubeadm alpha phase certs apiserver --apiserver-advertise-address=&lt;IP address of your master server&gt;</span><br><span class="line">$ <span class="built_in">sudo</span> kubeadm alpha phase certs apiserver-kubelet-client</span><br><span class="line">$ <span class="built_in">sudo</span> kubeadm alpha phase certs front-proxy-client</span><br></pre></td></tr></table></figure><h3 id="2-3-备份旧配置文件"><a href="#2-3-备份旧配置文件" class="headerlink" title="2.3 备份旧配置文件"></a>2.3 备份旧配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/admin.conf /etc/kubernetes/admin.conf.old</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/kubelet.conf /etc/kubernetes/kubelet.conf.old</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/controller-manager.conf /etc/kubernetes/controller-manager.conf.old</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/kubernetes/scheduler.conf /etc/kubernetes/scheduler.conf.old</span><br></pre></td></tr></table></figure><h3 id="2-4-生成新的配置文件。"><a href="#2-4-生成新的配置文件。" class="headerlink" title="2.4 生成新的配置文件。"></a>2.4 生成新的配置文件。</h3><blockquote><p>这里有一个重要的注意事项。如果您在AWS上，则需要–node-name在此请求中显式传递参数。否则，您将收到如下错误：Unable to register node “ip-10-0-8-141.ec2.internal” with API server: nodes “ip-10-0-8-141.ec2.internal” is forbidden: node ip-10-0-8-141 cannot modify node ip-10-0-8-141.ec2.internal在您的日志中sudo journalctl -u kubelet –all | tail，主节点将报告Not Ready您运行时的状态kubectl get nodes。<br><strong>请务必替换传入的值–apiserver-advertise-address并–node-name使用正确的环境值。</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#虽然我环境为aws，但是改了静态主机名，所以并不需要指定--node-name，下面为:</span></span><br><span class="line">$ <span class="built_in">sudo</span> kubeadm alpha phase kubeconfig all --apiserver-advertise-address 10.0.8.141 --node-name ip-10-0-8-141.ec2.internal</span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">&quot;admin.conf&quot;</span></span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">&quot;kubelet.conf&quot;</span></span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">&quot;controller-manager.conf&quot;</span></span><br><span class="line">[kubeconfig] Wrote KubeConfig file to disk: <span class="string">&quot;scheduler.conf&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-确保您kubectl正在寻找配置文件的正确位置"><a href="#2-5-确保您kubectl正在寻找配置文件的正确位置" class="headerlink" title="2.5 确保您kubectl正在寻找配置文件的正确位置"></a>2.5 确保您kubectl正在寻找配置文件的正确位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> .kube/config .kube/config.old</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ <span class="built_in">export</span> KUBECONFIG=.kube/config</span><br></pre></td></tr></table></figure><h3 id="2-6-重新启动主节点"><a href="#2-6-重新启动主节点" class="headerlink" title="2.6 重新启动主节点"></a>2.6 重新启动主节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="2-7-重新连接到主节点并获取令牌，并验证主节点是否“就绪”。将令牌复制到剪贴板。您将在下一步中使用它"><a href="#2-7-重新连接到主节点并获取令牌，并验证主节点是否“就绪”。将令牌复制到剪贴板。您将在下一步中使用它" class="headerlink" title="2.7 重新连接到主节点并获取令牌，并验证主节点是否“就绪”。将令牌复制到剪贴板。您将在下一步中使用它"></a>2.7 重新连接到主节点并获取令牌，并验证主节点是否“就绪”。将令牌复制到剪贴板。您将在下一步中使用它</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：若从节点失联，可使用token重新把从节点加入到集群中</span></span><br><span class="line"><span class="comment">#获取token命令：</span></span><br><span class="line">$ kubeadm token list</span><br></pre></td></tr></table></figure><p><strong>如果获取不到token，可以重新创建一个</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm token create</span><br></pre></td></tr></table></figure><h3 id="2-8-SSH到每个从属节点并重新连接到主节点"><a href="#2-8-SSH到每个从属节点并重新连接到主节点" class="headerlink" title="2.8 SSH到每个从属节点并重新连接到主节点"></a>2.8 SSH到每个从属节点并重新连接到主节点</h3><blockquote><p>如果master节点kubeadm进行了升级，那么从节点kubeadm工具也应升级。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> kubeadm <span class="built_in">join</span> --token=&lt;token from step 8&gt;  &lt;ip of master node&gt;:&lt;port used 6443 is the default&gt; --node-name &lt;should be the same one as from step 5&gt;</span><br></pre></td></tr></table></figure><h3 id="2-9-对每个连接节点重复步骤2-8。从主节点，您可以验证所有从属节点是否已连接并准备好"><a href="#2-9-对每个连接节点重复步骤2-8。从主节点，您可以验证所有从属节点是否已连接并准备好" class="headerlink" title="2.9 对每个连接节点重复步骤2.8。从主节点，您可以验证所有从属节点是否已连接并准备好"></a>2.9 对每个连接节点重复步骤2.8。从主节点，您可以验证所有从属节点是否已连接并准备好</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure><h2 id="第二种方式（上一种有些参数已经弃用）"><a href="#第二种方式（上一种有些参数已经弃用）" class="headerlink" title="第二种方式（上一种有些参数已经弃用）"></a>第二种方式（上一种有些参数已经弃用）</h2><h3 id="查看证书过期时间"><a href="#查看证书过期时间" class="headerlink" title="查看证书过期时间"></a>查看证书过期时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm alpha certs check-expiration</span><br></pre></td></tr></table></figure><h3 id="续订过期的证书"><a href="#续订过期的证书" class="headerlink" title="续订过期的证书"></a>续订过期的证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm alpha certs renew apiserver</span><br><span class="line">kubeadm alpha certs renew apiserver-kubelet-client</span><br><span class="line">kubeadm alpha certs renew front-proxy-client</span><br></pre></td></tr></table></figure><h3 id="接下来生成新kubeconfig文件"><a href="#接下来生成新kubeconfig文件" class="headerlink" title="接下来生成新kubeconfig文件"></a>接下来生成新kubeconfig文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubeadm alpha kubeconfig user --client-name kubernetes-admin --org system:masters &gt; /etc/kubernetes/admin.conf</span><br><span class="line">kubeadm alpha kubeconfig user --client-name system:kube-controller-manager &gt; /etc/kubernetes/controller-manager.conf</span><br><span class="line"><span class="comment"># instead of $(hostname) you may need to pass the name of the master node as in &quot;/etc/kubernetes/kubelet.conf&quot; file.</span></span><br><span class="line">kubeadm alpha kubeconfig user --client-name system:node:$(hostname) --org system:nodes &gt; /etc/kubernetes/kubelet.conf </span><br><span class="line">kubeadm alpha kubeconfig user --client-name system:kube-scheduler &gt; /etc/kubernetes/scheduler.conf</span><br></pre></td></tr></table></figure><h3 id="复制新kubernetes-admin-kubeconfig文件："><a href="#复制新kubernetes-admin-kubeconfig文件：" class="headerlink" title="复制新kubernetes-admin kubeconfig文件："></a>复制新kubernetes-admin kubeconfig文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/kubernetes/admin.conf ~/.kube/config</span><br></pre></td></tr></table></figure><h3 id="最后，你需要重新启动：kube-apiserver，kube-controller-manager和kube-scheduler。您可以使用以下命令或仅重新启动主节点："><a href="#最后，你需要重新启动：kube-apiserver，kube-controller-manager和kube-scheduler。您可以使用以下命令或仅重新启动主节点：" class="headerlink" title="最后，你需要重新启动：kube-apiserver，kube-controller-manager和kube-scheduler。您可以使用以下命令或仅重新启动主节点："></a>最后，你需要重新启动：kube-apiserver，kube-controller-manager和kube-scheduler。您可以使用以下命令或仅重新启动主节点：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">kill</span> -s SIGHUP $(pidof kube-apiserver)</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">kill</span> -s SIGHUP $(pidof kube-controller-manager)</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">kill</span> -s SIGHUP $(pidof kube-scheduler)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作随笔，问题排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7 Hadoop单节点快速构建</title>
      <link href="/articles/2019/07/02/Centos-7-Hadoop-danjiediankuaisugoujian/"/>
      <url>/articles/2019/07/02/Centos-7-Hadoop-danjiediankuaisugoujian/</url>
      
        <content type="html"><![CDATA[<h2 id="一，快速构建Hadoop单节点"><a href="#一，快速构建Hadoop单节点" class="headerlink" title="一，快速构建Hadoop单节点"></a>一，快速构建Hadoop单节点</h2><blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><p><strong>环境介绍</strong></p><table><thead><tr><th>主机名</th><th>ip</th><th>描述</th></tr></thead><tbody><tr><td>hadoop1</td><td>192.168.101.83</td><td>hadoop部署</td></tr></tbody></table><h3 id="1-1-下载所需安装包"><a href="#1-1-下载所需安装包" class="headerlink" title="1.1 下载所需安装包"></a>1.1 下载所需安装包</h3><blockquote></blockquote><p>jdk下载地址：<a href="https://github.com/frekele/oracle-java/releases">https://github.com/frekele/oracle-java/releases</a><br>hadoop下载地址：<a href="http://mirror.bit.edu.cn/apache/hadoop/common/">http://mirror.bit.edu.cn/apache/hadoop/common/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装包已经下载完毕</span></span><br><span class="line">[root@hadoop1 ~]# <span class="built_in">ls</span></span><br><span class="line">hadoop-2.9.2.tar.gz  jdk-8u181-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="1-2-安装java-jdk"><a href="#1-2-安装java-jdk" class="headerlink" title="1.2 安装java jdk"></a>1.2 安装java jdk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop1 ~]# tar xf jdk-8u181-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">[root@hadoop1 ~]# <span class="built_in">ln</span> -s /usr/local/jdk1.8.0_181 /usr/local/jdk</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置java环境变量</span></span><br><span class="line">[root@hadoop1 ~]# sed -i.ori <span class="string">&#x27;$a export JAVA_HOME=/usr/local/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar&#x27;</span> /etc/profile</span><br><span class="line">[root@hadoop1 ~]# <span class="built_in">tail</span> -3 /etc/profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.<span class="variable">$CLASSPATH</span>:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">[root@hadoop1 ~]# <span class="built_in">source</span> /etc/profile</span><br><span class="line">[root@hadoop1 ~]# <span class="built_in">which</span> java</span><br><span class="line">/usr/local/jdk/bin/java</span><br><span class="line">[root@hadoop1 ~]# java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_181&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="1-3-安装hadoop"><a href="#1-3-安装hadoop" class="headerlink" title="1.3 安装hadoop"></a>1.3 安装hadoop</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压软件包</span></span><br><span class="line">[root@hadoop1 ~]# tar xf hadoop-2.9.2.tar.gz -C /usr/local/</span><br><span class="line">[root@hadoop1 ~]# <span class="built_in">mv</span> /usr/local/hadoop-2.9.2 /usr/local/hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户</span></span><br><span class="line">[root@hadoop1 ~]# useradd hadoop</span><br><span class="line">[root@hadoop1 ~]# passwd hadoop</span><br><span class="line">更改用户 hadoop 的密码 。</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码少于 8 个字符</span><br><span class="line">重新输入新的 密码：</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line">[root@hadoop1 ~]# <span class="built_in">chown</span> -R hadoop:hadoop /usr/local/hadoop</span><br><span class="line">[root@hadoop1 ~]# su - hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据实际情况修改环境变量</span></span><br><span class="line">[hadoop@hadoop1 ~]$ <span class="built_in">cd</span> /usr/local/hadoop/</span><br><span class="line">[hadoop@hadoop1 ~]$ <span class="built_in">cat</span> .bash_profile</span><br><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the aliases and functions</span></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">. ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.local/bin:<span class="variable">$HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加下面内容</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/local/hadoop</span><br><span class="line"><span class="built_in">export</span> HADOOP_INSTALL=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HDFS_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> YARN_HOME=<span class="variable">$HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop1 hadoop]$ <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑hadoop-env.sh文件</span></span><br><span class="line">[hadoop@hadoop1 hadoop]$ <span class="built_in">cd</span> <span class="variable">$HADOOP_HOME</span>/etc/hadoop</span><br><span class="line">[hadoop@hadoop1 hadoop]$ <span class="built_in">ls</span></span><br><span class="line">capacity-scheduler.xml  hadoop-env.cmd              hadoop-policy.xml        httpfs-signature.secret  kms-log4j.properties  mapred-env.sh               ssl-client.xml.example  yarn-site.xml</span><br><span class="line">configuration.xsl       hadoop-env.sh               hdfs-site.xml            httpfs-site.xml          kms-site.xml          mapred-queues.xml.template  ssl-server.xml.example</span><br><span class="line">container-executor.cfg  hadoop-metrics2.properties  httpfs-env.sh            kms-acls.xml             log4j.properties      mapred-site.xml.template    yarn-env.cmd</span><br><span class="line">core-site.xml           hadoop-metrics.properties   httpfs-log4j.properties  kms-env.sh               mapred-env.cmd        slaves                      yarn-env.sh</span><br><span class="line">[hadoop@hadoop1 hadoop]$ <span class="built_in">pwd</span></span><br><span class="line">/usr/local/hadoop/etc/hadoop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[hadoop@hadoop1 hadoop]$ vim hadoop-env.sh</span><br><span class="line"><span class="comment">#找到如下一行</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span></span><br><span class="line"><span class="comment">#改为</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk     <span class="comment">#路径为java jdk安装位置</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑core-site.xml文件：</span></span><br><span class="line">[hadoop@hadoop1 hadoop]$ vim core-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#改为</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hdfs://localhost:9001&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑hdfs-site.xml文件：</span></span><br><span class="line">[hadoop@hadoop1 hadoop]$ vim hdfs-site.xml</span><br><span class="line"></span><br><span class="line"><span class="comment">#configuration中的内容：</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.name.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;file:///usr/local/hadoop/hadoopdata/namenode&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.data.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;file:///usr/local/hadoop/hadoopdata/datanode&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p><strong>创建目录：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop1 hadoop]$ <span class="built_in">mkdir</span> -p /usr/local/hadoop/hadoopdata/namenode</span><br><span class="line">[hadoop@hadoop1 hadoop]$ <span class="built_in">mkdir</span> -p /usr/local/hadoop/hadoopdata/datanode</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建mapred-site.xml文件：</span></span><br><span class="line">[hadoop@hadoop1 hadoop]$ <span class="built_in">cp</span> mapred-site.xml.template mapred-site.xml</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑mapred-site.xml文件：</span></span><br><span class="line">[hadoop@hadoop1 hadoop]$ vim mapred-site.xml</span><br><span class="line"><span class="comment">#configuration中的内容：</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑yarn-site.xml文件：</span></span><br><span class="line">[hadoop@hadoop1 hadoop]$ vim yarn-site.xml</span><br><span class="line"><span class="comment">#configuration中的内容：</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><blockquote><p>上面配置了Hadoop单节点.</p></blockquote><h3 id="1-4-初始化HDFS文件系统"><a href="#1-4-初始化HDFS文件系统" class="headerlink" title="1.4 初始化HDFS文件系统"></a>1.4 初始化HDFS文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop1 hadoop]$ hdfs namenode -format</span><br><span class="line">19/07/02 11:23:39 INFO namenode.NameNode: STARTUP_MSG:</span><br><span class="line">/************************************************************</span><br><span class="line">STARTUP_MSG: Starting NameNode</span><br><span class="line">STARTUP_MSG: host = k8s-master/192.168.101.83</span><br><span class="line">STARTUP_MSG: args = [-format]</span><br><span class="line">STARTUP_MSG: version = 2.9.2</span><br><span class="line">...省略若干内容...</span><br><span class="line">19/07/02 11:23:39 INFO namenode.FSImage: Allocated new BlockPoolId: BP-1662259864-192.168.101.83-1562037819748</span><br><span class="line">19/07/02 11:23:39 INFO common.Storage: Storage directory /usr/local/hadoop/hadoopdata/namenode has been successfully formatted.</span><br><span class="line">19/07/02 11:23:39 INFO namenode.FSImageFormatProtobuf: Saving image file /usr/local/hadoop/hadoopdata/namenode/current/fsimage.ckpt_0000000000000000000 using no compression</span><br><span class="line">19/07/02 11:23:39 INFO namenode.FSImageFormatProtobuf: Image file /usr/local/hadoop/hadoopdata/namenode/current/fsimage.ckpt_0000000000000000000 of size 325 bytes saved <span class="keyword">in</span> 0 seconds .</span><br><span class="line">19/07/02 11:23:39 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid &gt;= 0</span><br><span class="line">19/07/02 11:23:39 INFO namenode.NameNode: SHUTDOWN_MSG:</span><br><span class="line">/************************************************************</span><br><span class="line">SHUTDOWN_MSG: Shutting down NameNode at k8s-master/192.168.101.83</span><br><span class="line">************************************************************/</span><br></pre></td></tr></table></figure><h3 id="1-5-Hadoop相关的执行脚本"><a href="#1-5-Hadoop相关的执行脚本" class="headerlink" title="1.5 Hadoop相关的执行脚本"></a>1.5 Hadoop相关的执行脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop1 hadoop]$ <span class="built_in">ls</span></span><br><span class="line">bin  etc  hadoopdata  include  lib  libexec  LICENSE.txt  NOTICE.txt  README.txt  sbin  share</span><br><span class="line">[hadoop@hadoop1 hadoop]$ <span class="built_in">cd</span> sbin/</span><br><span class="line">[hadoop@hadoop1 sbin]$ <span class="built_in">ls</span></span><br><span class="line">distribute-exclude.sh  hadoop-daemons.sh  httpfs.sh                refresh-namenodes.sh  start-all.sh       start-dfs.sh         start-yarn.sh  stop-balancer.sh  stop-secure-dns.sh  yarn-daemon.sh</span><br><span class="line">FederationStateStore   hdfs-config.cmd    kms.sh                   slaves.sh             start-balancer.sh  start-secure-dns.sh  stop-all.cmd   stop-dfs.cmd      stop-yarn.cmd       yarn-daemons.sh</span><br><span class="line">hadoop-daemon.sh       hdfs-config.sh     mr-jobhistory-daemon.sh  start-all.cmd         start-dfs.cmd      start-yarn.cmd       stop-all.sh    stop-dfs.sh       stop-yarn.sh</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop1 sbin]$ start-dfs.sh     <span class="comment">#执行脚本，因没有配置ssh免密码，所以多次输入密码</span></span><br><span class="line">19/07/02 11:25:50 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Starting namenodes on [localhost]</span><br><span class="line">The authenticity of host <span class="string">&#x27;localhost (::1)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:/Vg2mVBOSm3b6SxWyslY0VYOTIqFafATNeHzSlaECpM.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:c6:bf:1e:3f:8d:c5:39:f4:57:3e:49:6b:0f:aa:ba:c0.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">localhost: Warning: Permanently added &#x27;</span>localhost<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">hadoop@localhost&#x27;</span>s password:</span><br><span class="line">localhost: starting namenode, logging to /usr/local/hadoop/logs/hadoop-hadoop-namenode-hadoop1.out</span><br><span class="line">hadoop@localhost<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">localhost: starting datanode, logging to /usr/local/hadoop/logs/hadoop-hadoop-datanode-hadoop1.out</span></span><br><span class="line"><span class="string">Starting secondary namenodes [0.0.0.0]</span></span><br><span class="line"><span class="string">The authenticity of host &#x27;</span>0.0.0.0 (0.0.0.0)<span class="string">&#x27; can&#x27;</span>t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:/Vg2mVBOSm3b6SxWyslY0VYOTIqFafATNeHzSlaECpM.</span><br><span class="line">ECDSA key fingerprint is MD5:c6:bf:1e:3f:8d:c5:39:f4:57:3e:49:6b:0f:aa:ba:c0.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (<span class="built_in">yes</span>/no)? <span class="built_in">yes</span></span><br><span class="line">0.0.0.0: Warning: Permanently added <span class="string">&#x27;0.0.0.0&#x27;</span> (ECDSA) to the list of known hosts.</span><br><span class="line">hadoop@0.0.0.0<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">0.0.0.0: starting secondarynamenode, logging to /usr/local/hadoop/logs/hadoop-hadoop-secondarynamenode-hadoop1.out</span></span><br><span class="line"><span class="string">19/07/02 11:26:33 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@hadoop1 sbin]$ start-yarn.sh        <span class="comment">#执行脚本</span></span><br><span class="line">starting yarn daemons</span><br><span class="line">starting resourcemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-resourcemanager-hadoop1.out</span><br><span class="line">hadoop@localhost<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">localhost: starting nodemanager, logging to /usr/local/hadoop/logs/yarn-hadoop-nodemanager-hadoop1.out</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看进程</span></span><br><span class="line">[hadoop@hadoop1 sbin]$ jps</span><br><span class="line">736 DataNode</span><br><span class="line">1136 ResourceManager</span><br><span class="line">1555 Jps</span><br><span class="line">582 NameNode</span><br><span class="line">1430 NodeManager</span><br><span class="line">967 SecondaryNameNode</span><br></pre></td></tr></table></figure><h2 id="二，测试"><a href="#二，测试" class="headerlink" title="二，测试"></a>二，测试</h2><blockquote><p><strong>默认情况下，Hadoop namenode服务使用50070端口：</strong></p></blockquote><p><img src="/articles/2019/07/02/Centos-7-Hadoop-danjiediankuaisugoujian/1.png" alt="1"></p><blockquote><p><strong>Hadoop All Applications，访问：</strong></p></blockquote><p><img src="/articles/2019/07/02/Centos-7-Hadoop-danjiediankuaisugoujian/2.png" alt="2"></p><blockquote><p><strong>查看NodeManager信息：</strong></p></blockquote><p><img src="/articles/2019/07/02/Centos-7-Hadoop-danjiediankuaisugoujian/3.png" alt="3"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 使用kubeadm部署kubernetes 1.14.1集群</title>
      <link href="/articles/2019/07/01/centos7shiyongkubeadmbushukubernetes1-14-1jiqun/"/>
      <url>/articles/2019/07/01/centos7shiyongkubeadmbushukubernetes1-14-1jiqun/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="CentOS-7-使用kubeadm部署kubernetes-1-14-1集群"><a href="#CentOS-7-使用kubeadm部署kubernetes-1-14-1集群" class="headerlink" title="CentOS 7 使用kubeadm部署kubernetes 1.14.1集群"></a>CentOS 7 使用kubeadm部署kubernetes 1.14.1集群</h1><h2 id="一，主机清单"><a href="#一，主机清单" class="headerlink" title="一，主机清单"></a>一，主机清单</h2><table><thead><tr><th>主机名</th><th>ip</th><th>描述</th><th>版本</th></tr></thead><tbody><tr><td>gago-k8s-master</td><td>192.168.8.77</td><td>master节点</td><td>v1.14.1</td></tr><tr><td>gago-k8s-node1</td><td>192.168.8.174</td><td>node节点</td><td>v1.14.1</td></tr><tr><td>gago-k8s-node2</td><td>192.168.8.227</td><td>node节点</td><td>v1.14.1</td></tr><tr><td>gago-k8s-node3</td><td>192.168.8.84</td><td>node节点</td><td>v1.14.1</td></tr></tbody></table><h2 id="二，版本信息"><a href="#二，版本信息" class="headerlink" title="二，版本信息"></a>二，版本信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux发行版信息</span></span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">cat</span> /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.2.1511 (Core) </span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux内核</span></span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-327.18.2.el7.x86_64</span><br></pre></td></tr></table></figure><h3 id="2-1-系统参数设置"><a href="#2-1-系统参数设置" class="headerlink" title="2.1 系统参数设置"></a>2.1 系统参数设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有节点设置/etc/hosts主机名，请根据实际情况进行配置</span></span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.8.77    gago-k8s-master</span><br><span class="line">192.168.8.174   gago-k8s-node1</span><br><span class="line">192.168.8.227   gago-k8s-node2</span><br><span class="line">192.168.8.84    gago-k8s-node3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有节点上设置SELINUX为disabled模式</span></span><br><span class="line">[root@gago-k8s-master ~]# vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line">[root@gago-k8s-master ~]# setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有节点上设置iptables参数</span></span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt;  /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让配置生效</span></span><br><span class="line">[root@gago-k8s-master ~]# sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有节点上禁用swap</span></span><br><span class="line">[root@gago-k8s-master ~]# swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用fstab中的swap项目</span></span><br><span class="line">[root@gago-k8s-master ~]# vi /etc/fstab</span><br><span class="line"><span class="comment">#/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br><span class="line">或者</span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">cat</span> /etc/rc.d/rc.local </span><br><span class="line">/sbin/swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认swap已经被禁用</span></span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">cat</span> /proc/swaps</span><br><span class="line">Filename                Type        Size    Used    Priority</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启主机</span></span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure><blockquote><p>注意，安装kubernetes集群，要求每个节点至少有2个cpu。</p></blockquote><h2 id="三，安装组件"><a href="#三，安装组件" class="headerlink" title="三，安装组件"></a>三，安装组件</h2><h3 id="3-1-安装docker"><a href="#3-1-安装docker" class="headerlink" title="3.1 安装docker"></a>3.1 安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">[root@gago-k8s-master ~]# yum -y install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment">#添加docker的CE版本的yum源配置文件</span></span><br><span class="line">[root@gago-k8s-master ~]# yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装CE版本的docker</span></span><br><span class="line">[root@gago-k8s-master ~]# yum -y install docker-ce</span><br><span class="line"></span><br><span class="line">[root@gago-k8s-master ~]# systemctl start docker      <span class="comment">#启动docker</span></span><br><span class="line"></span><br><span class="line">[root@gago-k8s-master ~]# systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p><strong>docker配置(所有节点)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建文件/etc/docker/daemon.json, 写入下面的内容。</span></span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">cat</span> /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启docker</span></span><br><span class="line">[root@gago-k8s-master ~]# systemctl daemon-reload</span><br><span class="line">[root@gago-k8s-master ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="3-2-kubernetes管理软件安装"><a href="#3-2-kubernetes管理软件安装" class="headerlink" title="3.2 kubernetes管理软件安装"></a>3.2 kubernetes管理软件安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置kubernetes安装yum源</span></span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p><strong>安装kubernetes</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@gago-k8s-master ~]# yum install -y kubeadm-1.14.1-0.x86_64 kubelet-1.14.1-0.x86_64 kubectl-1.14.1-0.x86_64</span><br><span class="line">[root@gago-k8s-master ~]# systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure><blockquote><p>说明：<br><strong>若遇到错误：软件包：kubelet-1.14.0-0.x86_64 (kubernetes) 需要：kubernetes-cni &#x3D; 0.7.5</strong><br>现象：</p><ul><li>安装kubernetes 1.14.0 版本时提示缺少依赖</li></ul></blockquote><p><strong>解决办法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1、安装基础软件</span><br><span class="line"></span><br><span class="line">yum -y install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">2、配置YUM仓库</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">3、配置阿里云</span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">复制代码</span><br><span class="line"></span><br><span class="line">4、直接单独安装</span><br><span class="line"></span><br><span class="line"> yum -y install kubernetes-cni = 0.7.5</span><br></pre></td></tr></table></figure><h3 id="3-3-拉取镜像（所有机器）"><a href="#3-3-拉取镜像（所有机器）" class="headerlink" title="3.3 拉取镜像（所有机器）"></a>3.3 拉取镜像（所有机器）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">docker pull mirrorgooglecontainers/kube-apiserver:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker pull mirrorgooglecontainers/etcd:3.3.10</span><br><span class="line">docker pull coredns/coredns:1.3.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改tag</span></span><br><span class="line">docker tag mirrorgooglecontainers/kube-apiserver:v1.14.1 k8s.gcr.io/kube-apiserver:v1.14.1</span><br><span class="line">docker tag mirrorgooglecontainers/kube-controller-manager:v1.14.1 k8s.gcr.io/kube-controller-manager:v1.14.1</span><br><span class="line">docker tag mirrorgooglecontainers/kube-scheduler:v1.14.1 k8s.gcr.io/kube-scheduler:v1.14.1</span><br><span class="line">docker tag mirrorgooglecontainers/kube-proxy:v1.14.1 k8s.gcr.io/kube-proxy:v1.14.1</span><br><span class="line">docker tag mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag mirrorgooglecontainers/etcd:3.3.10 k8s.gcr.io/etcd:3.3.10</span><br><span class="line">docker tag coredns/coredns:1.3.1 k8s.gcr.io/coredns:1.3.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除无用镜像</span></span><br><span class="line">docker rmi mirrorgooglecontainers/kube-apiserver:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-controller-manager:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-scheduler:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-proxy:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker rmi mirrorgooglecontainers/etcd:3.3.10</span><br><span class="line">docker rmi coredns/coredns:1.3.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">[root@gago-k8s-master ~]# docker images</span><br><span class="line">REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">k8s.gcr.io/kube-proxy                v1.14.1             20a2d7035165        2 months ago        82.1MB</span><br><span class="line">k8s.gcr.io/kube-apiserver            v1.14.1             cfaa4ad74c37        2 months ago        210MB</span><br><span class="line">k8s.gcr.io/kube-controller-manager   v1.14.1             efb3887b411d        2 months ago        158MB</span><br><span class="line">k8s.gcr.io/kube-scheduler            v1.14.1             8931473d5bdb        2 months ago        81.6MB</span><br><span class="line">quay.io/coreos/flannel               v0.11.0-amd64       ff281650a721        5 months ago        52.5MB</span><br><span class="line">k8s.gcr.io/coredns                   1.3.1               eb516548c180        5 months ago        40.3MB</span><br><span class="line">k8s.gcr.io/etcd                      3.3.10              2c4adeb21b4f        7 months ago        258MB</span><br><span class="line">k8s.gcr.io/pause                     3.1                 da86e6ba6ca1        18 months ago       742kB</span><br></pre></td></tr></table></figure><h3 id="3-4-集群初始化"><a href="#3-4-集群初始化" class="headerlink" title="3.4 集群初始化"></a>3.4 集群初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化Master（Master需要至少2核）</span></span><br><span class="line">[root@gago-k8s-master ~]# kubeadm init --apiserver-advertise-address 192.168.8.77 --pod-network-cidr 10.244.0.0/16 --kubernetes-version 1.14.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入提示的内容</span></span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">[root@gago-k8s-master ~]# <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化有一段join的token，很重要，是添加node节点的命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-5-应用flannel网络"><a href="#3-5-应用flannel网络" class="headerlink" title="3.5 应用flannel网络"></a>3.5 应用flannel网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gago-k8s-master ~]# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="3-6-node节点加入集群"><a href="#3-6-node节点加入集群" class="headerlink" title="3.6 node节点加入集群"></a>3.6 node节点加入集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#所有加入集群的node都要执行</span></span><br><span class="line">[root@gago-k8s-node1 ~]# kubeadm <span class="built_in">join</span> 192.168.8.77:6443 --token dq2d1p.ibp5pavvo9yqorxi     --discovery-token-ca-cert-hash sha256:849662fef6a50ef6ea7020138907f83336a559b8a8e79fa748b55e6fa5bbaafe</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with <span class="string">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class="line">[kubelet-start] Downloading configuration <span class="keyword">for</span> the kubelet from the <span class="string">&quot;kubelet-config-1.14&quot;</span> ConfigMap <span class="keyword">in</span> the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[kubelet-start] Waiting <span class="keyword">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class="built_in">join</span> the cluster.</span><br></pre></td></tr></table></figure><h3 id="3-7-查看集群"><a href="#3-7-查看集群" class="headerlink" title="3.7 查看集群"></a>3.7 查看集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#master端执行命令</span></span><br><span class="line">[root@gago-k8s-master ~]# kubectl get node</span><br><span class="line">NAME              STATUS   ROLES    AGE     VERSION</span><br><span class="line">gago-k8s-master   Ready    master   5d23h   v1.14.1</span><br><span class="line">gago-k8s-node1    Ready    &lt;none&gt;   5d23h   v1.14.1</span><br><span class="line">gago-k8s-node2    Ready    &lt;none&gt;   5d23h   v1.14.1</span><br><span class="line">gago-k8s-node3    Ready    &lt;none&gt;   5d23h   v1.14.1</span><br><span class="line"></span><br><span class="line">[root@gago-k8s-master ~]# kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE       NAME                                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system     coredns-fb8b8dccf-dn9f2                   1/1     Running   0          5d23h</span><br><span class="line">kube-system     coredns-fb8b8dccf-sfktk                   1/1     Running   0          5d23h</span><br><span class="line">kube-system     etcd-gago-k8s-master                      1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-apiserver-gago-k8s-master            1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-controller-manager-gago-k8s-master   1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-flannel-ds-amd64-658fg               1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-flannel-ds-amd64-695k2               1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-flannel-ds-amd64-hmxp5               1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-flannel-ds-amd64-j9f9w               1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-proxy-7krvm                          1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-proxy-95qpq                          1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-proxy-mfjtg                          1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-proxy-xgbzv                          1/1     Running   0          5d23h</span><br><span class="line">kube-system     kube-scheduler-gago-k8s-master            1/1     Running   0          5d23h</span><br></pre></td></tr></table></figure><blockquote><p>至此，搭建完毕！！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统初始化之记录登录日志</title>
      <link href="/articles/2019/06/24/system-initialization-jiludenglurizhi/"/>
      <url>/articles/2019/06/24/system-initialization-jiludenglurizhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><blockquote><p>在系统初始化的过程中，需要将登录日志记录到一个隐藏的文件中,下面简单的记录下流程:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置如下：</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;&#123;\&quot;TIME\&quot;:\&quot;%F %T\&quot;,\&quot;HOST\&quot;:\&quot;<span class="variable">$HOSTNAME</span>\&quot;,\&quot;LI\&quot;:\&quot;<span class="subst">$(who -u am i 2&gt;/dev/null| awk &#x27;&#123;print $NF&#125;&#x27;|sed -e &#x27;s/[()</span>]//g&#x27;)\&quot;,\&quot;LU\&quot;:\&quot;<span class="subst">$(who am i|awk &#x27;&#123;print $1&#125;&#x27;)</span>\&quot;,\&quot;NU\&quot;:\&quot;<span class="variable">$&#123;USER&#125;</span>\&quot;,\&quot;CMD\&quot;:\&quot;&quot;</span></span><br><span class="line"><span class="built_in">export</span> PROMPT_COMMAND=<span class="string">&#x27;history 1|tail -1|sed &quot;s/^[ ]\+[0-9]\+  //&quot;|sed &quot;s/$/\&quot;&#125;/&quot;&gt;&gt; /var/log/.command.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><blockquote><p>将如下两行追加到文件中，之后source，这时候我们的日志文件(&#x2F;var&#x2F;log&#x2F;.command.log)就有了登录的日志了。此时需要将这个隐藏的目录权限修改为777</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 /var/log/.command.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作随笔，问题排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes之Ingress实现</title>
      <link href="/articles/2019/06/24/kuberneteszhiingressshixian/"/>
      <url>/articles/2019/06/24/kuberneteszhiingressshixian/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Kubernetes之Ingress实现"><a href="#Kubernetes之Ingress实现" class="headerlink" title="Kubernetes之Ingress实现"></a>Kubernetes之Ingress实现</h1><h2 id="一，什么是Ingress？"><a href="#一，什么是Ingress？" class="headerlink" title="一，什么是Ingress？"></a>一，什么是Ingress？</h2><blockquote><p>Ingress将集群外部的HTTP和HTTPS路由暴露给集群中的服务。流量路由由Ingress资源上定义的规则控制。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> internet</span><br><span class="line">     |</span><br><span class="line">[ Ingress ]</span><br><span class="line">--|-----|--</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure><h3 id="1-1-理解service和ingress"><a href="#1-1-理解service和ingress" class="headerlink" title="1.1 理解service和ingress"></a>1.1 理解service和ingress</h3><blockquote><ul><li>service是后端真实服务的抽象 一个service可以代表多个相同的后端服务</li><li>ingress是反向代理规则，用来规定http&#x2F;https请求应该被转发到哪个service上 比如根据请求不同的host和url路径让请求落到不同的service上</li><li>ingress controller 就是一个反向代理程序，它负责解析ingress的反向代理规则 如果ingress有增删改的变动 所有的ingress controller都会即使更新自己相应的转发规则 当ingress controller 收到请求后就会根据这些规则将请求到对应的service</li></ul></blockquote><ul><li><input checked="" disabled="" type="checkbox"> kubernetes并没有自带ingress controller 他只是一种标准，具体实现方式有多种，需要自己单独安装，常用的是 nginx ingress controller 和 traefik ingress controller 所以 ingress是一种转发规则的抽象 ingress controller 的实现需要根据这些ingress规则来将请求转发到对应的service</li></ul><p><img src="/articles/2019/06/24/kuberneteszhiingressshixian/1.png"></p><blockquote><p>从图中可以看出 ingress controller收到请求，匹配ingress转发规则，匹配到了就转发到后端的service 而service可能代表后端的pod有多个。选出一个转发到那个pod 最终由那个pod处理请求。</p></blockquote><blockquote><blockquote><p>既然ingress controller 要接受外面的请求 而ingress controller是部署在集群中的 怎么让ingress controller本身能够被外面访问到呢？大概有如下几种方式：</p></blockquote><ul><li>ingress controller用deployment方式部署，给他添加一个service 类型为loadBalancer 这样就会自动生成一个ip地址，通过这个ip即可访问 并且一般这个ip是vip是高可用的，但是前提是集群需要支持loadbalancer 通常情况云服务提供商才支持，自建集群一般没有。</li><li>使用集群内的某个节点作为边缘节点，给node添加label来标识，ingress controller用daemonset的方式部署，使用nodeselector绑定到边缘节点 保证每个边缘节点启动一个ingress controller实例，用hostport 直接在这些边缘节点宿主机暴露端口，然后我们可以访问边缘节点中ingress controller暴露的端口。这样外部就可以访问到ingress controller了。</li><li>ingress controller用deployment的方式部署，给他添加一个service 类型为nodeport 部署完后查看会给出一个端口，通过kubectl get svc 我们可以查看到这个端口。这个端口在集群的每个节点都可以访问，通过访问集群几点的端口就可以访问ingress controller了。但是集群节点这么多 而且端口不仅仅是80或者443，一般我们需要在前方搭建个负载均衡 比如用nginx，将请求转发到集群各个节点的对应端口上，这样我们访问nginx就相当于访问 ingress controller了。</li></ul></blockquote><h2 id="二，安装ingress-controller核心附件"><a href="#二，安装ingress-controller核心附件" class="headerlink" title="二，安装ingress controller核心附件"></a>二，安装ingress controller核心附件</h2><h3 id="2-1-创建ingress命名空间"><a href="#2-1-创建ingress命名空间" class="headerlink" title="2.1 创建ingress命名空间"></a>2.1 创建ingress命名空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim namespaces.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">    </span><br><span class="line"><span class="comment">#因为ingress必须创建在单独的名称空间 所以首先创建名称空间</span></span><br><span class="line">[root@k8s-master01 ingress]# kubectl create -f namespaces.yaml</span><br><span class="line">namespace/ingress-nginx created     <span class="comment">#指定清单文件进行名称空间创建</span></span><br><span class="line">[root@k8s-master01 ingress]# kubectl get ns</span><br><span class="line">NAME            STATUS   AGE</span><br><span class="line">default         Active   66d</span><br><span class="line">ingress-nginx   Active   22s</span><br><span class="line">kube-public     Active   66d</span><br><span class="line">kube-system     Active   66d</span><br></pre></td></tr></table></figure><h3 id="2-2-编写configmap文件"><a href="#2-2-编写configmap文件" class="headerlink" title="2.2 编写configmap文件"></a>2.2 编写configmap文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">vim configmap.yaml</span><br><span class="line"></span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-configuration</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: tcp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: udp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">    </span><br><span class="line"><span class="comment">#创建configmap</span></span><br><span class="line">[root@k8s-master01 ingress]# kubectl create -f configmap.yaml</span><br><span class="line">configmap/nginx-configuration created</span><br><span class="line">configmap/tcp-services created</span><br><span class="line">configmap/udp-services created</span><br></pre></td></tr></table></figure><h3 id="2-3-编写rbac的yaml文件"><a href="#2-3-编写rbac的yaml文件" class="headerlink" title="2.3 编写rbac的yaml文件"></a>2.3 编写rbac的yaml文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">vim rbac.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-serviceaccount</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - endpoints</span><br><span class="line">      - nodes</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">    verbs:</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - nodes</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - services</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;extensions&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - ingresses</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - events</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">      - patch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;extensions&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - ingresses/status</span><br><span class="line">    verbs:</span><br><span class="line">      - update</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">      - namespaces</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    resourceNames:</span><br><span class="line">      <span class="comment"># Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span></span><br><span class="line">      <span class="comment"># Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span></span><br><span class="line">      <span class="comment"># This has to be adapted if you change either parameter</span></span><br><span class="line">      <span class="comment"># when launching the nginx-ingress-controller.</span></span><br><span class="line">      - <span class="string">&quot;ingress-controller-leader-nginx&quot;</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - update</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">&quot;&quot;</span></span><br><span class="line">    resources:</span><br><span class="line">      - endpoints</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role-nisa-binding</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole-nisa-binding</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建rbac.yaml</span></span><br><span class="line">[root@k8s-master01 ingress]# kubectl create -f rbac.yaml</span><br><span class="line">serviceaccount/nginx-ingress-serviceaccount created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/nginx-ingress-clusterrole created</span><br><span class="line">role.rbac.authorization.k8s.io/nginx-ingress-role created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/nginx-ingress-role-nisa-binding created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-clusterrole-nisa-binding created</span><br></pre></td></tr></table></figure><h3 id="2-4-编写nginx-ingress-controller-yaml文件"><a href="#2-4-编写nginx-ingress-controller-yaml文件" class="headerlink" title="2.4 编写nginx-ingress-controller.yaml文件"></a>2.4 编写nginx-ingress-controller.yaml文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">vim nginx-ingress-controller.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-controller</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app.kubernetes.io/name: ingress-nginx</span><br><span class="line">      app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app.kubernetes.io/name: ingress-nginx</span><br><span class="line">        app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">      annotations:</span><br><span class="line">        prometheus.io/port: <span class="string">&quot;10254&quot;</span></span><br><span class="line">        prometheus.io/scrape: <span class="string">&quot;true&quot;</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nginx-ingress-serviceaccount</span><br><span class="line">      hostNetwork: <span class="literal">true</span>     <span class="comment">#启动宿主机网络栈（意味着占用宿主机端口来实现外部访问）</span></span><br><span class="line">      nodeName: gago-k8s-node1      <span class="comment">#指定pod强制分配给此节点</span></span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx-ingress-controller</span><br><span class="line">          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1</span><br><span class="line">          args:</span><br><span class="line">            - /nginx-ingress-controller</span><br><span class="line">            - --configmap=$(POD_NAMESPACE)/nginx-configuration</span><br><span class="line">            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span><br><span class="line">            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services</span><br><span class="line">            - --publish-service=$(POD_NAMESPACE)/ingress-nginx</span><br><span class="line">            - --annotations-prefix=nginx.ingress.kubernetes.io</span><br><span class="line">          securityContext:</span><br><span class="line">            allowPrivilegeEscalation: <span class="literal">true</span></span><br><span class="line">            capabilities:</span><br><span class="line">              drop:</span><br><span class="line">                - ALL</span><br><span class="line">              add:</span><br><span class="line">                - NET_BIND_SERVICE</span><br><span class="line">            <span class="comment"># www-data -&gt; 33</span></span><br><span class="line">            runAsUser: 33</span><br><span class="line">          <span class="built_in">env</span>:</span><br><span class="line">            - name: POD_NAME</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.name</span><br><span class="line">            - name: POD_NAMESPACE</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.namespace</span><br><span class="line">          ports:</span><br><span class="line">            - name: http</span><br><span class="line">              containerPort: 80</span><br><span class="line">            - name: https</span><br><span class="line">              containerPort: 443</span><br><span class="line">          livenessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            initialDelaySeconds: 10</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 10</span><br><span class="line">          readinessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 10</span><br><span class="line">            </span><br><span class="line"><span class="comment">#创建nginx-ingress-controller.yaml</span></span><br><span class="line">[root@k8s-master01 ingress]# kubectl create -f nginx-ingress-controller.yaml</span><br><span class="line">deployment.apps/nginx-ingress-controller created</span><br></pre></td></tr></table></figure><h3 id="2-5-创建ingress-controller的service"><a href="#2-5-创建ingress-controller的service" class="headerlink" title="2.5 创建ingress controller的service"></a>2.5 创建ingress controller的service</h3><blockquote><p>为了使ingress controller可以接入集群外部流量，现在为ingress controller创建一个service 基于nodePort的service</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">vim ingress-service.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-fengkong</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">  - name: https</span><br><span class="line">    port: 443</span><br><span class="line">    targetPort: 443</span><br><span class="line">    </span><br><span class="line"><span class="comment">#创建ingress-service.yaml</span></span><br><span class="line">kubectl create -f ingress-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#现在其实我们的ingress controller其实就已经是可以从外部访问了 只不过我们暂时还没有配置它的后端服务 所以现在访问可以看出他是404的一个页面 但是nginx已经体现出来了</span></span><br><span class="line">[root@gago-k8s-master ingress]# kubectl get svc --all-namespaces       </span><br><span class="line">NAMESPACE       NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">default         kubernetes        ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP                  21h</span><br><span class="line">ingress-nginx   ingress-service   ClusterIP   10.106.87.227   &lt;none&gt;        80/TCP,443/TCP           3s</span><br><span class="line">kube-system     kube-dns          ClusterIP   10.96.0.10      &lt;none&gt;        53/UDP,53/TCP,9153/TCP   21h</span><br><span class="line">[root@gago-k8s-master ingress]# curl 10.106.87.227 80</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.15.10&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">curl: (7) Failed to connect to 0.0.0.80: Invalid argument</span><br><span class="line"></span><br><span class="line">[root@gago-k8s-master ingress]# kubectl get node</span><br><span class="line">NAME              STATUS   ROLES    AGE   VERSION</span><br><span class="line">gago-k8s-master   Ready    master   21h   v1.14.1</span><br><span class="line">gago-k8s-node1    Ready    &lt;none&gt;   21h   v1.14.1</span><br><span class="line">gago-k8s-node2    Ready    &lt;none&gt;   21h   v1.14.1</span><br><span class="line">gago-k8s-node3    Ready    &lt;none&gt;   21h   v1.14.1</span><br><span class="line"></span><br><span class="line">[root@gago-k8s-master ingress]# curl 192.168.8.174 80       <span class="comment">#因为前面配置了启动宿主机网络栈</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.15.10&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">curl: (7) Failed to connect to 0.0.0.80: Invalid argument</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-6-配置ingress"><a href="#2-6-配置ingress" class="headerlink" title="2.6 配置ingress"></a>2.6 配置ingress</h3><blockquote><p>创建一个ingress将它关联到相关的运行后端服务的相关pod的service上边 然后使它能够动态的为ingress controller提供后端pod</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim ingress-test.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-test</span><br><span class="line">  namespace: default</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">&quot;nginx&quot;</span></span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: test.gagogroup.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: <span class="built_in">test</span></span><br><span class="line">          servicePort: 9090</span><br></pre></td></tr></table></figure><h2 id="三，配置ingress-配置https访问"><a href="#三，配置ingress-配置https访问" class="headerlink" title="三，配置ingress 配置https访问"></a>三，配置ingress 配置https访问</h2><blockquote><p>首先生成tls文件，因为我这里有购买到的第三方证书，所以可以直接使用，如果没有的话，需要自行生成证书。<br><a href="https://mritd.me/2017/03/04/how-to-use-nginx-ingress/%EF%BC%8C%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E6%9F%A5%E7%9C%8B%E6%AD%A4%E7%AF%87%E6%96%87%E7%AB%A0%E3%80%82">https://mritd.me/2017/03/04/how-to-use-nginx-ingress/，证书生成查看此篇文章。</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#现在我的key文件为gago.key，cert文件为gago.crt。</span></span><br><span class="line">下面可以直接生成</span><br><span class="line">kubectl create secret tls ingress-secret  --key  /etc/kubernetes/pki/gago.key   --cert /etc/kubernetes/pki/gago.crt  --namespace  kube-system</span><br><span class="line"></span><br><span class="line">这样就在kube-system这个空间中生成一个叫做ingress-secret的secret了。</span><br><span class="line">如果我们的service分配在多个不同的namespace，需要我们创建几个不同的secret，名字不用改变。只需要更改后面的namespace名字就可以了。</span><br></pre></td></tr></table></figure><p><strong>开始配置ingress文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接将加上tls字段，然后配置上域名就可以了。之后进行应用。</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: testnginx </span><br><span class="line">  namespace: default</span><br><span class="line">  annotations:</span><br><span class="line">    ingress.kubernetes.io/force-ssl-redirect: <span class="string">&quot;false&quot;</span>    </span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">  - hosts: </span><br><span class="line">    - nginx.gagogroup.cn</span><br><span class="line">    - jenkins.gagogroup.cn</span><br><span class="line">    - <span class="string">&quot;*.gagogroup.cn&quot;</span></span><br><span class="line">    secretName: ingress-secret</span><br><span class="line">  rules:</span><br><span class="line">  - host: nginx.gagogroup.cn</span><br><span class="line">    http:</span><br><span class="line">      paths: </span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: webapp </span><br><span class="line">          servicePort: 8800</span><br><span class="line">  - host: jenkins.gagogroup.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: jenkins</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure><p><img src="/articles/2019/06/24/kuberneteszhiingressshixian/2.png"></p><blockquote><p>访问的话可以看到已经跳转到https了。这个默认的是80会跳转到443上面去。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决kubernetes不能从harbor pull image</title>
      <link href="/articles/2019/06/18/jiejue-kubernetes-buneng-harbor-pull-images/"/>
      <url>/articles/2019/06/18/jiejue-kubernetes-buneng-harbor-pull-images/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><blockquote><p><strong>在实现kubernetes ci的时候发现node节点不能从harbor的私有仓库将image直接pull下来。但是直接从node节点直接pull的话又是没有问题的，后来发现如果想要kubernetes直接pull的话需要一个secret。</strong></p></blockquote><h2 id="一，以下面的为例介绍"><a href="#一，以下面的为例介绍" class="headerlink" title="一，以下面的为例介绍"></a>一，以下面的为例介绍</h2><blockquote><p>下面的是创建service以及deployment的例子</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: webapp</span><br><span class="line">  namespace: <span class="built_in">test</span></span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    name: webapp</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  namespace: <span class="built_in">test</span></span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/change-cause: <span class="string">&quot;true&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">      maxSurge: 2</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">        namespace: <span class="built_in">test</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: harbor.gagogroup.cn/api-dev/nginx:1.1.9</span><br><span class="line">        imagePullPolicy: IfNotPresent </span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">        - name: harbor-secret</span><br></pre></td></tr></table></figure><blockquote><p><strong>如果我们想要保证kubernetes能够正常的pull image的话，就需要加上imagePullSecrets这个字段。下面是创建secret的方法。</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret docker-registry SECRET_NAME -–namespace=NAME_SPACE \</span><br><span class="line">-–docker-server=DOCKER_REGISTRY_SERVER -–docker-username=DOCKER_USER \</span><br><span class="line">-–docker-password=DOCKER_PASSWORD -–docker-email=DOCKER_EMAIL</span><br><span class="line"></span><br><span class="line"><span class="comment">#其中：</span></span><br><span class="line">-–namespace 为命名空间</span><br><span class="line">--docker-server 为通过docker login登陆时输入的地址</span><br><span class="line">--docker-username 为登陆时的账号</span><br><span class="line">--docker-password 为登陆时的密码</span><br><span class="line">--docker-email 为注册的账号时的邮箱地址</span><br></pre></td></tr></table></figure><p><strong>真实命令示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@gago-k8s-master api]# kubectl create secret docker-registry harbor-secret  --docker-server=xxx.xxxx.cn --docker-username=yunwei --docker-password=xxxxxx --docker-email=xxx@qq.com -n api             </span><br><span class="line">secret/harbor-secret created</span><br><span class="line"></span><br><span class="line">[root@gago-k8s-master api]# kubectl get secret -n api   <span class="comment">#查看secret</span></span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-4qgfl   kubernetes.io/service-account-token   3      47m</span><br><span class="line">harbor-secret         kubernetes.io/dockerconfigjson        1      3m52s</span><br><span class="line">harbor-yunwei         kubernetes.io/dockerconfigjson        1      47m</span><br></pre></td></tr></table></figure><blockquote><p>同时不要忘记的是此用户需要读拉取的image的project有权限。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工作随笔，问题排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git前端ci文件写法示例</title>
      <link href="/articles/2019/06/11/git-qianduan-ci-example/"/>
      <url>/articles/2019/06/11/git-qianduan-ci-example/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前端ci示例：</span></span><br><span class="line"></span><br><span class="line">stages: <span class="comment">#有哪些步骤</span></span><br><span class="line">  - picc_ts_test</span><br><span class="line">picc_ts_test:  <span class="comment">#可以理解为项目名，只是定义一个名字</span></span><br><span class="line">  stage: picc_ts_test  <span class="comment">#步骤1，跟上面的要对应</span></span><br><span class="line">  tags:  <span class="comment"># runner名字，决定用哪个runnre来执行</span></span><br><span class="line">    - zhaoshuo_172.16.0.26</span><br><span class="line">  only:  <span class="comment"># 分支名，定义部署分支</span></span><br><span class="line">    - develop</span><br><span class="line">  script: <span class="comment"># 动作</span></span><br><span class="line">    - scp -P 12224 -r dist gago_zhaoshuo@172.17.108.101:/data/home/gago_hetao/web_ci/picc_ts_test/</span><br><span class="line">    - ssh -p 12224 gago_zhaoshuo@172.17.108.101 <span class="string">&quot;sudo sh ~/picc_web_ts_ci.sh&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作随笔，问题排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器占满了磁盘，但虚机和容器内都没有找到大文件</title>
      <link href="/articles/2019/04/23/rong-qi-zhanman-cipan-fuwuqi-he-rongqi-doumeidawenjian/"/>
      <url>/articles/2019/04/23/rong-qi-zhanman-cipan-fuwuqi-he-rongqi-doumeidawenjian/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h2 id="一，原因阐述"><a href="#一，原因阐述" class="headerlink" title="一，原因阐述"></a>一，原因阐述</h2><blockquote><p>领导让我排查一下aws服务器磁盘空间已满的问题，但是看不到大文件的存在，看下图：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#看根下所有目录的空间占用</span></span><br><span class="line">[root@gago-viirs gago_viirs]# <span class="built_in">cd</span> /</span><br><span class="line">[root@gago-viirs /]# <span class="built_in">du</span> -sh *</span><br><span class="line">0bin</span><br><span class="line">49Mboot</span><br><span class="line">0data</span><br><span class="line">0dev</span><br><span class="line">31Metc</span><br><span class="line">52Khome</span><br><span class="line">0lib</span><br><span class="line">0lib64</span><br><span class="line">0<span class="built_in">local</span></span><br><span class="line">0media</span><br><span class="line">2.7Gmnt</span><br><span class="line">104Kopt</span><br><span class="line"><span class="built_in">du</span>: 无法访问<span class="string">&quot;proc/12686&quot;</span>: No such file or directory</span><br><span class="line"><span class="built_in">du</span>: 无法访问<span class="string">&quot;proc/12757/task/12757/fd/3&quot;</span>: No such file or directory</span><br><span class="line"><span class="built_in">du</span>: 无法访问<span class="string">&quot;proc/12757/task/12757/fdinfo/3&quot;</span>: No such file or directory</span><br><span class="line"><span class="built_in">du</span>: 无法访问<span class="string">&quot;proc/12757/fd/3&quot;</span>: No such file or directory</span><br><span class="line"><span class="built_in">du</span>: 无法访问<span class="string">&quot;proc/12757/fdinfo/3&quot;</span>: No such file or directory</span><br><span class="line">0proc</span><br><span class="line">12Mroot</span><br><span class="line">664Krun</span><br><span class="line">0sbin</span><br><span class="line">0srv</span><br><span class="line">0sys</span><br><span class="line">0tmp</span><br><span class="line">1.1Gusr</span><br><span class="line">9.3Gvar</span><br><span class="line"></span><br><span class="line"><span class="comment">#看磁盘挂在使用情况</span></span><br><span class="line">[root@gago-viirs /]# <span class="built_in">df</span> -h</span><br><span class="line">文件系统          容量   已用   可用  已用%  挂载点</span><br><span class="line">devtmpfs         31G     0   31G    0% /dev</span><br><span class="line">tmpfs            31G     0   31G    0% /dev/shm</span><br><span class="line">tmpfs            31G  664K   31G    1% /run</span><br><span class="line">tmpfs            31G     0   31G    0% /sys/fs/cgroup</span><br><span class="line">/dev/nvme0n1p1   80G   51G   30G   64% /        <span class="comment">#已使用51G</span></span><br><span class="line">overlay          80G   51G   30G   64% /var/lib/docker/overlay2/204265d4f482068252a9dd26de98e19f1d7144a5e90e34f2e8dbec60b5362af7/merged</span><br><span class="line">shm              64M     0   64M    0% /var/lib/docker/containers/a0ef8b7368e7157a1bb92292c43a724ea0894b63f0dc552aef7b7135bf9f1f1c/shm</span><br><span class="line">tmpfs           6.2G     0  6.2G    0% /run/user/1001</span><br><span class="line">overlay          80G   51G   30G   64% /var/lib/docker/overlay2/52453df85ac0f3d85612c2ca0a5dc1adaaafb420c6e02733d021fd0edb209c7b/merged</span><br><span class="line">shm              64M     0   64M    0% /var/lib/docker/containers/1508613045dbd0338782ee8bac21f830546e5847eb87f24c76172e326d201a6d/shm</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker容器磁盘占用情况</span></span><br><span class="line">[root@gago-viirs /]# docker system <span class="built_in">df</span></span><br><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              9                   2                   5.908 GB            5.575 GB (94%)</span><br><span class="line">Containers          2                   2                   257.6 kB            0 B (0%)</span><br><span class="line">Local Volumes       1                   1                   4.33 MB             0 B (0%)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看ionde号使用情况</span></span><br><span class="line">[root@gago-viirs /]# <span class="built_in">df</span> -hi</span><br><span class="line">文件系统         Inode  已用(I)  可用(I)  已用(I)%  挂载点</span><br><span class="line">devtmpfs        7.7M     381    7.7M       1% /dev</span><br><span class="line">tmpfs           7.7M       1    7.7M       1% /dev/shm</span><br><span class="line">tmpfs           7.7M     517    7.7M       1% /run</span><br><span class="line">tmpfs           7.7M      16    7.7M       1% /sys/fs/cgroup</span><br><span class="line">/dev/nvme0n1p1   40M    197K     40M       1% /</span><br><span class="line">overlay          40M    197K     40M       1% /var/lib/docker/overlay2/204265d4f482068252a9dd26de98e19f1d7144a5e90e34f2e8dbec60b5362af7/merged</span><br><span class="line">shm             7.7M       1    7.7M       1% /var/lib/docker/containers/a0ef8b7368e7157a1bb92292c43a724ea0894b63f0dc552aef7b7135bf9f1f1c/shm</span><br><span class="line">tmpfs           7.7M       1    7.7M       1% /run/user/1001</span><br><span class="line">overlay          40M    197K     40M       1% /var/lib/docker/overlay2/52453df85ac0f3d85612c2ca0a5dc1adaaafb420c6e02733d021fd0edb209c7b/merged</span><br><span class="line">shm             7.7M       1    7.7M       1% /var/lib/docker/containers/1508613045dbd0338782ee8bac21f830546e5847eb87f24c76172e326d201a6d/shm</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器进程</span></span><br><span class="line">[root@gago-viirs /]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                                       COMMAND                  CREATED             STATUS              PORTS                                                                                                                      NAMES</span><br><span class="line">1508613045db        harbor.gagogroup.cn/mill/gago-viirs:1.0.0   <span class="string">&quot;/bin/sh /opt/proj...&quot;</span>   3 hours ago         Up 3 hours                                                                                                                                     gago_viirs</span><br><span class="line">a0ef8b7368e7        rabbitmq:3-management                       <span class="string">&quot;docker-entrypoint...&quot;</span>   5 days ago          Up 15 hours         0.0.0.0:4369-&gt;4369/tcp, 0.0.0.0:5671-5672-&gt;5671-5672/tcp, 0.0.0.0:15671-15672-&gt;15671-15672/tcp, 0.0.0.0:25672-&gt;25672/tcp   weather_typhoon_rabbitmq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#大文件排查</span></span><br><span class="line">[root@gago-viirs /]# <span class="built_in">du</span> --max-depth=1 -h</span><br><span class="line">0./dev</span><br><span class="line">31M./etc</span><br><span class="line">0./local</span><br><span class="line"><span class="built_in">du</span>: 无法访问<span class="string">&quot;./proc/13486/task/13486/fd/3&quot;</span>: No such file or directory</span><br><span class="line"><span class="built_in">du</span>: 无法访问<span class="string">&quot;./proc/13486/task/13486/fdinfo/3&quot;</span>: No such file or directory</span><br><span class="line"><span class="built_in">du</span>: 无法访问<span class="string">&quot;./proc/13486/fd/4&quot;</span>: No such file or directory</span><br><span class="line"><span class="built_in">du</span>: 无法访问<span class="string">&quot;./proc/13486/fdinfo/4&quot;</span>: No such file or directory</span><br><span class="line">0./proc</span><br><span class="line">676K./run</span><br><span class="line">0./sys</span><br><span class="line">0./tmp</span><br><span class="line">9.3G./var</span><br><span class="line">1.1G./usr</span><br><span class="line">49M./boot</span><br><span class="line">52K./home</span><br><span class="line">0./media</span><br><span class="line">1.9G./mnt</span><br><span class="line">104K./opt</span><br><span class="line">12M./root</span><br><span class="line">0./srv</span><br><span class="line">0./data</span><br><span class="line">13G.</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>随后我又进入到容器里面进行了相应对排查，例如日志，挂载的目录，掩藏文件。皆无收获。但是只要删除gago_viirs容器，空间就得到释放。容器里的程序代码逻辑大致为，下载数据，本地计算，上传aws S3存储桶，本地数据删除。</p></blockquote><p><strong>根据我的深入排查分析，结合容器里跑的程序，排查到了根本原因，如下：</strong></p><blockquote><p>根本原因是：删除的文件仍被某进程打开占用而导致无法真正删除，需要重置相关的进程以释放文件句柄</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过lsof |grep -i delete即可查找到相关进程</span><br><span class="line"></span><br><span class="line"><span class="comment">#另外说明：</span></span><br><span class="line"><span class="built_in">df</span>工具是通过 空间总数-未分配空间=已分配空间 计算出占用空间大小</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配上`lsof |grep -i delete`的执行结果</span></span><br><span class="line">[root@gago-viirs /]# lsof |grep -i delete</span><br><span class="line">celery     3068                  root   40rR     REG              259,3  47775318   88108094 /mnt/resource/77b38840-5b06-49b2-838f-65c534a16fb6/CLDMSK_L2_VIIRS_SNPP.A2018153.0948.001.2019064090928.nc (deleted)</span><br><span class="line">celery     3068                  root   43rR     REG              259,3  56997285   54666830 /mnt/resource/1042adb6-f272-463f-909f-d17f46d4b653/CLDMSK_L2_VIIRS_SNPP.A2018153.0506.001.2019064090800.nc (deleted)</span><br><span class="line">celery     3068                  root   45rR     REG              259,3  53120956   16855884 /mnt/resource/4c7d1b8a-38c8-41d2-83b1-e34a6d741315/CLDMSK_L2_VIIRS_SNPP.A2018153.0324.001.2019064090716.nc (deleted)</span><br><span class="line">celery     3068                  root   46rR     REG              259,3  60397048   54666822 /mnt/resource/19589468-fcc2-4155-8f03-7fbd1d0a411d/CLDMSK_L2_VIIRS_SNPP.A2018153.0000.001.2019064090640.nc (deleted)</span><br><span class="line">celery     3068                  root   47rR     REG              259,3  60403873   83886246 /mnt/resource/87885ecf-6eab-472c-87fa-ecb357ff2193/CLDMSK_L2_VIIRS_SNPP.A2018153.0006.001.2019064090641.nc (deleted)</span><br><span class="line">celery     3068                  root   48rR     REG              259,3  59062322  109052006 /mnt/resource/fbc1f96d-4607-4e49-8676-be7dc98f88db/CLDMSK_L2_VIIRS_SNPP.A2018153.0012.001.2019064090652.nc (deleted)</span><br><span class="line">celery     3068                  root   49rR     REG              259,3  56189540   46149164 /mnt/resource/084e46c0-f3f6-46e2-9dfd-cc7828cc7aa5/CLDMSK_L2_VIIRS_SNPP.A2018153.1318.001.2019064090954.nc (deleted)</span><br><span class="line">celery     3068                  root   50rR     REG              259,3  62916003   37760102 /mnt/resource/404175e8-179e-455d-892d-1af4b05aa3db/CLDMSK_L2_VIIRS_SNPP.A2018153.0130.001.2019064090718.nc (deleted)</span><br><span class="line">celery     3068                  root   51rR     REG              259,3  60900233  142609224 /mnt/resource/d9b870f9-4505-466a-a691-7a986b0bef25/CLDMSK_L2_VIIRS_SNPP.A2018153.0118.001.2019064090714.nc (deleted)</span><br><span class="line">celery     3068                  root   52rR     REG              259,3  55852025    2419657 /mnt/resource/e7eef2e4-52a0-47cb-bf6d-3748d9ab3006/CLDMSK_L2_VIIRS_SNPP.A2018153.0124.001.2019064090715.nc (deleted)</span><br><span class="line">celery     3068                  root   53rR     REG              259,3  58317508   88225496 /mnt/resource/4649b40d-ff75-429b-9483-5d9c9738be6c/CLDMSK_L2_VIIRS_SNPP.A2018153.0136.001.2019064090717.nc (deleted)</span><br><span class="line">celery     3068                  root   54rR     REG              259,3  59929527  130135038 /mnt/resource/6b9f9d10-5eb3-4b29-8df6-e5f7ac466860/CLDMSK_L2_VIIRS_SNPP.A2018153.0142.001.2019064090710.nc (deleted)</span><br><span class="line">celery     3068                  root   55rR     REG              259,3  56194582  159383656 /mnt/resource/34f45694-b2a0-42a4-a720-62a28b8f7fe4/CLDMSK_L2_VIIRS_SNPP.A2018153.0148.001.2019064090708.nc (deleted)</span><br><span class="line">celery     3068                  root   56rR     REG              259,3  60258025   14155641 /mnt/resource/634250af-5cdf-4225-8a8d-797b5cce43cb/CLDMSK_L2_VIIRS_SNPP.A2018153.0154.001.2019064090706.nc (deleted)</span><br><span class="line">celery     3068                  root   57rR     REG              259,3  51452072   67163935 /mnt/resource/624ddd03-c08d-43c9-aa04-dd2b5bb2e080/CLDMSK_L2_VIIRS_SNPP.A2018153.0306.001.2019064090718.nc (deleted)</span><br><span class="line">celery     3068                  root   58rR     REG              259,3  56095178   29497041 /mnt/resource/add8ea9f-c8ff-4dce-9a8f-03f08d2da984/CLDMSK_L2_VIIRS_SNPP.A2018153.0300.001.2019064090726.nc (deleted)</span><br><span class="line">celery     3068                  root   59rR     REG              259,3  57665817   96565225 /mnt/resource/4d34cf0f-bd91-4ac2-8c65-0159914879e1/CLDMSK_L2_VIIRS_SNPP.A2018153.0312.001.2019064090729.nc (deleted)</span><br><span class="line">celery     3068                  root   60rR     REG              259,3  51691131   33589099 /mnt/resource/5fe70fa4-c9e3-44c4-8285-bc1ca44631fe/CLDMSK_L2_VIIRS_SNPP.A2018153.1312.001.2019064090932.nc (deleted)</span><br><span class="line">celery     3068                  root   61rR     REG              259,3  58331092  146805873 /mnt/resource/db617129-b3d7-4bb1-9c9a-31f77e8f3a21/CLDMSK_L2_VIIRS_SNPP.A2018153.0318.001.2019064090720.nc (deleted)</span><br><span class="line">celery     3068                  root   62rR     REG              259,3  53329206   92346925 /mnt/resource/8e66bcb8-bf94-4a7d-9d23-033f6fd677a2/CLDMSK_L2_VIIRS_SNPP.A2018153.0442.001.2019064090715.nc (deleted)</span><br><span class="line">celery     3068                  root   63rR     REG              259,3  56018984   46138411 /mnt/resource/924fe06c-496f-4161-a1e0-308d501eab5b/CLDMSK_L2_VIIRS_SNPP.A2018153.0330.001.2019064090730.nc (deleted)</span><br><span class="line"></span><br><span class="line">···以下省略若干···</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作随笔，问题排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 使用二进制部署 Kubernetes 1.13集群</title>
      <link href="/articles/2019/04/09/centos7erjinzhibushukubernetes1-13jiqun/"/>
      <url>/articles/2019/04/09/centos7erjinzhibushukubernetes1-13jiqun/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="CentOS-7-使用二进制部署-Kubernetes-1-13集群"><a href="#CentOS-7-使用二进制部署-Kubernetes-1-13集群" class="headerlink" title="CentOS 7 使用二进制部署 Kubernetes 1.13集群"></a>CentOS 7 使用二进制部署 Kubernetes 1.13集群</h1><h2 id="一，概述"><a href="#一，概述" class="headerlink" title="一，概述"></a>一，概述</h2><blockquote><p>Kubernetes是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。</p></blockquote><h3 id="1-1-架构图"><a href="#1-1-架构图" class="headerlink" title="1.1 架构图"></a>1.1 架构图</h3><p><strong>kubernetes架构图</strong></p><p><img src="/articles/2019/04/09/centos7erjinzhibushukubernetes1-13jiqun/1.png"></p><p><strong>Flannel网络架构图</strong></p><p><img src="/articles/2019/04/09/centos7erjinzhibushukubernetes1-13jiqun/2.png"></p><blockquote><ul><li>数据从源容器中发出后，经由所在主机的docker0虚拟网卡转发到flannel0虚拟网卡，这是个P2P的虚拟网卡，flanneld服务监听在网卡的另外一端。</li><li>Flannel通过Etcd服务维护了一张节点间的路由表，在稍后的配置部分我们会介绍其中的内容。</li><li>源主机的flanneld服务将原本的数据内容UDP封装后根据自己的路由表投递给目的节点的flanneld服务，数据到达以后被解包，然后直接进入目的节点的flannel0虚拟网卡，然后被转发到目的主机的docker0虚拟网卡，最后就像本机容器通信一下的有docker0路由到达目标容器。</li></ul></blockquote><h2 id="二，二进制部署kubernetes-1-13集群"><a href="#二，二进制部署kubernetes-1-13集群" class="headerlink" title="二，二进制部署kubernetes 1.13集群"></a>二，二进制部署kubernetes 1.13集群</h2><h3 id="2-1-安装环境准备"><a href="#2-1-安装环境准备" class="headerlink" title="2.1 安装环境准备"></a>2.1 安装环境准备</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>CPU</th><th>内存</th><th>描述</th></tr></thead><tbody><tr><td>k8s-master01</td><td>192.168.101.61</td><td>2核</td><td>4GB</td><td>k8s master节点</td></tr><tr><td>k8s-node01</td><td>192.168.101.62</td><td>2核</td><td>4GB</td><td>k8s node节点</td></tr><tr><td>k8s-node02</td><td>192.168.101.125</td><td>2核</td><td>4GB</td><td>k8s node节点</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化环境</span></span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-862.el7.x86_64</span><br><span class="line">[root@k8s-master01 ~]# setenforce 0</span><br><span class="line">setenforce: SELinux is disabled</span><br><span class="line">[root@k8s-master01 ~]# systemctl stop firewalld</span><br><span class="line">[root@k8s-master01 ~]# systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加hosts映射</span></span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.101.61 k8s-master01</span><br><span class="line">192.168.101.62 k8s-node01</span><br><span class="line">192.168.101.125 k8s-node02</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭swap缓存</span></span><br><span class="line">[root@k8s-master01 ~]# vim /etc/fstab</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">cat</span> /etc/fstab | grep swap</span><br><span class="line"><span class="comment">#UUID=40ab8144-1f1d-48ef-9a00-8ee7e0cfb2db swap                    swap    defaults        0 0</span></span><br><span class="line">[root@k8s-master01 ~]# swapoff -a</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">echo</span> <span class="string">&quot;swapoff -a&quot;</span> &gt;&gt; /etc/rc.d/rc.local</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-安装docker"><a href="#2-2-安装docker" class="headerlink" title="2.2 安装docker"></a>2.2 安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">adding repo from: https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">[root@k8s-master01 ~]# yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">已安装的软件包</span><br><span class="line">可安装的软件包</span><br><span class="line"> * updates: mirrors.huaweicloud.com</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * extras: mirror.jdcloud.com</span><br><span class="line">docker-ce.x86_64            3:18.09.4-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.3-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line"> * base: mirrors.huaweicloud.com</span><br><span class="line">[root@k8s-master01 ~]# yum -y install docker-ce     <span class="comment">#安装新版docker</span></span><br><span class="line">[root@k8s-master01 ~]# systemctl start docker</span><br><span class="line">[root@k8s-master01 ~]# systemctl <span class="built_in">enable</span> docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">[root@k8s-master01 ~]# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.4</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        d14af54266</span><br><span class="line"> Built:             Wed Mar 27 18:34:51 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.4</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       d14af54</span><br><span class="line">  Built:            Wed Mar 27 18:04:46 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="2-3-创建安装目录"><a href="#2-3-创建安装目录" class="headerlink" title="2.3 创建安装目录"></a>2.3 创建安装目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">mkdir</span> -p /k8s/etcd/&#123;bin,cfg,ssl&#125;</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">mkdir</span> -p /k8s/kubernetes/&#123;bin,cfg,ssl&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-安装及配置CFSSL"><a href="#2-4-安装及配置CFSSL" class="headerlink" title="2.4 安装及配置CFSSL"></a>2.4 安装及配置CFSSL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">[root@k8s-master01 ~]# wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">[root@k8s-master01 ~]# wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">chmod</span> +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">mv</span> cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">mv</span> cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">mv</span> cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</span><br></pre></td></tr></table></figure><h3 id="2-5-创建认证证书"><a href="#2-5-创建认证证书" class="headerlink" title="2.5 创建认证证书"></a>2.5 创建认证证书</h3><h4 id="2-5-1-创建-ETCD-CA-配置文件"><a href="#2-5-1-创建-ETCD-CA-配置文件" class="headerlink" title="2.5.1 创建 ETCD CA 配置文件"></a>2.5.1 创建 ETCD CA 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">cd</span> /k8s/</span><br><span class="line">[root@k8s-master01 k8s]# <span class="built_in">ls</span></span><br><span class="line">etcd  kubernetes</span><br><span class="line">[root@k8s-master01 k8s]# <span class="built_in">mkdir</span> etcd_ssl    <span class="comment">#证书的原json文件目录</span></span><br><span class="line">[root@k8s-master01 k8s]# <span class="built_in">cd</span> etcd_ssl/</span><br><span class="line">[root@k8s-master01 etcd_ssl]# <span class="built_in">cat</span> ca-config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;signing&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;expiry&quot;</span>: <span class="string">&quot;87600h&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="string">&quot;profiles&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;www&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;expiry&quot;</span>: <span class="string">&quot;87600h&quot;</span>,</span><br><span class="line">        <span class="string">&quot;usages&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;signing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;key encipherment&quot;</span>,</span><br><span class="line">            <span class="string">&quot;server auth&quot;</span>,</span><br><span class="line">            <span class="string">&quot;client auth&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-创建ETCD-CA-证书"><a href="#2-5-2-创建ETCD-CA-证书" class="headerlink" title="2.5.2 创建ETCD CA 证书"></a>2.5.2 创建ETCD CA 证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 etcd_ssl]# <span class="built_in">cat</span> ca-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;CN&quot;</span>: <span class="string">&quot;etcd CA&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;algo&quot;</span>: <span class="string">&quot;rsa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;C&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ST&quot;</span>: <span class="string">&quot;BeiJing&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-3-创建ETCD-server-证书"><a href="#2-5-3-创建ETCD-server-证书" class="headerlink" title="2.5.3 创建ETCD server 证书"></a>2.5.3 创建ETCD server 证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 etcd_ssl]# <span class="built_in">cat</span> server-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;CN&quot;</span>: <span class="string">&quot;etcd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hosts&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;192.168.101.61&quot;</span>,</span><br><span class="line">        <span class="string">&quot;192.168.101.62&quot;</span>,</span><br><span class="line">        <span class="string">&quot;192.168.101.125&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;algo&quot;</span>: <span class="string">&quot;rsa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;C&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ST&quot;</span>: <span class="string">&quot;BeiJing&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-4-生成ETCD-CA-证书和秘钥"><a href="#2-5-4-生成ETCD-CA-证书和秘钥" class="headerlink" title="2.5.4 生成ETCD CA 证书和秘钥"></a>2.5.4 生成ETCD CA 证书和秘钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 etcd_ssl]# cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class="line">2019/04/09 16:34:08 [INFO] generating a new CA key and certificate from CSR</span><br><span class="line">2019/04/09 16:34:08 [INFO] generate received request</span><br><span class="line">2019/04/09 16:34:08 [INFO] received CSR</span><br><span class="line">2019/04/09 16:34:08 [INFO] generating key: rsa-2048</span><br><span class="line">2019/04/09 16:34:08 [INFO] encoded CSR</span><br><span class="line">2019/04/09 16:34:08 [INFO] signed certificate with serial number 1858391312899192952195491720058889354936121860</span><br><span class="line">[root@k8s-master01 etcd_ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</span><br><span class="line">2019/04/09 16:34:21 [INFO] generate received request</span><br><span class="line">2019/04/09 16:34:21 [INFO] received CSR</span><br><span class="line">2019/04/09 16:34:21 [INFO] generating key: rsa-2048</span><br><span class="line">2019/04/09 16:34:21 [INFO] encoded CSR</span><br><span class="line">2019/04/09 16:34:21 [INFO] signed certificate with serial number 343223696251067460467278984517292985436327989284</span><br><span class="line">2019/04/09 16:34:21 [WARNING] This certificate lacks a <span class="string">&quot;hosts&quot;</span> field. This makes it unsuitable <span class="keyword">for</span></span><br><span class="line">websites. For more information see the Baseline Requirements <span class="keyword">for</span> the Issuance and Management</span><br><span class="line">of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);</span><br><span class="line">specifically, section 10.2.3 (<span class="string">&quot;Information Requirements&quot;</span>).</span><br></pre></td></tr></table></figure><h4 id="2-5-5-创建Kubernetes-CA-配置文件"><a href="#2-5-5-创建Kubernetes-CA-配置文件" class="headerlink" title="2.5.5 创建Kubernetes CA 配置文件"></a>2.5.5 创建Kubernetes CA 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">cd</span> /k8s/</span><br><span class="line">[root@k8s-master01 k8s]# <span class="built_in">ls</span></span><br><span class="line">etcd  etcd_ssl  kubernetes</span><br><span class="line">[root@k8s-master01 k8s]# <span class="built_in">mkdir</span> k8s_ssl</span><br><span class="line">[root@k8s-master01 k8s]# <span class="built_in">cd</span> k8s_ssl/</span><br><span class="line">[root@k8s-master01 k8s_ssl]# <span class="built_in">cat</span> ca-config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;signing&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;expiry&quot;</span>: <span class="string">&quot;87600h&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="string">&quot;profiles&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;kubernetes&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;expiry&quot;</span>: <span class="string">&quot;87600h&quot;</span>,</span><br><span class="line">        <span class="string">&quot;usages&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;signing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;key encipherment&quot;</span>,</span><br><span class="line">            <span class="string">&quot;server auth&quot;</span>,</span><br><span class="line">            <span class="string">&quot;client auth&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">字段说明：</span><br><span class="line">ca-config.json：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；</span><br><span class="line">signing：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA=TRUE；</span><br><span class="line">server auth：表示client可以用该 CA 对server提供的证书进行验证；</span><br><span class="line">client auth：表示server可以用该CA对client提供的证书进行验证；</span><br></pre></td></tr></table></figure><h4 id="2-5-6-创建Kubernetes-CA-证书"><a href="#2-5-6-创建Kubernetes-CA-证书" class="headerlink" title="2.5.6 创建Kubernetes CA 证书"></a>2.5.6 创建Kubernetes CA 证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 k8s_ssl]# <span class="built_in">cat</span> ca-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;CN&quot;</span>: <span class="string">&quot;kubernetes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;algo&quot;</span>: <span class="string">&quot;rsa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;C&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ST&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;O&quot;</span>: <span class="string">&quot;k8s&quot;</span>,</span><br><span class="line">            <span class="string">&quot;OU&quot;</span>: <span class="string">&quot;System&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">字段说明：</span><br><span class="line"><span class="string">&quot;CN&quot;</span>：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</span><br><span class="line"><span class="string">&quot;O&quot;</span>：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成kubernetes ca 证书</span></span><br><span class="line">[root@k8s-master01 k8s_ssl]# cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class="line">2019/04/09 17:49:09 [INFO] generating a new CA key and certificate from CSR</span><br><span class="line">2019/04/09 17:49:09 [INFO] generate received request</span><br><span class="line">2019/04/09 17:49:09 [INFO] received CSR</span><br><span class="line">2019/04/09 17:49:09 [INFO] generating key: rsa-2048</span><br><span class="line">2019/04/09 17:49:09 [INFO] encoded CSR</span><br><span class="line">2019/04/09 17:49:09 [INFO] signed certificate with serial number 555134987760584209046061419310967914967122746147</span><br></pre></td></tr></table></figure><h4 id="2-5-7-创建kubernetes（api-server）证书"><a href="#2-5-7-创建kubernetes（api-server）证书" class="headerlink" title="2.5.7 创建kubernetes（api server）证书"></a>2.5.7 创建kubernetes（api server）证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 k8s_ssl]# <span class="built_in">cat</span> kubernetes-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;CN&quot;</span>: <span class="string">&quot;kubernetes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hosts&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;192.168.101.61&quot;</span>,         <span class="comment">#多master要把所有对master ip都写入</span></span><br><span class="line">      <span class="string">&quot;10.254.0.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;kubernetes&quot;</span>,</span><br><span class="line">      <span class="string">&quot;kubernetes.default&quot;</span>,</span><br><span class="line">      <span class="string">&quot;kubernetes.default.svc&quot;</span>,</span><br><span class="line">      <span class="string">&quot;kubernetes.default.svc.cluster&quot;</span>,</span><br><span class="line">      <span class="string">&quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;algo&quot;</span>: <span class="string">&quot;rsa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;C&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ST&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;L&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">            <span class="string">&quot;O&quot;</span>: <span class="string">&quot;k8s&quot;</span>,</span><br><span class="line">            <span class="string">&quot;OU&quot;</span>: <span class="string">&quot;System&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">如果 hosts 字段不为空则需要指定授权使用该证书的 IP 或域名列表，由于该证书后续被 etcd 集群和 kubernetes master 集群使用，所以上面分别指定了 etcd 集群、kubernetes master 集群的主机 IP 和 kubernetes 服务的服务 IP（一般是 kube-apiserver 指定的 service-cluster-ip-range 网段的第一个IP，如 10.254.0.1）。</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成api证书</span></span><br><span class="line">[root@k8s-master01 k8s_ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</span><br><span class="line">2019/04/09 18:00:43 [INFO] generate received request</span><br><span class="line">2019/04/09 18:00:43 [INFO] received CSR</span><br><span class="line">2019/04/09 18:00:43 [INFO] generating key: rsa-2048</span><br><span class="line">2019/04/09 18:00:43 [INFO] encoded CSR</span><br><span class="line">2019/04/09 18:00:43 [INFO] signed certificate with serial number 457042607143982312188093687656561650451025479321</span><br><span class="line">2019/04/09 18:00:43 [WARNING] This certificate lacks a <span class="string">&quot;hosts&quot;</span> field. This makes it unsuitable <span class="keyword">for</span></span><br><span class="line">websites. For more information see the Baseline Requirements <span class="keyword">for</span> the Issuance and Management</span><br><span class="line">of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);</span><br><span class="line">specifically, section 10.2.3 (<span class="string">&quot;Information Requirements&quot;</span>).</span><br></pre></td></tr></table></figure><h4 id="2-5-8-创建kubernetes-proxy-证书"><a href="#2-5-8-创建kubernetes-proxy-证书" class="headerlink" title="2.5.8 创建kubernetes proxy 证书"></a>2.5.8 创建kubernetes proxy 证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 k8s_ssl]# <span class="built_in">cat</span> kube-proxy-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;CN&quot;</span>: <span class="string">&quot;system:kube-proxy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hosts&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;algo&quot;</span>: <span class="string">&quot;rsa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 2048</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="string">&quot;C&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ST&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;L&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">        <span class="string">&quot;O&quot;</span>: <span class="string">&quot;k8s&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OU&quot;</span>: <span class="string">&quot;System&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成proxy证书：</span></span><br><span class="line">[root@k8s-master01 k8s_ssl]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class="line">2019/04/10 10:01:01 [INFO] generate received request</span><br><span class="line">2019/04/10 10:01:01 [INFO] received CSR</span><br><span class="line">2019/04/10 10:01:01 [INFO] generating key: rsa-2048</span><br><span class="line">2019/04/10 10:01:01 [INFO] encoded CSR</span><br><span class="line">2019/04/10 10:01:01 [INFO] signed certificate with serial number 51986653818425940642544047698063489093161203532</span><br><span class="line">2019/04/10 10:01:01 [WARNING] This certificate lacks a <span class="string">&quot;hosts&quot;</span> field. This makes it unsuitable <span class="keyword">for</span></span><br><span class="line">websites. For more information see the Baseline Requirements <span class="keyword">for</span> the Issuance and Management</span><br><span class="line">of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);</span><br><span class="line">specifically, section 10.2.3 (<span class="string">&quot;Information Requirements&quot;</span>).</span><br></pre></td></tr></table></figure><h4 id="2-5-9-校验证书"><a href="#2-5-9-校验证书" class="headerlink" title="2.5.9 校验证书"></a>2.5.9 校验证书</h4><blockquote><p>共有两种方法，一种是用openssl命令，另一种是用cfssl-certinfo命令。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用openssl命令校验（以kubernetes证书为例：）</span></span><br><span class="line">[root@k8s-master01 k8s_ssl]# openssl x509  -noout -text -<span class="keyword">in</span>  kubernetes.pem</span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number:</span><br><span class="line">            50:0e:7f:d2:f5:04:b6:bd:a0:6d:9e:0d:16:61:ac:d1:41:ef:c6:99</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: C=CN, ST=BeiJing, L=BeiJing, O=k8s, OU=System, CN=kubernetes</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Apr  9 09:56:00 2019 GMT</span><br><span class="line">            Not After : Apr  6 09:56:00 2029 GMT</span><br><span class="line">        Subject: C=CN, ST=BeiJing, L=BeiJing, O=k8s, OU=System, CN=kubernetes</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (2048 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:cc:55:52:7d:19:66:58:86:97:6d:3a:0a:b7:7c:</span><br><span class="line">                    b3:a2:16:7c:f5:bf:e1:92:a0:a7:d2:7a:86:e9:6b:</span><br><span class="line">                    41:8a:22:c0:c7:a7:79:e6:ae:ef:3e:60:c9:64:4d:</span><br><span class="line">                    8e:10:67:3b:f1:3c:e3:39:8e:f4:5a:65:47:2d:85:</span><br><span class="line">                    fb:31:28:25:1f:bd:f9:5d:9a:81:1b:2b:3a:9b:33:</span><br><span class="line">                    60:9b:92:07:b7:f3:a7:f9:35:dc:2b:a0:8d:18:29:</span><br><span class="line">                    6c:52:e2:c6:d7:86:cf:c6:3d:fe:ab:6b:06:37:b3:</span><br><span class="line">                    37:0e:51:61:1e:16:2d:28:0f:ef:a0:a1:22:4c:b9:</span><br><span class="line">                    88:ec:c1:94:fd:30:4e:<span class="built_in">df</span>:4a:3e:f5:b7:bf:c0:72:</span><br><span class="line">                    bc:bf:69:d8:24:db:5e:d2:e4:d0:3d:a4:d3:94:04:</span><br><span class="line">                    35:ff:f4:8f:95:fd:23:1a:c3:06:0b:5e:73:b4:56:</span><br><span class="line">                    1b:8e:4c:9b:15:6a:21:ae:65:2d:f7:89:<span class="built_in">dd</span>:84:8d:</span><br><span class="line">                    7b:5b:d0:71:ca:b7:<span class="built_in">cd</span>:c0:cc:05:36:ce:93:3f:84:</span><br><span class="line">                    5f:f8:a2:1c:86:96:ae:96:0a:46:9c:1f:65:68:e5:</span><br><span class="line">                    70:cb:de:1c:36:45:70:8b:3c:9e:53:2c:12:c7:fd:</span><br><span class="line">                    e5:99:04:22:8f:16:a1:82:61:8f:89:db:86:3e:a8:</span><br><span class="line">                    66:b7:54:85:ab:4c:7d:78:c0:e7:78:c4:f5:69:a7:</span><br><span class="line">                    7c:ad</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Key Usage: critical</span><br><span class="line">                Digital Signature, Key Encipherment</span><br><span class="line">            X509v3 Extended Key Usage:</span><br><span class="line">                TLS Web Server Authentication, TLS Web Client Authentication</span><br><span class="line">            X509v3 Basic Constraints: critical</span><br><span class="line">                CA:FALSE</span><br><span class="line">            X509v3 Subject Key Identifier:</span><br><span class="line">                D0:52:1D:C3:61:26:65:43:92:55:9B:77:67:D3:F5:93:E4:BA:AC:0F</span><br><span class="line">            X509v3 Authority Key Identifier:</span><br><span class="line">                keyid:21:7A:58:CF:F4:BC:08:88:5D:DF:81:E5:0C:87:42:9C:EE:48:9F:3B</span><br><span class="line"></span><br><span class="line">            X509v3 Subject Alternative Name:</span><br><span class="line">                DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster, DNS:kubernetes.default.svc.cluster.local, IP Address:127.0.0.1, IP Address:192.168.101.61, IP Address:10.254.0.1</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         35:45:b5:af:3e:bd:5a:0d:cf:d2:<span class="built_in">df</span>:11:72:7a:86:19:b3:55:</span><br><span class="line">         30:b1:3f:35:a9:a2:5c:c1:f3:15:ec:b4:5c:27:25:c4:fd:fe:</span><br><span class="line">         3f:<span class="built_in">df</span>:f9:9f:29:<span class="built_in">df</span>:13:f6:87:07:73:11:73:1b:84:3c:71:69:</span><br><span class="line">         37:a0:7c:41:b6:c8:1a:0b:69:8a:da:b1:6e:cb:6c:da:32:49:</span><br><span class="line">         e6:9a:3b:c7:4b:4c:73:<span class="built_in">cd</span>:ce:57:20:ca:45:64:9d:46:e9:33:</span><br><span class="line">         11:7d:b1:e3:59:49:d8:4a:17:c2:08:76:ed:73:b9:12:b3:d1:</span><br><span class="line">         3b:67:31:1a:31:66:a9:3e:aa:8a:0c:fe:b1:01:c1:06:77:25:</span><br><span class="line">         e2:e0:8c:0f:be:23:9f:fe:70:21:e1:5b:b6:83:75:18:9c:72:</span><br><span class="line">         f0:f5:e9:<span class="built_in">fc</span>:20:78:7a:00:7f:ef:9b:8c:5b:85:c9:d6:9f:5f:</span><br><span class="line">         15:45:7c:8e:14:81:ba:ee:36:ac:4b:a3:8e:84:5d:6a:31:3b:</span><br><span class="line">         cb:94:0f:cb:1d:47:e2:69:9d:e4:b3:41:c4:86:31:8b:02:ac:</span><br><span class="line">         e4:a1:27:af:1b:eb:22:9a:17:c7:4b:96:2f:41:cb:69:87:63:</span><br><span class="line">         88:61:84:88:34:bf:1c:f7:65:3a:a6:0f:b4:53:<span class="built_in">dd</span>:<span class="built_in">df</span>:c5:f7:</span><br><span class="line">         19:c6:ee:81:20:8b:98:6c:4a:94:c0:10:6b:49:16:57:17:f4:</span><br><span class="line">         8c:60:d4:93</span><br><span class="line">         </span><br><span class="line">说明：</span><br><span class="line">确认 Issuer 字段的内容和 ca-csr.json 一致；</span><br><span class="line">确认 Subject 字段的内容和 kubernetes-csr.json 一致；</span><br><span class="line">确认 X509v3 Subject Alternative Name 字段的内容和 kubernetes-csr.json 一致；</span><br><span class="line">确认 X509v3 Key Usage、Extended Key Usage 字段的内容和 ca-config.json 中 kubernetes profile 一致；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用cfssl-certinfo命令校验：</span></span><br><span class="line">[root@k8s-master01 k8s_ssl]# cfssl-certinfo -cert kubernetes.pem</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;subject&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;common_name&quot;</span>: <span class="string">&quot;kubernetes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;country&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">    <span class="string">&quot;organization&quot;</span>: <span class="string">&quot;k8s&quot;</span>,</span><br><span class="line">    <span class="string">&quot;organizational_unit&quot;</span>: <span class="string">&quot;System&quot;</span>,</span><br><span class="line">    <span class="string">&quot;locality&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;province&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">      <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">      <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">      <span class="string">&quot;k8s&quot;</span>,</span><br><span class="line">      <span class="string">&quot;System&quot;</span>,</span><br><span class="line">      <span class="string">&quot;kubernetes&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;issuer&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;common_name&quot;</span>: <span class="string">&quot;kubernetes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;country&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">    <span class="string">&quot;organization&quot;</span>: <span class="string">&quot;k8s&quot;</span>,</span><br><span class="line">    <span class="string">&quot;organizational_unit&quot;</span>: <span class="string">&quot;System&quot;</span>,</span><br><span class="line">    <span class="string">&quot;locality&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;province&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;names&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">      <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">      <span class="string">&quot;BeiJing&quot;</span>,</span><br><span class="line">      <span class="string">&quot;k8s&quot;</span>,</span><br><span class="line">      <span class="string">&quot;System&quot;</span>,</span><br><span class="line">      <span class="string">&quot;kubernetes&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;serial_number&quot;</span>: <span class="string">&quot;457042607143982312188093687656561650451025479321&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sans&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;kubernetes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kubernetes.default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kubernetes.default.svc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kubernetes.default.svc.cluster&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kubernetes.default.svc.cluster.local&quot;</span>,</span><br><span class="line">    <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;192.168.101.61&quot;</span>,</span><br><span class="line">    <span class="string">&quot;10.254.0.1&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;not_before&quot;</span>: <span class="string">&quot;2019-04-09T09:56:00Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;not_after&quot;</span>: <span class="string">&quot;2029-04-06T09:56:00Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sigalg&quot;</span>: <span class="string">&quot;SHA256WithRSA&quot;</span>,</span><br><span class="line">  ···省略若干内容···</span><br></pre></td></tr></table></figure><h3 id="2-6-三台机器相互ssh-key免密钥"><a href="#2-6-三台机器相互ssh-key免密钥" class="headerlink" title="2.6 三台机器相互ssh-key免密钥"></a>2.6 三台机器相互ssh-key免密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:zzyyxu5/AOAJ4b1zQ+kN1lxjfwtLjtspdUG0Cx5eT70 root@k8s-master01</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|    ..      + .o |</span></span><br><span class="line"><span class="string">|   ....  + o o. o|</span></span><br><span class="line"><span class="string">|    .o.o= o  =.++|</span></span><br><span class="line"><span class="string">|      o=.o  * *o*|</span></span><br><span class="line"><span class="string">|      o S... * E.|</span></span><br><span class="line"><span class="string">|       o =. + o  |</span></span><br><span class="line"><span class="string">|       .. =+ o   |</span></span><br><span class="line"><span class="string">|        oo .o    |</span></span><br><span class="line"><span class="string">|       ++...     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">[root@k8s-master01 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.101.62</span></span><br><span class="line"><span class="string">[root@k8s-master01 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.101.125</span></span><br></pre></td></tr></table></figure><h2 id="三，部署ETCD集群"><a href="#三，部署ETCD集群" class="headerlink" title="三，部署ETCD集群"></a>三，部署ETCD集群</h2><h3 id="3-1-解压安装文件"><a href="#3-1-解压安装文件" class="headerlink" title="3.1 解压安装文件"></a>3.1 解压安装文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# wget https://github.com/etcd-io/etcd/releases/download/v3.1.10/etcd-v3.1.10-linux-amd64.tar.gz       <span class="comment">#没有安装包需先下载</span></span><br><span class="line">[root@k8s-master01 ~]# tar xf etcd-v3.3.10-linux-amd64.tar.gz -C /usr/src/</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">cd</span> /usr/src/etcd-v3.3.10-linux-amd64/</span><br><span class="line">[root@k8s-master01 etcd-v3.3.10-linux-amd64]# <span class="built_in">ls</span></span><br><span class="line">Documentation  etcd  etcdctl  README-etcdctl.md  README.md  READMEv2-etcdctl.md</span><br><span class="line">[root@k8s-master01 etcd-v3.3.10-linux-amd64]# <span class="built_in">cp</span> etcd etcdctl /k8s/etcd/bin/</span><br><span class="line">[root@k8s-master01 etcd-v3.3.10-linux-amd64]# <span class="built_in">ls</span> /k8s/etcd/bin/</span><br><span class="line">etcd  etcdctl</span><br></pre></td></tr></table></figure><h3 id="3-2-创建-etcd-的-systemd-unit-文件"><a href="#3-2-创建-etcd-的-systemd-unit-文件" class="headerlink" title="3.2 创建 etcd 的 systemd unit 文件"></a>3.2 创建 etcd 的 systemd unit 文件</h3><blockquote><p>在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;目录下创建文件etcd.service，内容如下。注意替换IP地址为你自己的etcd集群的主机IP。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">mkdir</span> /var/lib/etcd          <span class="comment">#创建目录</span></span><br><span class="line">[root@k8s-master01 etcd-v3.3.10-linux-amd64]# <span class="built_in">cd</span> /usr/lib/systemd/system/</span><br><span class="line">[root@k8s-master01 system]# vim etcd.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/     <span class="comment">#切记，此目录需要手动创建，三台都创建</span></span><br><span class="line">EnvironmentFile=/k8s/etcd/cfg/etcd.conf</span><br><span class="line">ExecStart=/k8s/etcd/bin/etcd \</span><br><span class="line">  --name <span class="variable">$&#123;ETCD_NAME&#125;</span> \</span><br><span class="line">  --cert-file=/k8s/etcd/ssl/server.pem \</span><br><span class="line">  --key-file=/k8s/etcd/ssl/server-key.pem \</span><br><span class="line">  --peer-cert-file=/k8s/etcd/ssl/server.pem \</span><br><span class="line">  --peer-key-file=/k8s/etcd/ssl/server-key.pem \</span><br><span class="line">  --trusted-ca-file=/k8s/etcd/ssl/ca.pem \</span><br><span class="line">  --peer-trusted-ca-file=/k8s/etcd/ssl/ca.pem \</span><br><span class="line">  --initial-advertise-peer-urls <span class="variable">$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125;</span> \</span><br><span class="line">  --listen-peer-urls <span class="variable">$&#123;ETCD_LISTEN_PEER_URLS&#125;</span> \</span><br><span class="line">  --listen-client-urls <span class="variable">$&#123;ETCD_LISTEN_CLIENT_URLS&#125;</span>,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls <span class="variable">$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125;</span> \</span><br><span class="line">  --initial-cluster-token <span class="variable">$&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125;</span> \</span><br><span class="line">  --initial-cluster etcd01=https://192.168.101.61:2380,etcd02=https://192.168.101.62:2380,etcd03=https://192.168.101.125:2380 \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --data-dir=<span class="variable">$&#123;ETCD_DATA_DIR&#125;</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">指定 etcd 的工作目录为 /var/lib/etcd，数据目录为 /var/lib/etcd，需在启动服务前创建这个目录，否则启动服务的时候会报错“Failed at step CHDIR spawning /usr/bin/etcd: No such file or directory”；</span><br><span class="line"></span><br><span class="line">为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和 CA 证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）；</span><br><span class="line"></span><br><span class="line">创建 kubernetes.pem 证书时使用的 kubernetes-csr.json 文件的 hosts 字段包含所有 etcd 节点的IP，否则证书校验会出错；</span><br><span class="line"></span><br><span class="line">--initial-cluster-state值为new时，--name的参数值必须位于--initial-cluster 列表中；</span><br><span class="line"></span><br><span class="line">RestartSec=5  服务重启等待五秒</span><br></pre></td></tr></table></figure><h3 id="3-3-创建etcd的环境变量配置文件"><a href="#3-3-创建etcd的环境变量配置文件" class="headerlink" title="3.3 创建etcd的环境变量配置文件"></a>3.3 创建etcd的环境变量配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 system]# <span class="built_in">cd</span> /k8s/etcd/cfg/</span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=<span class="string">&quot;etcd01&quot;</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">&quot;/var/lib/etcd&quot;</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">&quot;https://192.168.101.61:2380&quot;</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">&quot;https://192.168.101.61:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">&quot;https://192.168.101.61:2380&quot;</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">&quot;etcd-cluster&quot;</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">&quot;https://192.168.101.61:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">这是192.168.101.61节点的配置，其他两个etcd节点只要将上面的IP地址改成相应节点的IP地址即可。ETCD_NAME换成对应节点的etcd01/02/03。</span><br></pre></td></tr></table></figure><h3 id="3-4-拷贝证书文件"><a href="#3-4-拷贝证书文件" class="headerlink" title="3.4 拷贝证书文件"></a>3.4 拷贝证书文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">cd</span>  /k8s/</span><br><span class="line">[root@k8s-master01 k8s]# <span class="built_in">ls</span></span><br><span class="line">etcd  etcd_ssl  k8s_ssl  kubernetes</span><br><span class="line">[root@k8s-master01 k8s]# <span class="built_in">cd</span> etcd_ssl/</span><br><span class="line">[root@k8s-master01 etcd_ssl]# <span class="built_in">ls</span></span><br><span class="line">ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem  server.csr  server-csr.json  server-key.pem  server.pem</span><br><span class="line">[root@k8s-master01 etcd_ssl]# <span class="built_in">cp</span> *.pem /k8s/etcd/ssl/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-5-将启动文件、配置文件拷贝到节点62、节点125"><a href="#3-5-将启动文件、配置文件拷贝到节点62、节点125" class="headerlink" title="3.5 将启动文件、配置文件拷贝到节点62、节点125"></a>3.5 将启动文件、配置文件拷贝到节点62、节点125</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node01 ~]# <span class="built_in">mkdir</span> /k8s         <span class="comment">#62机器</span></span><br><span class="line">[root@k8s-node02 ~]# <span class="built_in">mkdir</span> /k8s         <span class="comment">#125机器</span></span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">cd</span> /k8s/</span><br><span class="line">[root@k8s-master01 k8s]# scp -r etcd 192.168.101.62:/k8s/</span><br><span class="line">etcd                                                                                                                                                                      100%   18MB 136.1MB/s   00:00</span><br><span class="line">etcdctl                                                                                                                                                                   100%   15MB 130.7MB/s   00:00</span><br><span class="line">etcd.conf                                                                                                                                                                 100%  340   589.1KB/s   00:00</span><br><span class="line">ca-key.pem                                                                                                                                                                100% 1675     2.8MB/s   00:00</span><br><span class="line">ca.pem                                                                                                                                                                    100% 1265     2.8MB/s   00:00</span><br><span class="line">server-key.pem                                                                                                                                                            100% 1675     3.3MB/s   00:00</span><br><span class="line">server.pem                                                                                                                                                                100% 1338     2.9MB/s   00:00</span><br><span class="line">[root@k8s-master01 k8s]# scp -r etcd 192.168.101.125:/k8s/</span><br><span class="line">etcd                                                                                                                                                                      100%   18MB 140.2MB/s   00:00</span><br><span class="line">etcdctl                                                                                                                                                                   100%   15MB 138.0MB/s   00:00</span><br><span class="line">etcd.conf                                                                                                                                                                 100%  340     1.0MB/s   00:00</span><br><span class="line">ca-key.pem                                                                                                                                                                100% 1675     5.2MB/s   00:00</span><br><span class="line">ca.pem                                                                                                                                                                    100% 1265     4.1MB/s   00:00</span><br><span class="line">server-key.pem                                                                                                                                                            100% 1675     5.5MB/s   00:00</span><br><span class="line">server.pem                                                                                                                                                                100% 1338     4.4MB/s   00:00</span><br><span class="line">[root@k8s-master01 k8s]# scp /usr/lib/systemd/system/etcd.service 192.168.101.62:/usr/lib/systemd/system/etcd.service</span><br><span class="line">etcd.service                                                                                                                                                              100% 1115     2.8MB/s   00:00</span><br><span class="line">[root@k8s-master01 k8s]# scp /usr/lib/systemd/system/etcd.service 192.168.101.125:/usr/lib/systemd/system/etcd.service</span><br><span class="line">etcd.service                                                                                                                                                              100% 1115     1.5MB/s   00:00</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#62机器操作：</span></span><br><span class="line">[root@k8s-node01 ~]# vim /k8s/etcd/cfg/etcd.conf</span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=<span class="string">&quot;etcd02&quot;</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">&quot;/var/lib/etcd&quot;</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">&quot;https://192.168.101.62:2380&quot;</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">&quot;https://192.168.101.62:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">&quot;https://192.168.101.62:2380&quot;</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">&quot;etcd-cluster&quot;</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">&quot;https://192.168.101.62:2379&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#125机器操作：</span></span><br><span class="line">[root@k8s-node02 ~]# vim /k8s/etcd/cfg/etcd.conf</span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=<span class="string">&quot;etcd03&quot;</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">&quot;/var/lib/etcd&quot;</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">&quot;https://192.168.101.125:2380&quot;</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">&quot;https://192.168.101.125:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">&quot;https://192.168.101.125:2380&quot;</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">&quot;etcd-cluster&quot;</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">&quot;https://192.168.101.125:2379&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-启动ETCD集群"><a href="#3-6-启动ETCD集群" class="headerlink" title="3.6 启动ETCD集群"></a>3.6 启动ETCD集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三台都启动ETCD服务</span></span><br><span class="line">[root@k8s-master01 etcd_ssl]# systemctl daemon-reload</span><br><span class="line">[root@k8s-master01 etcd_ssl]# systemctl <span class="built_in">enable</span> etcd</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/etcd.service to /usr/lib/systemd/system/etcd.service.</span><br><span class="line">[root@k8s-master01 etcd_ssl]# systemctl start etcd</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证集群是否正常运行</span></span><br><span class="line">[root@k8s-master01 ~]# /k8s/etcd/bin/etcdctl --ca-file=/k8s/etcd/ssl/ca.pem --cert-file=/k8s/etcd/ssl/server.pem --key-file=/k8s/etcd/ssl/server-key.pem --endpoints=<span class="string">&quot;https://192.168.101.61:2379,https://192.169.101.62:2379,https://192.168.101.125:2379&quot;</span> cluster-health</span><br><span class="line">member 7773640f74d528b1 is healthy: got healthy result from https://192.168.101.61:2379</span><br><span class="line">member 876df443efa52353 is healthy: got healthy result from https://192.168.101.62:2379</span><br><span class="line">member f859f1a325e5abf6 is healthy: got healthy result from https://192.168.101.125:2379</span><br><span class="line">cluster is healthy</span><br></pre></td></tr></table></figure><p><strong>附录：防火墙设置方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#iptables防火墙：</span></span><br><span class="line">[root@k8s-master01 ~]# iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 2379 -j ACCEPT</span><br><span class="line">[root@k8s-master01 ~]# iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 2380 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#firewalld防火墙：</span></span><br><span class="line">firewall-cmd --zone=public --add-port=2380/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=2379/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="四，部署-Flannel-网络"><a href="#四，部署-Flannel-网络" class="headerlink" title="四，部署 Flannel 网络"></a>四，部署 Flannel 网络</h2><h3 id="4-1-向-ETCD-写入集群-Pod-信息"><a href="#4-1-向-ETCD-写入集群-Pod-信息" class="headerlink" title="4.1 向 ETCD 写入集群 Pod 信息"></a>4.1 向 ETCD 写入集群 Pod 信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">cd</span> /k8s/etcd/ssl/</span><br><span class="line">[root@k8s-master01 ssl]# /k8s/etcd/bin/etcdctl --ca-file=ca.pem --cert-file=server.pem --key-file=server-key.pem --endpoints=<span class="string">&quot;https://192.168.101.61:2379,https://192.168.101:2379.62,https://192.168.101.125:2379&quot;</span> <span class="built_in">mkdir</span> /kube-centos/network</span><br><span class="line">[root@k8s-master01 ssl]# /k8s/etcd/bin/etcdctl --ca-file=ca.pem --cert-file=server.pem --key-file=server-key.pem --endpoints=<span class="string">&quot;https://192.168.101.61:2379,https://192.168.101:2379.62,https://192.168.101.125:2379&quot;</span> mk /kube-centos/network/config <span class="string">&#x27;&#123; &quot;Network&quot;: &quot;172.30.0.0/16&quot;, &quot;Backend&quot;: &#123; &quot;Type&quot;: &quot;vxlan&quot; &#125; &#125;&#x27;</span></span><br><span class="line">&#123; <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;172.30.0.0/16&quot;</span>, <span class="string">&quot;Backend&quot;</span>: &#123; <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">flanneld 当前版本 (v0.10.0) 不支持 etcd v3，故使用 etcd v2 API 写入配置 key 和网段数据；</span><br><span class="line"></span><br><span class="line">写入的 Pod 网段 <span class="variable">$&#123;CLUSTER_CIDR&#125;</span> 必须是 /16 段地址，必须与 kube-controller-manager 的 –cluster-cidr 参数值一致；</span><br><span class="line"></span><br><span class="line">如果你要使用host-gw模式，可以直接将vxlan改成host-gw即可。</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看网络是否写进ETCD集群</span></span><br><span class="line">[root@k8s-master01 ~]# /k8s/etcd/bin/etcdctl --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">   --ca-file=/k8s/etcd/ssl/ca.pem \</span><br><span class="line">   --cert-file=/k8s/etcd/ssl/server.pem \</span><br><span class="line">   --key-file=/k8s/etcd/ssl/server-key.pem \</span><br><span class="line">   get /kube-centos/network/config</span><br><span class="line">&#123; <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;172.30.0.0/16&quot;</span>, <span class="string">&quot;Backend&quot;</span>: &#123; <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span> &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-解压安装Flannel"><a href="#4-2-解压安装Flannel" class="headerlink" title="4.2 解压安装Flannel"></a>4.2 解压安装Flannel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# wget https://github.com/coreos/flannel/releases/download/v0.10.0/flannel-v0.10.0-linux-amd64.tar.gz</span><br><span class="line">[root@k8s-master01 ~]# tar xf flannel-v0.10.0-linux-amd64.tar.gz -C /usr/src/</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">mv</span> /usr/src/&#123;flanneld,mk-docker-opts.sh&#125; /k8s/kubernetes/bin/</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">ls</span> /k8s/kubernetes/bin/</span><br><span class="line">flanneld  mk-docker-opts.sh</span><br></pre></td></tr></table></figure><h3 id="4-3-配置Flannel"><a href="#4-3-配置Flannel" class="headerlink" title="4.3 配置Flannel"></a>4.3 配置Flannel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># etcd url location.  Point this to the server where etcd runs</span></span><br><span class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">&quot;https://192.168.101.61:2379,https://192.168.101.62:2379,https://192.168.101.125:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd config key.  This is the configuration key that flannel queries</span></span><br><span class="line"><span class="comment"># # For address range assignment</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">&quot;/kube-centos/network&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Any additional options that you want to pass</span></span><br><span class="line">FLANNEL_OPTIONS=<span class="string">&quot;-etcd-cafile=/k8s/etcd/ssl/ca.pem -etcd-certfile=/k8s/etcd/ssl/server.pem -etcd-keyfile=/k8s/etcd/ssl/server-key.pem&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-创建Flannel的systemd-unit文件"><a href="#4-4-创建Flannel的systemd-unit文件" class="headerlink" title="4.4 创建Flannel的systemd unit文件"></a>4.4 创建Flannel的systemd unit文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# vim /usr/lib/systemd/system/flanneld.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network-online.target network.target</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker-network</span><br><span class="line">EnvironmentFile=/k8s/kubernetes/cfg/flanneld</span><br><span class="line">ExecStart=/k8s/kubernetes/bin/flanneld -etcd-endpoints=<span class="variable">$&#123;FLANNEL_ETCD_ENDPOINTS&#125;</span> -etcd-prefix=<span class="variable">$&#123;FLANNEL_ETCD_PREFIX&#125;</span> <span class="variable">$FLANNEL_OPTIONS</span></span><br><span class="line">ExecStartPost=/k8s/kubernetes/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong></p></blockquote><ul><li>mk-docker-opts.sh 脚本将分配给 flanneld 的 Pod 子网网段信息写入 &#x2F;run&#x2F;flannel&#x2F;docker 文件，后续 docker 启动时 使用这个文件中的环境变量配置 docker0 网桥；</li><li>flanneld 使用系统缺省路由所在的接口与其它节点通信，对于有多个网络接口（如内网和公网）的节点，可以用 -iface 参数指定通信接口，如上面的 eth0 接口;</li><li>flanneld 运行时需要 root 权限；</li></ul><h3 id="4-5-配置docker启动，自定义子网网段"><a href="#4-5-配置docker启动，自定义子网网段" class="headerlink" title="4.5 配置docker启动，自定义子网网段"></a>4.5 配置docker启动，自定义子网网段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">cat</span> /usr/lib/systemd/system/docker.service | egrep <span class="string">&quot;ExecStart|Env&quot;</span></span><br><span class="line">EnvironmentFile=/run/flannel/docker</span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span></span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line"></span><br><span class="line">注释掉默认行，添加两行新内容</span><br></pre></td></tr></table></figure><h3 id="4-6-将flanneld-systemd-unit-文件到所有节点"><a href="#4-6-将flanneld-systemd-unit-文件到所有节点" class="headerlink" title="4.6 将flanneld systemd unit 文件到所有节点"></a>4.6 将flanneld systemd unit 文件到所有节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# scp -r /k8s/kubernetes 192.168.101.62:/k8s/</span><br><span class="line">flanneld                                                                                                                                                                  100%   35MB 121.7MB/s   00:00</span><br><span class="line">mk-docker-opts.sh                                                                                                                                                         100% 2139     3.5MB/s   00:00</span><br><span class="line">flanneld                                                                                                                                                                  100%  356   733.3KB/s   00:00</span><br><span class="line">[root@k8s-master01 ~]# scp -r /k8s/kubernetes 192.168.101.125:/k8s/</span><br><span class="line">flanneld                                                                                                                                                                  100%   35MB 135.2MB/s   00:00</span><br><span class="line">mk-docker-opts.sh                                                                                                                                                         100% 2139     4.6MB/s   00:00</span><br><span class="line">flanneld                                                                                                                                                                  100%  356   817.7KB/s   00:00</span><br><span class="line">[root@k8s-master01 ~]# scp /usr/lib/systemd/system/docker.service 192.168.101.62:/usr/lib/systemd/system/docker.service</span><br><span class="line">docker.service                                                                                                                                                            100% 1736     3.4MB/s   00:00</span><br><span class="line">[root@k8s-master01 ~]# scp /usr/lib/systemd/system/docker.service 192.168.101.125:/usr/lib/systemd/system/docker.service</span><br><span class="line">docker.service                                                                                                                                                            100% 1736     3.2MB/s   00:00</span><br><span class="line">[root@k8s-master01 ~]# scp /usr/lib/systemd/system/flanneld.service 192.168.101.62:/usr/lib/systemd/system/flanneld.service</span><br><span class="line">flanneld.service                                                                                                                                                          100%  458   867.0KB/s   00:00</span><br><span class="line">[root@k8s-master01 ~]# scp /usr/lib/systemd/system/flanneld.service 192.168.101.125:/usr/lib/systemd/system/flanneld.service</span><br><span class="line">flanneld.service                                                                                                                                                          100%  458     1.1MB/s   00:00</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务（所有机器）</span></span><br><span class="line">[root@k8s-master01 ~]# systemctl daemon-reload</span><br><span class="line">[root@k8s-master01 ~]# systemctl start flanneld</span><br><span class="line">[root@k8s-master01 ~]# systemctl <span class="built_in">enable</span> flanneld</span><br><span class="line">[root@k8s-master01 ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否生效</span></span><br><span class="line">[root@k8s-master01 ssl]# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:50:56:a6:c6:5d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.101.61/23 brd 192.168.101.255 scope global dynamic ens192</span><br><span class="line">       valid_lft 6722sec preferred_lft 6722sec</span><br><span class="line">    inet6 fe80::250:56ff:fea6:c65d/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:45:fb:1e:bf brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.30.18.1/24 brd 172.30.18.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 6e:40:51:7e:f3:01 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.30.18.0/32 scope global flannel.1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::6c40:51ff:fe7e:f301/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h2 id="五，部署master节点"><a href="#五，部署master节点" class="headerlink" title="五，部署master节点"></a>五，部署master节点</h2><blockquote><p>kubernetes master 节点运行如下组件：</p><ul><li>kube-apiserver</li><li>kube-scheduler</li><li>kube-controller-manager<br>kube-scheduler 和 kube-controller-manager 可以以集群模式运行，通过 leader 选举产生一个工作进程，其它进程处于阻塞模式。</li></ul></blockquote><h3 id="5-1-将二进制文件解压拷贝到master节点"><a href="#5-1-将二进制文件解压拷贝到master节点" class="headerlink" title="5.1 将二进制文件解压拷贝到master节点"></a>5.1 将二进制文件解压拷贝到master节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# wget https://dl.k8s.io/v1.13.0/kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">[root@k8s-master01 ~]# tar xf kubernetes-server-linux-amd64.tar.gz -C /usr/src</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">cd</span> /usr/src/kubernetes/</span><br><span class="line">[root@k8s-master01 kubernetes]# <span class="built_in">cp</span> server/bin/&#123;kube-apiserver,kube-controller-manager,kube-scheduler,kubectl,kube-proxy,kubelet&#125; /k8s/kubernetes/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝证书文件</span></span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">cd</span> /k8s/k8s_ssl/</span><br><span class="line">[root@k8s-master01 k8s_ssl]# <span class="built_in">cp</span> *pem /k8s/kubernetes/ssl/</span><br></pre></td></tr></table></figure><h3 id="5-2-部署kube-apiserver组件"><a href="#5-2-部署kube-apiserver组件" class="headerlink" title="5.2 部署kube-apiserver组件"></a>5.2 部署kube-apiserver组件</h3><h4 id="5-2-1-创建TLS-Bootstrapping-Token"><a href="#5-2-1-创建TLS-Bootstrapping-Token" class="headerlink" title="5.2.1 创建TLS Bootstrapping Token"></a>5.2.1 创建TLS Bootstrapping Token</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">head</span> -c 16 /dev/urandom | <span class="built_in">od</span> -An -t x | <span class="built_in">tr</span> -d <span class="string">&#x27; &#x27;</span></span><br><span class="line">ae4d97f8d4a89cae9fedd4e5f8cf45a1</span><br><span class="line">[root@k8s-master01 ~]# vim /k8s/kubernetes/cfg/token.csv</span><br><span class="line">ae4d97f8d4a89cae9fedd4e5f8cf45a1,kubelet-bootstrap,10001,<span class="string">&quot;system:kubelet-bootstrap&quot;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-创建apiserver配置文件"><a href="#5-2-2-创建apiserver配置文件" class="headerlink" title="5.2.2 创建apiserver配置文件"></a>5.2.2 创建apiserver配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# vim /k8s/kubernetes/cfg/kube-apiserver</span><br><span class="line">KUBE_APISERVER_OPTS=<span class="string">&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--etcd-servers=https://192.168.101.61:2379,https://192.168.101.62:2379,https://192.168.101.125:2379 \</span></span><br><span class="line"><span class="string">--bind-address=192.168.101.61 \</span></span><br><span class="line"><span class="string">--secure-port=6443 \</span></span><br><span class="line"><span class="string">--advertise-address=192.168.101.61 \</span></span><br><span class="line"><span class="string">--allow-privileged=true \</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.0.0.0/24 \</span></span><br><span class="line"><span class="string">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction \</span></span><br><span class="line"><span class="string">--authorization-mode=RBAC \</span></span><br><span class="line"><span class="string">--enable-bootstrap-token-auth \</span></span><br><span class="line"><span class="string">--token-auth-file=/k8s/kubernetes/cfg/token.csv \</span></span><br><span class="line"><span class="string">--service-node-port-range=30000-50000 \</span></span><br><span class="line"><span class="string">--tls-cert-file=/k8s/kubernetes/ssl/kubernetes.pem  \</span></span><br><span class="line"><span class="string">--tls-private-key-file=/k8s/kubernetes/ssl/kubernetes-key.pem \</span></span><br><span class="line"><span class="string">--client-ca-file=/k8s/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--service-account-key-file=/k8s/kubernetes/ssl/ca-key.pem \</span></span><br><span class="line"><span class="string">--etcd-cafile=/k8s/etcd/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--etcd-certfile=/k8s/etcd/ssl/server.pem \</span></span><br><span class="line"><span class="string">--etcd-keyfile=/k8s/etcd/ssl/server-key.pem&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数说明：</span></span><br><span class="line">--logtostderr：记录标准错误而不是文件。默认为 ture</span><br><span class="line">--v：日志级别详细程度的编号。</span><br><span class="line">--etcd-servers：要连接的etcd服务器列表(scheme://ip:port)，逗号分隔。</span><br><span class="line">--bind-address：要监听--secure-port端口的IP地址。关联的接口必须可由群集的其余部分以及CLI / Web客户端访问。如果为空，将使用所有接口（所有IPv4接口均为0.0.0.0，所有IPv6接口为::）。</span><br><span class="line">--secure-port：通过身份验证和授权为HTTPS提供服务的端口。无法使用0关闭。默认6443</span><br><span class="line">--advertise-address：用于群集成员访问apiserver的IP地址。该地址必须可由群集的其余部分访问。如果为空，则使用--bind-address。如果未指定--bind-address，将使用主机的默认接口。</span><br><span class="line">--allow-privileged：如果为<span class="literal">true</span>，则允许容器获取特权权限。[默认= FALSE]</span><br><span class="line">--service-cluster-ip-range：CIDR标记的IP范围，从中分配IP给服务集群。该范围不能与分配给Pod节点的任何IP范围重叠。</span><br><span class="line">--enable-admission-plugins：除了默认启用的插件之外还应启用的插件插件。</span><br><span class="line">--authorization-mode：在安全端口上执行授权的有序插件列表。以逗号分隔的列表：AlwaysAllow，AlwaysDeny，ABAC，Webhook，RBAC，Node。默认值：AlwaysAllow（授权访问类型。RBAC：基于角色的访问控制）</span><br><span class="line">--enable-bootstrap-token-auth：允许在<span class="string">&#x27;kube-system&#x27;</span>命名空间中允许类型为<span class="string">&#x27;bootstrap.kubernetes.io/token&#x27;</span>的机密用于TLS引导认证。</span><br><span class="line">--token-auth-file：如果设置，将用于通过令牌身份验证保护API服务器的安全端口的文件。（指定token文件路径）</span><br><span class="line">--service-node-port-range：为NodePort可见性的服务保留的端口范围。示例：<span class="string">&#x27;30000-50000&#x27;</span>。包括在范围的两端。</span><br><span class="line">--tls-cert-file：包含HTTPS的默认x509证书的文件。（CA证书，如果有的话，在服务器证书之后连接）。如果启用了HTTPS服务，并且未提供--tls-cert-file和--tls-private-key-file，则会为公共地址生成自签名证书和密钥，并将其保存到指定的目录中 --cert-dir。</span><br><span class="line">--tls-private-key-file：包含与--tls-cert-file匹配的默认x509私钥的文件。</span><br><span class="line">--client-ca-file：指定k8s集群CA证书路径。</span><br><span class="line">--service-account-key-file：指定k8s集群CA-key证书路径。</span><br></pre></td></tr></table></figure><h4 id="5-2-3-创建kube-apiserver-systemd-unit文件"><a href="#5-2-3-创建kube-apiserver-systemd-unit文件" class="headerlink" title="5.2.3 创建kube-apiserver systemd unit文件"></a>5.2.3 创建kube-apiserver systemd unit文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# vim /usr/lib/systemd/system/kube-apiserver.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/k8s/kubernetes/cfg/kube-apiserver</span><br><span class="line">ExecStart=/k8s/kubernetes/bin/kube-apiserver <span class="variable">$KUBE_APISERVER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="5-2-4-启动apiserver服务"><a href="#5-2-4-启动apiserver服务" class="headerlink" title="5.2.4 启动apiserver服务"></a>5.2.4 启动apiserver服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# systemctl daemon-reload</span><br><span class="line">[root@k8s-master01 ~]# systemctl <span class="built_in">enable</span> kube-apiserver</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kube-apiserver.service to /usr/lib/systemd/system/kube-apiserver.service.</span><br><span class="line">[root@k8s-master01 ~]# systemctl restart kube-apiserver</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看apiserver服务是否运行</span></span><br><span class="line">[root@k8s-master01 cfg]# ps -ef | grep kube-apiserver</span><br><span class="line">root     10051     1 99 14:28 ?        00:00:06 /k8s/kubernetes/bin/kube-apiserver --logtostderr=<span class="literal">true</span> --v=4 --etcd-servers=https://192.168.101.61:2379,https://192.168.101.62:2379,https://192.168.101.125:2379 --bind-address=192.168.101.61 --secure-port=6443 --advertise-address=192.168.101.61 --allow-privileged=<span class="literal">true</span> --service-cluster-ip-range=10.0.0.0/24 --enable-admission-plugins=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction --authorization-mode=RBAC --enable-bootstrap-token-auth --token-auth-file=/k8s/kubernetes/cfg/token.csv --service-node-port-range=30000-50000 --tls-cert-file=/k8s/kubernetes/ssl/kubernetes.pem --tls-private-key-file=/k8s/kubernetes/ssl/kubernetes-key.pem --client-ca-file=/k8s/kubernetes/ssl/ca.pem --service-account-key-file=/k8s/kubernetes/ssl/ca-key.pem --etcd-cafile=/k8s/etcd/ssl/ca.pem --etcd-certfile=/k8s/etcd/ssl/server.pem --etcd-keyfile=/k8s/etcd/ssl/server-key.pem</span><br><span class="line">root     10064  9023  0 14:28 pts/0    00:00:00 grep --color=auto kube-apiserver</span><br></pre></td></tr></table></figure><h3 id="5-3-部署kube-controller-manager"><a href="#5-3-部署kube-controller-manager" class="headerlink" title="5.3 部署kube-controller-manager"></a>5.3 部署kube-controller-manager</h3><h4 id="5-3-1-创建kube-controller-manager配置文件"><a href="#5-3-1-创建kube-controller-manager配置文件" class="headerlink" title="5.3.1 创建kube-controller-manager配置文件"></a>5.3.1 创建kube-controller-manager配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# vim /k8s/kubernetes/cfg/kube-controller-manager</span><br><span class="line">KUBE_CONTROLLER_MANAGER_OPTS=<span class="string">&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--master=127.0.0.1:8080 \</span></span><br><span class="line"><span class="string">--leader-elect=true \</span></span><br><span class="line"><span class="string">--address=127.0.0.1 \</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.0.0.0/24 \</span></span><br><span class="line"><span class="string">--cluster-name=kubernetes \</span></span><br><span class="line"><span class="string">--cluster-signing-cert-file=/k8s/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--cluster-signing-key-file=/k8s/kubernetes/ssl/ca-key.pem  \</span></span><br><span class="line"><span class="string">--root-ca-file=/k8s/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--service-account-private-key-file=/k8s/kubernetes/ssl/ca-key.pem&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">--service-cluster-ip-range 参数指定 Cluster 中 Service 的CIDR范围，该网络在各 Node 间必须路由不可达，必须和 kube-apiserver 中的参数一致；</span><br><span class="line">--cluster-signing-* 指定的证书和私钥文件用来签名为 TLS BootStrap 创建的证书和私钥；</span><br><span class="line">--root-ca-file 用来对 kube-apiserver 证书进行校验，指定该参数后，才会在Pod 容器的 ServiceAccount 中放置该 CA 证书文件；</span><br><span class="line">--address 服务监听地址。值必须为 127.0.0.1，kube-apiserver 期望 scheduler 和 controller-manager 在同一台机器；</span><br><span class="line">--leader-elect：在执行主循环之前，启动领导者选举客户并获得领导。在运行复制组件以实现高可用性时启用此功能。默认值：<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="5-3-2-创建kube-controller-manager-systemd-unit文件"><a href="#5-3-2-创建kube-controller-manager-systemd-unit文件" class="headerlink" title="5.3.2 创建kube-controller-manager systemd unit文件"></a>5.3.2 创建kube-controller-manager systemd unit文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# vim /usr/lib/systemd/system/kube-controller-manager.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/k8s/kubernetes/cfg/kube-controller-manager</span><br><span class="line">ExecStart=/k8s/kubernetes/bin/kube-controller-manager <span class="variable">$KUBE_CONTROLLER_MANAGER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="5-3-3-启动kube-controller-manager服务"><a href="#5-3-3-启动kube-controller-manager服务" class="headerlink" title="5.3.3 启动kube-controller-manager服务"></a>5.3.3 启动kube-controller-manager服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# systemctl daemon-reload</span><br><span class="line">[root@k8s-master01 ~]# systemctl <span class="built_in">enable</span> kube-controller-manager</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kube-controller-manager.service to /usr/lib/systemd/system/kube-controller-manager.service.</span><br><span class="line">[root@k8s-master01 ~]# systemctl restart kube-controller-manager</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看服务运行状态：</span></span><br><span class="line">[root@k8s-master01 ~]# /k8s/kubernetes/bin/kubectl get componentstatuses       <span class="comment">#启动每个组件后可以通过执行命令kubectl get componentstatuses，来查看各个组件的状态;</span></span><br><span class="line">NAME                 STATUS      MESSAGE                                                                                     ERROR</span><br><span class="line">scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused</span><br><span class="line">controller-manager   Healthy     ok         <span class="comment">#组件启动成功</span></span><br><span class="line">etcd-0               Healthy     &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">etcd-1               Healthy     &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">etcd-2               Healthy     &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">[root@k8s-master01 ~]# systemctl status kube-controller-manager</span><br><span class="line">● kube-controller-manager.service - Kubernetes Controller Manager</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-controller-manager.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 五 2019-04-19 15:01:59 CST; 1min 32s ago</span><br><span class="line">     Docs: https://github.com/kubernetes/kubernetes</span><br><span class="line"> Main PID: 10984 (kube-controller)</span><br><span class="line">    Tasks: 8</span><br><span class="line">   Memory: 29.2M</span><br><span class="line">   CGroup: /system.slice/kube-controller-manager.service</span><br><span class="line">           └─10984 /k8s/kubernetes/bin/kube-controller-manager --logtostderr=<span class="literal">true</span> --v=4 --master=127.0.0.1:8080 --leader-elect=<span class="literal">true</span> --address=127.0.0.1 --service-cluster-ip-range=10.0.0.0/24 --cluster-...</span><br><span class="line"></span><br><span class="line">4月 19 15:03:20 k8s-master01 kube-controller-manager[10984]: I0419 15:03:20.760802   10984 gc_controller.go:173] GC<span class="string">&#x27;ing unscheduled pods which are terminating.</span></span><br><span class="line"><span class="string">4月 19 15:03:30 k8s-master01 kube-controller-manager[10984]: I0419 15:03:30.693936   10984 cronjob_controller.go:111] Found 0 jobs</span></span><br><span class="line"><span class="string">4月 19 15:03:30 k8s-master01 kube-controller-manager[10984]: I0419 15:03:30.695533   10984 cronjob_controller.go:119] Found 0 cronjobs</span></span><br><span class="line"><span class="string">4月 19 15:03:30 k8s-master01 kube-controller-manager[10984]: I0419 15:03:30.695541   10984 cronjob_controller.go:122] Found 0 groups</span></span><br><span class="line"><span class="string">4月 19 15:03:30 k8s-master01 kube-controller-manager[10984]: I0419 15:03:30.727777   10984 reflector.go:215] k8s.io/client-go/informers/factory.go:132: forcing resync</span></span><br><span class="line"><span class="string">4月 19 15:03:30 k8s-master01 kube-controller-manager[10984]: I0419 15:03:30.728472   10984 reflector.go:215] k8s.io/client-go/informers/factory.go:132: forcing resync</span></span><br><span class="line"><span class="string">4月 19 15:03:30 k8s-master01 kube-controller-manager[10984]: I0419 15:03:30.734602   10984 reflector.go:215] k8s.io/client-go/informers/factory.go:132: forcing resync</span></span><br><span class="line"><span class="string">4月 19 15:03:30 k8s-master01 kube-controller-manager[10984]: I0419 15:03:30.734673   10984 reflector.go:215] k8s.io/client-go/informers/factory.go:132: forcing resync</span></span><br><span class="line"><span class="string">4月 19 15:03:30 k8s-master01 kube-controller-manager[10984]: I0419 15:03:30.793013   10984 pv_controller_base.go:408] resyncing PV controller</span></span><br><span class="line"><span class="string">4月 19 15:03:32 k8s-master01 kube-controller-manager[10984]: I0419 15:03:32.177901   10984 resource_quota_controller.go:422] no resource updates from discovery, skipping resource quota sync</span></span><br></pre></td></tr></table></figure><h3 id="5-4-部署kube-scheduler"><a href="#5-4-部署kube-scheduler" class="headerlink" title="5.4 部署kube-scheduler"></a>5.4 部署kube-scheduler</h3><h4 id="5-4-1-创建kube-scheduler配置文件"><a href="#5-4-1-创建kube-scheduler配置文件" class="headerlink" title="5.4.1 创建kube-scheduler配置文件"></a>5.4.1 创建kube-scheduler配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# vim /k8s/kubernetes/cfg/kube-scheduler</span><br><span class="line">KUBE_SCHEDULER_OPTS=<span class="string">&quot;--logtostderr=true --v=4 --master=127.0.0.1:8080 --leader-elect&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">--master Kubernetes API服务地址，如果kubeconfig中给定，则覆盖掉。</span><br></pre></td></tr></table></figure><h4 id="5-4-2-创建kube-scheduler-systemd-unit-文件"><a href="#5-4-2-创建kube-scheduler-systemd-unit-文件" class="headerlink" title="5.4.2 创建kube-scheduler systemd unit 文件"></a>5.4.2 创建kube-scheduler systemd unit 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# vim /usr/lib/systemd/system/kube-scheduler.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/k8s/kubernetes/cfg/kube-scheduler</span><br><span class="line">ExecStart=/k8s/kubernetes/bin/kube-scheduler <span class="variable">$KUBE_SCHEDULER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="5-4-3-启动kube-scheduler服务"><a href="#5-4-3-启动kube-scheduler服务" class="headerlink" title="5.4.3 启动kube-scheduler服务"></a>5.4.3 启动kube-scheduler服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# systemctl daemon-reload</span><br><span class="line">[root@k8s-master01 ~]# systemctl <span class="built_in">enable</span> kube-scheduler</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kube-scheduler.service to /usr/lib/systemd/system/kube-scheduler.service.</span><br><span class="line">[root@k8s-master01 ~]# systemctl restart kube-scheduler</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看启动状态：（两个组件都ok了）</span></span><br><span class="line">[root@k8s-master01 ~]# /k8s/kubernetes/bin/kubectl get componentstatuses</span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">etcd-2               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">etcd-1               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-给k8s的相关命令做软连接并给master授权"><a href="#5-5-给k8s的相关命令做软连接并给master授权" class="headerlink" title="5.5 给k8s的相关命令做软连接并给master授权"></a>5.5 给k8s的相关命令做软连接并给master授权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">ln</span> -s /k8s/kubernetes/bin/* /usr/local/bin/</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">which</span> kubectl</span><br><span class="line">/usr/local/bin/kubectl</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# kubectl get cs</span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">etcd-1               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">etcd-2               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进行master授权</span></span><br><span class="line">kubectl create clusterrolebinding cluster-system-anonymous --clusterrole=cluster-admin --user=system:anonymous</span><br></pre></td></tr></table></figure><h2 id="六，部署node节点"><a href="#六，部署node节点" class="headerlink" title="六，部署node节点"></a>六，部署node节点</h2><blockquote><p>kubernetes work 节点运行如下组件：</p><ul><li>docker 前面已经部署</li><li>flannel 前面已经部署</li><li>kubelet</li><li>kube-proxy</li></ul></blockquote><h3 id="6-1-创建-kubelet-bootstrapping-kubeconfig-文件"><a href="#6-1-创建-kubelet-bootstrapping-kubeconfig-文件" class="headerlink" title="6.1 创建 kubelet bootstrapping kubeconfig 文件"></a>6.1 创建 kubelet bootstrapping kubeconfig 文件</h3><blockquote><ul><li>因为kubelet、kube-proxy 等 Node 机器上的进程与 Master 机器的 kube-apiserver 进程通信时需要认证和授权；所以创建kubernetes文件。</li><li>以下操作只需要在master节点上执行，生成的*.kubeconfig文件可以直接拷贝到node节点的&#x2F;k8s&#x2F;kubernetes&#x2F;cfg目录下。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">export</span> BOOTSTRAP_TOKEN=ae4d97f8d4a89cae9fedd4e5f8cf45a1</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">export</span> KUBE_APISERVER=<span class="string">&quot;https://192.168.101.61:6443&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置集群参数</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl config set-cluster kubernetes \</span><br><span class="line">   --certificate-authority=/k8s/kubernetes/ssl/ca.pem \</span><br><span class="line">   --embed-certs=<span class="literal">true</span> \</span><br><span class="line">   --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">   --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">Cluster <span class="string">&quot;kubernetes&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置客户端认证参数</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl config set-credentials kubelet-bootstrap \</span><br><span class="line">   --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">   --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">User <span class="string">&quot;kubelet-bootstrap&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置上下文参数</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl config set-context default \</span><br><span class="line">   --cluster=kubernetes \</span><br><span class="line">   --user=kubelet-bootstrap \</span><br><span class="line">   --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">Context <span class="string">&quot;default&quot;</span> created.</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置默认上下文</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">Switched to context <span class="string">&quot;default&quot;</span>.</span><br></pre></td></tr></table></figure><blockquote><p>–embed-certs 为 true 时表示将 certificate-authority 证书写入到生成的 bootstrap.kubeconfig 文件中；<br>设置客户端认证参数时没有指定秘钥和证书，后续由 kube-apiserver 自动生成；</p></blockquote><h3 id="6-2-创建-kube-proxy-kubeconfig-文件"><a href="#6-2-创建-kube-proxy-kubeconfig-文件" class="headerlink" title="6.2 创建 kube-proxy kubeconfig 文件"></a>6.2 创建 kube-proxy kubeconfig 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl config set-cluster kubernetes \</span><br><span class="line">    --certificate-authority=/k8s/kubernetes/ssl/ca.pem \</span><br><span class="line">    --embed-certs=<span class="literal">true</span> \</span><br><span class="line">    --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">    --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">Cluster <span class="string">&quot;kubernetes&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl config set-credentials kube-proxy \</span><br><span class="line">   --client-certificate=/k8s/kubernetes/ssl/kube-proxy.pem \</span><br><span class="line">   --client-key=/k8s/kubernetes/ssl/kube-proxy-key.pem \</span><br><span class="line">   --embed-certs=<span class="literal">true</span> \</span><br><span class="line">   --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">User <span class="string">&quot;kube-proxy&quot;</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl config set-context default \</span><br><span class="line">   --cluster=kubernetes \</span><br><span class="line">   --user=kube-proxy \</span><br><span class="line">   --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">Context <span class="string">&quot;default&quot;</span> created.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">Switched to context <span class="string">&quot;default&quot;</span>.</span><br></pre></td></tr></table></figure><h3 id="6-3-分发-kubeconfig-文件"><a href="#6-3-分发-kubeconfig-文件" class="headerlink" title="6.3 分发 kubeconfig 文件"></a>6.3 分发 kubeconfig 文件</h3><blockquote><p>将两个 kubeconfig 文件分发到所有 Node 机器的 &#x2F;k8s&#x2F;kubernetes&#x2F;cfg&#x2F; 目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# <span class="built_in">mv</span> bootstrap.kubeconfig /k8s/kubernetes/cfg/</span><br><span class="line">[root@k8s-master01 ~]# <span class="built_in">mv</span> kube-proxy.kubeconfig /k8s/kubernetes/cfg/</span><br><span class="line">[root@k8s-master01 ~]# scp /k8s/kubernetes/cfg/&#123;bootstrap.kubeconfig,kube-proxy.kubeconfig&#125; 192.168.101.62:/k8s/kubernetes/cfg/</span><br><span class="line">bootstrap.kubeconfig                                                                                                                                                      100% 2168     4.9MB/s   00:00</span><br><span class="line">kube-proxy.kubeconfig                                                                                                                                                     100% 6274    13.6MB/s   00:00</span><br><span class="line">[root@k8s-master01 ~]# scp /k8s/kubernetes/cfg/&#123;bootstrap.kubeconfig,kube-proxy.kubeconfig&#125; 192.168.101.125:/k8s/kubernetes/cfg/</span><br><span class="line">bootstrap.kubeconfig                                                                                                                                                      100% 2168     4.4MB/s   00:00</span><br><span class="line">kube-proxy.kubeconfig                                                                                                                                                     100% 6274    11.8MB/s   00:00</span><br></pre></td></tr></table></figure><h3 id="6-4-分发kubelet和kube-proxy命令"><a href="#6-4-分发kubelet和kube-proxy命令" class="headerlink" title="6.4 分发kubelet和kube-proxy命令"></a>6.4 分发kubelet和kube-proxy命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# scp /k8s/kubernetes/bin/&#123;kubelet,kube-proxy&#125; 192.168.101.62:/k8s/kubernetes/bin/</span><br><span class="line">kubelet                                                                                                                                                                   100%  108MB 149.3MB/s   00:00</span><br><span class="line">kube-proxy                                                                                                                                                                100%   33MB 149.6MB/s   00:00</span><br><span class="line">[root@k8s-master01 ~]# scp /k8s/kubernetes/bin/&#123;kubelet,kube-proxy&#125; 192.168.101.125:/k8s/kubernetes/bin/</span><br><span class="line">kubelet                                                                                                                                                                   100%  108MB 128.2MB/s   00:00</span><br><span class="line">kube-proxy                                                                                                                                                                100%   33MB 145.2MB/s   00:00</span><br></pre></td></tr></table></figure><h3 id="6-5-创建-kubelet-参数配置模板文件"><a href="#6-5-创建-kubelet-参数配置模板文件" class="headerlink" title="6.5 创建 kubelet 参数配置模板文件"></a>6.5 创建 kubelet 参数配置模板文件</h3><blockquote><p>两台node机器同样操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node01 ~]# vim /k8s/kubernetes/cfg/kubelet.config</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: 192.168.101.61</span><br><span class="line">port: 10250</span><br><span class="line">readOnlyPort: 10255</span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">clusterDNS: [<span class="string">&quot;10.0.0.2&quot;</span>]</span><br><span class="line">clusterDomain: cluster.local.</span><br><span class="line">failSwapOn: <span class="literal">false</span></span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>创建kubelet配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node01 ~]# vim /k8s/kubernetes/cfg/kubelet</span><br><span class="line">KUBELET_OPTS=<span class="string">&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--hostname-override=192.168.101.61 \</span></span><br><span class="line"><span class="string">--kubeconfig=/k8s/kubernetes/cfg/kubelet.kubeconfig \</span></span><br><span class="line"><span class="string">--bootstrap-kubeconfig=/k8s/kubernetes/cfg/bootstrap.kubeconfig \</span></span><br><span class="line"><span class="string">--config=/k8s/kubernetes/cfg/kubelet.config \</span></span><br><span class="line"><span class="string">--cert-dir=/k8s/kubernetes/ssl \</span></span><br><span class="line"><span class="string">--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0&quot;</span></span><br></pre></td></tr></table></figure><p><strong>创建kubelet systemd unit 文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node01 ~]# vim /usr/lib/systemd/system/kubelet.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/k8s/kubernetes/cfg/kubelet</span><br><span class="line">ExecStart=/k8s/kubernetes/bin/kubelet <span class="variable">$KUBELET_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><strong>将kubelet-bootstrap用户绑定到系统集群角色（master机器）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master 机器操作(创建集群角色)：</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl create clusterrolebinding kubelet-bootstrap \</span><br><span class="line">   --clusterrole=system:node-bootstrapper \</span><br><span class="line">   --group=system:nodes</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubelet-bootstrap created</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除集群角色方法：</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete clusterrolebinding/kubelet-bootstrap</span><br></pre></td></tr></table></figure><p><strong>启动服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node01 ~]# systemctl daemon-reload</span><br><span class="line">[root@k8s-node01 ~]# systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.</span><br><span class="line">[root@k8s-node01 ~]# systemctl restart kubelet</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>master端授权node节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master端查看csr</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get csr</span><br><span class="line">NAME                                                   AGE     REQUESTOR           CONDITION</span><br><span class="line">node-csr-Bw88ux21GTp7OhJoJpyUUgdwnh6GlClymloIqGEra3c   7m7s    kubelet-bootstrap   Pending</span><br><span class="line">node-csr-ku4FxcEcbrcdCdKvUapH3MS21VRypJw8jrFZcS5LctE   6m57s   kubelet-bootstrap   Pending</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权approve kubelet CSR 请求</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl certificate approve node-csr-Bw88ux21GTp7OhJoJpyUUgdwnh6GlClymloIqGEra3c</span><br><span class="line">certificatesigningrequest.certificates.k8s.io/node-csr-Bw88ux21GTp7OhJoJpyUUgdwnh6GlClymloIqGEra3c approved</span><br><span class="line">[root@k8s-master01 ~]# kubectl certificate approve node-csr-ku4FxcEcbrcdCdKvUapH3MS21VRypJw8jrFZcS5LctE</span><br><span class="line">certificatesigningrequest.certificates.k8s.io/node-csr-ku4FxcEcbrcdCdKvUapH3MS21VRypJw8jrFZcS5LctE approved</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看csr</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get csr</span><br><span class="line">NAME                                                   AGE     REQUESTOR           CONDITION</span><br><span class="line">node-csr-Bw88ux21GTp7OhJoJpyUUgdwnh6GlClymloIqGEra3c   8m55s   kubelet-bootstrap   Approved,Issued</span><br><span class="line">node-csr-ku4FxcEcbrcdCdKvUapH3MS21VRypJw8jrFZcS5LctE   8m45s   kubelet-bootstrap   Approved,Issued</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除多余csr方法</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 ~]# kubectl delete csr [csr名称]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get node</span><br><span class="line">NAME              STATUS   ROLES    AGE   VERSION</span><br><span class="line">192.168.101.125   Ready    &lt;none&gt;   16h   v1.13.0</span><br><span class="line">192.168.101.62    Ready    &lt;none&gt;   16h   v1.13.0</span><br></pre></td></tr></table></figure><h3 id="6-6-部署-kube-proxy-组件"><a href="#6-6-部署-kube-proxy-组件" class="headerlink" title="6.6 部署 kube-proxy 组件"></a>6.6 部署 kube-proxy 组件</h3><blockquote><p>kube-proxy 运行在所有 node节点上，它监听 apiserver 中 service 和 Endpoint 的变化情况，创建路由规则来进行服务负载均衡。</p></blockquote><h4 id="6-6-1-创建-kube-proxy-配置文件"><a href="#6-6-1-创建-kube-proxy-配置文件" class="headerlink" title="6.6.1 创建 kube-proxy 配置文件"></a>6.6.1 创建 kube-proxy 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node01 ~]# vim /k8s/kubernetes/cfg/kube-proxy</span><br><span class="line">KUBE_PROXY_OPTS=<span class="string">&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--hostname-override=192.168.101.62 \</span></span><br><span class="line"><span class="string">--cluster-cidr=10.0.0.0/24 \</span></span><br><span class="line"><span class="string">--kubeconfig=/k8s/kubernetes/cfg/kube-proxy.kubeconfig&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">--hostname-override：本机节点ip</span><br><span class="line">--kubeconfig：包含授权信息的 kubeconfig 文件的路径</span><br></pre></td></tr></table></figure><h4 id="6-6-2-创建kube-proxy-systemd-unit文件"><a href="#6-6-2-创建kube-proxy-systemd-unit文件" class="headerlink" title="6.6.2 创建kube-proxy systemd unit文件"></a>6.6.2 创建kube-proxy systemd unit文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node01 ~]# vim /usr/lib/systemd/system/kube-proxy.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Proxy</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/k8s/kubernetes/cfg/kube-proxy</span><br><span class="line">ExecStart=/k8s/kubernetes/bin/kube-proxy <span class="variable">$KUBE_PROXY_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="6-6-3-启动kube-proxy服务"><a href="#6-6-3-启动kube-proxy服务" class="headerlink" title="6.6.3 启动kube-proxy服务"></a>6.6.3 启动kube-proxy服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-proxy</span><br><span class="line">systemctl restart kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看服务状态</span></span><br><span class="line">[root@k8s-node01 ~]# systemctl status kube-proxy</span><br><span class="line">● kube-proxy.service - Kubernetes Proxy</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-proxy.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 二 2019-04-23 10:15:09 CST; 25s ago</span><br><span class="line"> Main PID: 880 (kube-proxy)</span><br><span class="line">    Tasks: 0</span><br><span class="line">   Memory: 11.0M</span><br><span class="line">   CGroup: /system.slice/kube-proxy.service</span><br><span class="line">           ‣ 880 /k8s/kubernetes/bin/kube-proxy --logtostderr=<span class="literal">true</span> --v=4 --hostname-override=192.168.101.62 --cluster-cidr=10.0.0.0/24 --kubeconfig=/k8s/kubernetes/cfg/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">4月 23 10:15:26 k8s-node01 kube-proxy[880]: I0423 10:15:26.484711     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br><span class="line">4月 23 10:15:26 k8s-node01 kube-proxy[880]: I0423 10:15:26.486098     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br><span class="line">4月 23 10:15:28 k8s-node01 kube-proxy[880]: I0423 10:15:28.492244     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br><span class="line">4月 23 10:15:28 k8s-node01 kube-proxy[880]: I0423 10:15:28.492271     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br><span class="line">4月 23 10:15:30 k8s-node01 kube-proxy[880]: I0423 10:15:30.500034     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br><span class="line">4月 23 10:15:30 k8s-node01 kube-proxy[880]: I0423 10:15:30.501511     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br><span class="line">4月 23 10:15:32 k8s-node01 kube-proxy[880]: I0423 10:15:32.508419     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br><span class="line">4月 23 10:15:32 k8s-node01 kube-proxy[880]: I0423 10:15:32.508444     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br><span class="line">4月 23 10:15:34 k8s-node01 kube-proxy[880]: I0423 10:15:34.513354     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br><span class="line">4月 23 10:15:34 k8s-node01 kube-proxy[880]: I0423 10:15:34.514406     880 config.go:141] Calling handler.OnEndpointsUpdate</span><br></pre></td></tr></table></figure><h3 id="6-7-集群状态"><a href="#6-7-集群状态" class="headerlink" title="6.7 集群状态"></a>6.7 集群状态</h3><blockquote><p>打开node节点集群标签</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 ~]# kubectl label node 192.168.101.62 node-role.kubernetes.io/node=<span class="string">&#x27;node&#x27;</span></span><br><span class="line">node/192.168.101.62 labeled</span><br><span class="line">[root@k8s-master01 ~]# kubectl label node 192.168.101.125 node-role.kubernetes.io/node=<span class="string">&#x27;node&#x27;</span></span><br><span class="line">node/192.168.101.125 labeled</span><br><span class="line">[root@k8s-master01 ~]# kubectl get node</span><br><span class="line">NAME              STATUS   ROLES   AGE   VERSION</span><br><span class="line">192.168.101.125   Ready    node    17h   v1.13.0</span><br><span class="line">192.168.101.62    Ready    node    17h   v1.13.0</span><br><span class="line">[root@k8s-master01 ~]# kubectl get node,cs</span><br><span class="line">NAME                   STATUS   ROLES   AGE   VERSION</span><br><span class="line">node/192.168.101.125   Ready    node    17h   v1.13.0</span><br><span class="line">node/192.168.101.62    Ready    node    17h   v1.13.0</span><br><span class="line"></span><br><span class="line">NAME                                 STATUS    MESSAGE             ERROR</span><br><span class="line">componentstatus/scheduler            Healthy   ok</span><br><span class="line">componentstatus/controller-manager   Healthy   ok</span><br><span class="line">componentstatus/etcd-0               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">componentstatus/etcd-2               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">componentstatus/etcd-1               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#附录：master集群打开标签方法：</span></span><br><span class="line">举例：</span><br><span class="line">[root@k8s-master01 ~]# kubectl label node 192.168.101.62 node-role.kubernetes.io/master=<span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>至此，k8s集群搭建完毕。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 下非root用户使用docker的问题</title>
      <link href="/articles/2019/04/02/Linux-fei-root-yonghushiyong-docker-dewenti/"/>
      <url>/articles/2019/04/02/Linux-fei-root-yonghushiyong-docker-dewenti/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h2 id="一，解决非root用户使用docker"><a href="#一，解决非root用户使用docker" class="headerlink" title="一，解决非root用户使用docker"></a>一，解决非root用户使用docker</h2><blockquote><p>Linux 下非root用户使用docker，如果不需要root权限的话，需要将用户加入到docker组。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#报错：</span></span><br><span class="line">ERROR: Couldn<span class="string">&#x27;t connect to Docker daemon at http+docker://localunixsocket - is it running?</span></span><br></pre></td></tr></table></figure><blockquote><p>通常我们使用linux系统的时候，最好是不要直接使用root账号，但是使用Docker的时候，默认又是不能使用非root用户的，关于原因，官方说法如下：</p></blockquote><ul><li>The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can access it with sudo. For this reason, docker daemon always runs as the root user.<br>To avoid having to use sudo when you use the docker command, create a Unix group called docker and add users to it. When the docker daemon starts, it makes the ownership of the Unix socket read&#x2F;writable by the docker group.</li></ul><h2 id="二，下面是让非root用户可用root的步骤："><a href="#二，下面是让非root用户可用root的步骤：" class="headerlink" title="二，下面是让非root用户可用root的步骤："></a>二，下面是让非root用户可用root的步骤：</h2><h3 id="2-1创建docker组"><a href="#2-1创建docker组" class="headerlink" title="2.1创建docker组"></a>2.1创建docker组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> groupadd docker</span><br></pre></td></tr></table></figure><h3 id="2-2-将当前用户加入docker组"><a href="#2-2-将当前用户加入docker组" class="headerlink" title="2.2 将当前用户加入docker组"></a>2.2 将当前用户加入docker组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br></pre></td></tr></table></figure><h3 id="2-3-重新启动docker服务（下面是CentOS7的命令）"><a href="#2-3-重新启动docker服务（下面是CentOS7的命令）" class="headerlink" title="2.3 重新启动docker服务（下面是CentOS7的命令）"></a>2.3 重新启动docker服务（下面是CentOS7的命令）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><ul><li>当前用户退出系统重新登陆</li><li>运行docker命令，测试</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工作随笔，问题排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes yaml部署及各种yaml写法和含义</title>
      <link href="/articles/2018/12/28/kubernetesyamlbushujixiefadingyi/"/>
      <url>/articles/2018/12/28/kubernetesyamlbushujixiefadingyi/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="kubernetes-yaml部署及各种yaml写法和含义"><a href="#kubernetes-yaml部署及各种yaml写法和含义" class="headerlink" title="kubernetes yaml部署及各种yaml写法和含义"></a>kubernetes yaml部署及各种yaml写法和含义</h1><h2 id="一，环境介绍"><a href="#一，环境介绍" class="headerlink" title="一，环境介绍"></a>一，环境介绍</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>CPU</th><th>内存</th><th>描述</th></tr></thead><tbody><tr><td>k8s-master01</td><td>192.168.101.61</td><td>2核</td><td>4GB</td><td>k8s master</td></tr><tr><td>k8s-node01</td><td>192.168.101.62</td><td>2核</td><td>4GB</td><td>k8s node节点</td></tr><tr><td>k8s-node02</td><td>192.168.101.125</td><td>2核</td><td>4GB</td><td>k8s node节点</td></tr></tbody></table><h2 id="二，RC的写法及SVC-service-的写法及用法"><a href="#二，RC的写法及SVC-service-的写法及用法" class="headerlink" title="二，RC的写法及SVC(service)的写法及用法"></a>二，RC的写法及SVC(service)的写法及用法</h2><h3 id="2-1-创建一个mysql的RC"><a href="#2-1-创建一个mysql的RC" class="headerlink" title="2.1 创建一个mysql的RC"></a>2.1 创建一个mysql的RC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# <span class="built_in">pwd</span></span><br><span class="line">/root/kubernetes-yaml</span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# vim msyql-rc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController     <span class="comment">#副本控制器RC</span></span><br><span class="line">metadata:</span><br><span class="line">  name: mysql                   <span class="comment">#RC的名称，全局唯一。</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: 1                   <span class="comment">#Pod副本期待数量</span></span><br><span class="line">  selector:</span><br><span class="line">    app: mysql                  <span class="comment">#符合目标的Pod拥有此标签</span></span><br><span class="line">  template:                     <span class="comment">#根据此模版创建Pod的副本（实例）</span></span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: mysql              <span class="comment">#Pod副本拥有的标签。对应RC的selector</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:               <span class="comment">#Pod内容器的定义部分。</span></span><br><span class="line">      - name: mysql             <span class="comment">#容器的名称。</span></span><br><span class="line">        image: docker.io/mysql:5.6  <span class="comment">#容器对应的docker image</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3306   <span class="comment">#容器暴露的端口号。</span></span><br><span class="line">        <span class="built_in">env</span>:                    <span class="comment">#注入到容器内的环境变量</span></span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;123123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">yaml文件中定义的kind属性，用来表明组员对象的类型。“ReplicationController”，表示这是一个RC；spec一节中是RC的相关属性的定义，比如spec.selector是RC的Pod标签(Label)选择器，即监控和管理拥有这些标签的Pod实例，确保当前集群上始终且仅有replicas个Pod实例在运行，设置replicas=1表示只能运行一个mysql pod实例。当前集群中运行的Pod数量小于replicas时，RC会根据spec.template一节中定义的Pod模版来生成一个新的Pod实例，spec.template.metadata.labels指定了该Pod的标签，需要特别注意的是：这里的labels必须匹配之前的spec.selector，否则此RC每次创建了一个无法匹配label的Pod，就会不停的尝试创建新的Pod。</span><br></pre></td></tr></table></figure><p><strong>将mysql RC发布到kubernetes集群中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建RC</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f msyql-rc.yaml</span><br><span class="line">replicationcontroller/mysql created</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除RC，SVC方法：</span></span><br><span class="line">kubectl delete -f [文件名]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看刚刚创建的RC</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get rc</span><br><span class="line">NAME    DESIRED   CURRENT   READY   AGE</span><br><span class="line">mysql   1         1         0       11s</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看RC创建的Pod</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pods</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysql-f7f6g   1/1     Running   0          39s</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">我们看到有一个mysql-XXXX的pod实例，这时kubernetes根据mysql这个RC自动创建的Pod。</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pods -o wide</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">mysql-f7f6g   1/1     Running   0          14m   172.30.35.2   192.168.101.62   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="comment">#我们看到pod运行在62这台node节点上。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#192.168.101.62机器操作：</span></span><br><span class="line">[root@k8s-node01 ~]# docker ps      <span class="comment">#可以看到运行的mysql容器。</span></span><br><span class="line">CONTAINER ID        IMAGE                                                                 COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">f1a91e4e32b4        mysql                                                                 <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 minutes ago       Up 2 minutes                            k8s_mysql_mysql-f7f6g_default_9423943c-6589-11e9-b265-005056a6c65d_0</span><br><span class="line">28f9a125e44c        registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0   <span class="string">&quot;/pause&quot;</span>                 2 minutes ago       Up 2 minutes                            k8s_POD_mysql-f7f6g_default_9423943c-6589-11e9-b265-005056a6c65d_0</span><br><span class="line"></span><br><span class="line"><span class="comment">#Pause是谷歌的容器，也可以理解为Pod的根容器。</span></span><br><span class="line"><span class="comment">#优点：</span></span><br><span class="line">引入与业务无关并且不易死亡的Pause容器作为Pod的根容器，以它的状态代表整个容器组的状态，解决了两个问题。第一：一个容器死亡，此时算是整体死亡吗？第二：Pod里的多个业务容器共享Pause容器的ip，共享Pause容器挂接的Volume，既简化了密切关联的业务容器之间的通信问题，有很好的解决了它们之间文件共享的问题。</span><br></pre></td></tr></table></figure><p><strong>再创建一个与之关联的kubernetes service——MYSQL的定义文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# vim mysql-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service           <span class="comment">#表明是kubernetes service</span></span><br><span class="line">metadata:</span><br><span class="line">  name: mysql           <span class="comment">#service的全局唯一名称</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3306          <span class="comment">#service提供服务的端口号</span></span><br><span class="line">  selector:             <span class="comment">#service对应的Pod拥有这里定义的标签</span></span><br><span class="line">    app: mysql</span><br><span class="line">    </span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">其中，metadata.name是Service的服务名(ServiceName)；port属性定义了Service的虚端口；spec.selector确定了哪些Pod副本(实例)对应到本服务。类似的，我们可以通过`kubectl create`命令创建Service对象。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建service</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f mysql-svc.yaml</span><br><span class="line">service/mysql created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看刚刚创建的service</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes   ClusterIP   10.0.0.1     &lt;none&gt;        443/TCP    4d2h</span><br><span class="line">mysql        ClusterIP   10.0.0.13    &lt;none&gt;        3306/TCP   15s</span><br><span class="line"></span><br><span class="line"><span class="comment">#kubernetes有一个发现机制，利用linux的环境变量，根据service的唯一名字，容器可以从环境变量中获取到service对应的CLUSTER-IP和端口，从而发起TCP/IP请求。</span></span><br></pre></td></tr></table></figure><p><strong>测试访问</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#192.168.101.62机器测试访问：</span></span><br><span class="line">[root@k8s-node01 ~]# mysql -h 10.0.0.13 -P 3306 -p</span><br><span class="line">Enter password:     <span class="comment">#123123</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 8</span><br><span class="line">Server version: 8.0.15 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#192.168.101.125机器测试访问：</span></span><br><span class="line">[root@k8s-node02 ~]# mysql -h 10.0.0.13 -P 3306 -p</span><br><span class="line">Enter password:     <span class="comment">#123123</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 9</span><br><span class="line">Server version: 8.0.15 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br><span class="line">[root@k8s-node02 ~]#</span><br></pre></td></tr></table></figure><h3 id="2-2-创建一个tomcat的RC"><a href="#2-2-创建一个tomcat的RC" class="headerlink" title="2.2 创建一个tomcat的RC"></a>2.2 创建一个tomcat的RC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# vim tomcat-rc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    app: tomcat</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: tomcat</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: tomcat</span><br><span class="line">          image: kubeguide/tomcat-app:v1</span><br><span class="line">          ports:</span><br><span class="line">          - containerPort: 8080</span><br><span class="line">          <span class="built_in">env</span>:</span><br><span class="line">          - name: MYSQL_SERVICE_HOST</span><br><span class="line">            value: <span class="string">&#x27;10.0.0.13&#x27;</span></span><br><span class="line">          - name: MYSQL_SERVICE_PORT</span><br><span class="line">            value: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">这个RC的tomcat容器里引用了MYSQL_SERVICE_HOST变量，而<span class="string">&#x27;10.0.0.13&#x27;</span>刚好是我们之前定义的mysql服务的cluster ip。</span><br></pre></td></tr></table></figure><p><strong>将tomcat RC发布到kubernetes集群中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建RC</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f tomcat-rc.yaml</span><br><span class="line">replicationcontroller/tomcat created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看RC</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get rc</span><br><span class="line">NAME     DESIRED   CURRENT   READY   AGE</span><br><span class="line">mysql    1         1         1       20h</span><br><span class="line">tomcat   2         2         2       48s        <span class="comment">#创建成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#由于我们RC里定义的tomcat容器replicas=2，所以会有两个tomcat容器。</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pods</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysql-f7f6g    1/1     Running   0          20h</span><br><span class="line">tomcat-dbwjv   1/1     Running   0          98s</span><br><span class="line">tomcat-mvjjf   1/1     Running   0          98s</span><br></pre></td></tr></table></figure><p><strong>创建对应的Service，暴露tomcat服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# vim tomcat-svc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 8080</span><br><span class="line">      nodePort: 30001</span><br><span class="line">  selector:</span><br><span class="line">    app: tomcat</span><br><span class="line">    </span><br><span class="line">#注意！！</span><br><span class="line">注意type: NodePort和nodePort: 30001的两个属性，表明此service开启了NodePort方式的外网访问模式，在kubernetes集群之外，例如在本机的浏览器里，可以通过30001端口访问tomcat(对应到8080虚端口上)</span><br><span class="line"></span><br><span class="line">#创建service</span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f tomcat-svc.yaml</span><br><span class="line">service/tomcat created</span><br><span class="line"></span><br><span class="line">#查看创建的service</span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">kubernetes   ClusterIP   10.0.0.1     &lt;none&gt;        443/TCP          4d19h</span><br><span class="line">mysql        ClusterIP   10.0.0.13    &lt;none&gt;        3306/TCP         16h</span><br><span class="line">tomcat       NodePort    10.0.0.58    &lt;none&gt;        8080:30001/TCP   63s        #外部30001对应8080虚端口</span><br></pre></td></tr></table></figure><p><strong>浏览器输入IP+端口测试访问</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我起了两个tomcat pod，被平均调度在了两台node节点上，所以任意一台都可以访问。</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pods -o wide</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE   IP            NODE              NOMINATED NODE   READINESS GATES</span><br><span class="line">mysql-f7f6g    1/1     Running   0          20h   172.30.35.2   192.168.101.62    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat-dbwjv   1/1     Running   0          18m   172.30.35.3   192.168.101.62    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat-mvjjf   1/1     Running   0          18m   172.30.20.2   192.168.101.125   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/12/28/kubernetesyamlbushujixiefadingyi/1.png"></p><blockquote><p>选择add，添加一条数据</p></blockquote><p><img src="/articles/2018/12/28/kubernetesyamlbushujixiefadingyi/2.png"><br><img src="/articles/2018/12/28/kubernetesyamlbushujixiefadingyi/3.png"></p><p><strong>进入数据库，查看是否有刚刚添加的数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-node02 ~]# mysql -h 10.0.0.13 -P 3306 -p123123</span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 9</span><br><span class="line">Server version: 5.6.43 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| HPE_APP            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use HPE_APP;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * from T_USERS;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| ID | USER_NAME | LEVEL |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | me        | 100   |</span><br><span class="line">|  2 | our team  | 100   |</span><br><span class="line">|  3 | HPE       | 100   |</span><br><span class="line">|  4 | teacher   | 100   |</span><br><span class="line">|  5 | docker    | 100   |</span><br><span class="line">|  6 | google    | 100   |</span><br><span class="line">|  7 | zhaoshuo  | 100   |          <span class="comment">#数据添加成功！</span></span><br><span class="line">+----+-----------+-------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三，Deployment概述"><a href="#三，Deployment概述" class="headerlink" title="三，Deployment概述"></a>三，Deployment概述</h2><blockquote><p>Depolyment是Kubernetes 1.2 引入到新概念，目的是更好的解决Pod的编排问题。为此，Deployment内部使用了Replica set来实现目的。无论从Deployment的作用与目的、他的yaml定义，还是从它的具体命令行操作来看，我们都可以把他看作是RC的一次升级，两者相似度超过90%。<br>Deployment相对于RC的最大一次升级是我们可以随时知道当前Pod“部署”的进度。实际上由于一个Pod的创建，调度绑定节点及在目标Node上启动对应的容器这一完整过程需要一定的时间，所以我们期待系统启动N个Pod副本的目标状态，实际上是一个连续变化的“部署过程”导致的最终状态。</p></blockquote><h3 id="3-1-Deployment的典型使用场景"><a href="#3-1-Deployment的典型使用场景" class="headerlink" title="3.1 Deployment的典型使用场景"></a>3.1 Deployment的典型使用场景</h3><blockquote><ul><li>创建一个Deployment对象来生成对应的Replica set并完成Pod副本的创建过程。</li><li>检查Deployment的状态来看部署动作是否完成。（Pod副本的数量是否达到预期的值）</li><li>更新Deployment以创建新的Pod。（例如镜像升级）</li><li>如果当前Deployment不稳定，则回滚到早先的Deployment版本。</li><li>挂起或恢复一个Deployment。</li></ul></blockquote><p><strong>Deployment的定义与Replica set的定义很类似，除了API声明和kind类型有所区别</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1      apiVersion: v1</span><br><span class="line">kind: Deployment                    kind: ReplicaSet</span><br><span class="line">metadata:                           metadata: </span><br><span class="line">  name: nginx-Deployment              name: nginx-repset</span><br></pre></td></tr></table></figure><h3 id="3-2-创建一个Nginx的Deployment"><a href="#3-2-创建一个Nginx的Deployment" class="headerlink" title="3.2 创建一个Nginx的Deployment"></a>3.2 创建一个Nginx的Deployment</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# vim nginx-deployment.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      tier: frontend</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: app-demo</span><br><span class="line">        tier: frontend</span><br><span class="line">    spec:</span><br><span class="line">      nodeName: gago-k8s-node1          <span class="comment">#绑定节点</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-demo</span><br><span class="line">        image: nginx</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">imagePullPolicy：填写IfNotPresent就代表本地有镜像，就不再去网上拉去镜像。</span><br><span class="line">matchLabels：是一个&#123;key,value&#125;的映射。一个单独的 &#123;key,value&#125; 相当于 matchExpressions 的一个元素，它的key字段是”key”,操作符是 In ，并且value数组value包含”value”。 </span><br></pre></td></tr></table></figure><p><strong>将nginx Deployment发布到kubernetes集群中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建Deployment</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f nginx-deployment.yaml</span><br><span class="line">deployment.extensions/frontend created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看deployment信息</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get deployment</span><br><span class="line">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">frontend   1/1     1            1           27m</span><br><span class="line"></span><br><span class="line">输出内容说明：</span><br><span class="line">DESIRED：Pod副本数量的期望值。即Deployment里定义的Replica。</span><br><span class="line">CURRENT：当前Replica的值，实际上是Deployment所创建的Replica Set里的Replica值，这个值不断增加，直到达到DESIRED为止。</span><br><span class="line">P-TO-DATE：最新版本的Pod数量，用于指示在滚动升级的过程中，有多少个Pod副本以成功升级。</span><br><span class="line">AVAILABLE：当前集群中可用的Pod副本数量。即集群中当前存活的Pod数量。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看Replica Set</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get rs</span><br><span class="line">NAME                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">frontend-8d9b575b9   1         1         1       22h</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看pod</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl get pods</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-8d9b575b9-8mv4t   1/1     Running   0          23h</span><br><span class="line">mysql-n9b57                1/1     Running   0          16d</span><br><span class="line">tomcat-4vzs4               1/1     Running   0          16d</span><br><span class="line">tomcat-gns9v               1/1     Running   0          16d</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看deployments的详细信息</span></span><br><span class="line">[root@k8s-master01 ~]# kubectl describe deployments</span><br><span class="line">Name:                   frontend</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Thu, 09 May 2019 15:30:40 +0800</span><br><span class="line">Labels:                 app=app-demo</span><br><span class="line">                        tier=frontend</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 1</span><br><span class="line">Selector:               tier=frontend,tier <span class="keyword">in</span> (frontend)</span><br><span class="line">Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  1 max unavailable, 1 max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app=app-demo</span><br><span class="line">           tier=frontend</span><br><span class="line">  Containers:</span><br><span class="line">   nginx-demo:</span><br><span class="line">    Image:        nginx</span><br><span class="line">    Port:         8080/TCP</span><br><span class="line">    Host Port:    0/TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   frontend-8d9b575b9 (1/1 replicas created)</span><br><span class="line">Events:          &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="四，Service-SVC-概述"><a href="#四，Service-SVC-概述" class="headerlink" title="四，Service(SVC)概述"></a>四，Service(SVC)概述</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><blockquote><p>kubernetes Pod是有生命周期的，它们可以被创建，也可以被销毁，然而一旦被销毁生命就永远结束。通过 ReplicaSets 能够动态地创建和销毁 Pod（例如，需要进行扩缩容，或者执行 滚动升级）。 每个 Pod 都会获取它自己的 IP 地址，即使这些 IP 地址不总是稳定可依赖的。 这会导致一个问题：在 Kubernetes 集群中，如果一组 Pod（称为 backend）为其它 Pod （称为 frontend）提供服务，那么那些 frontend 该如何发现，并连接到这组 Pod 中的哪些 backend 呢？</p></blockquote><p><strong>关于 Service</strong></p><blockquote><p>Service也是kubernetes里的最核心的资源对象之一。Kubernetes Service 定义了这样一种抽象：逻辑上的一组 Pod，一种可以访问它们的策略 —— 通常称为微服务。 这一组 Pod 能够被 Service 访问到，通常是通过 Label Selector实现的。</p></blockquote><h3 id="4-2-为上文的nginx-deployment创建一个service"><a href="#4-2-为上文的nginx-deployment创建一个service" class="headerlink" title="4.2 为上文的nginx deployment创建一个service"></a>4.2 为上文的nginx deployment创建一个service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# vim nginx-deployment-service.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment-service</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port : 8080</span><br><span class="line">    protocol: TCP</span><br><span class="line">  selector:</span><br><span class="line">    tier: frontend</span><br><span class="line">    </span><br><span class="line">我们创建了一个nginx的service，它的服务端口为8080。拥有“tier: frontend”这个Label的所有Pod实例都属于他。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx-deployment-service</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f nginx-deployment-service.yaml</span><br><span class="line">service/nginx-deployment-service created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看endpoints</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get endpoints</span><br><span class="line">NAME                       ENDPOINTS                           AGE</span><br><span class="line">kubernetes                 192.168.101.61:6443                 33d</span><br><span class="line">mysql                      172.30.24.3:3306                    28d</span><br><span class="line">nginx-deployment-service   172.30.34.3:8080                    57s</span><br><span class="line">tomcat                     172.30.24.2:8080,172.30.34.2:8080   28d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看SVC</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get svc -o wide</span><br><span class="line">NAME                       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE   SELECTOR</span><br><span class="line">kubernetes                 ClusterIP   10.0.0.1     &lt;none&gt;        443/TCP          33d   &lt;none&gt;</span><br><span class="line">mysql                      ClusterIP   10.0.0.32    &lt;none&gt;        3306/TCP         28d   app=mysql</span><br><span class="line">nginx-deployment-service   ClusterIP   10.0.0.140   &lt;none&gt;        8080/TCP         95s   tier=frontend</span><br><span class="line">tomcat                     NodePort    10.0.0.12    &lt;none&gt;        8080:30001/TCP   28d   app=tomcat</span><br></pre></td></tr></table></figure><h3 id="4-3-附录：多端口Service"><a href="#4-3-附录：多端口Service" class="headerlink" title="4.3 附录：多端口Service"></a>4.3 附录：多端口Service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: my-service</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">      app: MyApp</span><br><span class="line">    ports:</span><br><span class="line">      - name: http</span><br><span class="line">        protocol: TCP</span><br><span class="line">        port: 80</span><br><span class="line">        targetPort: 9376</span><br><span class="line">      - name: https</span><br><span class="line">        protocol: TCP</span><br><span class="line">        port: 443</span><br><span class="line">        targetPort: 9377</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTP服务器的搭建</title>
      <link href="/articles/2018/12/22/ftpfuwuqidajian/"/>
      <url>/articles/2018/12/22/ftpfuwuqidajian/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="FTP服务器的搭建"><a href="#FTP服务器的搭建" class="headerlink" title="FTP服务器的搭建"></a>FTP服务器的搭建</h1><h2 id="一，FTP的基本概念"><a href="#一，FTP的基本概念" class="headerlink" title="一，FTP的基本概念"></a>一，FTP的基本概念</h2><blockquote><p>FTP （File Transfer Protocol，文件传输协议）简称为“文传协议”。用于Internet上的控制文件的双向传输。同时，它也是一个应用程序（Application）。基于不同的操作系统有不同的FTP应用程序，而所有这些应用程序都遵守同一种协议以传输文件。在FTP的使用当中，用户经常遇到两个概念：”下载”（Download）和”上传”（Upload）。”下载”文件就是从远程主机拷贝文件至自己的计算机上；”上传”文件就是将文件从自己的计算机中拷贝至远程主机上。用Internet语言来说，用户可通过客户机程序向（从）远程主机上传（下载）文件。</p></blockquote><h3 id="1-1-FTP数据连接的建立类型"><a href="#1-1-FTP数据连接的建立类型" class="headerlink" title="1.1 FTP数据连接的建立类型"></a>1.1 FTP数据连接的建立类型</h3><ul><li>主动模式：服务器主动发起数据连接 </li><li>被动模式：服务器被动等待数据连接</li></ul><h3 id="1-2-传输模式"><a href="#1-2-传输模式" class="headerlink" title="1.2 传输模式"></a>1.2 传输模式</h3><ul><li>文本模式</li><li>二进制模式</li></ul><h3 id="1-3-FTP用户类型"><a href="#1-3-FTP用户类型" class="headerlink" title="1.3 FTP用户类型"></a>1.3 FTP用户类型</h3><ul><li>匿名用户</li><li>本地用户</li><li>虚拟用户</li></ul><h3 id="1-4-命令参数"><a href="#1-4-命令参数" class="headerlink" title="1.4 命令参数"></a>1.4 命令参数</h3><ol><li>FTP服务器的登陆<ul><li>匿名用户登录：ftp </li><li>密码：空</li></ul></li><li>显示文件信息：dir&#x2F;ls </li><li>下载文件：get 文件名（下载到当前目录） </li><li>上传文件：put 文件名 </li><li>多文件下载：mget </li><li>多文件上传：mput </li><li>退出：bye </li><li>帮助：help</li></ol><h2 id="二，FTP服务的搭建"><a href="#二，FTP服务的搭建" class="headerlink" title="二，FTP服务的搭建"></a>二，FTP服务的搭建</h2><h3 id="2-1-搭建匿名访问的FTP服务"><a href="#2-1-搭建匿名访问的FTP服务" class="headerlink" title="2.1 搭建匿名访问的FTP服务"></a>2.1 搭建匿名访问的FTP服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@loaclhost ~]# rpm -qa | grep vsftpd</span><br><span class="line">vsftpd-2.2.2-11.el6_4.1.x86_64 <span class="comment">#如果没有yum安装一下</span></span><br><span class="line">[root@localhost ~]# yum -y install vsftpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备匿名FTP访问的目录</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /var/ftp/</span><br><span class="line">[root@loaclhost ftp]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar  1  2013 pub</span><br><span class="line">[root@localhost ftp]# <span class="built_in">chown</span> ftp pub/ <span class="comment">#修改共享目录属主为ftp</span></span><br><span class="line">[root@localhost ftp]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 2 ftp root 4096 Mar  1  2013 pub</span><br><span class="line">[root@localhost ftp]# <span class="built_in">cd</span> pub/ </span><br><span class="line">[root@localhost pub]# <span class="built_in">touch</span> <span class="built_in">test</span></span><br><span class="line">[root@localhost pub]# <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">test</span>  <span class="comment">#创建一个测试文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开放匿名用户并启动vsftpd服务</span></span><br><span class="line">[root@localhost ftp]# <span class="built_in">cd</span> /etc/vsftpd/</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">ls</span></span><br><span class="line">ftpusers  user_list  vsftpd.conf  vsftpd_conf_migrate.sh </span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">cp</span> vsftpd.conf&#123;,.bak&#125;</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">ls</span></span><br><span class="line">ftpusers  user_list  vsftpd.conf  vsftpd.conf.bak  vsftpd_conf_migrate .sh</span><br><span class="line">[root@localhost vsftpd]# vim vsftpd.conf</span><br><span class="line"></span><br><span class="line">anonymous_enable=YES <span class="comment">#匿名用户是否开启</span></span><br><span class="line">local_enable=YES <span class="comment">#本地用户是否开启</span></span><br><span class="line">write_enable=YES <span class="comment">#是否开启写权限</span></span><br><span class="line">local_umask=022 <span class="comment">#用户创建目录权限掩码</span></span><br><span class="line"></span><br><span class="line">anon_upload_enable=YES <span class="comment">#去注释 开启匿名用户上传权限</span></span><br><span class="line">anon_umask=022 <span class="comment">#此条手动添加匿名用户的权限掩码</span></span><br><span class="line">anon_mkdir_write_enable=YES <span class="comment">#去注释 开启匿名用户新建目录权限</span></span><br><span class="line">anon_other_write_enable=YES <span class="comment">#此条手动添加匿名用户的其他写入权限(删除 移动等)</span></span><br><span class="line"></span><br><span class="line">[root@localhost vsftpd]# /etc/init.d/vsftpd start <span class="comment">#启动服务</span></span><br><span class="line">Starting vsftpd <span class="keyword">for</span> vsftpd:                                [  OK  ]</span><br><span class="line">[root@localhost vsftpd]# netstat -antup |grep vsftpd <span class="comment">#查看服务端口 默认21端口</span></span><br><span class="line">tcp        0      0 0.0.0.0:21                  0.0.0.0:*                LISTEN      1177/vsftpd</span><br></pre></td></tr></table></figure><p><strong>测试匿名FTP服务器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在客户端安装FTP客户端</span></span><br><span class="line">[root@localhost ~]# yum -y install ftp</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问FTP服务器</span></span><br><span class="line">[root@localhost ~]# ftp 192.168.200.54</span><br><span class="line">Connected to 192.168.200.54 (192.168.200.54).</span><br><span class="line">220 (vsFTPd 2.2.2)</span><br><span class="line">Name (192.168.200.54:root): ftp <span class="comment">#匿名用户统一叫ftp</span></span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password: <span class="comment">#密码为空 直接登录</span></span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt;  <span class="comment">#登录成功</span></span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">227 Entering Passive Mode (192,168,200,54,69,45).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">drwxr-xr-x    2 14       0            4096 Mar 01  2013 pub</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; <span class="built_in">help</span></span><br><span class="line">Commands may be abbreviated.  Commands are:</span><br><span class="line"></span><br><span class="line">!       debug       mdir        sendport    site</span><br><span class="line">$      <span class="built_in">dir</span>     mget        put     size</span><br><span class="line">account     disconnect  <span class="built_in">mkdir</span>       <span class="built_in">pwd</span>     status</span><br><span class="line">append      <span class="built_in">exit</span>        mls     quit        struct</span><br><span class="line">ascii       form        mode        quote       system</span><br><span class="line">bell        get     modtime     recv        sunique</span><br><span class="line">binary      glob        mput        reget       tenex</span><br><span class="line"><span class="built_in">bye</span>     <span class="built_in">hash</span>        newer       rstatus     tick</span><br><span class="line"><span class="keyword">case</span>        <span class="built_in">help</span>        nmap        rhelp       trace</span><br><span class="line"><span class="built_in">cd</span>      idle        nlist       rename      <span class="built_in">type</span></span><br><span class="line">cdup        image       ntrans      reset       user</span><br><span class="line"><span class="built_in">chmod</span>       lcd     open        restart     <span class="built_in">umask</span></span><br><span class="line">close       <span class="built_in">ls</span>      prompt      <span class="built_in">rmdir</span>       verbose</span><br><span class="line">cr      macdef      passive     runique     ?</span><br><span class="line">delete      mdelete     proxy       send</span><br><span class="line"></span><br><span class="line">ftp&gt; <span class="built_in">cd</span> pub</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">227 Entering Passive Mode (192,168,200,54,98,48).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0               0 Sep 25 13:53 <span class="built_in">test</span></span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; get <span class="built_in">test</span>  <span class="comment">#下载测试</span></span><br><span class="line"><span class="built_in">local</span>: <span class="built_in">test</span> remote: <span class="built_in">test</span></span><br><span class="line">227 Entering Passive Mode (192,168,200,54,152,59).</span><br><span class="line">150 Opening BINARY mode data connection <span class="keyword">for</span> <span class="built_in">test</span> (0 bytes).</span><br><span class="line">226 Transfer complete.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg  httpd-2.2.9.tar.gz  install.log  install.log.syslog  <span class="built_in">test</span> <span class="comment">#下载成功</span></span><br><span class="line"></span><br><span class="line">ftp&gt; put anaconda-ks.cfg  <span class="comment">#上传测试</span></span><br><span class="line"><span class="built_in">local</span>: anaconda-ks.cfg remote: anaconda-ks.cfg</span><br><span class="line">227 Entering Passive Mode (192,168,200,54,69,33).</span><br><span class="line">150 Ok to send data.</span><br><span class="line">226 Transfer complete.</span><br><span class="line">1127 bytes sent <span class="keyword">in</span> 0.0133 secs (84.63 Kbytes/sec)</span><br><span class="line"></span><br><span class="line">[root@localhost pub]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg  <span class="built_in">test</span>  <span class="comment">#上传成功</span></span><br></pre></td></tr></table></figure><h3 id="2-2-搭建本地用户验证的FTP服务"><a href="#2-2-搭建本地用户验证的FTP服务" class="headerlink" title="2.2 搭建本地用户验证的FTP服务"></a>2.2 搭建本地用户验证的FTP服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost pub]# <span class="built_in">cd</span> /etc/vsftpd/</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">ls</span></span><br><span class="line">ftpusers  user_list  vsftpd.conf  vsftpd.conf.bak  vsftpd_conf_migrate.sh</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">mv</span> vsftpd.conf vsftpd.conf.anon <span class="comment">#将匿名用户配 置文件备份</span></span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">cp</span> vsftpd.conf.bak vsftpd.conf <span class="comment">#还原配置文件</span></span><br><span class="line">[root@localhost vsftpd]# vim vsftpd.conf</span><br><span class="line">chroot_local_user=YES  <span class="comment">#96行 开启本地用的家目录锁定 用户上传下载就在普通用户的 家目录 而不是在共享目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">[root@localhost vsftpd]# /etc/init.d/vsftpd reload</span><br><span class="line">Shutting down vsftpd:                                      [  OK  ]</span><br><span class="line">Starting vsftpd <span class="keyword">for</span> vsftpd:                                [  OK  ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">id</span> yunjisuan</span><br><span class="line"><span class="built_in">id</span>: yunjisuan: No such user</span><br><span class="line">[root@localhost ~]# useradd yunjisuan <span class="comment">#创建一个普通用户</span></span><br><span class="line">[root@localhost ~]# passwd yunjisuan</span><br><span class="line">Changing password <span class="keyword">for</span> user yunjisuan.</span><br><span class="line">New password:</span><br><span class="line">BAD PASSWORD: it does not contain enough DIFFERENT characters</span><br><span class="line">BAD PASSWORD: is too simple 24. Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span> /home/</span><br><span class="line">yunjisuan</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">cd</span> /home/yunjisuan/</span><br><span class="line">[root@localhost yunjisuan]# <span class="built_in">touch</span> 111111</span><br><span class="line">[root@localhost yunjisuan]# <span class="built_in">ls</span></span><br><span class="line">111111  <span class="comment">#在普通用户家目录创建一个测试文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端测试</span></span><br><span class="line">[root@localhost ~]# ftp 192.168.200.54</span><br><span class="line">Connected to 192.168.200.54 (192.168.200.54).</span><br><span class="line">220 (vsFTPd 2.2.2)</span><br><span class="line">Name (192.168.200.54:root): yunjisuan <span class="comment">#登陆用户选择yunjisuan</span></span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt;  <span class="comment">#登陆成功</span></span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">227 Entering Passive Mode (192,168,200,54,177,182).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0               0 Sep 25 14:31 111111</span><br><span class="line">226 Directory send OK.</span><br><span class="line"><span class="comment">#上传 下载同匿名用户一样</span></span><br></pre></td></tr></table></figure><h3 id="2-3-搭建虚拟用户FTP服务"><a href="#2-3-搭建虚拟用户FTP服务" class="headerlink" title="2.3 搭建虚拟用户FTP服务"></a>2.3 搭建虚拟用户FTP服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vsftpd]# <span class="built_in">mv</span> vsftpd.conf vsftpd.conf.local</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">cp</span> vsftpd.conf.bak vsftpd.conf <span class="comment">#还原配置文件</span></span><br><span class="line">[root@localhost vsftpd]# vim ./vusers.list 新建一个虚拟用户账号密码列表文件</span><br><span class="line">zhangsan <span class="comment">#虚拟用户</span></span><br><span class="line">123</span><br><span class="line">lisi</span><br><span class="line">123</span><br><span class="line">wangwu</span><br><span class="line">456</span><br><span class="line">[root@localhost vsftpd]# db_load -T -t <span class="built_in">hash</span> -f vusers.list vusers.db <span class="comment"># 文件加密</span></span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">ls</span></span><br><span class="line">ftpusers   vsftpd.conf       vsftpd.conf.bak    vsftpd_conf_migrate.sh vusers.list</span><br><span class="line">user_list  vsftpd.conf.anon  vsftpd.conf.local  vusers.db</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">chmod</span> 600 vusers.db  <span class="comment">#加600权限</span></span><br><span class="line">[root@localhost vsftpd]# ll vusers.db</span><br><span class="line">-rw------- 1 root root 12288 Sep 25 22:47 vusers.db</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加虚拟映射账号 为ftp根目录修改权限</span></span><br><span class="line">[root@localhost vsftpd]# useradd -d /var/ftproot/ -s /sbin/nologin virtual <span class="comment">#-d 指定家目录</span></span><br><span class="line">[root@localhost vsftpd]# ll /var/ftproot/  <span class="comment">#此目录为虚拟用户上传下载目录</span></span><br><span class="line">total 0</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">chmod</span> 755 /var/ftproot/</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">cd</span> /var/ftproot/</span><br><span class="line">[root@localhost ftproot]# <span class="built_in">touch</span> 22222 </span><br><span class="line">[root@localhost ftproot]# <span class="built_in">ls</span></span><br><span class="line">22222   <span class="comment">#创建测试文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建pam认证文件</span></span><br><span class="line">[root@localhost vsftpd]# vim /etc/pam.d/vsftpd.vu</span><br><span class="line"></span><br><span class="line">auth    required        pam_userdb.so db=/etc/vsftpd/vusers</span><br><span class="line">account required        pam_userdb.so db=/etc/vsftpd/vusers</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">[root@localhost vsftpd]# vim vsftpd.conf</span><br><span class="line">pam_service_name=vsftpd.vu <span class="comment">#118行 pam认证文件</span></span><br><span class="line">guest_enable=YES  <span class="comment">#是否开启本地映射账号</span></span><br><span class="line">guest_username=virtual  <span class="comment">#虚拟映射账号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">[root@localhost vsftpd]# /etc/init.d/vsftpd reload</span><br><span class="line">Shutting down vsftpd:                                      [  OK  ]</span><br><span class="line">Starting vsftpd <span class="keyword">for</span> vsftpd:                                [  OK  ]</span><br><span class="line">[root@localhost vsftpd]# <span class="built_in">cat</span> vusers.list</span><br><span class="line">zhangsan</span><br><span class="line">123</span><br><span class="line">lisi</span><br><span class="line">123</span><br><span class="line">wangwu</span><br><span class="line">456</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端测试</span></span><br><span class="line">[root@localhost ~]# ftp 192.168.200.54</span><br><span class="line">Connected to 192.168.200.54 (192.168.200.54).</span><br><span class="line">220 (vsFTPd 2.2.2)</span><br><span class="line">Name (192.168.200.54:root): zhangsan</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">227 Entering Passive Mode (192,168,200,54,132,132).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0               0 Sep 25 15:04 22222</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; <span class="built_in">bye</span></span><br><span class="line">221 Goodbye.</span><br><span class="line">[root@localhost ~]# ftp 192.168.200.54</span><br><span class="line">Connected to 192.168.200.54 (192.168.200.54).</span><br><span class="line">220 (vsFTPd 2.2.2)</span><br><span class="line">Name (192.168.200.54:root): lisi</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system <span class="built_in">type</span> is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">227 Entering Passive Mode (192,168,200,54,180,98).</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0               0 Sep 25 15:04 22222</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes之Volume挂载</title>
      <link href="/articles/2018/11/21/kuberneteszhivolumeguazai/"/>
      <url>/articles/2018/11/21/kuberneteszhivolumeguazai/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Kubernetes之Volume挂载"><a href="#Kubernetes之Volume挂载" class="headerlink" title="Kubernetes之Volume挂载"></a>Kubernetes之Volume挂载</h1><h2 id="一，Volume"><a href="#一，Volume" class="headerlink" title="一，Volume"></a>一，Volume</h2><blockquote><p>Container中的磁盘文件是短暂的，这在容器中运行时会给非平凡的应用程序带来一些问题。首先，当容器崩溃时，kubelet将重新启动它，但文件将丢失，Container以干净状态启动。其次，当在一起运行Container时，Pod通常需要在这些容器之间共享文件。Kubernetes Volume抽象解决了这两个问题。</p></blockquote><h3 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h3><blockquote></blockquote><ul><li>Docker也有卷的概念，虽然它有点宽松和管理较少。在Docker中，卷只是磁盘上或另一个Container中的目录。生命周期不受管理，直到最近才有本地磁盘支持的卷。Docker现在提供了卷驱动程序，但是现在功能非常有限。</li><li>另一方面，Kubernetes卷具有明确的生命周期，与包围它的Pod相同。因此，卷可以比Pod中运行的任何Container更长，并且可以在Container重新启动之间保留数据。当然，当Pod不再存在时，音量也将不复存在。也许更重要的是，Kubernetes支持多种类型的卷，Pod可以同时使用任意数量的卷。</li><li>从本质上讲，卷只是一个目录，可能包含一些数据，Pod中的容器可以访问它。该目录是如何形成的，支持它的介质以及它的内容由所使用的特定卷类型决定。</li><li>要使用卷，Pod指定要为Pod提供的卷（.spec.volumes字段）以及将这些卷安装到容器（ .spec.containers.volumeMounts字段）的位置。</li></ul><h3 id="1-2-Volume类型"><a href="#1-2-Volume类型" class="headerlink" title="1.2 Volume类型"></a>1.2 Volume类型</h3><ul><li>emptyDir</li><li>hostPath</li><li>gcePersistentDisk</li><li>awsElasticBlockStore</li><li>nfs</li><li>iscsi</li><li>glusterfs</li><li>rbd</li><li>gitRepo</li><li>secret</li><li>persistentVolumeClaim</li></ul><h2 id="二，类型介绍与创建"><a href="#二，类型介绍与创建" class="headerlink" title="二，类型介绍与创建"></a>二，类型介绍与创建</h2><h3 id="2-1-emptyDir"><a href="#2-1-emptyDir" class="headerlink" title="2.1 emptyDir"></a>2.1 emptyDir</h3><blockquote><p>一个emptyDir 第一次创建是在一个pod被指定到具体node的时候，并且会一直存在在pod的生命周期当中，正如它的名字一样，它初始化是一个空的目录，pod中的容器都可以读写这个目录，这个目录可以被挂在到各个容器相同或者不相同的的路径下。当一个pod因为任何原因被移除的时候，这些数据会被永久删除。注意：一个容器崩溃了不会导致数据的丢失，因为容器的崩溃并不移除pod.</p></blockquote><p><strong>emptyDir 磁盘的作用：</strong></p><pre><code>1. 普通空间，基于磁盘的数据存储2. 作为从崩溃中恢复的备份点3. 存储那些那些需要长久保存的数据，例web服务中的数据默认的，emptyDir磁盘会存储在主机所使用的媒介上，可能是SSD，或者网络硬盘，这主要取决于你的环境。当然，我们也可以将emptyDir.medium的值设置为Memory来告诉Kubernetes来挂在一个基于内存的目录tmpfs，因为tmpfs速度会比硬盘块多了，但是，当主机重启的时候所有的数据都会丢失</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# vim volume-test-pod.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volume-test-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx</span><br><span class="line">    name: test-nginx-volume</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /NginxTestVolume</span><br><span class="line">      name: test-valume</span><br><span class="line">  volumes:</span><br><span class="line">  - name: test-valume</span><br><span class="line">    emptyDir: &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#创建pod</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f volume-test-pod.yaml</span><br><span class="line">pod/volume-test-pod created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看刚刚创建的pod</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pod -o wide</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE   IP            NODE              NOMINATED NODE   READINESS GATES</span><br><span class="line">frontend-8d9b575b9-8mv4t   1/1     Running   1          24d   172.30.34.3   192.168.101.125   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">mysql-n9b57                1/1     Running   2          39d   172.30.24.3   192.168.101.62    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat-4vzs4               1/1     Running   2          39d   172.30.24.2   192.168.101.62    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat-gns9v               1/1     Running   1          39d   172.30.34.2   192.168.101.125   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">volume-test-pod            1/1     Running   0          56s   172.30.24.4   192.168.101.62    &lt;none&gt;           &lt;none&gt;     <span class="comment">#在62机器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在62机器上看磁盘挂载</span></span><br><span class="line">[root@k8s-node01 ~]# <span class="built_in">df</span> -h</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/sda5        16G  8.4G  7.7G   53% /</span><br><span class="line">devtmpfs        1.9G     0  1.9G    0% /dev</span><br><span class="line">tmpfs           1.9G  4.0K  1.9G    1% /dev/shm</span><br><span class="line">tmpfs           1.9G  175M  1.7G   10% /run</span><br><span class="line">tmpfs           1.9G     0  1.9G    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1        20G   45M   19G    1% /data</span><br><span class="line">/dev/sda2       9.8G   37M  9.2G    1% /home</span><br><span class="line">tmpfs           380M     0  380M    0% /run/user/1000</span><br><span class="line">tmpfs           1.9G   12K  1.9G    1% /var/lib/kubelet/pods/7d1708ff-6658-11e9-b265-005056a6c65d/volumes/kubernetes.io~secret/default-token-4v8dp     <span class="comment">#已经有了，是tmpfs文件格式</span></span><br><span class="line">tmpfs           1.9G   12K  1.9G    1% /var/lib/kubelet/pods/448848ff-6645-11e9-b265-005056a6c65d/volumes/kubernetes.io~secret/default-token-4v8dp</span><br><span class="line">overlay          16G  8.4G  7.7G   53% /var/lib/docker/overlay2/850432dab03c894b99b795a4037c22940ff4410dd95955f954bc7e9d31437ff7/merged</span><br><span class="line">shm              64M     0   64M    0% /var/lib/docker/containers/86ef62bd4238371e8809abb8b4ebfd57ff253770f181bcc3e6fba6de35683bab/mounts/shm</span><br><span class="line">overlay          16G  8.4G  7.7G   53% /var/lib/docker/overlay2/f44572ef3d5b611e4c737f4463242fa06bb1faae88f317a555f04201e3d9ce4c/merged</span><br><span class="line">overlay          16G  8.4G  7.7G   53% /var/lib/docker/overlay2/c05fb67f67f21e01bd81fcc18b7d0c62d06a5ee29257cc081350d9b9c6aff311/merged</span><br><span class="line">shm              64M     0   64M    0% /var/lib/docker/containers/12792092fe67cb131a0ae613ebf6739275ef0cbc1176ee84303848f68968132e/mounts/shm</span><br><span class="line">overlay          16G  8.4G  7.7G   53% /var/lib/docker/overlay2/674d9417bc6793b81e9b889acd892323a4c5f12fd5ee18f6b2baca4bdbf9d7a3/merged</span><br><span class="line">tmpfs           380M     0  380M    0% /run/user/0</span><br><span class="line">tmpfs           1.9G   12K  1.9G    1% /var/lib/kubelet/pods/43093572-85ad-11e9-8f67-005056a6c65d/volumes/kubernetes.io~secret/default-token-4v8dp</span><br><span class="line">overlay          16G  8.4G  7.7G   53% /var/lib/docker/overlay2/8a631aaea296f94a285720fb81428406c33f16ab714e2c5e15315b4ce77dd3a7/merged</span><br><span class="line">shm              64M     0   64M    0% /var/lib/docker/containers/573857b1debec09fbc1edbaaa6d75adba9afb8e275c68d2558c5bbea893fa49a/mounts/shm</span><br><span class="line">overlay          16G  8.4G  7.7G   53% /var/lib/docker/overlay2/cb7fcf86e9fdceed098ae788dc73c47703289664b73d4187247e8d355b87ccc7/merged</span><br></pre></td></tr></table></figure><h2 id="三，PV-PVC实现"><a href="#三，PV-PVC实现" class="headerlink" title="三，PV PVC实现"></a>三，PV PVC实现</h2><blockquote><ul><li>管理存储是管理计算的一个明显问题。该<code>PersistentVolume</code>子系统为用户和管理员提供了一个API，用于抽象如何根据消费方式提供存储的详细信息。为此，我们引入了两个新的API资源：<code>PersistentVolume</code>和<code>PersistentVolumeClaim</code>。</li><li><code>PersistentVolume</code>（PV）是群集中由管理员配置的一块存储。它是集群中的资源，就像节点是集群资源一样。PV是容量插件，如Volumes，但其生命周期独立于使用PV的任何单个pod。此API对象捕获存储实现的详细信息，包括NFS，iSCSI或特定于云提供程序的存储系统。</li><li><code>PersistentVolumeClaim</code>（PVC）是由用户进行存储的请求。它类似于一个吊舱。Pod消耗节点资源，PVC消耗PV资源。Pod可以请求特定级别的资源（CPU和内存）。声明可以请求特定的大小和访问模式（例如，可以一次读&#x2F;写或多次只读）。</li><li>虽然<code>PersistentVolumeClaims</code>允许用户使用抽象存储资源，但是<code>PersistentVolumes</code>对于不同的问题，用户通常需要具有不同属性（例如性能）。群集管理员需要能够提供各种<code>PersistentVolumes</code>不同的方式，而不仅仅是大小和访问模式，而不会让用户了解这些卷的实现方式。对于这些需求，有<code>StorageClass</code> 资源。</li></ul></blockquote><h3 id="3-1-持久化存储卷和声明的生命周期"><a href="#3-1-持久化存储卷和声明的生命周期" class="headerlink" title="3.1 持久化存储卷和声明的生命周期"></a>3.1 持久化存储卷和声明的生命周期</h3><blockquote><p>在Kubernetes集群中，PV 作为存储资源存在。PVC 是对PV资源的请求和使用，也是对PV存储资源的”提取证”，而Pod通过PVC来使用PV。PV 和 PVC 之间的交互过程有着自己的生命周期，这个生命周期分为5个阶段：</p><blockquote></blockquote></blockquote><ul><li>供应(Provisioning)：即PV的创建，可以直接创建PV（静态方式），也可以使用StorageClass动态创建</li><li>绑定（Binding）：将PV分配给PVC</li><li>使用（Using）：Pod通过PVC使用该Volume</li><li>释放（Releasing）：Pod释放Volume并删除PVC</li><li>回收（Reclaiming）：回收PV，可以保留PV以便下次使用，也可以直接从云存储中删除</li></ul><blockquote><p>根据上述的5个阶段，存储卷的存在下面的4种状态：</p><blockquote></blockquote></blockquote><ul><li>Available：可用状态，处于此状态表明PV以及准备就绪了，可以被PVC使用了。</li><li>Bound：绑定状态，表明PV已被分配给了PVC。</li><li>Released：释放状态，表明PVC解绑PV，但还未执行回收策略。</li><li>Failed：错误状态，表明PV发生错误。</li></ul><h3 id="3-2-访问模式（Access-Modes）"><a href="#3-2-访问模式（Access-Modes）" class="headerlink" title="3.2 访问模式（Access Modes）"></a>3.2 访问模式（Access Modes）</h3><blockquote><p>只要资源提供者支持，持久卷能够通过任何方式加载到主机上。每种存储都会有不同的能力，每个PV的访问模式也会被设置成为该卷所支持的特定模式。例如NFS能够支持多个读写客户端，但某个NFS PV可能会在服务器上以只读方式使用。每个PV都有自己的一系列的访问模式，这些访问模式取决于PV的能力。</p></blockquote><p><strong>访问模式的可选范围如下：</strong></p><ul><li>ReadWriteOnce：该卷能够以读写模式被加载到一个节点上。</li><li>ReadOnlyMany：该卷能够以只读模式加载到多个节点上。</li><li>ReadWriteMany：该卷能够以读写模式被多个节点同时加载。</li></ul><p><strong>在 CLI 下，访问模式缩写为：</strong></p><blockquote><blockquote></blockquote></blockquote><ul><li>RWO：ReadWriteOnce</li><li>ROX：ReadOnlyMany</li><li>RWX：ReadWriteMany</li></ul><blockquote><p><strong>一个卷不论支持多少种访问模式，同时只能以一种访问模式加载。例如一个 GCEPersistentDisk既能支持ReadWriteOnce，也能支持ReadOnlyMany。</strong></p></blockquote><h3 id="3-3-NFS实现Volume挂载"><a href="#3-3-NFS实现Volume挂载" class="headerlink" title="3.3 NFS实现Volume挂载"></a>3.3 NFS实现Volume挂载</h3><p><strong>环境介绍</strong></p><table><thead><tr><th>主机名</th><th>IP</th><th>介绍</th></tr></thead><tbody><tr><td>k8s-master01</td><td>192.168.101.61</td><td>k8s master节点</td></tr><tr><td>k8s-node01</td><td>192.168.101.62</td><td>k8s node节点</td></tr><tr><td>k8s-node02</td><td>192.168.101.125</td><td>k8s node节点、nfs服务端</td></tr></tbody></table><h4 id="3-3-1-NFS服务端配置"><a href="#3-3-1-NFS服务端配置" class="headerlink" title="3.3.1 NFS服务端配置"></a>3.3.1 NFS服务端配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务端安装nfs（centos 7 nfs和rpcbind集成在一起了）</span></span><br><span class="line">[root@k8s-node02 ~]# yum -y install nfs-utils   <span class="comment">#客户端也需安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">[root@k8s-node02 ~]# <span class="built_in">cat</span> /etc/exports</span><br><span class="line">/data 192.168.101.0/24(rw,<span class="built_in">sync</span>,insecure,no_subtree_check,no_root_squash)</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改属主属组</span></span><br><span class="line">[root@k8s-node02 ~]# <span class="built_in">chown</span> nfsnobody.nfsnobody /data</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">[root@k8s-node02 ~]# systemctl start rpcbind</span><br><span class="line">[root@k8s-node02 ~]# systemctl <span class="built_in">enable</span> rpcbind</span><br><span class="line">[root@k8s-node02 ~]# systemctl start nfs</span><br><span class="line">[root@k8s-node02 ~]# systemctl <span class="built_in">enable</span> nfs</span><br><span class="line"></span><br><span class="line"><span class="comment">#本地挂载测试</span></span><br><span class="line">[root@k8s-node02 ~]# mount 192.168.101.125:/data /mnt</span><br><span class="line">[root@k8s-node02 ~]# <span class="built_in">df</span> -h</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/sda5               16G  8.1G  8.0G   51% /</span><br><span class="line">devtmpfs               1.9G     0  1.9G    0% /dev</span><br><span class="line">tmpfs                  1.9G     0  1.9G    0% /dev/shm</span><br><span class="line">tmpfs                  1.9G  191M  1.7G   11% /run</span><br><span class="line">tmpfs                  1.9G     0  1.9G    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               20G   45M   19G    1% /data</span><br><span class="line">/dev/sda2              9.8G   54M  9.2G    1% /home</span><br><span class="line">...省略若干...</span><br><span class="line">tmpfs                  380M     0  380M    0% /run/user/0</span><br><span class="line">192.168.101.125:/data   20G   44M   19G    1% /mnt      <span class="comment">#成功。</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-NFS作为Volume"><a href="#3-3-2-NFS作为Volume" class="headerlink" title="3.3.2 NFS作为Volume"></a>3.3.2 NFS作为Volume</h4><blockquote><p>nfs可以直接作为一个存储卷使用，下面是一个reids部署的yaml配置文件。再此示例中，redis在容器中的持久化数据保存在&#x2F;data目录下；存储卷使用nfs，nfs的服务地址为：192.168.101.125，存储路径为：&#x2F;data。容器通过volumeMounts.name的值确定所使用的存储卷。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# vim redis.yaml</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">  revisionHistoryLimit: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line"><span class="comment">#应用的镜像</span></span><br><span class="line">      - image: redis</span><br><span class="line">        name: redis</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line"><span class="comment">#应用的内部端口</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br><span class="line">          name: redis6379</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: ALLOW_EMPTY_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;yes&quot;</span></span><br><span class="line">        - name: REDIS_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="comment">#持久化挂接位置，在docker中</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: redis-persistent-storage</span><br><span class="line">          mountPath: /data</span><br><span class="line"><span class="comment">#宿主机上的目录</span></span><br><span class="line">      volumes:</span><br><span class="line">        - name: redis-persistent-storage</span><br><span class="line">          nfs:</span><br><span class="line">            path: /data</span><br><span class="line">            server: 192.168.101.125</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Deployment</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f redis.yaml</span><br><span class="line">deployment.apps/redis created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看挂载结果</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pods</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-8d9b575b9-8mv4t   1/1     Running   1          31d</span><br><span class="line">mysql-zq255                1/1     Running   1          3d17h</span><br><span class="line">redis-5f66b6446b-g4q7c     1/1     Running   0          4m5s</span><br><span class="line">tomcat-bk4fd               1/1     Running   0          3d17h</span><br><span class="line">tomcat-gns9v               1/1     Running   1          46d</span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl <span class="built_in">exec</span> -it redis-5f66b6446b-g4q7c bash     <span class="comment">#进入pod</span></span><br><span class="line">root@redis-5f66b6446b-g4q7c:/data# <span class="built_in">ls</span></span><br><span class="line">lost+found  redis</span><br><span class="line">root@redis-5f66b6446b-g4q7c:/data# <span class="built_in">cd</span> redis/</span><br><span class="line">root@redis-5f66b6446b-g4q7c:/data/redis# <span class="built_in">ls</span></span><br><span class="line">dump.rdb  redis.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看nfs服务器的宿主机目录</span></span><br><span class="line">[root@k8s-node02 ~]# <span class="built_in">ls</span> /data/</span><br><span class="line">lost+found  redis</span><br><span class="line">[root@k8s-node02 ~]# <span class="built_in">ls</span> /data/redis/</span><br><span class="line">dump.rdb  redis.log                 <span class="comment">#挂载成功</span></span><br></pre></td></tr></table></figure><h3 id="3-4-NFS实现PV-PVC"><a href="#3-4-NFS实现PV-PVC" class="headerlink" title="3.4 NFS实现PV PVC"></a>3.4 NFS实现PV PVC</h3><h4 id="3-4-1-NFS实现PersistentVolum-PV"><a href="#3-4-1-NFS实现PersistentVolum-PV" class="headerlink" title="3.4.1 NFS实现PersistentVolum(PV)"></a>3.4.1 NFS实现PersistentVolum(PV)</h4><blockquote><p>在Kubernetes当前版本的中，可以创建类型为nfs的持久化存储卷，用于为PersistentVolumClaim提供存储卷。在下面的PersistenVolume YAML配置文件中，定义了一个名为nfs-pv的持久化存储卷，此存储卷提供了5G的存储空间，只能由一个PersistentVolumClaim进行可读可写操作。此持久化存储卷使用的nfs服务器地址为192.168.101.125，存储的路径为&#x2F;data。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建多个目录，指定多个PV</span></span><br><span class="line">[root@k8s-node02 ~]# <span class="built_in">mkdir</span> -p /data/&#123;1,2,3,4,5&#125;</span><br><span class="line">[root@k8s-node02 ~]# <span class="built_in">ls</span> /data/</span><br><span class="line">1  2  3  4  5</span><br><span class="line">[root@k8s-node02 ~]# vim /etc/exports           <span class="comment">#修改配置文件</span></span><br><span class="line">/data/1 192.168.101.0/24(rw,no_root_squash)</span><br><span class="line">/data/2 192.168.101.0/24(rw,no_root_squash)</span><br><span class="line">/data/3 192.168.101.0/24(rw,no_root_squash)</span><br><span class="line">/data/4 192.168.101.0/24(rw,no_root_squash)</span><br><span class="line">/data/5 192.168.101.0/24(rw,no_root_squash)</span><br><span class="line">[root@k8s-node02 ~]# systemctl restart nfs      <span class="comment">#重启服务</span></span><br><span class="line">[root@k8s-node02 ~]# showmount -e</span><br><span class="line">Export list <span class="keyword">for</span> k8s-node02:</span><br><span class="line">/data/5 192.168.101.0/24</span><br><span class="line">/data/4 192.168.101.0/24</span><br><span class="line">/data/3 192.168.101.0/24</span><br><span class="line">/data/2 192.168.101.0/24</span><br><span class="line">/data/1 192.168.101.0/24</span><br><span class="line"></span><br><span class="line"><span class="comment">#将这五个存储空间定义成pv</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# vim nfs-pv.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-pv01</span><br><span class="line">  labels:</span><br><span class="line">    zhaoshuo: pv01</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 1Gi</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany</span><br><span class="line">  <span class="comment"># 此持久化存储卷使用nfs插件</span></span><br><span class="line">  nfs:</span><br><span class="line">    <span class="comment"># nfs共享目录为/data</span></span><br><span class="line">    path: /data/1</span><br><span class="line">    <span class="comment"># nfs服务器的地址</span></span><br><span class="line">    server: 192.168.101.125</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-pv02</span><br><span class="line">  labels:</span><br><span class="line">    zhaoshuo: pv02</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 2Gi</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/2</span><br><span class="line">    server: 192.168.101.125</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-pv03</span><br><span class="line">  labels:</span><br><span class="line">    zhaoshuo: pv03</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 3Gi</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/3</span><br><span class="line">    server: 192.168.101.125</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-pv04</span><br><span class="line">  labels:</span><br><span class="line">    zhaoshuo: pv04</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 4Gi</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/4</span><br><span class="line">    server: 192.168.101.125</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-pv05</span><br><span class="line">  labels:</span><br><span class="line">    zhaoshuo: pv05</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 5Gi</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/5</span><br><span class="line">    server: 192.168.101.125</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建PV</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f nfs-pv.yaml</span><br><span class="line">persistentvolume/nfs-pv01 created</span><br><span class="line">persistentvolume/nfs-pv02 created</span><br><span class="line">persistentvolume/nfs-pv03 created</span><br><span class="line">persistentvolume/nfs-pv04 created</span><br><span class="line">persistentvolume/nfs-pv05 created</span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pv     <span class="comment">#pv已经运行起来了</span></span><br><span class="line">NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">nfs-pv01   1Gi        RWX            Retain           Available                                   27s</span><br><span class="line">nfs-pv02   2Gi        RWX            Retain           Available                                   27s</span><br><span class="line">nfs-pv03   3Gi        RWO            Retain           Available                                   27s</span><br><span class="line">nfs-pv04   4Gi        RWX            Retain           Available                                   27s</span><br><span class="line">nfs-pv05   5Gi        RWX            Retain           Available                                   27s</span><br></pre></td></tr></table></figure><blockquote><p>存储卷创建成功后将处于可用状态，等待PersistentVolumClaim使用。PersistentVolumClaim会通过访问模式和存储空间自动选择合适存储卷，并与其进行绑定。</p></blockquote><h4 id="3-4-2-创建PersistenetVolumeClaim-PVC"><a href="#3-4-2-创建PersistenetVolumeClaim-PVC" class="headerlink" title="3.4.2 创建PersistenetVolumeClaim(PVC)"></a>3.4.2 创建PersistenetVolumeClaim(PVC)</h4><blockquote><p>PersistenetVolumeClaim是对PersistenetVolume的声明，即PersistenetVolume为存储的提供者，而PersistenetVolumeClaim为存储的消费者。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# vim nfs-pvc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-pvc</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany       <span class="comment">#此访问方式必须与pv的方式相同</span></span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Gi      <span class="comment">#需求1G的存储空间 (如果不指定名字，会根据以上两条规则匹配)</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#创建pvc</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f nfs-pvc.yaml</span><br><span class="line">persistentvolumeclaim/nfs-pvc created</span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pvc</span><br><span class="line">NAME      STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">nfs-pvc   Bound    nfs-pv01   1Gi        RWX                           3s</span><br><span class="line"></span><br><span class="line"><span class="comment">#再次查看pv状态</span></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pv</span><br><span class="line">NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM             STORAGECLASS   REASON   AGE</span><br><span class="line">nfs-pv01   1Gi        RWX            Retain           Bound       default/nfs-pvc                           11m   <span class="comment">#已经被绑定</span></span><br><span class="line">nfs-pv02   2Gi        RWX            Retain           Available                                             11m</span><br><span class="line">nfs-pv03   3Gi        RWO            Retain           Available                                             11m</span><br><span class="line">nfs-pv04   4Gi        RWX            Retain           Available                                             11m</span><br><span class="line">nfs-pv05   5Gi        RWX            Retain           Available                                             11m</span><br></pre></td></tr></table></figure><h4 id="3-4-3-创建一个pod，使用pvc"><a href="#3-4-3-创建一个pod，使用pvc" class="headerlink" title="3.4.3 创建一个pod，使用pvc"></a>3.4.3 创建一个pod，使用pvc</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 kubernetes-yaml]# vim mypod.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mypod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: mypod</span><br><span class="line">      image: nginx</span><br><span class="line">      volumeMounts:</span><br><span class="line">      - mountPath: <span class="string">&quot;/usr/share/nginx/html&quot;</span></span><br><span class="line">        name: mypod</span><br><span class="line">  volumes:</span><br><span class="line">    - name: mypod</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: nfs-pvc</span><br><span class="line">        </span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl create -f mypod.yaml</span><br><span class="line">pod/mypod created</span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pod</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-8d9b575b9-8mv4t   1/1     Running   3          40d</span><br><span class="line">mypod                      1/1     Running   0          40s <span class="comment">#已经创建</span></span><br><span class="line">mysql-zq255                1/1     Running   1          12d</span><br><span class="line">tomcat-bk4fd               1/1     Running   1          12d</span><br><span class="line">tomcat-gns9v               1/1     Running   3          55d</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 kubernetes-yaml]# kubectl get pod -o wide</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE     IP            NODE              NOMINATED NODE   READINESS GATES</span><br><span class="line">frontend-8d9b575b9-8mv4t   1/1     Running   3          40d     172.30.34.3   192.168.101.125   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">mypod                      1/1     Running   0          2m53s   172.30.49.2   192.168.101.62    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">mysql-zq255                1/1     Running   1          12d     172.30.34.5   192.168.101.125   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat-bk4fd               1/1     Running   1          12d     172.30.34.4   192.168.101.125   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat-gns9v               1/1     Running   3          55d     172.30.34.2   192.168.101.125   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#去这个pv对应的存储空间目录创建index文件测试挂载</span></span><br><span class="line">[root@k8s-node02 ~]# <span class="built_in">cd</span> /data/1/</span><br><span class="line">[root@k8s-node02 1]# <span class="built_in">ls</span></span><br><span class="line">[root@k8s-node02 1]# vim index.html</span><br><span class="line">[root@k8s-node02 1]# curl 172.30.49.2</span><br><span class="line">dsadasdwq</span><br><span class="line"></span><br><span class="line"><span class="comment">#完成静态存储</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.kubernetes.org.cn/4069.html">https://www.kubernetes.org.cn/4069.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Harbor私有镜像仓库</title>
      <link href="/articles/2018/11/15/harborsiyoujingxiangcangku/"/>
      <url>/articles/2018/11/15/harborsiyoujingxiangcangku/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Harbor私有镜像仓库"><a href="#Harbor私有镜像仓库" class="headerlink" title="Harbor私有镜像仓库"></a>Harbor私有镜像仓库</h1><h2 id="一，Harbor简介"><a href="#一，Harbor简介" class="headerlink" title="一，Harbor简介"></a>一，Harbor简介</h2><ul><li><input checked="" disabled="" type="checkbox"> Harbor可帮助用户迅速搭建企业级注册服务。它提供了管理图形界面，基于角色的访问控制（Role Based Access Control），镜像远程复制（同步），AD&#x2F;LDAP集成，以及审计日志等企业用户需求的功能，同时还原生支持中文。</li><li><input checked="" disabled="" type="checkbox"> 该项目自推出以来，在Github获得了超过3300多个star和900多个forks。</li></ul><h3 id="1-1-基于角色的访问控制"><a href="#1-1-基于角色的访问控制" class="headerlink" title="1.1 基于角色的访问控制"></a>1.1 基于角色的访问控制</h3><blockquote><p>用户与Docker镜像仓库通过“项目”进行组织管理，一个用户可以对多个镜像仓库在同一命名空间（project）里有不同的权限。</p></blockquote><h3 id="1-2-图形化用户界面"><a href="#1-2-图形化用户界面" class="headerlink" title="1.2 图形化用户界面"></a>1.2 图形化用户界面</h3><blockquote><p>用户可以通过浏览器来浏览，检索当前Docker镜像仓库，管理项目和命名空间</p></blockquote><h3 id="1-3-审计管理"><a href="#1-3-审计管理" class="headerlink" title="1.3 审计管理"></a>1.3 审计管理</h3><blockquote><p>所有针对镜像仓库的操作都可以被记录追溯，用于审计管理。</p></blockquote><h3 id="1-4-国际化"><a href="#1-4-国际化" class="headerlink" title="1.4 国际化"></a>1.4 国际化</h3><blockquote><p>基于英文与中文语言进行了本地化。可以增加更多的语言支持。</p></blockquote><h3 id="1-5-RESTful-API"><a href="#1-5-RESTful-API" class="headerlink" title="1.5 RESTful API"></a>1.5 RESTful API</h3><blockquote><p>提供给管理员对于Harbor更多的操控，使得与其他管理软件集成变得更容易。</p></blockquote><h3 id="1-6-LDAP认证"><a href="#1-6-LDAP认证" class="headerlink" title="1.6 LDAP认证"></a>1.6 LDAP认证</h3><h3 id="1-7-镜像复制"><a href="#1-7-镜像复制" class="headerlink" title="1.7 镜像复制"></a>1.7 镜像复制</h3><blockquote><p>基于策略的Docker镜像复制功能，可在不同的数据中心，不同的运行环境之间同步镜像，并提供有好的管理界面，大大简化了实际运维中的镜像管理工作。</p></blockquote><h3 id="1-8-与Clair集成"><a href="#1-8-与Clair集成" class="headerlink" title="1.8 与Clair集成"></a>1.8 与Clair集成</h3><blockquote><p>与Clair集成，添加漏洞扫描功能。Clair是coreos开源的容器漏洞扫描工具，在容器逐渐普及的今天，容器镜像安全问题日益严重。Clair是目前少数的开源安全扫描工具。</p></blockquote><h3 id="1-9-Notary签名工具"><a href="#1-9-Notary签名工具" class="headerlink" title="1.9 Notary签名工具"></a>1.9 Notary签名工具</h3><blockquote><p>Notary是Docker镜像的签名工具，用来保证镜像在pull，push和传输工程中的一致性和完整性，避免中间人攻击，避免非法的镜像更新和运行。</p></blockquote><h2 id="二，为Harbor签发域名证书"><a href="#二，为Harbor签发域名证书" class="headerlink" title="二，为Harbor签发域名证书"></a>二，为Harbor签发域名证书</h2><blockquote><p>openssl是目前最流行的SSL密码库工具，提供了一个通用，功能完备的工具套件，用以支持SSL&#x2F;TLS协议的实现。<br>官网：<a href="https://www.openssl.org/source/">https://www.openssl.org/source/</a></p></blockquote><p><strong>环境准备</strong></p><table><thead><tr><th>主机名</th><th>ip</th><th>用途</th><th>最小资源配比</th><th>最佳资源配比</th></tr></thead><tbody><tr><td>harbor-master</td><td>192.168.200.103</td><td>harbor私有镜像仓库</td><td>2CPU</td><td>4CPU</td></tr><tr><td></td><td></td><td></td><td>4G mem</td><td>8G mem</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor-master ~]# hostname -I</span><br><span class="line">192.168.200.103 </span><br><span class="line">[root@harbor-master ~]# <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-862.el7.x86_64</span><br><span class="line">[root@harbor-master ~]# <span class="built_in">cat</span> /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.5.1804 (Core) </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>官方文档<a href="https://github.com/goharbor/harbor/blob/master/docs/configure_https.md">https://github.com/goharbor/harbor/blob/master/docs/configure_https.md</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建自己的CA证书</span></span><br><span class="line">[root@harbor-master ~]# <span class="built_in">mkdir</span> -p /data/ssl</span><br><span class="line">[root@harbor-master ~]# <span class="built_in">cd</span> /data/ssl/</span><br><span class="line">[root@harbor-master ssl]# <span class="built_in">which</span> openssl</span><br><span class="line">/usr/bin/openssl</span><br><span class="line">[root@harbor-master ssl]# openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt</span><br><span class="line">Generating a 4096 bit RSA private key</span><br><span class="line">..................................................................++</span><br><span class="line">.................................................++</span><br><span class="line">writing new private key to <span class="string">&#x27;ca.key&#x27;</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN        <span class="comment">#国家的名字</span></span><br><span class="line">State or Province Name (full name) []:Beijing       <span class="comment">#城市名字</span></span><br><span class="line">Locality Name (eg, city) [Default City]:Beijing</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:yunjisuan     <span class="comment">#公司名字</span></span><br><span class="line">Organizational Unit Name (eg, section) []:yunjisuan</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:www.yunjisuan.com      #域名</span></span><br><span class="line"><span class="string">Email Address []:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#生成签名证书请求</span></span><br><span class="line"><span class="string">[root@harbor-master ssl]# openssl req -newkey  rsa:4096 -nodes -sha256 -keyout www.yunjisuan.com.key -out www.yunjisuan.com.csr</span></span><br><span class="line"><span class="string">Generating a 4096 bit RSA private key</span></span><br><span class="line"><span class="string">...................................................++</span></span><br><span class="line"><span class="string">....++</span></span><br><span class="line"><span class="string">writing new private key to &#x27;</span>www.yunjisuan.com.key<span class="string">&#x27;</span></span><br><span class="line"><span class="string">-----</span></span><br><span class="line"><span class="string">You are about to be asked to enter information that will be incorporated</span></span><br><span class="line"><span class="string">into your certificate request.</span></span><br><span class="line"><span class="string">What you are about to enter is what is called a Distinguished Name or a DN.</span></span><br><span class="line"><span class="string">There are quite a few fields but you can leave some blank</span></span><br><span class="line"><span class="string">For some fields there will be a default value,</span></span><br><span class="line"><span class="string">If you enter &#x27;</span>.<span class="string">&#x27;, the field will be left blank.</span></span><br><span class="line"><span class="string">-----</span></span><br><span class="line"><span class="string">Country Name (2 letter code) [XX]:CN</span></span><br><span class="line"><span class="string">State or Province Name (full name) []:Beijing</span></span><br><span class="line"><span class="string">Locality Name (eg, city) [Default City]:Beijing</span></span><br><span class="line"><span class="string">Organization Name (eg, company) [Default Company Ltd]:yunjisuan</span></span><br><span class="line"><span class="string">Organizational Unit Name (eg, section) []:yunjisuan</span></span><br><span class="line"><span class="string">Common Name (eg, your name or your server&#x27;</span>s hostname) []:www.yunjisuan.com</span><br><span class="line">Email Address []:</span><br><span class="line"></span><br><span class="line">Please enter the following <span class="string">&#x27;extra&#x27;</span> attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成注册表主机的证书</span></span><br><span class="line">[root@harbor-master ssl]# openssl x509 -req -days 365 -<span class="keyword">in</span> www.yunjisuan.com.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out www.yunjisuan</span><br><span class="line">.com.crt</span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=CN/ST=Beijing/L=Beijing/O=yunjisuan/OU=yunjisuan/CN=www.yunjisuan.com</span><br><span class="line">Getting CA Private Key</span><br><span class="line">[root@harbor-master ssl]# ll</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--. 1 root root 2049 Jan 14 23:45 ca.crt</span><br><span class="line">-rw-r--r--. 1 root root 3272 Jan 14 23:45 ca.key</span><br><span class="line">-rw-r--r--. 1 root root   17 Jan 15 00:00 ca.srl</span><br><span class="line">-rw-r--r--. 1 root root 1931 Jan 15 00:00 www.yunjisuan.com.crt</span><br><span class="line">-rw-r--r--. 1 root root 1716 Jan 14 23:56 www.yunjisuan.com.csr</span><br><span class="line">-rw-r--r--. 1 root root 3272 Jan 14 23:56 www.yunjisuan.com.key</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三，信任自签发的域名证书"><a href="#三，信任自签发的域名证书" class="headerlink" title="三，信任自签发的域名证书"></a>三，信任自签发的域名证书</h2><blockquote><p>由于CA证书是我们自己签发的，linux操作系统是不信任的   ，因此，需要把证书加到系统的信任证书里。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将自签ca证书添加到系统信任</span></span><br><span class="line">[root@harbor-master ssl]# <span class="built_in">pwd</span></span><br><span class="line">/data/ssl</span><br><span class="line">[root@harbor-master ssl]# <span class="built_in">cp</span> www.yunjisuan.com.crt /etc/pki/ca-trust/source/anchors/</span><br><span class="line"></span><br><span class="line"><span class="comment">#让ca认证立刻生效</span></span><br><span class="line">[root@harbor-master ssl]# update-ca-trust <span class="built_in">enable</span></span><br><span class="line">[root@harbor-master ssl]# update-ca-trust extract</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>让证书立刻生效之后，要重启docker服务，否则无效。</p></blockquote><h2 id="四，Harbor-1-4-版本配置与安装"><a href="#四，Harbor-1-4-版本配置与安装" class="headerlink" title="四，Harbor 1.4 版本配置与安装"></a>四，Harbor 1.4 版本配置与安装</h2><h3 id="4-1-安装docker-ce社区版"><a href="#4-1-安装docker-ce社区版" class="headerlink" title="4.1 安装docker-ce社区版"></a>4.1 安装docker-ce社区版</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor-master ~]# sestatus </span><br><span class="line">SELinux status:                 disabled</span><br><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">[root@harbor-master ~]# yum -y install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加docker的CE版本的yum源配置文件</span></span><br><span class="line">[root@harbor-master ~]# curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  2424  100  2424    0     0   2544      0 --:--:-- --:--:-- --:--:--  2543</span><br><span class="line">[root@harbor-master ~]# ll /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">-rw-r--r-- 1 root root 2424 10月 13 21:12 /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装CE版本的docker</span></span><br><span class="line">[root@harbor-master ~]# yum -y install docker-ce</span><br><span class="line">[root@harbor-master ~]# systemctl start docker      <span class="comment">#启动docker</span></span><br><span class="line">[root@harbor-master ~]# systemctl <span class="built_in">enable</span> docker     <span class="comment">#添加开机启动</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">[root@harbor-master ~]# docker version          <span class="comment">#查看docker版本</span></span><br><span class="line">Client:</span><br><span class="line"> Version:           18.06.1-ce</span><br><span class="line"> API version:       1.38</span><br><span class="line"> Go version:        go1.10.3</span><br><span class="line"> Git commit:        e68fc7a</span><br><span class="line"> Built:             Tue Aug 21 17:23:03 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="4-2-下载并安装Harbor私有仓库"><a href="#4-2-下载并安装Harbor私有仓库" class="headerlink" title="4.2 下载并安装Harbor私有仓库"></a>4.2 下载并安装Harbor私有仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建harbor的证书目录，并复制</span></span><br><span class="line">[root@harbor-master ~]# <span class="built_in">mkdir</span> -p /etc/ssl/harbor</span><br><span class="line">[root@harbor-master ~]# <span class="built_in">cp</span> /data/ssl/www.yunjisuan.com.key /etc/ssl/harbor/</span><br><span class="line">[root@harbor-master ~]# <span class="built_in">cp</span> /data/ssl/www.yunjisuan.com.crt /etc/ssl/harbor/</span><br><span class="line">[root@harbor-master ~]# ll /etc/ssl/harbor/</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 1931 Jan 15 00:16 www.yunjisuan.com.crt</span><br><span class="line">-rw-r--r-- 1 root root 3272 Jan 15 00:16 www.yunjisuan.com.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建harbor下载目录，并下载harbor-offline-installer-v1.5.0.tgz</span></span><br><span class="line">[root@harbor-master ~]# <span class="built_in">mkdir</span> -p /data/install</span><br><span class="line">[root@harbor-master ~]# <span class="built_in">cd</span> /data/install/</span><br><span class="line">[root@harbor-master install]# <span class="built_in">pwd</span></span><br><span class="line">/data/install</span><br><span class="line">[root@harbor-master install]# wget http://harbor.orientsoft.cn/harbor-v1.5.0/harbor-offline-installer-v1.5.0.tgz</span><br><span class="line">[root@harbor-master install]# <span class="built_in">ls</span> </span><br><span class="line">harbor-offline-installer-v1.5.0.tgz</span><br><span class="line">[root@harbor-master install]# tar xf harbor-offline-installer-v1.5.0.tgz </span><br><span class="line">[root@harbor-master install]# <span class="built_in">ls</span></span><br><span class="line">harbor  harbor-offline-installer-v1.5.0.tgz</span><br><span class="line">[root@harbor-master install]# <span class="built_in">cd</span> harbor</span><br><span class="line">[root@harbor-master harbor]# ll</span><br><span class="line">total 854960</span><br><span class="line">drwxr-xr-x 3 root root        23 Jan 15 00:58 common        <span class="comment">#模板目录</span></span><br><span class="line">-rw-r--r-- 1 root root      1185 May  2  2018 docker-compose.clair.yml</span><br><span class="line">-rw-r--r-- 1 root root      1725 May  2  2018 docker-compose.notary.yml</span><br><span class="line">-rw-r--r-- 1 root root      3596 May  2  2018 docker-compose.yml</span><br><span class="line">drwxr-xr-x 3 root root       156 May  2  2018 ha            <span class="comment">#高可用配置</span></span><br><span class="line">-rw-r--r-- 1 root root      6687 May  2  2018 harbor.cfg    <span class="comment">#harbor配置文件</span></span><br><span class="line">-rw-r--r-- 1 root root 875401338 May  2  2018 harbor.v1.5.0.tar.gz</span><br><span class="line">-rwxr-xr-x 1 root root      5773 May  2  2018 install.sh</span><br><span class="line">-rw-r--r-- 1 root root     10771 May  2  2018 LICENSE</span><br><span class="line">-rw-r--r-- 1 root root       482 May  2  2018 NOTICE</span><br><span class="line">-rwxr-xr-x 1 root root     27379 May  2  2018 prepare</span><br><span class="line">[root@harbor-master harbor]# <span class="built_in">cp</span> harbor.cfg&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改habor.cfg配置文件</span></span><br><span class="line">[root@harbor-master harbor]# <span class="built_in">cat</span> -n harbor.cfg.bak | sed -n <span class="string">&#x27;7p;11p;23p;24p;68p&#x27;</span></span><br><span class="line">     7hostname = reg.mydomain.com     <span class="comment">#修改成证书的域名</span></span><br><span class="line">    11ui_url_protocol = http          <span class="comment">#启用加密传输https</span></span><br><span class="line">    23ssl_cert = /data/cert/server.crt    <span class="comment">#证书位置</span></span><br><span class="line">    24ssl_cert_key = /data/cert/server.key    <span class="comment">#证书密钥位置</span></span><br><span class="line">    68harbor_admin_password = Harbor12345     <span class="comment">#默认管理员及密码</span></span><br><span class="line">[root@harbor-master harbor]# <span class="built_in">cat</span> -n harbor.cfg | sed -n <span class="string">&#x27;7p;11p;23p;24p;68p&#x27;</span></span><br><span class="line">     7hostname = www.yunjisuan.com</span><br><span class="line">    11ui_url_protocol = https</span><br><span class="line">    23ssl_cert = /etc/ssl/harbor/www.yunjisuan.com.crt</span><br><span class="line">    24ssl_cert_key = /etc/ssl/harbor/www.yunjisuan.com.key</span><br><span class="line">    68harbor_admin_password = Harbor12345</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装命令docker-compose（需要1.21版本）</span></span><br><span class="line">[root@harbor-master ~]# curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(<span class="built_in">uname</span> -s)-$(<span class="built_in">uname</span> -m) -o /usr/local/bin/docker-compose</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   617    0   617    0     0    367      0 --:--:--  0:00:01 --:--:--   367</span><br><span class="line">100 10.3M  100 10.3M    0     0   289k      0  0:00:36  0:00:36 --:--:--  573k</span><br><span class="line">[root@harbor-master ~]# ll /usr/local/bin/docker-compose </span><br><span class="line">-rw-r--r-- 1 root root 10858808 Jan 15 01:44 /usr/local/bin/docker-compose</span><br><span class="line">[root@harbor-master ~]# <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose </span><br><span class="line">[root@harbor-master ~]# <span class="built_in">which</span> docker-compose</span><br><span class="line">/usr/local/bin/docker-compose</span><br><span class="line">[root@harbor-master ~]# docker-compose --version</span><br><span class="line">docker-compose version 1.21.2, build a133471</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装harbor私有镜像仓库</span></span><br><span class="line">[root@harbor-master ~]# <span class="built_in">cd</span> /data/install/harbor</span><br><span class="line">[root@harbor-master harbor]# ./install.sh --with-notary --with-clair    <span class="comment">#--with-notary:镜像签名功能     #--with-clair:漏洞扫描功能</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看harbor启动的镜像</span></span><br><span class="line">[root@harbor-master harbor]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                                       COMMAND                  CREATED             STATUS                             PORTS                                                              NAMES</span><br><span class="line">90c62ec359ff        vmware/nginx-photon:v1.5.0                  <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   23 seconds ago      Up 20 seconds (health: starting)   0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:4443-&gt;4443/tcp   nginx</span><br><span class="line">feaa06731077        vmware/harbor-jobservice:v1.5.0             <span class="string">&quot;/harbor/start.sh&quot;</span>       23 seconds ago      Up 8 seconds                                                                                          harbor-jobservice</span><br><span class="line">ce7a51285631        vmware/notary-server-photon:v0.5.1-v1.5.0   <span class="string">&quot;/bin/server-start.sh&quot;</span>   24 seconds ago      Up 22 seconds                                                                                         notary-server</span><br><span class="line">2f59412d3e6e        vmware/harbor-ui:v1.5.0                     <span class="string">&quot;/harbor/start.sh&quot;</span>       25 seconds ago      Up 23 seconds (health: starting)                                                                      harbor-ui</span><br><span class="line">f58ad9931c17        vmware/clair-photon:v2.0.1-v1.5.0           <span class="string">&quot;/docker-entrypoint.…&quot;</span>   25 seconds ago      Up 1 second (health: starting)     6060-6061/tcp                                                      clair</span><br><span class="line">a8c46d927e1b        vmware/notary-signer-photon:v0.5.1-v1.5.0   <span class="string">&quot;/bin/signer-start.sh&quot;</span>   26 seconds ago      Up 24 seconds                                                                                         notary-signer</span><br><span class="line">fb6de4a74c1c        vmware/postgresql-photon:v1.5.0             <span class="string">&quot;/entrypoint.sh post…&quot;</span>   27 seconds ago      Up 24 seconds (health: starting)   5432/tcp                                                           clair-db</span><br><span class="line">a233f7affef7        vmware/harbor-adminserver:v1.5.0            <span class="string">&quot;/harbor/start.sh&quot;</span>       27 seconds ago      Up 25 seconds (health: starting)                                                                      harbor-adminserver</span><br><span class="line">ea71c3eb0e26        vmware/harbor-db:v1.5.0                     <span class="string">&quot;/usr/local/bin/dock…&quot;</span>   27 seconds ago      Up 25 seconds (health: starting)   3306/tcp                                                           harbor-db</span><br><span class="line">86ea4c257b89        vmware/registry-photon:v2.6.2-v1.5.0        <span class="string">&quot;/entrypoint.sh serv…&quot;</span>   27 seconds ago      Up 24 seconds (health: starting)   5000/tcp                                                           registry</span><br><span class="line">16b6e4bdc01f        vmware/mariadb-photon:v1.5.0                <span class="string">&quot;/usr/local/bin/dock…&quot;</span>   27 seconds ago      Up 26 seconds                      3306/tcp                                                           notary-db</span><br><span class="line">e7e5425be2b3        vmware/redis-photon:v1.5.0                  <span class="string">&quot;docker-entrypoint.s…&quot;</span>   27 seconds ago      Up 26 seconds                      6379/tcp                                                           redis</span><br><span class="line">c022f1ce72dc        vmware/harbor-log:v1.5.0                    <span class="string">&quot;/bin/sh -c /usr/loc…&quot;</span>   29 seconds ago      Up 27 seconds (health: starting)   127.0.0.1:1514-&gt;10514/tcp                                          harbor-log</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通过浏览器进行访问测试</strong></p><p><code>https://192.168.200.103/</code></p><p><img src="/articles/2018/11/15/harborsiyoujingxiangcangku/1.png"></p><blockquote><p>需要修改一下安全模式</p></blockquote><p><img src="/articles/2018/11/15/harborsiyoujingxiangcangku/2.png"></p><blockquote><p>项目创建：仅管理员<br>不允许自动注册</p></blockquote><h2 id="五，镜像管理与安全：漏洞扫描和镜像签名"><a href="#五，镜像管理与安全：漏洞扫描和镜像签名" class="headerlink" title="五，镜像管理与安全：漏洞扫描和镜像签名"></a>五，镜像管理与安全：漏洞扫描和镜像签名</h2><h3 id="5-1-添加docker国内公有镜像源"><a href="#5-1-添加docker国内公有镜像源" class="headerlink" title="5.1 添加docker国内公有镜像源"></a>5.1 添加docker国内公有镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor-master harbor]# <span class="built_in">cat</span> /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>:[ <span class="string">&quot;https://registry.docker-cn.com&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line">[root@harbor-master harbor]# systemctl daemon-reload</span><br><span class="line">[root@harbor-master harbor]# systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-重新启动harbor私有镜像仓库"><a href="#5-2-重新启动harbor私有镜像仓库" class="headerlink" title="5.2 重新启动harbor私有镜像仓库"></a>5.2 重新启动harbor私有镜像仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#让harbor修改过的配置立刻生效</span></span><br><span class="line">[root@harbor-master harbor]# ./prepare </span><br><span class="line">Clearing the configuration file: ./common/config/adminserver/env</span><br><span class="line">Clearing the configuration file: ./common/config/ui/env</span><br><span class="line">Clearing the configuration file: ./common/config/ui/app.conf</span><br><span class="line">Clearing the configuration file: ./common/config/ui/private_key.pem</span><br><span class="line">Clearing the configuration file: ./common/config/db/env</span><br><span class="line">Clearing the configuration file: ./common/config/jobservice/env</span><br><span class="line">Clearing the configuration file: ./common/config/jobservice/config.yml</span><br><span class="line">Clearing the configuration file: ./common/config/registry/config.yml</span><br><span class="line">Clearing the configuration file: ./common/config/registry/root.crt</span><br><span class="line">Clearing the configuration file: ./common/config/nginx/conf.d/notary.upstream.conf</span><br><span class="line">Clearing the configuration file: ./common/config/nginx/conf.d/notary.server.conf</span><br><span class="line">Clearing the configuration file: ./common/config/nginx/cert/www.yunjisuan.com.crt</span><br><span class="line">Clearing the configuration file: ./common/config/nginx/cert/www.yunjisuan.com.key</span><br><span class="line">Clearing the configuration file: ./common/config/nginx/nginx.conf</span><br><span class="line">Clearing the configuration file: ./common/config/log/logrotate.conf</span><br><span class="line">Clearing the configuration file: ./common/config/notary/mysql-initdb.d/initial-notarysigner.sql</span><br><span class="line">Clearing the configuration file: ./common/config/notary/mysql-initdb.d/initial-notaryserver.sql</span><br><span class="line">Clearing the configuration file: ./common/config/notary/notary-signer.crt</span><br><span class="line">Clearing the configuration file: ./common/config/notary/notary-signer.key</span><br><span class="line">Clearing the configuration file: ./common/config/notary/notary-signer-ca.crt</span><br><span class="line">Clearing the configuration file: ./common/config/notary/root.crt</span><br><span class="line">Clearing the configuration file: ./common/config/notary/signer-config.json</span><br><span class="line">Clearing the configuration file: ./common/config/notary/server-config.json</span><br><span class="line">Clearing the configuration file: ./common/config/notary/signer_env</span><br><span class="line">Clearing the configuration file: ./common/config/clair/postgresql-init.d/README.md</span><br><span class="line">Clearing the configuration file: ./common/config/clair/postgres_env</span><br><span class="line">Clearing the configuration file: ./common/config/clair/config.yaml</span><br><span class="line">Clearing the configuration file: ./common/config/clair/clair_env</span><br><span class="line">loaded secret from file: /data/secretkey</span><br><span class="line">Generated configuration file: ./common/config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: ./common/config/adminserver/env</span><br><span class="line">Generated configuration file: ./common/config/ui/env</span><br><span class="line">Generated configuration file: ./common/config/registry/config.yml</span><br><span class="line">Generated configuration file: ./common/config/db/env</span><br><span class="line">Generated configuration file: ./common/config/jobservice/env</span><br><span class="line">Generated configuration file: ./common/config/jobservice/config.yml</span><br><span class="line">Generated configuration file: ./common/config/log/logrotate.conf</span><br><span class="line">Generated configuration file: ./common/config/jobservice/config.yml</span><br><span class="line">Generated configuration file: ./common/config/ui/app.conf</span><br><span class="line">Generated certificate, key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt</span><br><span class="line">The configuration files are ready, please use docker-compose to start the service.</span><br><span class="line"></span><br><span class="line"><span class="comment">#清理所有harbor容器进程</span></span><br><span class="line">[root@harbor-master harbor]# docker-compose down</span><br><span class="line">Stopping nginx             ... <span class="keyword">done</span></span><br><span class="line">Stopping harbor-jobservice ... <span class="keyword">done</span></span><br><span class="line">Stopping harbor-ui         ... <span class="keyword">done</span></span><br><span class="line">Stopping redis             ... <span class="keyword">done</span></span><br><span class="line">Stopping harbor-log        ... <span class="keyword">done</span></span><br><span class="line">Removing nginx              ... <span class="keyword">done</span></span><br><span class="line">Removing harbor-jobservice  ... <span class="keyword">done</span></span><br><span class="line">Removing harbor-ui          ... <span class="keyword">done</span></span><br><span class="line">Removing harbor-adminserver ... <span class="keyword">done</span></span><br><span class="line">Removing harbor-db          ... <span class="keyword">done</span></span><br><span class="line">Removing registry           ... <span class="keyword">done</span></span><br><span class="line">Removing redis              ... <span class="keyword">done</span></span><br><span class="line">Removing harbor-log         ... <span class="keyword">done</span></span><br><span class="line">Removing network harbor_harbor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#后台启动所有harbor容器进程</span></span><br><span class="line">[root@harbor-master harbor]# docker-compose up -d</span><br><span class="line">Creating network <span class="string">&quot;harbor_harbor&quot;</span> with the default driver</span><br><span class="line">Creating harbor-log ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-adminserver ... <span class="keyword">done</span></span><br><span class="line">Creating redis              ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-db          ... <span class="keyword">done</span></span><br><span class="line">Creating registry           ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-ui          ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-jobservice  ... <span class="keyword">done</span></span><br><span class="line">Creating nginx              ... <span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-3-下载一个公有镜像上传到harbor"><a href="#5-3-下载一个公有镜像上传到harbor" class="headerlink" title="5.3 下载一个公有镜像上传到harbor"></a>5.3 下载一个公有镜像上传到harbor</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#harbor本地下载一个公有镜像centos:7</span></span><br><span class="line">[root@harbor-master harbor]# docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">a02a4930cb5d: Pull complete </span><br><span class="line">Digest: sha256:184e5f35598e333bfa7de10d8fb1cebb5ee4df5bc0f970bf2b1e7c7345136426</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#本地映射私有仓库域名</span></span><br><span class="line">[root@harbor-master harbor]# <span class="built_in">tail</span> -1 /etc/hosts</span><br><span class="line">192.168.200.103 www.yunjisuan.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#将centos镜像改名并上传到私有镜像仓库</span></span><br><span class="line">[root@harbor-master harbor]# docker tag centos:latest www.yunjisuan.com/library/centos:7</span><br><span class="line">[root@harbor-master harbor]# docker images | grep centos</span><br><span class="line">centos                             latest              1e1148e4cc2c        5 weeks ago         202MB</span><br><span class="line">www.yunjisuan.com/library/centos   7                   1e1148e4cc2c        5 weeks ago         202MB</span><br><span class="line">[root@harbor-master harbor]# docker push www.yunjisuan.com/library/centos:7</span><br><span class="line">The push refers to repository [www.yunjisuan.com/library/centos]</span><br><span class="line">071d8bd76517: Preparing </span><br><span class="line">denied: requested access to the resource is denied      <span class="comment">#连接拒绝，因为还没有进行认证</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登陆验证harbor私有镜像仓库，并上传镜像</span></span><br><span class="line">[root@harbor-master harbor]# docker login www.yunjisuan.com</span><br><span class="line">Username: admin</span><br><span class="line">Password:           <span class="comment">#密码Harbor12345</span></span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line">[root@harbor-master harbor]# docker push www.yunjisuan.com/library/centos:7</span><br><span class="line">The push refers to repository [www.yunjisuan.com/library/centos]</span><br><span class="line">071d8bd76517: Pushed </span><br><span class="line">7: digest: sha256:365fc7f33107869dfcf2b3ba220ce0aa42e16d3f8e8b3c21d72af1ee622f0cf0 size: 529</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-4-登陆浏览器查看镜像上传结果，并扫描漏洞"><a href="#5-4-登陆浏览器查看镜像上传结果，并扫描漏洞" class="headerlink" title="5.4 登陆浏览器查看镜像上传结果，并扫描漏洞"></a>5.4 登陆浏览器查看镜像上传结果，并扫描漏洞</h3><p><img src="/articles/2018/11/15/harborsiyoujingxiangcangku/3.png"><br><img src="/articles/2018/11/15/harborsiyoujingxiangcangku/4.png"><br><img src="/articles/2018/11/15/harborsiyoujingxiangcangku/5.png"></p><h3 id="5-5-设置镜像安全等级"><a href="#5-5-设置镜像安全等级" class="headerlink" title="5.5 设置镜像安全等级"></a>5.5 设置镜像安全等级</h3><p><img src="/articles/2018/11/15/harborsiyoujingxiangcangku/6.png"><br><img src="/articles/2018/11/15/harborsiyoujingxiangcangku/7.png"></p><h3 id="5-6-为docker客户端下发域名证书"><a href="#5-6-为docker客户端下发域名证书" class="headerlink" title="5.6 为docker客户端下发域名证书"></a>5.6 为docker客户端下发域名证书</h3><table><thead><tr><th>主机名</th><th>ip</th><th>用途</th><th>最小资源配比</th><th>最佳资源配比</th></tr></thead><tbody><tr><td>docker-client</td><td>192.168.200.105</td><td>docker客户端</td><td></td><td></td></tr><tr><td>harbor-master</td><td>192.168.200.103</td><td>harbor私有镜像仓库</td><td>2CPU</td><td>4CPU</td></tr><tr><td></td><td></td><td></td><td>4G mem</td><td>8G mem</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#映射harbor私有仓库域名</span></span><br><span class="line">[root@docker-client ~]# <span class="built_in">cat</span> /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.5.1804 (Core) </span><br><span class="line">[root@docker-client ~]# <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-862.el7.x86_64</span><br><span class="line">[root@docker-client ~]# hostname -I</span><br><span class="line">192.168.200.105 </span><br><span class="line">[root@docker-client ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.200.103 www.yunjisuan.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装docker-ce社区版</span></span><br><span class="line">[root@docker-client ~]# sestatus</span><br><span class="line">SELinux status:                 disabled</span><br><span class="line">[root@docker-client ~]# systemctl stop firewalld</span><br><span class="line">[root@docker-client ~]# systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">[root@docker-client ~]# yum -y install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">[root@docker-client ~]# curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  2424  100  2424    0     0    486      0  0:00:04  0:00:04 --:--:--   698</span><br><span class="line">[root@docker-client ~]# yum -y install docker-ce</span><br><span class="line">[root@docker-client ~]# systemctl start docker</span><br><span class="line">[root@docker-client ~]# systemctl <span class="built_in">enable</span> docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">[root@docker-client ~]# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.1</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.6</span><br><span class="line"> Git commit:        4c52b90</span><br><span class="line"> Built:             Wed Jan  9 19:35:01 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.1</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.6</span><br><span class="line">  Git commit:       4c52b90</span><br><span class="line">  Built:            Wed Jan  9 19:06:30 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置国内镜像源</span></span><br><span class="line">[root@docker-client ~]# <span class="built_in">cat</span> /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>:[ <span class="string">&quot;https://registry.docker-cn.com&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line">[root@docker-client ~]# systemctl daemon-reload</span><br><span class="line">[root@docker-client ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载mongo公有镜像</span></span><br><span class="line">[root@docker-client ~]# docker pull mongo</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mongo</span><br><span class="line">b849b56b69e7: Pull complete </span><br><span class="line">42986ef25bcd: Pull complete </span><br><span class="line">d927c1b717ec: Pull complete </span><br><span class="line">15b86ea20233: Pull complete </span><br><span class="line">95dc958d65c6: Pull complete </span><br><span class="line">aec60d69dd50: Pull complete </span><br><span class="line">bf92a6681913: Pull complete </span><br><span class="line">8911fe7d4b35: Pull complete </span><br><span class="line">8ce44114b060: Pull complete </span><br><span class="line">1a944a194d13: Pull complete </span><br><span class="line">5519cf0ef45d: Pull complete </span><br><span class="line">6c688677ac8e: Pull complete </span><br><span class="line">2f147ac236bb: Pull complete </span><br><span class="line">Digest: sha256:d69e9e4d983c080cdbbafc64cbbd26373e0e417cb9cd18189eeb554c534fc26e</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mongo:latest</span><br><span class="line">[root@docker-client ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mongo               latest              7177e01e8c01        2 weeks ago         393MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#为docker客户端下发域名（在harbor本地执行）</span></span><br><span class="line"><span class="comment">#将harbor上的自签发域名证书www.yunjisuan.com.crt复制到docker客户端的对应目录下</span></span><br><span class="line">[root@harbor-master harbor]# <span class="built_in">cd</span> /data/ssl/</span><br><span class="line">[root@harbor-master ssl]# scp www.yunjisuan.com.crt 192.168.200.105:/etc/pki//ca-trust/source/anchors/</span><br><span class="line">The authenticity of host <span class="string">&#x27;192.168.200.105 (192.168.200.105)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:Tb+xKsJLCQlT4u/RS9qENMAdjnoXMLlWbowNVGcfdsg.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:68:b5:d8:28:9f:50:6d:97:1d:26:1c:ea:7e:12:3a:04.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.200.105<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.200.105&#x27;</span>s password: </span><br><span class="line">www.yunjisuan.com.crt                                     100% 1931   102.2KB/s   00:00  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在docker客户端执行，让证书立刻生效</span></span><br><span class="line">[root@docker-client ~]# update-ca-trust <span class="built_in">enable</span></span><br><span class="line">[root@docker-client ~]# update-ca-trust extract</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下发证书重新启动docker-client的docker服务</span></span><br><span class="line">[root@docker-client ~]# systemctl restart docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker-client登陆docker仓库进行验证</span></span><br><span class="line">[root@docker-client ~]# docker login www.yunjisuan.com</span><br><span class="line">Username: admin</span><br><span class="line">Password:           <span class="comment">#密码：Harbor12345</span></span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改镜像名字并上传到私有仓库</span></span><br><span class="line">[root@docker-client ~]# docker tag mongo:latest www.yunjisuan.com/library/mongo</span><br><span class="line">[root@docker-client ~]# docker images</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mongo                             latest              7177e01e8c01        2 weeks ago         393MB</span><br><span class="line">www.yunjisuan.com/library/mongo   latest              7177e01e8c01        2 weeks ago         393MB</span><br><span class="line">[root@docker-client ~]# docker push www.yunjisuan.com/library/mongo     <span class="comment">#上传镜像</span></span><br><span class="line">The push refers to repository [www.yunjisuan.com/library/mongo]</span><br><span class="line">8daf1a7ee9a2: Pushed </span><br><span class="line">c718fe180d79: Pushed </span><br><span class="line">56572579bdba: Pushed </span><br><span class="line">df60ba57445a: Pushed </span><br><span class="line">032fcf7da9f7: Pushed </span><br><span class="line">fb77fd3e12e9: Pushed </span><br><span class="line">8fd54ee41170: Pushed </span><br><span class="line">9bbcbe8a46a5: Pushed </span><br><span class="line">b77c8e5e2140: Pushed </span><br><span class="line">428c1ba11354: Pushed </span><br><span class="line">b097f5edab7b: Pushed </span><br><span class="line">27712caf4371: Pushed </span><br><span class="line">8241afc74c6f: Pushed </span><br><span class="line">latest: digest: sha256:e9e97b5cce9bf6d95c79bf3cb23d90e4d79aa8b469854f263fcb18f69af6195a size: 3028</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>浏览器登陆harbor进行查看</strong></p><p><img src="/articles/2018/11/15/harborsiyoujingxiangcangku/8.png"></p><h3 id="5-7-FAQ：问题解答"><a href="#5-7-FAQ：问题解答" class="headerlink" title="5.7 FAQ：问题解答"></a>5.7 FAQ：问题解答</h3><h4 id="5-7-1-win10版本默认拒绝非认证的域名证书"><a href="#5-7-1-win10版本默认拒绝非认证的域名证书" class="headerlink" title="5.7.1 win10版本默认拒绝非认证的域名证书"></a>5.7.1 win10版本默认拒绝非认证的域名证书</h4><blockquote><p>如果启动harbor采用的是https加密证书的方式，最新版win10浏览器访问，会直接提示“站点不安全，拒绝连接”。<br>那么可以采用非https的方式启动harbor</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor-master ssl]# sed -n <span class="string">&#x27;11p&#x27;</span> /data/install/harbor/harbor.cfg</span><br><span class="line">ui_url_protocol = http</span><br><span class="line"><span class="comment">#修改之后要重启harbor。</span></span><br></pre></td></tr></table></figure><blockquote><p>如果采用非https加密方式启动harhor，最新版的docker是登陆不了的，因为新版docker默认以https的方式登陆harbor。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor-master harbor]# docker login -uadmin -pHarbor123456 www.yunjisuan.com</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">Error response from daemon: Get https://www.yunjisuan.com/v2/: unauthorized: authentication required</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>为了解决登陆问题，需要在&#x2F;etc&#x2F;docker下创建一个daemon.josn的名字文件，加入http方式登陆的harbor域名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor-master harbor]# <span class="built_in">cat</span> /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>:[ <span class="string">&quot;https://registry.docker-cn.com&quot;</span> ],</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>:[ <span class="string">&quot;www.yunjisuan.com&quot;</span> ]     <span class="comment">#添加此行</span></span><br><span class="line">&#125;</span><br><span class="line">[root@harbor-master harbor]# systemctl restart docker           <span class="comment">#进行重启   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#再次登陆harbor</span></span><br><span class="line">[root@harbor-master harbor]# docker login -uadmin -pHarbor12345 www.yunjisuan.com</span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded     <span class="comment">#登陆成功</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###附录：harbor更改镜像数据目录方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /&#123;myharbordir&#125;/common/templates/registry</span><br><span class="line">vim config.yml</span><br><span class="line">version: 0.1</span><br><span class="line"><span class="built_in">log</span>:</span><br><span class="line">  level: debug</span><br><span class="line">  fields:</span><br><span class="line">    service: registry</span><br><span class="line">storage:                <span class="comment">#此字段为数据存放位置字段，下面我把数据存储在S3 bucket</span></span><br><span class="line">    cache:</span><br><span class="line">        layerinfo: inmemory</span><br><span class="line">    filesystem:</span><br><span class="line">        rootdirectory: /storage</span><br><span class="line">    maintenance:</span><br><span class="line">        uploadpurging:</span><br><span class="line">            enabled: <span class="literal">false</span></span><br><span class="line">    delete:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">http:</span><br><span class="line">    addr: :5000</span><br><span class="line">    secret: placeholder</span><br><span class="line">    debug:</span><br><span class="line">        addr: localhost:5001</span><br><span class="line">auth:</span><br><span class="line">  token:</span><br><span class="line">    issuer: harbor-token-issuer</span><br><span class="line">    realm: <span class="variable">$ui_url</span>/service/token</span><br><span class="line">    rootcertbundle: /etc/registry/root.crt</span><br><span class="line">    service: harbor-registry</span><br><span class="line"></span><br><span class="line">notifications:</span><br><span class="line">  endpoints:</span><br><span class="line">      - name: harbor</span><br><span class="line">        disabled: <span class="literal">false</span></span><br><span class="line">        url: http://ui/service/notifications</span><br><span class="line">        <span class="built_in">timeout</span>: 3000ms</span><br><span class="line">        threshold: 5</span><br><span class="line">        backoff: 1s</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment">#修改后文件内容：</span></span><br><span class="line">[root@gago-harbor-airflow registry]# <span class="built_in">cat</span> config.yml </span><br><span class="line">version: 0.1</span><br><span class="line"><span class="built_in">log</span>:</span><br><span class="line">  level: debug</span><br><span class="line">  fields:</span><br><span class="line">    service: registry</span><br><span class="line">storage:</span><br><span class="line">  s3:</span><br><span class="line">    accesskey: xxxxxx</span><br><span class="line">    secretkey: xxxxxx</span><br><span class="line">    region: cn-north-1</span><br><span class="line">    bucket: xxxxxx</span><br><span class="line">http:</span><br><span class="line">    addr: :5000</span><br><span class="line">    secret: placeholder</span><br><span class="line">    debug:</span><br><span class="line">        addr: localhost:5001</span><br><span class="line">auth:</span><br><span class="line">  token:</span><br><span class="line">    issuer: harbor-token-issuer</span><br><span class="line">    realm: <span class="variable">$ui_url</span>/service/token</span><br><span class="line">    rootcertbundle: /etc/registry/root.crt</span><br><span class="line">    service: harbor-registry</span><br><span class="line"></span><br><span class="line">notifications:</span><br><span class="line">  endpoints:</span><br><span class="line">      - name: harbor</span><br><span class="line">        disabled: <span class="literal">false</span></span><br><span class="line">        url: http://ui/service/notifications</span><br><span class="line">        <span class="built_in">timeout</span>: 3000ms</span><br><span class="line">        threshold: 5</span><br><span class="line">        backoff: 1s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础（下）</title>
      <link href="/articles/2018/10/14/dockerjichu-xia/"/>
      <url>/articles/2018/10/14/dockerjichu-xia/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Docker基础（下）"><a href="#Docker基础（下）" class="headerlink" title="Docker基础（下）"></a>Docker基础（下）</h1><h2 id="五，网络管理"><a href="#五，网络管理" class="headerlink" title="五，网络管理"></a>五，网络管理</h2><h3 id="5-1-容器网络模式"><a href="#5-1-容器网络模式" class="headerlink" title="5.1 容器网络模式"></a>5.1 容器网络模式</h3><ul><li><input checked="" disabled="" type="checkbox"> Docker支持5种网络模式 <ul><li>bridge <ul><li>默认网络，Docker启动后默认创建一个docker0网桥，默认创建的容器也是添加到这个网桥中</li></ul></li><li>host <ul><li>容器不会获得一个独立的network namespace，而是与宿主机共用一个</li></ul></li><li>none <ul><li>获取独立的network namespace，但不为容器进行任何网络配置</li></ul></li><li>container <ul><li>与指定的容器使用同一个network namespace，网卡配置也都是相同的</li></ul></li><li>自定义 <ul><li>自定义网桥，默认与bridge网络一样</li></ul></li></ul></li></ul><h4 id="5-1-1-bridge网络类型"><a href="#5-1-1-bridge网络类型" class="headerlink" title="5.1.1 bridge网络类型"></a>5.1.1 bridge网络类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装bridge管理工具</span></span><br><span class="line">[root@localhost ~]# yum -y install bridge-utils</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看网桥状态</span></span><br><span class="line">[root@localhost ~]# brctl show</span><br><span class="line">bridge name         bridge <span class="built_in">id</span>STP enabledinterfaces</span><br><span class="line">br-e9c6f3aab48b8000.0242a80f103fno                <span class="comment">#网桥br-br0没绑定虚拟网卡</span></span><br><span class="line">docker0        8000.024239f5c901noveth7e686d5     <span class="comment">#网桥docker0绑定了一个虚拟网卡</span></span><br><span class="line">                    vetha8708ae         </span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">cf9f63728159        bridge              bridge              <span class="built_in">local</span>   <span class="comment">#两个网桥类型的网络</span></span><br><span class="line">0f75cc017204        host                host                <span class="built_in">local</span></span><br><span class="line">e9c6f3aab48b        lnmp                bridge              <span class="built_in">local</span>   <span class="comment">#两个网桥类型的网络</span></span><br><span class="line">c71020a2992f        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器进程</span></span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">febd7da82596        mysql:5.6           <span class="string">&quot;docker-entrypoint.s…&quot;</span>   3 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   lnmp_mysql</span><br><span class="line">1d71324b351f        be1                 <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   4 minutes ago       Up 3 minutes        80/tcp                   xenodochial_engelbart</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器lnmp_mysql的网络信息</span></span><br><span class="line">[root@localhost ~]# docker inspect lnmp_mysql | grep -A 15 <span class="string">&quot;Networks&quot;</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;lnmp&quot;</span>: &#123;       <span class="comment">#网络类型lnmp</span></span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;febd7da82596&quot;</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;e9c6f3aab48b1048af23ad5347408ef0b460c3dbb1917f04565dcd7d4f8498b7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;e1428ec05df1ffd116b1db24d9c0ac401e200392d09937c8cc0a3822768d4ebe&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.18.0.1&quot;</span>,        <span class="comment">#网关172.18.0.1，这就是网桥br-be9c6f3aab48b</span></span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.18.0.2&quot;</span>,      <span class="comment">#容器IP172.18.0.2</span></span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:02&quot;</span>,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-1-2-host网络类型"><a href="#5-1-2-host网络类型" class="headerlink" title="5.1.2 host网络类型"></a>5.1.2 host网络类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动一个网络类型为host的容器</span></span><br><span class="line">[root@localhost ~]# docker run -dit --name test2 --network host centos:latest /bin/bash</span><br><span class="line">6ce541e470c3e846f1fc3a176d1fcc4fcfcfaafc8162142e11ea1a036f28d337</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">6ce541e470c3        centos:latest       <span class="string">&quot;/bin/bash&quot;</span>              4 seconds ago       Up 2 seconds                                 test2</span><br><span class="line">febd7da82596        mysql:5.6           <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 minutes ago       Up 2 minutes        0.0.0.0:3306-&gt;3306/tcp   lnmp_mysql</span><br><span class="line">1d71324b351f        be1                 <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   7 minutes ago       Up 6 minutes        80/tcp                   xenodochial_engelbart</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器的ip</span></span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> test2 hostname -I       <span class="comment">#这就是网络类型为host的容器，ip地址和docker宿主机完全一样</span></span><br><span class="line">192.168.131.162 172.17.0.1 172.18.0.1 </span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> lnmp_mysql hostname -i      <span class="comment">#网桥类型容器</span></span><br><span class="line">172.18.0.2</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> xenodochial_engelbart hostname -i       <span class="comment">#网桥类型容器</span></span><br><span class="line">172.17.0.2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-1-3-none网络类型（用于建立与宿主机的桥接模式）"><a href="#5-1-3-none网络类型（用于建立与宿主机的桥接模式）" class="headerlink" title="5.1.3 none网络类型（用于建立与宿主机的桥接模式）"></a>5.1.3 none网络类型（用于建立与宿主机的桥接模式）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动一个网络类型为none的容器</span></span><br><span class="line">[root@localhost ~]# docker run -dit --name test3 --net none centos:latest</span><br><span class="line">5137e04e622c30e8f46bb2e492afcec2b8367eb84a86d257c0aefb8035b3580a</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器IP地址</span></span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> test3 hostname -I</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>none类型就是暂时不给容器指定网卡。</p></blockquote><h4 id="5-1-4-container网络类型"><a href="#5-1-4-container网络类型" class="headerlink" title="5.1.4 container网络类型"></a>5.1.4 container网络类型</h4><blockquote><p>指定新容器使用指定容器的网卡</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动一个容器，网络类型container，使用lnmp_mysql容器的网卡</span></span><br><span class="line">[root@localhost ~]# docker run -dit --name test4 --net container:lnmp_mysql centos:latest /bin/bash</span><br><span class="line">046a3d3cac1889e34a6a2fca0e92c8a8fd0cca14a4b235d902f2ea5b88b07a19</span><br><span class="line">[root@localhost ~]# docker inspect lnmp_mysql | grep -A 15 <span class="string">&quot;Networks&quot;</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;lnmp&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;febd7da82596&quot;</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;e9c6f3aab48b1048af23ad5347408ef0b460c3dbb1917f04565dcd7d4f8498b7&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;e1428ec05df1ffd116b1db24d9c0ac401e200392d09937c8cc0a3822768d4ebe&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.18.0.1&quot;</span>,        <span class="comment">#lnmp_mysql容器的网关</span></span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.18.0.2&quot;</span>,      <span class="comment">#lnmp_mysql容器模式网桥</span></span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:02&quot;</span>,</span><br><span class="line">[root@localhost ~]# docker inspect test4 | grep -A 15 <span class="string">&quot;Networks&quot;</span></span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;&#125;          <span class="comment">#test4容器并没有自己的网络设置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> test4 hostname -I       <span class="comment">#test4没有网络设置却有IP地址和test容器完全一样</span></span><br><span class="line">172.18.0.2 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###5.2 桥接宿主机网络与配置固定IP地址</p><h4 id="5-2-1-建立网桥桥接到宿主机网络"><a href="#5-2-1-建立网桥桥接到宿主机网络" class="headerlink" title="5.2.1 建立网桥桥接到宿主机网络"></a>5.2.1 建立网桥桥接到宿主机网络</h4><p><img src="/articles/2018/10/14/dockerjichu-xia/1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建一个永久生效的网桥br0</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">[root@localhost network-scripts]# vim ifcfg-ens32 </span><br><span class="line">[root@localhost network-scripts]# <span class="built_in">cat</span> ifcfg-ens32</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">NAME=ens32</span><br><span class="line">DEVICE=ens32</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">BRIDGE=br0</span><br><span class="line">[root@localhost network-scripts]# vim ifcfg-br0</span><br><span class="line">[root@localhost network-scripts]# <span class="built_in">cat</span> ifcfg-br0 </span><br><span class="line">TYPE=Bridge</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEVICE=br0</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">IPADDR=192.168.131.162</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.131.2</span><br><span class="line">DNS1=192.168.131.2</span><br><span class="line">[root@localhost network-scripts]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看网卡IP</span></span><br><span class="line">[root@localhost network-scripts]# ifconfig ens32</span><br><span class="line">ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::20c:29ff:fe2c:46cf  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 00:0c:29:2c:46:cf  txqueuelen 1000  (Ethernet)        <span class="comment">#ens32网卡已经没有IP地址了</span></span><br><span class="line">        RX packets 291550  bytes 386603821 (368.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 96068  bytes 7558633 (7.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]# ifconfig br0</span><br><span class="line">br0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.131.162  netmask 255.255.255.0  broadcast 192.168.131.255      <span class="comment">#网桥br0代替了ens32</span></span><br><span class="line">        inet6 fe80::20c:29ff:fe2c:46cf  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 00:0c:29:2c:46:cf  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 26  bytes 1633 (1.5 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 28  bytes 2886 (2.8 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]# brctl show</span><br><span class="line">bridge namebridge <span class="built_in">id</span>STP enabledinterfaces</span><br><span class="line">br-e9c6f3aab48b8000.0242a80f103fnoveth2700d35</span><br><span class="line">br08000.000c292c46cfnoens32       <span class="comment">#网桥br0，桥接在了真实的物理网卡ens32上</span></span><br><span class="line">docker08000.024239f5c901novetha8708ae</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-2-2-通过pipework工具配置容器固定IP"><a href="#5-2-2-通过pipework工具配置容器固定IP" class="headerlink" title="5.2.2 通过pipework工具配置容器固定IP"></a>5.2.2 通过pipework工具配置容器固定IP</h4><blockquote><p>pipework工具下载地址：<a href="https://github.com/jpetazzo/pipework">https://github.com/jpetazzo/pipework</a>.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压安装pipework工具</span></span><br><span class="line">[root@localhost ~]# yum -y install unzip</span><br><span class="line">[root@localhost ~]# unzip pipework-master.zip</span><br><span class="line">Archive:  pipework-master.zip</span><br><span class="line">ae42f1b5fef82b3bc23fe93c95c345e7af65fef3</span><br><span class="line">   creating: pipework-master/</span><br><span class="line"> extracting: pipework-master/.gitignore  </span><br><span class="line">  inflating: pipework-master/LICENSE  </span><br><span class="line">  inflating: pipework-master/README.md  </span><br><span class="line">  inflating: pipework-master/docker-compose.yml  </span><br><span class="line">   creating: pipework-master/doctoc/</span><br><span class="line">  inflating: pipework-master/doctoc/Dockerfile  </span><br><span class="line">  inflating: pipework-master/pipework  </span><br><span class="line">  inflating: pipework-master/pipework.spec  </span><br><span class="line">[root@localhost ~]# <span class="built_in">mv</span> pipework-master /usr/local/</span><br><span class="line">[root@localhost ~]# <span class="built_in">ln</span> -s /usr/local/pipework-master/pipework /usr/local/bin/</span><br><span class="line">[root@localhost ~]# <span class="built_in">which</span> pipework</span><br><span class="line">/usr/local/bin/pipework</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立网络类型为none的容器，并通过pipework配置固定ip地址</span></span><br><span class="line">[root@localhost ~]# docker run -dit --name test5 --net none centos:latest /bin/bash</span><br><span class="line">2cb23bc9c459d628d833ad72681f8fe5b49da9f41cb5ebf160c6b330dad6d877</span><br><span class="line">[root@localhost ~]# pipework br0 test5 192.168.131.199/24@192.168.131.2     <span class="comment">#设置容器固定IP为192.168.131.199网关192.168.131.2</span></span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> test5 hostname -I       <span class="comment">#有IP了</span></span><br><span class="line">192.168.131.199 </span><br><span class="line">[root@localhost ~]# ping 192.168.131.199        <span class="comment">#宿主机ping能通</span></span><br><span class="line">PING 192.168.131.199 (192.168.131.199) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.131.199: icmp_seq=1 ttl=64 <span class="keyword">time</span>=0.210 ms</span><br><span class="line">64 bytes from 192.168.131.199: icmp_seq=2 ttl=64 <span class="keyword">time</span>=0.037 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.131.199 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, <span class="keyword">time</span> 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.037/0.123/0.210/0.087 ms</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> -it test5 /bin/bash     <span class="comment">#进入容器</span></span><br><span class="line">[root@2cb23bc9c459 /]# ping www.baidu.com           <span class="comment">#能连接外网</span></span><br><span class="line">PING www.a.shifen.com (119.75.213.61) 56(84) bytes of data.</span><br><span class="line">64 bytes from 127.0.0.1 (119.75.213.61): icmp_seq=1 ttl=128 <span class="keyword">time</span>=12.6 ms</span><br><span class="line">64 bytes from 127.0.0.1 (119.75.213.61): icmp_seq=2 ttl=128 <span class="keyword">time</span>=28.2 ms</span><br><span class="line">64 bytes from 127.0.0.1 (119.75.213.61): icmp_seq=3 ttl=128 <span class="keyword">time</span>=17.5 ms</span><br><span class="line">^C</span><br><span class="line">--- www.a.shifen.com ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, <span class="keyword">time</span> 2003ms</span><br><span class="line">rtt min/avg/max/mdev = 12.696/19.496/28.216/6.480 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通过windows宿主机ping虚拟机中的容器进程IP进行测试</strong></p><p><img src="/articles/2018/10/14/dockerjichu-xia/2.png"></p><blockquote><p>综上，外部机器访问虚拟机中的容器进程也可以联通了</p></blockquote><h2 id="六，Docker的镜像制作"><a href="#六，Docker的镜像制作" class="headerlink" title="六，Docker的镜像制作"></a>六，Docker的镜像制作</h2><h3 id="6-1-Dockerfile常用指令介绍"><a href="#6-1-Dockerfile常用指令介绍" class="headerlink" title="6.1 Dockerfile常用指令介绍"></a>6.1 Dockerfile常用指令介绍</h3><p>|指令|描述|<br>|-|<br>|FROM|构建的新镜像是基于哪个镜像。例如：FROM centos:6<br>|MAINTAINER|镜像维护者姓名或邮箱地址。例如：MAINTAINER zhaaoshuo<br>|RUN|构建镜像时运行的Shell命令。例如：RUN [“yum”,”install”,”httpd”]<br>||或者RUN yum install httpd<br>|CMD|运行容器时执行的Shell命令（可以被运行时传递的参数覆盖）。例如：CMD [“-c”,”&#x2F;start.sh”]<br>||或者CMD [“&#x2F;usr&#x2F;sbin&#x2F;sshd”,”-D”]或者CMD &#x2F;usr&#x2F;sbin&#x2F;sshd -D<br>|EXPOSE|声明容器运行的服务端口。例如：EXPOSE 80 443<br>|ENV|设置容器内环境变量。例如：ENV MYSQL_ROOT_PASSWORD 123456<br>|ADD|拷贝文件或目录到镜像（可以自动解压缩或者下载）<br>||例如：ADD [“src”,”dest”]或者ADD <a href="https://xxx.com/html.tar.gz">https://xxx.com/html.tar.gz</a> &#x2F;var&#x2F;www&#x2F;html<br>||或者：ADD html.tar.gz &#x2F;var&#x2F;www&#x2F;html<br>|COPY|拷贝文件或目录到镜像（不能自动解压缩）。例如：COPY .&#x2F;start.sh &#x2F;start.sh<br>|ENTRYPOINT|运行容器时执行的Shell命令（不能被运行时传递的参数覆盖)。例如：ENTRYPOINT [“&#x2F;bin&#x2F;bash”,”-c”,”&#x2F;start.sh”]<br>||或者ENTRYPOINT &#x2F;bin&#x2F;bash -c “&#x2F;start.sh”<br>|VOLUME|指定容器挂载点到宿主机自动生成的目录或其他容器<br>||例如：VOLUME [“&#x2F;var&#x2F;lib&#x2F;mysql”]<br>|USER|为RUN，CMD和ENTRYPOINT执行命令指定运行用户<br>||例如：USER zhaoshuo<br>|WORKDIR|为RUN，CMD，ENTRYPOINT，COPY和ADD设置工作目录（指定进入容器中默认被切换的目录）。<br>||例如：WORKDIR &#x2F;data<br>|HEALTHCHECK|健康检查。例如：HEALTHCHECK –interval&#x3D;5m –timeout&#x3D;3s –retries&#x3D;3<br>||CMD curl -f <a href="http://localhost/">http://localhost/</a> || exit 1<br>|ARG|在构建镜像时指定一些参数。例如：ARG user</p><h3 id="6-2-利用Dockerfile编写nginxWeb镜像"><a href="#6-2-利用Dockerfile编写nginxWeb镜像" class="headerlink" title="6.2 利用Dockerfile编写nginxWeb镜像"></a>6.2 利用Dockerfile编写nginxWeb镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先开启ipv4转发</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt; /etc/sysctl.conf </span><br><span class="line">[root@localhost ~]# sysctl -p</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建nginx的镜像目录</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> -p dockerfile/lib/centos/nginx</span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> dockerfile/lib/centos/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备Dockerfile文件</span></span><br><span class="line">[root@localhost nginx]# <span class="built_in">cat</span> Dockerfile </span><br><span class="line">[root@localhost nginx]# <span class="built_in">cat</span> Dockerfile </span><br><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER www.aliangedu.com</span><br><span class="line">RUN yum install -y gcc gcc-c++ make openssl-devel pcre-devel</span><br><span class="line">ADD nginx-1.12.1.tar.gz /tmp</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">cd</span> /tmp/nginx-1.12.1 &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/usr/local/nginx &amp;&amp; \</span><br><span class="line">    make -j 2 &amp;&amp; \</span><br><span class="line">    make install</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">rm</span> -rf /tmp/nginx-1.12.1* &amp;&amp; yum clean all</span><br><span class="line"></span><br><span class="line">COPY nginx.conf /usr/local/nginx/conf</span><br><span class="line"></span><br><span class="line">WORKDIR /usr/local/nginx</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [<span class="string">&quot;./sbin/nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#将事先准备好的nginx-1.12.1.tar.gz和nginx.conf配置文件拷贝到当前目录下</span></span><br><span class="line">[root@localhost nginx]# <span class="built_in">ls</span></span><br><span class="line">Dockerfile  nginx-1.12.1.tar.gz  nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#build基于nginx的docker镜像</span></span><br><span class="line">[root@docker nginx]# docker build -t nginx:1 .</span><br></pre></td></tr></table></figure><h3 id="6-3-构建PHP网站平台镜像"><a href="#6-3-构建PHP网站平台镜像" class="headerlink" title="6.3 构建PHP网站平台镜像"></a>6.3 构建PHP网站平台镜像</h3><blockquote><p>创建一个PHP的docker镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建php的镜像目录</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> -p /root/dockerfile/lib/centos/php</span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /root/dockerfile/lib/centos/php</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备Dockerfile文件</span></span><br><span class="line">[root@localhost php]# <span class="built_in">cat</span> Dockerfile </span><br><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER www.aliangedu.com</span><br><span class="line">RUN yum install -y gcc gcc-c++ make gd-devel libxml2-devel libcurl-devel libjpeg-devel libpng-devel openssl-devel</span><br><span class="line">ADD php-5.6.31.tar.gz /tmp/</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">cd</span> /tmp/php-5.6.31 &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/usr/local/php \</span><br><span class="line">    --with-config-file-path=/usr/local/php/etc \</span><br><span class="line">    --with-mysql --with-mysqli \</span><br><span class="line">    --with-openssl --with-zlib --with-curl --with-gd \</span><br><span class="line">    --with-jpeg-dir --with-png-dir --with-iconv \</span><br><span class="line">    --enable-fpm --enable-zip --enable-mbstring &amp;&amp; \</span><br><span class="line">    make -j 4 &amp;&amp; \</span><br><span class="line">    make install &amp;&amp; \</span><br><span class="line">    <span class="built_in">cp</span> /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;s/127.0.0.1/0.0.0.0/&quot;</span> /usr/local/php/etc/php-fpm.conf &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;21a \daemonize = no&quot;</span> /usr/local/php/etc/php-fpm.conf</span><br><span class="line">COPY php.ini /usr/local/php/etc</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">rm</span> -rf /tmp/php-5.6.31* &amp;&amp; yum clean all</span><br><span class="line"></span><br><span class="line">WORKDIR /usr/local/php</span><br><span class="line">EXPOSE 9000</span><br><span class="line">CMD [<span class="string">&quot;./sbin/php-fpm&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/usr/local/php/etc/php-fpm.conf&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#将事先准备好的php.ini文件及php-5.6.31.tar.gz拷贝到当前目录下</span></span><br><span class="line">[root@localhost php]# <span class="built_in">ls</span></span><br><span class="line">Dockerfile  php-5.6.31.tar.gz  php.ini</span><br><span class="line"></span><br><span class="line"><span class="comment">#build基于php的docker镜像</span></span><br><span class="line">[root@localhost php]# docker build -t php:1 .</span><br><span class="line"></span><br><span class="line">[root@localhost php]# docker images</span><br><span class="line">REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">php                       1                   9bb406993d6b        2 minutes ago       996MB</span><br><span class="line">nginx                     1                   27d8d2e6a038        18 minutes ago      417MB</span><br><span class="line">centos                    7                   75835a67d134        4 days ago          200MB</span><br><span class="line">centos                    latest              75835a67d134        4 days ago          200MB</span><br><span class="line">nginx                     latest              be1f31be9a87        11 days ago         109MB</span><br><span class="line">richarvey/nginx-php-fpm   latest              de1554d0b081        2 weeks ago         302MB</span><br><span class="line">mysql                     5.6                 1f47fade220d        5 weeks ago         256MB</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-4-创建nginx-php网络环境，并启动容器"><a href="#6-4-创建nginx-php网络环境，并启动容器" class="headerlink" title="6.4 创建nginx-php网络环境，并启动容器"></a>6.4 创建nginx-php网络环境，并启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker network create lnmp</span><br><span class="line">[root@localhost ~]# docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">cf9f63728159        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">0f75cc017204        host                host                <span class="built_in">local</span></span><br><span class="line">e9c6f3aab48b        lnmp                bridge              <span class="built_in">local</span></span><br><span class="line">c71020a2992f        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建nginx-php网页挂载目录</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> -p /app/wwwroot</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动php容器</span></span><br><span class="line">[root@localhost ~]# docker run -dit --name lnmp_php --network lnmp --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/app/wwwroot/,dst=/usr/local/nginx/html php:1</span><br><span class="line">eaf4d08600a45287800dbc3b451c423acc3a15ba6104dfacbc10fd745f4e407b</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">eaf4d08600a4        php:1               <span class="string">&quot;./sbin/php-fpm -c /…&quot;</span>   8 seconds ago       Up 6 seconds        9000/tcp            lnmp_php</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> lnmp_php hostname -I</span><br><span class="line">172.18.0.2 </span><br><span class="line"></span><br><span class="line"><span class="comment">#启动nginx容器</span></span><br><span class="line">[root@localhost ~]# docker run -dit --name lnmp_nginx -p 888:80 --network lnmp --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/app/wwwroot,dst=/usr/local/nginx/html nginx:1</span><br><span class="line">252721e419c61fc41704a46364d650f471dd9e7ea94b7a1636f0db5aeec4edbc</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                 NAMES</span><br><span class="line">252721e419c6        nginx:1             <span class="string">&quot;./sbin/nginx -g &#x27;da…&quot;</span>   5 seconds ago        Up 4 seconds        0.0.0.0:888-&gt;80/tcp   lnmp_nginx</span><br><span class="line">eaf4d08600a4        php:1               <span class="string">&quot;./sbin/php-fpm -c /…&quot;</span>   About a minute ago   Up About a minute   9000/tcp              lnmp_php</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> lnmp_nginx hostname -I</span><br><span class="line">172.18.0.3 </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建测试页面php.info</span></span><br><span class="line">[root@localhost wwwroot]# <span class="built_in">pwd</span></span><br><span class="line">/app/wwwroot</span><br><span class="line">[root@localhost wwwroot]# <span class="built_in">echo</span> <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span> &gt; /app/wwwroot/index.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>最后通过浏览器进行访问测试</strong></p><p><img src="/articles/2018/10/14/dockerjichu-xia/3.png"></p><h3 id="6-5-docke基础阶段应用"><a href="#6-5-docke基础阶段应用" class="headerlink" title="6.5 docke基础阶段应用"></a>6.5 docke基础阶段应用</h3><ul><li><input checked="" disabled="" type="checkbox"> ：在nginx-php镜像的基础上构建mysql:1的镜像，并启动lnmp_mysql容器进程</li><li><input checked="" disabled="" type="checkbox"> ：实现wordpress博客的部署</li></ul><h3 id="6-6-构建JAVA网站环境镜像"><a href="#6-6-构建JAVA网站环境镜像" class="headerlink" title="6.6 构建JAVA网站环境镜像"></a>6.6 构建JAVA网站环境镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建java镜像构建存储目录</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> -p dockerfile/lib/centos/tomcat</span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> dockerfile/lib/centos/tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment">#将所需软件包拷贝到当前目录下</span></span><br><span class="line">[root@localhost tomcat]# <span class="built_in">ls</span></span><br><span class="line">apache-tomcat-8.0.46.tar.gz  Dockerfile  jdk-8u45-linux-x64.tar.gz  server.xml</span><br><span class="line"></span><br><span class="line"><span class="comment">#筹备Dockerfile</span></span><br><span class="line">[root@localhost tomcat]# <span class="built_in">cat</span> Dockerfile </span><br><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER www.aliangedu.com </span><br><span class="line"></span><br><span class="line">ADD jdk-8u45-linux-x64.tar.gz /usr/local</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_45</span><br><span class="line"></span><br><span class="line">ADD apache-tomcat-8.0.46.tar.gz /usr/local</span><br><span class="line">COPY server.xml /usr/local/apache-tomcat-8.0.46/conf</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">rm</span> -f /usr/local/*.tar.gz</span><br><span class="line"></span><br><span class="line">WORKDIR /usr/local/apache-tomcat-8.0.46</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;./bin/catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#build基于tomcat的镜像</span></span><br><span class="line">[root@localhost tomcat]# docker build -t tomcat:1 .</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建网页挂载目录</span></span><br><span class="line">[root@localhost tomcat]# <span class="built_in">mkdir</span> -p /app/webapps</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动tomcat的容器进程</span></span><br><span class="line">[root@localhost tomcat]# docker run -dit --name=tomcat -p 8080:8080 --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/app/webapps/,dst=/usr/local/apache-tomcat-8.0.46/webapps tomcat:1</span><br><span class="line">7b3978a08052ca580201f6d2e3a362da2f2f302f4e6455ae9dc0effdf02a0293</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器进程</span></span><br><span class="line">[root@localhost tomcat]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">7b3978a08052        tomcat:1            <span class="string">&quot;./bin/catalina.sh r…&quot;</span>   21 seconds ago      Up 20 seconds       0.0.0.0:8080-&gt;8080/tcp   tomcat</span><br><span class="line">252721e419c6        nginx:1             <span class="string">&quot;./sbin/nginx -g &#x27;da…&quot;</span>   12 minutes ago      Up 12 minutes       0.0.0.0:888-&gt;80/tcp      lnmp_nginx</span><br><span class="line">eaf4d08600a4        php:1               <span class="string">&quot;./sbin/php-fpm -c /…&quot;</span>   13 minutes ago      Up 13 minutes       9000/tcp                 lnmp_php</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建网站测试页</span></span><br><span class="line">[root@localhost tomcat]# <span class="built_in">mkdir</span> -p /app/webapps/ROOT</span><br><span class="line">[root@localhost tomcat]# <span class="built_in">echo</span> <span class="string">&quot;welcome to yunjisuan&quot;</span> &gt;&gt; /app/webapps/ROOT/index.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>然后用浏览器访问8080端口</strong></p><p><img src="/articles/2018/10/14/dockerjichu-xia/4.png"></p><blockquote><p><strong>特别提示：</strong></p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> tomcat有三种启动方式: <ul><li>直接启动.&#x2F;startup.sh</li><li>作为服务启动 nohup .&#x2F;startup.sh &amp;</li><li>控制台动态输出方式启动.&#x2F;catalina.sh run动态地显示tomcat后台的控制台输出信息，Ctrl+C后退出并关闭服务</li></ul></li><li><input checked="" disabled="" type="checkbox"> 构建镜像的Dockerfile里的最后一步启动的进程不能是后台模式，否则容器直接退出。因此，nginxWeb镜像构建时，用CMD [“.&#x2F;sbin&#x2F;nginx”, “-g”, “daemon off;”]方式进行启动</li></ul><h2 id="七，Docker-compose"><a href="#七，Docker-compose" class="headerlink" title="七，Docker-compose"></a>七，Docker-compose</h2><h3 id="7-1-Docker-Compose用法"><a href="#7-1-Docker-Compose用法" class="headerlink" title="7.1 Docker Compose用法"></a>7.1 Docker Compose用法</h3><h3 id="7-1-1-介绍"><a href="#7-1-1-介绍" class="headerlink" title="7.1.1 介绍"></a>7.1.1 介绍</h3><blockquote><p>Compose是一个定义和管理多容器的工具，使用Python语言编写。使用Compose配置文件描述多个容器应用的架构，比如使用什么镜像，数据卷，网络，映射端口等；然后一条命令管理所有服务，比如启动，停止，重启等。</p></blockquote><h4 id="7-1-2-安装"><a href="#7-1-2-安装" class="headerlink" title="7.1.2 安装"></a>7.1.2 安装</h4><blockquote><p>下载docker-compose-linux-x86_64.zip</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ll docker-compose-linux-x86_64.zip </span><br><span class="line">-rw-r--r-- 1 root root 8733389 10月 14 19:32 docker-compose-linux-x86_64.zip</span><br><span class="line">[root@localhost ~]# <span class="built_in">which</span> unzip</span><br><span class="line">/usr/bin/unzip</span><br><span class="line">[root@localhost ~]# unzip docker-compose-linux-x86_64.zip</span><br><span class="line">Archive:  docker-compose-linux-x86_64.zip</span><br><span class="line">  inflating: docker-compose          </span><br><span class="line">[root@localhost ~]# ll docker-compose</span><br><span class="line">-rw-r--r-- 1 root root 8858496 8月  31 2017 docker-compose</span><br><span class="line">[root@localhost ~]# <span class="built_in">chmod</span> +x docker-compose</span><br><span class="line">[root@localhost ~]# <span class="built_in">mv</span> docker-compose /usr/bin/</span><br><span class="line">[root@localhost ~]# <span class="built_in">which</span> docker-compose</span><br><span class="line">/usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种安装方法：</span></span><br><span class="line">[root@localhost ~]# curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br><span class="line">[root@localhost ~]# <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h4 id="7-1-3-YAML文件格式及编写注意事项"><a href="#7-1-3-YAML文件格式及编写注意事项" class="headerlink" title="7.1.3 YAML文件格式及编写注意事项"></a>7.1.3 YAML文件格式及编写注意事项</h4><blockquote><p>YAML是一种标记语言很直观的数据序列化格式，可读性高。类似于XML数据描述语言，语法比XML简单的很多。<br>YAML数据结构通过缩进来表示，连续的项目通过减号来表示，键值对用冒号分隔，数组用中括号括起来，hash用花括号括起来。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> YAML文件格式注意事项： <ul><li>不支持制表符tab键缩进，需要使用空格缩进</li><li>通常开头缩进2个空格</li><li>字符后缩进1个空格，如冒号，逗号，横杆</li><li>用井号注释</li><li>如果包含特殊字符用单引号引起来</li><li>布尔值（true，false，yes，no，on，off）必须用引号括起来，这样分析器会将他们解释为字符串。</li></ul></li><li><input checked="" disabled="" type="checkbox"> 配置文件常用字段</li></ul><p>|字段|描述|<br>|-|<br>|build|下级字段dockerfile：指定Dockerfile文件名<br>||下级字段context；构建镜像上下文路径<br>|image|指定镜像<br>|command|执行命令，覆盖默认命令<br>|container_name|指定容器名称<br>|deploy|指定部署和运行服务相关配置，只能在Swarm模式使用<br>|environment|添加环境变量<br>|networks|加入网络，引用顶级networks下条目<br>|ports|暴露端口，与-p相同，但端口不能低于60<br>|volumes|挂载宿主机路径或命名卷。如果是命名卷在顶级volumes定义卷名称<br>|restart|重启策略，默认no，always | on-failure | unless-stopped<br>|hostname|容器主机名</p><ul><li><input checked="" disabled="" type="checkbox"> 常用命令</li></ul><p>|字段|描述|<br>|-|<br>|build|重新构建服务|<br>|ps|列出容器<br>|up|创建和启动容器<br>|exec|在容器里执行命令<br>|scale|指定一个服务容器启动数量<br>|top|显示容器进程<br>|logs|查看容器输出<br>|down|删除容器，网络，数据卷和镜像<br>|stop&#x2F;start&#x2F;restart|停止&#x2F;启动&#x2F;重启服务</p><ul><li><input checked="" disabled="" type="checkbox"> 例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cat</span> compose_lnmp/docker-compose.yml </span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    hostname: nginx</span><br><span class="line">    build:</span><br><span class="line">      context: ./nginx</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - 81:80</span><br><span class="line">    networks:</span><br><span class="line">      - lnmp</span><br><span class="line">    volumes:</span><br><span class="line">      - ./wwwroot:/usr/local/nginx/html</span><br><span class="line"></span><br><span class="line">  php:</span><br><span class="line">    hostname: php</span><br><span class="line">    build:</span><br><span class="line">      context: ./php</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    networks:</span><br><span class="line">      - lnmp</span><br><span class="line">    volumes:</span><br><span class="line">      - ./wwwroot:/usr/local/nginx/html</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    hostname: mysql</span><br><span class="line">    image: mysql:5.6</span><br><span class="line">    ports:</span><br><span class="line">      - 3306:3306</span><br><span class="line">    networks:</span><br><span class="line">      - lnmp</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql/conf:/etc/mysql/conf.d</span><br><span class="line">      - ./mysql/data:/var/lib/mysql</span><br><span class="line">    <span class="built_in">command</span>: --character-set-server=utf8</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">      MYSQL_DATABASE: wordpress</span><br><span class="line">      MYSQL_USER: user</span><br><span class="line">      MYSQL_PASSWORD: user123</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  lnmp: </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-2-docker-compose-一键部署LNMP"><a href="#7-2-docker-compose-一键部署LNMP" class="headerlink" title="7.2 docker-compose 一键部署LNMP"></a>7.2 docker-compose 一键部署LNMP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看compose_lnmp包</span></span><br><span class="line">[root@localhost ~]# tree compose_lnmp/</span><br><span class="line">compose_lnmp/</span><br><span class="line">├── docker-compose.yml  <span class="comment">#docker-compose启动接口文件</span></span><br><span class="line">├── mysql</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── my.cnf  <span class="comment">#mysql配置文件</span></span><br><span class="line">│   └── data        <span class="comment">#待挂载mysql数据目录</span></span><br><span class="line">├── nginx</span><br><span class="line">│   ├── Dockerfile  <span class="comment">#自定义nginx的Docker镜像配置文件</span></span><br><span class="line">│   ├── nginx-1.12.1.tar.gz <span class="comment">#源码包</span></span><br><span class="line">│   └── nginx.conf  <span class="comment">#nginx配置文件</span></span><br><span class="line">├── php</span><br><span class="line">│   ├── Dockerfile  <span class="comment">#自定义php的Docker镜像配置文件</span></span><br><span class="line">│   ├── php-5.6.31.tar.gz   <span class="comment">#源码包</span></span><br><span class="line">│   └── php.ini     <span class="comment">#php解析器配置文件  </span></span><br><span class="line">└── wwwroot         <span class="comment">#nginx容器和php容器待挂载的网页目录</span></span><br><span class="line">    └── index.php   <span class="comment">#网页测试文件</span></span><br><span class="line">    </span><br><span class="line">6 directories, 9 files</span><br><span class="line"></span><br><span class="line"><span class="comment">#一键部署LNMP</span></span><br><span class="line">[root@localhost compose_lnmp]# docker-compose -f docker-compose.yml up</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>浏览器访问：</strong></p><p><img src="/articles/2018/10/14/dockerjichu-xia/5.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一键查看所有部署的容器进程</span></span><br><span class="line">[root@localhost compose_lnmp]# docker-compose -f docker-compose.yml ps</span><br><span class="line">       Name                      Command               State           Ports          </span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">composelnmp_mysql_1   docker-entrypoint.sh --cha ...   Up      0.0.0.0:3306-&gt;3306/tcp </span><br><span class="line">composelnmp_nginx_1   ./sbin/nginx -g daemon off;      Up      0.0.0.0:81-&gt;80/tcp     </span><br><span class="line">composelnmp_php_1     ./sbin/php-fpm -c /usr/loc ...   Up      9000/tcp       </span><br><span class="line"></span><br><span class="line"><span class="comment">#一键终止所有部署的容器进程</span></span><br><span class="line">[root@localhost compose_lnmp]# docker-compose -f docker-compose.yml stop</span><br><span class="line">Stopping composelnmp_mysql_1 ... <span class="keyword">done</span></span><br><span class="line">Stopping composelnmp_php_1   ... <span class="keyword">done</span></span><br><span class="line">Stopping composelnmp_nginx_1 ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一键查看所有部署的容器进程</span></span><br><span class="line">[root@localhost compose_lnmp]# docker-compose -f docker-compose.yml ps</span><br><span class="line">       Name                      Command               State    Ports </span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">composelnmp_mysql_1   docker-entrypoint.sh --cha ...   Exit 0         </span><br><span class="line">composelnmp_nginx_1   ./sbin/nginx -g daemon off;      Exit 0         </span><br><span class="line">composelnmp_php_1     ./sbin/php-fpm -c /usr/loc ...   Exit 0         </span><br><span class="line"></span><br><span class="line"><span class="comment">#一键清理所有部署的容器进程</span></span><br><span class="line">[root@localhost compose_lnmp]# docker-compose -f docker-compose.yml down</span><br><span class="line">Removing composelnmp_mysql_1 ... <span class="keyword">done</span></span><br><span class="line">Removing composelnmp_php_1   ... <span class="keyword">done</span></span><br><span class="line">Removing composelnmp_nginx_1 ... <span class="keyword">done</span></span><br><span class="line">Removing network composelnmp_lnmp</span><br><span class="line">[root@localhost compose_lnmp]# docker-compose -f docker-compose.yml ps</span><br><span class="line">Name   Command   State   Ports </span><br><span class="line">------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-3-一键部署Nginx反向代理Tomcat集群"><a href="#7-3-一键部署Nginx反向代理Tomcat集群" class="headerlink" title="7.3 一键部署Nginx反向代理Tomcat集群"></a>7.3 一键部署Nginx反向代理Tomcat集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看compose_nginx_tomcat包</span></span><br><span class="line">[root@localhost ~]# tree compose_nginx_tomcat/</span><br><span class="line">compose_nginx_tomcat/</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── mysql</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── my.cnf  <span class="comment">#mysql的配置文件</span></span><br><span class="line">│   └── data        <span class="comment">#待挂载mysql数据目录</span></span><br><span class="line">├── nginx</span><br><span class="line">│   ├── Dockerfile      <span class="comment">#自定义镜像配置文件</span></span><br><span class="line">│   ├── nginx-1.12.1.tar.gz <span class="comment">#源码包</span></span><br><span class="line">│   └── nginx.conf          <span class="comment">#nginx配置文件</span></span><br><span class="line">├── tomcat</span><br><span class="line">│   ├── apache-tomcat-8.0.46.tar.gz <span class="comment">#源码包</span></span><br><span class="line">│   ├── Dockerfile      <span class="comment">#自定义镜像配置文件</span></span><br><span class="line">│   └── server.xml      <span class="comment">#tomcat配置文件</span></span><br><span class="line">└── webapps         </span><br><span class="line">    └── ROOT</span><br><span class="line">        └── index.html  <span class="comment">#网页测试文件</span></span><br><span class="line">        </span><br><span class="line">7 directories, 9 files</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker-compose的启动接口文件</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> compose_nginx_tomcat/docker-compose.yml</span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    hostname: nginx</span><br><span class="line">    build:</span><br><span class="line">      context: ./nginx</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - 82:80</span><br><span class="line">    networks:</span><br><span class="line">      - lnmt</span><br><span class="line">    volumes:</span><br><span class="line">      - ./webapps:/opt/webapps</span><br><span class="line"></span><br><span class="line">  tomcat01:</span><br><span class="line">    hostname: tomcat01</span><br><span class="line">    build: ./tomcat</span><br><span class="line">    networks:</span><br><span class="line">      - lnmt</span><br><span class="line">    volumes:</span><br><span class="line">      - /usr/local/jdk1.8.0_45:/usr/local/jdk1.8.0_45</span><br><span class="line">      - ./webapps:/usr/local/apache-tomcat-8.0.46/webapps</span><br><span class="line"></span><br><span class="line">  tomcat02:</span><br><span class="line">    hostname: tomcat02</span><br><span class="line">    build: ./tomcat</span><br><span class="line">    networks:</span><br><span class="line">      - lnmt</span><br><span class="line">    volumes:</span><br><span class="line">      - /usr/local/jdk1.8.0_45:/usr/local/jdk1.8.0_45       <span class="comment">#docker宿主机的java环境被挂载了！</span></span><br><span class="line">      - ./webapps:/usr/local/apache-tomcat-8.0.46/webapps</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    hostname: mysql</span><br><span class="line">    image: mysql:5.6</span><br><span class="line">    ports:</span><br><span class="line">      - 3307:3306</span><br><span class="line">    networks:</span><br><span class="line">      - lnmt</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql/conf:/etc/mysql/conf.d</span><br><span class="line">      - ./mysql/data:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">      MYSQL_DATABASE: db</span><br><span class="line">      MYSQL_USER: user</span><br><span class="line">      MYSQL_PASSWORD: user123</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  lnmt:</span><br><span class="line"></span><br><span class="line"><span class="comment">#由于tomcat容器进程需要挂载docker宿主机本地的java环境</span></span><br><span class="line"><span class="comment">#所以在docker宿主机本地安装jdk-8u45-linux-x64.tar.gz</span></span><br><span class="line">[root@localhost ~]# ll jdk-8u45-linux-x64.tar.gz </span><br><span class="line">-rw-r--r-- 1 root root 173271626 Oct 14 19:41 jdk-8u45-linux-x64.tar.gz</span><br><span class="line">[root@localhost ~]# tar xf jdk-8u45-linux-x64.tar.gz -C /usr/local</span><br><span class="line">[root@localhost ~]# ll -d /usr/local/jdk1.8.0_45</span><br><span class="line">drwxr-xr-x 8 10 143 255 Apr 11  2015 /usr/local/jdk1.8.0_45</span><br><span class="line"></span><br><span class="line"><span class="comment">#一键部署ngxin+tomcat反向代理集群</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> compose_nginx_tomcat/</span><br><span class="line">[root@localhost compose_nginx_tomcat]# <span class="built_in">pwd</span></span><br><span class="line">/root/compose_nginx_tomcat</span><br><span class="line">[root@localhost compose_nginx_tomcat]# docker-compose -f docker-compose.yml up</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>浏览器访问：</strong></p><p><img src="/articles/2018/10/14/dockerjichu-xia/6.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker-compose -f compose_nginx_tomcat/docker-compose.yml ps</span><br><span class="line">            Name                          Command             State           Ports          </span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">composenginxtomcat_mysql_1      docker-entrypoint.sh mysqld   Up      0.0.0.0:3307-&gt;3306/tcp </span><br><span class="line">composenginxtomcat_nginx_1      ./sbin/nginx -g daemon off;   Up      0.0.0.0:82-&gt;80/tcp     </span><br><span class="line">composenginxtomcat_tomcat01_1   ./bin/catalina.sh run         Up      8080/tcp               </span><br><span class="line">composenginxtomcat_tomcat02_1   ./bin/catalina.sh run         Up      8080/tcp               </span><br><span class="line">[root@localhost ~]# docker-compose -f compose_nginx_tomcat/docker-compose.yml stop</span><br><span class="line">Stopping composenginxtomcat_mysql_1    ... <span class="keyword">done</span></span><br><span class="line">Stopping composenginxtomcat_tomcat02_1 ... <span class="keyword">done</span></span><br><span class="line">Stopping composenginxtomcat_tomcat01_1 ... <span class="keyword">done</span></span><br><span class="line">Stopping composenginxtomcat_nginx_1    ... <span class="keyword">done</span></span><br><span class="line">[root@localhost ~]# docker-compose -f compose_nginx_tomcat/docker-compose.yml ps</span><br><span class="line">            Name                          Command              State     Ports </span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">composenginxtomcat_mysql_1      docker-entrypoint.sh mysqld   Exit 0           </span><br><span class="line">composenginxtomcat_nginx_1      ./sbin/nginx -g daemon off;   Exit 0           </span><br><span class="line">composenginxtomcat_tomcat01_1   ./bin/catalina.sh run         Exit 143         </span><br><span class="line">composenginxtomcat_tomcat02_1   ./bin/catalina.sh run         Exit 143         </span><br><span class="line">[root@localhost ~]# docker-compose -f compose_nginx_tomcat/docker-compose.yml down</span><br><span class="line">Removing composenginxtomcat_mysql_1    ... <span class="keyword">done</span></span><br><span class="line">Removing composenginxtomcat_tomcat02_1 ... <span class="keyword">done</span></span><br><span class="line">Removing composenginxtomcat_tomcat01_1 ... <span class="keyword">done</span></span><br><span class="line">Removing composenginxtomcat_nginx_1    ... <span class="keyword">done</span></span><br><span class="line">Removing network composenginxtomcat_lnmt</span><br><span class="line">[root@localhost ~]# docker-compose -f compose_nginx_tomcat/docker-compose.yml ps</span><br><span class="line">Name   Command   State   Ports </span><br><span class="line">------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础（上）</title>
      <link href="/articles/2018/10/02/dockerjichu-shang/"/>
      <url>/articles/2018/10/02/dockerjichu-shang/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Docker基础（上）"><a href="#Docker基础（上）" class="headerlink" title="Docker基础（上）"></a>Docker基础（上）</h1><h2 id="一，Docker简介，功能特性与应用场景"><a href="#一，Docker简介，功能特性与应用场景" class="headerlink" title="一，Docker简介，功能特性与应用场景"></a>一，Docker简介，功能特性与应用场景</h2><h3 id="1-1-Docker简介"><a href="#1-1-Docker简介" class="headerlink" title="1.1 Docker简介"></a>1.1 Docker简介</h3><ul><li><input checked="" disabled="" type="checkbox"> Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。</li><li><input checked="" disabled="" type="checkbox"> 一个完整的Docker有以下几个部分组成： <ul><li>Docker Client 客户端</li><li>Docker Daemon 守护进程</li><li>Docker Image 镜像</li><li>Docker Container 容器</li></ul></li></ul><h3 id="1-2-Docker功能特性"><a href="#1-2-Docker功能特性" class="headerlink" title="1.2 Docker功能特性"></a>1.2 Docker功能特性</h3><ul><li><input checked="" disabled="" type="checkbox"> 隔离环境（系统，网络，文件系统）与应用</li><li><input checked="" disabled="" type="checkbox"> 解决依赖与版本问题</li><li><input checked="" disabled="" type="checkbox"> 易于分发，开箱即用</li><li><input checked="" disabled="" type="checkbox"> 节点与容器快速扩容</li><li><input checked="" disabled="" type="checkbox"> 镜像制作简单便捷，管理方便</li></ul><p>（1）隔离</p><blockquote></blockquote><ul><li>通过cgroup（隔离和跟踪资源的使用）&amp; namespace（组与组之间隔离）来实现轻量级的进程隔离</li><li>对于容器中运行的进程来说，自己独占了一个系统</li><li>容器间网络，文件及其他资源都互相隔离</li></ul><p>（2）版本与依赖</p><blockquote></blockquote><ul><li>传统模式下，多个不同环境或版本的项目需要部署在不同机器上，部署与后期维护管理复杂繁琐。</li><li>使用Docker，通过多个不同版本或者环境的镜像，可以同时运行在一台机器上互不干扰，部署与后期维护简单方便。</li></ul><p>（3）分发与使用</p><blockquote></blockquote><ul><li>镜像可以通过导入，导出，上传到镜像仓库等多种方式进行分发</li><li>在启动了Docker的系统上直接使用docker run即可启动镜像，无需特别配置。</li></ul><p>（4）扩容</p><blockquote></blockquote><ul><li>容器扩容简单方便</li><li>扩容节点只需安装并启动Docker即可</li></ul><p>（5）镜像制作</p><blockquote></blockquote><ul><li>镜像的灵魂Dockerfile</li><li>使用Dockerfile进行指令控制</li><li>基于Linux命令，易于理解，快速上手</li><li>易于定制与修改</li></ul><h3 id="1-3-Docker应用场景"><a href="#1-3-Docker应用场景" class="headerlink" title="1.3 Docker应用场景"></a>1.3 Docker应用场景</h3><ul><li><input checked="" disabled="" type="checkbox"> Docker通常应用于如下场景： <ul><li>web应用的自动化打包和发布；</li><li>自动化测试和持续集成，发布；</li><li>应用服务，如MySQL，Redis等，通过Docker实现快速部署；</li><li>k8s私有云</li></ul></li></ul><h4 id="1-3-1-场景1：多版本多种类系统与软件"><a href="#1-3-1-场景1：多版本多种类系统与软件" class="headerlink" title="1.3.1 场景1：多版本多种类系统与软件"></a>1.3.1 场景1：多版本多种类系统与软件</h4><p><img src="/articles/2018/10/02/dockerjichu-shang/1.png"></p><h4 id="1-3-2-场景2：-环境"><a href="#1-3-2-场景2：-环境" class="headerlink" title="1.3.2 场景2： 环境"></a>1.3.2 场景2： 环境</h4><p><img src="/articles/2018/10/02/dockerjichu-shang/2.png"></p><h4 id="1-3-3-场景3：-分发"><a href="#1-3-3-场景3：-分发" class="headerlink" title="1.3.3 场景3： 分发"></a>1.3.3 场景3： 分发</h4><p><img src="/articles/2018/10/02/dockerjichu-shang/3.png"></p><h2 id="二，Docker的安装"><a href="#二，Docker的安装" class="headerlink" title="二，Docker的安装"></a>二，Docker的安装</h2><h3 id="2-1-安装环境"><a href="#2-1-安装环境" class="headerlink" title="2.1 安装环境"></a>2.1 安装环境</h3><blockquote><p>最小化安装Centos7.5</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.5.1804 (Core) </span><br><span class="line">[root@localhost ~]# <span class="built_in">uname</span> -r</span><br><span class="line">3.10.0-862.el7.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>关闭防火墙和selinux</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-版本选择"><a href="#2-2-版本选择" class="headerlink" title="2.2 版本选择"></a>2.2 版本选择</h3><ul><li><input checked="" disabled="" type="checkbox"> Docker <ul><li>17.03之后版本变为Docker CE</li></ul></li><li><input checked="" disabled="" type="checkbox"> Docker CE <ul><li>社区版，Community Edition</li></ul></li><li><input checked="" disabled="" type="checkbox"> Docker EE <ul><li>企业版，Enterprise Edition</li><li>收费版本，强调安全性，提供一些高级特性及商业支持</li></ul></li></ul><h3 id="2-3-Docker安装：标准版本"><a href="#2-3-Docker安装：标准版本" class="headerlink" title="2.3 Docker安装：标准版本"></a>2.3 Docker安装：标准版本</h3><blockquote><p>特别提示：<br>centos7.5在搭建本地yum仓库的时候只需要修改<br>CentOS-Media.repo 文件即可（不需要将其他文件仍子目录里）<br>确保虚拟机能正常上网</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install docker</span><br><span class="line">[root@localhost ~]# systemctl start docker              <span class="comment">#启动docker进程</span></span><br><span class="line">[root@localhost ~]# systemctl <span class="built_in">enable</span> docker             <span class="comment">#加入docker开机启动</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">[root@localhost ~]# docker ps           <span class="comment">#查看封装在docker镜像中的正在运行的镜像进程</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@localhost ~]# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:         1.13.1</span><br><span class="line"> API version:     1.26</span><br><span class="line"> Package version: docker-1.13.1-75.git8633870.el7.centos.x86_64</span><br><span class="line"> Go version:      go1.9.4</span><br><span class="line"> Git commit:      8633870/1.13.1</span><br><span class="line"> Built:           Fri Sep 28 19:45:08 2018</span><br><span class="line"> OS/Arch:         linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:         1.13.1</span><br><span class="line"> API version:     1.26 (minimum version 1.12)</span><br><span class="line"> Package version: docker-1.13.1-75.git8633870.el7.centos.x86_64</span><br><span class="line"> Go version:      go1.9.4</span><br><span class="line"> Git commit:      8633870/1.13.1</span><br><span class="line"> Built:           Fri Sep 28 19:45:08 2018</span><br><span class="line"> OS/Arch:         linux/amd64</span><br><span class="line"> Experimental:    <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-Docker安装：CE社区版"><a href="#2-4-Docker安装：CE社区版" class="headerlink" title="2.4 Docker安装：CE社区版"></a>2.4 Docker安装：CE社区版</h3><blockquote><p>首先清理掉yum安装的docker标准版<br>这里有两种方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一种清理docker方法</span></span><br><span class="line">[root@localhost ~]# yum -y remove docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种清理docker方法</span></span><br><span class="line">[root@localhost ~]# yum <span class="built_in">history</span> list            <span class="comment">#查看yum安装的历史列表</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">ID     | Login user               | Date and <span class="keyword">time</span>    | Action(s)      | Altered</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">     5 | root &lt;root&gt;              | 2018-10-03 05:30 | I, U           |   29    <span class="comment">#这次就是安装的docker</span></span><br><span class="line">     4 | root &lt;root&gt;              | 2018-09-10 21:53 | Install        |    1   </span><br><span class="line">     3 | root &lt;root&gt;              | 2018-09-10 21:52 | Install        |   51   </span><br><span class="line">     2 | root &lt;root&gt;              | 2018-09-10 21:49 | I, U           |   42   </span><br><span class="line">     1 | System &lt;<span class="built_in">unset</span>&gt;           | 2018-09-10 21:14 | Install        |  311   </span><br><span class="line"><span class="built_in">history</span> list</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum <span class="built_in">history</span> info 5              <span class="comment">#查看yum历史安装ID为5的安装信息</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Transaction ID : 5</span><br><span class="line">Begin <span class="keyword">time</span>     : Wed Oct  3 05:30:44 2018</span><br><span class="line">Begin rpmdb    : 402:a21e595e89a560c63b9b56a960a15973500ac077</span><br><span class="line">End <span class="keyword">time</span>       :            05:31:31 2018 (47 seconds)</span><br><span class="line">End rpmdb      : 429:96445b97491375cff0acc3f0dfcbc2155ee5f7e7</span><br><span class="line">User           : root &lt;root&gt;</span><br><span class="line">Return-Code    : Success</span><br><span class="line">Command Line   : -y install docker</span><br><span class="line">Transaction performed with:</span><br><span class="line">    Installed     rpm-4.11.3-32.el7.x86_64                      @anaconda</span><br><span class="line">    Installed     yum-3.4.3-158.el7.centos.noarch               @anaconda</span><br><span class="line">    Installed     yum-plugin-fastestmirror-1.1.31-45.el7.noarch @anaconda</span><br><span class="line">Packages Altered:</span><br><span class="line">    Dep-Install PyYAML-3.10-11.el7.x86_64                                          @base</span><br><span class="line">    Dep-Install atomic-registries-1:1.22.1-25.git5a342e3.el7.centos.x86_64         @extras</span><br><span class="line">    Updated     audit-2.8.1-3.el7.x86_64                                           @anaconda</span><br><span class="line">    Update            2.8.1-3.el7_5.1.x86_64                                       @updates</span><br><span class="line">    Updated     audit-libs-2.8.1-3.el7.x86_64                                      @anaconda</span><br><span class="line">    Update                 2.8.1-3.el7_5.1.x86_64                                  @updates</span><br><span class="line">    Dep-Install audit-libs-python-2.8.1-3.el7_5.1.x86_64                           @updates</span><br><span class="line">    Dep-Install checkpolicy-2.5-6.el7.x86_64                                       @base</span><br><span class="line">    Dep-Install container-selinux-2:2.68-1.el7.noarch                              @extras</span><br><span class="line">    Dep-Install container-storage-setup-0.11.0-2.git5eaf76c.el7.noarch             @extras</span><br><span class="line">    Install     docker-2:1.13.1-75.git8633870.el7.centos.x86_64                    @extras</span><br><span class="line">    Dep-Install docker-client-2:1.13.1-75.git8633870.el7.centos.x86_64             @extras</span><br><span class="line">    Dep-Install docker-common-2:1.13.1-75.git8633870.el7.centos.x86_64             @extras</span><br><span class="line">    Dep-Install libcgroup-0.41-15.el7.x86_64                                       @base</span><br><span class="line">    Dep-Install libseccomp-2.3.1-3.el7.x86_64                                      @base</span><br><span class="line">    Dep-Install libsemanage-python-2.5-11.el7.x86_64                               @base</span><br><span class="line">    Dep-Install libyaml-0.1.4-11.el7_0.x86_64                                      @base</span><br><span class="line">    Dep-Install oci-register-machine-1:0-6.git2b44233.el7.x86_64                   @extras</span><br><span class="line">    Dep-Install oci-systemd-hook-1:0.1.17-2.git83283a0.el7.x86_64                  @extras</span><br><span class="line">    Dep-Install oci-umount-2:2.3.3-3.gite3c9055.el7.x86_64                         @extras</span><br><span class="line">    Dep-Install policycoreutils-python-2.5-22.el7.x86_64                           @base</span><br><span class="line">    Dep-Install python-IPy-0.75-6.el7.noarch                                       @base</span><br><span class="line">    Dep-Install python-backports-1.0-8.el7.x86_64                                  @base</span><br><span class="line">    Dep-Install python-backports-ssl_match_hostname-3.5.0.1-1.el7.noarch           @base</span><br><span class="line">    Dep-Install python-ipaddress-1.0.16-2.el7.noarch                               @base</span><br><span class="line">    Dep-Install python-pytoml-0.1.14-1.git7dea353.el7.noarch                       @extras</span><br><span class="line">    Dep-Install python-setuptools-0.9.8-7.el7.noarch                               @base</span><br><span class="line">    Dep-Install setools-libs-3.3.8-2.el7.x86_64                                    @base</span><br><span class="line">    Dep-Install skopeo-containers-1:0.1.31-1.dev.gitae64ff7.el7.centos.x86_64      @extras</span><br><span class="line">    Dep-Install subscription-manager-rhsm-certificates-1.20.11-1.el7.centos.x86_64 @base</span><br><span class="line">    Dep-Install yajl-2.0.4-4.el7.x86_64                                            @base</span><br><span class="line"><span class="built_in">history</span> info</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum -y <span class="built_in">history</span> undo 5       <span class="comment">#进行yum安装操作回退</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>yum的回退安装在工作中很有用<br>接下来安装Docker的CE社区版</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">[root@localhost ~]# yum -y install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加docker的CE版本的yum源配置文件</span></span><br><span class="line">[root@Docker ~]# yum-config-manager \</span><br><span class="line">     --add-repo \</span><br><span class="line">     https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">[root@localhost ~]# yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装CE版本的docker</span></span><br><span class="line">[root@localhost ~]# yum -y install docker-ce</span><br><span class="line">[root@localhost ~]# systemctl start docker      <span class="comment">#启动docker</span></span><br><span class="line">[root@localhost ~]# systemctl <span class="built_in">enable</span> docker     <span class="comment">#添加开机启动</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">[root@localhost ~]# docker version          <span class="comment">#查看docker版本</span></span><br><span class="line">Client:</span><br><span class="line"> Version:           18.06.1-ce</span><br><span class="line"> API version:       1.38</span><br><span class="line"> Go version:        go1.10.3</span><br><span class="line"> Git commit:        e68fc7a</span><br><span class="line"> Built:             Tue Aug 21 17:23:03 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.06.1-ce</span><br><span class="line">  API version:      1.38 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.3</span><br><span class="line">  Git commit:       e68fc7a</span><br><span class="line">  Built:            Tue Aug 21 17:25:29 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三，Docker的操作命令"><a href="#三，Docker的操作命令" class="headerlink" title="三，Docker的操作命令"></a>三，Docker的操作命令</h2><h3 id="3-0-添加docker国内镜像源"><a href="#3-0-添加docker国内镜像源" class="headerlink" title="3.0 添加docker国内镜像源"></a>3.0 添加docker国内镜像源</h3><blockquote><p>要添加国内的源地址</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/docker/daemon.json</span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>:[ <span class="string">&quot;https://registry.docker-cn.com&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost ~]# systemctl daemon-reload</span><br><span class="line">[root@localhost ~]# systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-1-Docker命令：search"><a href="#3-1-Docker命令：search" class="headerlink" title="3.1 Docker命令：search"></a>3.1 Docker命令：search</h3><blockquote><p>用于从docker的官方公有镜像仓库查找镜像</p></blockquote><p>（1）查看Docker Hub上公开的centos镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker search centos</span><br><span class="line">NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">centos                             The official build of CentOS.                   4805                [OK]                </span><br><span class="line">ansible/centos7-ansible            Ansible on Centos7                              118                                     [OK]</span><br><span class="line">jdeathe/centos-ssh                 CentOS-6 6.10 x86_64 / CentOS-7 7.5.1804 x86…   99                                      [OK]</span><br><span class="line">consol/centos-xfce-vnc             Centos container with <span class="string">&quot;headless&quot;</span> VNC session…   65                                      [OK]</span><br><span class="line">...以下省略无数行....                     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特别说明：</span><br><span class="line">Name：镜像的名字</span><br><span class="line">DESCRIPTION：描述</span><br><span class="line">STARS：星级（越高越好）</span><br><span class="line">OFFICIAL：是否是官方发布的</span><br><span class="line">AUTOMATED:是否自动化的</span><br></pre></td></tr></table></figure><p>（2）查找星级多于100的centos镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker search centos -f stars=100</span><br><span class="line">NAME                      DESCRIPTION                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">centos                    The official build of CentOS.   4805                [OK]                </span><br><span class="line">ansible/centos7-ansible   Ansible on Centos7              118                                     [OK]</span><br><span class="line"></span><br><span class="line">特别提示：</span><br><span class="line">/：符号用于分割作者名称和镜像名称</span><br><span class="line">ansible/centos7-ansible：ansible是作者名称，centos7-ansible是镜像名称</span><br></pre></td></tr></table></figure><p>（3）多条件查找–filter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找官方发布的，星级大于100的centos镜像</span></span><br><span class="line">[root@localhost ~]# docker search centos --filter is-official=<span class="literal">true</span> --filter stars=100</span><br><span class="line">NAME                DESCRIPTION                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">centos              The official build of CentOS.   4805                [OK]       </span><br></pre></td></tr></table></figure><h3 id="3-2-Docker命令：pull"><a href="#3-2-Docker命令：pull" class="headerlink" title="3.2 Docker命令：pull"></a>3.2 Docker命令：pull</h3><blockquote><p>用于从Docker Hub上下载公有镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找符合条件的hello-world镜像</span></span><br><span class="line">[root@localhost ~]# docker search hello-world --filter is-official=<span class="literal">true</span> --filter stars=100</span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">hello-world         Hello World! (an example of minimal Dockeriz…   681                 [OK]    </span><br><span class="line"></span><br><span class="line"><span class="comment">#下载目标hello-world镜像</span></span><br><span class="line">[root@localhost ~]# docker pull hello-world</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">d1725b59e92d: Pull complete </span><br><span class="line">Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest       <span class="comment">#下载成功latest是标记tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载目标centos:7镜像</span></span><br><span class="line">[root@localhost ~]# docker pull centos:7        <span class="comment">#网速不好的话，需要点时间耐心等待</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-Docker命令：images"><a href="#3-3-Docker命令：images" class="headerlink" title="3.3 Docker命令：images"></a>3.3 Docker命令：images</h3><blockquote><p>用于本地镜像的查看</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">hello-world         latest              4ab4c602aa5e        5 weeks ago         1.84kB</span><br><span class="line"></span><br><span class="line">特别说明：</span><br><span class="line">REPOSITORY：镜像仓库（下边罗列的都是本地已有镜像名称）</span><br><span class="line">TAG：镜像的标记（为了区分同名镜像）</span><br><span class="line">IMAGES ID：镜像的ID号</span><br><span class="line">CREATED：此镜像的创建时间</span><br><span class="line">SIZE：此镜像的大小</span><br></pre></td></tr></table></figure><h3 id="3-4-Docker命令：build"><a href="#3-4-Docker命令：build" class="headerlink" title="3.4 Docker命令：build"></a>3.4 Docker命令：build</h3><blockquote><p>用于本地自定义镜像的构建，需要创建Dockerfile文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建Dockerfile文件的存储目录</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> -p /root/dockerfile/lib/centos/7</span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /root/dockerfile/lib/centos/7</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建docker.sh脚本</span></span><br><span class="line">[root@localhost 7]# vim docker.sh</span><br><span class="line">[root@localhost 7]# <span class="built_in">cat</span> docker.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;welcome&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> 5</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Dockerfile配置文件，文件名称必须为Dockerfile，第一个字母必须大写</span></span><br><span class="line">[root@localhost 7]# vim Dockerfile</span><br><span class="line">[root@localhost 7]# <span class="built_in">cat</span> Dockerfile </span><br><span class="line">FROM centos         <span class="comment">#从centos源镜像的基础上进行构建</span></span><br><span class="line"></span><br><span class="line">LABEL MAINTATNER=<span class="string">&quot;zhaoshuo&quot;</span>         <span class="comment">#作者的名称</span></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">ln</span> -sfv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime        <span class="comment">#RUN：在镜像构建过程中运行命令</span></span><br><span class="line">ADD docker.sh /home/test/       <span class="comment">#从本地系统中把docker.sh文件添加到构建中的镜像的/home/test/目录下</span></span><br><span class="line">RUN <span class="built_in">chmod</span> +x /home/test/docker.sh       <span class="comment">#在镜像构建过程中运行命令</span></span><br><span class="line">CMD [<span class="string">&quot;/home/test/docker.sh&quot;</span>]        <span class="comment">#构建镜像完成时，最后执行的命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据Dockfile配置文件构建一个自定义镜像</span></span><br><span class="line">[root@localhost 7]# docker build -t zhaoshuo/centos7:1 .        <span class="comment">#-t 指定镜像名称  ：1  设定镜像的tag标记</span></span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/6 : FROM centos</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">Digest: sha256:67dad89757a55bfdfabec8abd0e22f8c7c12a1856514726470228063ed86593b</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:latest</span><br><span class="line"> ---&gt; 75835a67d134</span><br><span class="line">Step 2/6 : LABEL MAINTATNER=<span class="string">&quot;zhaoshuo&quot;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 07b9ec2c2b77</span><br><span class="line">Removing intermediate container 07b9ec2c2b77</span><br><span class="line"> ---&gt; 8af9c0b32fec</span><br><span class="line">Step 3/6 : RUN <span class="built_in">ln</span> -sfv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> aeb9baee5588</span><br><span class="line"><span class="string">&#x27;/etc/localtime&#x27;</span> -&gt; <span class="string">&#x27;/usr/share/zoneinfo/Asia/Shanghai&#x27;</span></span><br><span class="line">Removing intermediate container aeb9baee5588</span><br><span class="line"> ---&gt; 3e7396341559</span><br><span class="line">Step 4/6 : ADD docker.sh /home/test/</span><br><span class="line"> ---&gt; 55b4caef0d35</span><br><span class="line">Step 5/6 : RUN <span class="built_in">chmod</span> +x /home/test/docker.sh</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 6d8035f7ddeb</span><br><span class="line">Removing intermediate container 6d8035f7ddeb</span><br><span class="line"> ---&gt; 69498dec7fae</span><br><span class="line">Step 6/6 : CMD [<span class="string">&quot;/home/test/docker.sh&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 2a823763ffe9</span><br><span class="line">Removing intermediate container 2a823763ffe9</span><br><span class="line"> ---&gt; a456dd68d802</span><br><span class="line">Successfully built a456dd68d802         <span class="comment">#构建成功</span></span><br><span class="line">Successfully tagged zhaoshuo/centos7:1</span><br><span class="line"></span><br><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        57 seconds ago      200MB       <span class="comment">#TAG为1</span></span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">hello-world         latest              4ab4c602aa5e        5 weeks ago         1.84kB</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-5-Docker命令：run"><a href="#3-5-Docker命令：run" class="headerlink" title="3.5 Docker命令：run"></a>3.5 Docker命令：run</h3><blockquote><p>运行一个本地镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        57 seconds ago      200MB       </span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">hello-world         latest              4ab4c602aa5e        5 weeks ago         1.84kB</span><br><span class="line">[root@localhost 7]# docker run -d -it a456dd68d802 /bin/bash</span><br><span class="line">5e993afbfc0f4b1b421f2414cb890a492c562a2306401e03796dfccc6b0f7c4b</span><br><span class="line"></span><br><span class="line">特别提示：</span><br><span class="line">docker run：运行一个指定的images <span class="built_in">id</span></span><br><span class="line">-d：放在后台运行</span><br><span class="line">-i：可以进行命令交互</span><br><span class="line">-t：制作一个伪终端用于登陆</span><br><span class="line">a456dd68d802:镜像的ID，可以简写成a45</span><br></pre></td></tr></table></figure><h3 id="3-6-Docker命令：ps"><a href="#3-6-Docker命令：ps" class="headerlink" title="3.6 Docker命令：ps"></a>3.6 Docker命令：ps</h3><blockquote><p>查看已经运行的镜像的进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a        <span class="comment">#查看所有运行的镜像进程（包含退出的exit）</span></span><br><span class="line">CONTAINER ID      IMAGE         COMMAND        CREATED        STATUS       PORTS      NAMES</span><br><span class="line">5e993afbfc0f   a456dd68d802    <span class="string">&quot;/bin/bash&quot;</span>   2 minutes ago   Up 2 minutes          reverent_euclid</span><br><span class="line"></span><br><span class="line">特别提示：</span><br><span class="line">STATUS：进程的状态，UP表示正在运行中，EXIT表示已经退出了。</span><br></pre></td></tr></table></figure><h3 id="3-7-Docker命令：attach"><a href="#3-7-Docker命令：attach" class="headerlink" title="3.7 Docker命令：attach"></a>3.7 Docker命令：attach</h3><blockquote><p>从本地系统中切入到某个STATUS状态是UP的镜像进程里</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID      IMAGE         COMMAND        CREATED        STATUS       PORTS      NAMES</span><br><span class="line">5e993afbfc0f   a456dd68d802    <span class="string">&quot;/bin/bash&quot;</span>   2 minutes ago   Up 2 minutes          reverent_euclid</span><br><span class="line"></span><br><span class="line">[root@localhost 7]# docker attach 5e993afbfc0f          <span class="comment">#切入到容器号为5e993afbfc0f的镜像进程里</span></span><br><span class="line">[root@5e993afbfc0f /]# <span class="built_in">ls</span>       <span class="comment">#已经进入容器里了</span></span><br><span class="line">anaconda-post.log  dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">bin                etc  lib   media  opt  root  sbin  sys  usr</span><br><span class="line">[root@5e993afbfc0f /]# <span class="built_in">exit</span>     <span class="comment">#退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@localhost 7]# docker ps -a        <span class="comment">#容器的进程的STATUS已经处于EXIT状态（之前是后台运行的，切入进去后执行exit就等于手动退出了）</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">5e993afbfc0f        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         5 minutes ago       Exited (0) 10 seconds ago                       reverent_euclid</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-8-Docker命令：stop"><a href="#3-8-Docker命令：stop" class="headerlink" title="3.8 Docker命令：stop"></a>3.8 Docker命令：stop</h3><blockquote><p>用于停止一个正在运行着的容器进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</span><br><span class="line">5e993afbfc0f        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         6 minutes ago       Exited (0) About a minute ago                       reverent_euclid</span><br><span class="line"></span><br><span class="line"><span class="comment">#再次在后台启动一个镜像</span></span><br><span class="line">[root@localhost 7]# docker run -d -it a456dd68d802 /bin/bash</span><br><span class="line">af5a8cfcfe5ba25d2149441af123730db07105953dd9afa79827457d6e2c2e59</span><br><span class="line">[root@localhost 7]# docker ps -a        <span class="comment">#增加了一个容器进程</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         3 seconds ago       Up 2 seconds                                   xenodochial_colden</span><br><span class="line">5e993afbfc0f        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         7 minutes ago       Exited (0) 2 minutes ago                       reverent_euclid</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止一个运行着的容器进程</span></span><br><span class="line">[root@localhost 7]# docker stop af5a8cfcfe5b</span><br><span class="line">af5a8cfcfe5b</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS                       PORTS               NAMES</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         About a minute ago   Exited (137) 3 seconds ago                       xenodochial_colden</span><br><span class="line">5e993afbfc0f        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         8 minutes ago        Exited (0) 3 minutes ago                         reverent_euclid</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-9-Docker命令：start"><a href="#3-9-Docker命令：start" class="headerlink" title="3.9 Docker命令：start"></a>3.9 Docker命令：start</h3><blockquote><p>用于启动一个已经停止了的容器进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 minutes ago       Exited (137) 44 seconds ago                       xenodochial_colden</span><br><span class="line">5e993afbfc0f        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         9 minutes ago       Exited (0) 4 minutes ago                          reverent_euclid</span><br><span class="line">[root@localhost 7]# docker start af5a8cfcfe5b</span><br><span class="line">af5a8cfcfe5b</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 minutes ago       Up 2 seconds                                   xenodochial_colden</span><br><span class="line">5e993afbfc0f        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         9 minutes ago       Exited (0) 4 minutes ago                       reverent_euclid</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-10-Docker命令：rm"><a href="#3-10-Docker命令：rm" class="headerlink" title="3.10 Docker命令：rm"></a>3.10 Docker命令：rm</h3><blockquote><p>用于删除一个已经停止了的容器进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         3 minutes ago       Up About a minute                              xenodochial_colden</span><br><span class="line">5e993afbfc0f        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         10 minutes ago      Exited (0) 5 minutes ago                       reverent_euclid</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">rm</span> 5e993afbfc0f</span><br><span class="line">5e993afbfc0f</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         3 minutes ago       Up About a minute                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">rm</span> af5a8cfcfe5b      <span class="comment">#注意运行中的容器进程需要先stop，才能删除</span></span><br><span class="line">Error response from daemon: You cannot remove a running container af5a8cfcfe5ba25d2149441af123730db07105953dd9afa79827457d6e2c2e59. Stop the container before attempting removal or force remove</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-11-Docker命令：rmi"><a href="#3-11-Docker命令：rmi" class="headerlink" title="3.11 Docker命令：rmi"></a>3.11 Docker命令：rmi</h3><blockquote><p>用于删除一个未用作容器启动的本地镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        36 minutes ago      200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">hello-world         latest              4ab4c602aa5e        5 weeks ago         1.84kB</span><br><span class="line">[root@localhost ~]# docker rmi -f 4ab4c602aa5e      <span class="comment">#-f 强制删除（即便被占用）</span></span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Deleted: sha256:4ab4c602aa5eed5528a6620ff18a1dc4faef0e1ab3a5eddeddb410714478c67f</span><br><span class="line">Deleted: sha256:428c97da766c4c13b19088a471de6b622b038f3ae8efa10ec5a37d6d31a2df0b</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        37 minutes ago      200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost ~]# docker rmi a456dd68d802         <span class="comment">#但要注意，被用作容器启动的镜像是不能删除的（需先rm删除容器进程）</span></span><br><span class="line">Error response from daemon: conflict: unable to delete a456dd68d802 (cannot be forced) - image is being used by running container af5a8cfcfe5b</span><br><span class="line">[root@localhost ~]# docker rmi -f a456dd68d802      <span class="comment">#强行删除被容器进程占用的镜像也是不行的</span></span><br><span class="line">Error response from daemon: conflict: unable to delete a456dd68d802 (cannot be forced) - image is being used by running container af5a8cfcfe5b</span><br><span class="line">[root@localhost ~]# docker ps -a        <span class="comment">#查看容器进程，被占用中</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         6 minutes ago       Up 3 minutes                            xenodochial_colden</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-12-Docker命令：commit"><a href="#3-12-Docker命令：commit" class="headerlink" title="3.12 Docker命令：commit"></a>3.12 Docker命令：commit</h3><blockquote><p>将一个更改过的容器进程的容器状态保存为一个新的镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a        <span class="comment">#查看启动的容器进程</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         10 minutes ago      Up 8 minutes                            xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker attach af5a8cfcfe5b      <span class="comment">#切入容器进程</span></span><br><span class="line"></span><br><span class="line">[root@af5a8cfcfe5b /]# <span class="built_in">ls</span></span><br><span class="line">anaconda-post.log  dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">bin                etc  lib   media  opt  root  sbin  sys  usr</span><br><span class="line">[root@af5a8cfcfe5b /]# <span class="built_in">mkdir</span> yunjisuan      <span class="comment">#在容器进程里创建yunjisuan目录</span></span><br><span class="line">[root@af5a8cfcfe5b /]# <span class="built_in">ls</span></span><br><span class="line">anaconda-post.log  dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">bin                etc  lib   media  opt  root  sbin  sys  usr  yunjisuan</span><br><span class="line"></span><br><span class="line">[root@af5a8cfcfe5b /]# <span class="built_in">exit</span>     <span class="comment">#退出容器进程</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         25 minutes ago      Exited (0) 4 seconds ago                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker commit af5a8cfcfe5b zhaoshuo/centos:2        <span class="comment">#将更改后的容器进程保存为一个新的镜像</span></span><br><span class="line">sha256:d396465fd814d049063325b5f6c752e9cd0da0821ff42d9400c2a90ba2a42c5b</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        5 seconds ago       200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        About an hour ago   200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动新保存的镜像</span></span><br><span class="line">[root@localhost ~]# docker run -d -it d396465fd814 /bin/bash</span><br><span class="line">06b28d43f70046b002a37a6431b658b0455dc261c4f55dd4f010c5aadde31f0e</span><br><span class="line">[root@localhost ~]# docker ps -a        <span class="comment">#查看新镜像的容器进程</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         9 seconds ago       Up 9 seconds                                   loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         27 minutes ago      Exited (0) 2 minutes ago                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker attach 06b28d43f700      <span class="comment">#切入新镜像的容器进程</span></span><br><span class="line">[root@06b28d43f700 /]# <span class="built_in">ls</span>       <span class="comment">#之前创建的目录仍旧存在</span></span><br><span class="line">anaconda-post.log  dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">bin                etc  lib   media  opt  root  sbin  sys  usr  yunjisuan</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-13-Docker命令：exec"><a href="#3-13-Docker命令：exec" class="headerlink" title="3.13 Docker命令：exec"></a>3.13 Docker命令：exec</h3><blockquote><p>用于从本地操作系统上直接向容器进程发布执行命令并返回结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         2 minutes ago       Up 7 seconds                                   loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         29 minutes ago      Exited (0) 4 minutes ago                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> 06b28d43f700 <span class="built_in">ls</span> /tmp        <span class="comment">#查看容器进程里的/tmp目录下所有内容</span></span><br><span class="line">ks-script-7RxiSx</span><br><span class="line">yum.log</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> 06b28d43f700 <span class="built_in">ls</span> -d /yunjisuan       <span class="comment">#查看容器进程里/yunjisuan目录</span></span><br><span class="line">/yunjisuan</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it ee782b37bb82 bash           <span class="comment">#进入到容器里面</span></span><br></pre></td></tr></table></figure><h3 id="3-14-Docker命令：cp"><a href="#3-14-Docker命令：cp" class="headerlink" title="3.14 Docker命令：cp"></a>3.14 Docker命令：cp</h3><blockquote><p>用于在容器进程和本地系统之间复制文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         31 minutes ago      Up 29 minutes                                   loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         About an hour ago   Exited (0) 33 minutes ago                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> 06b28d43f700 <span class="built_in">ls</span> /tmp        <span class="comment">#向容器进程发布命令</span></span><br><span class="line">ks-script-7RxiSx</span><br><span class="line">yum.log</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">cp</span> 06b28d43f700:/tmp/yum.log .       <span class="comment">#将指定容器进程的/tmp/yum.log复制到当前目录下</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span>      <span class="comment">#已经复制过来了</span></span><br><span class="line">anaconda-ks.cfg  dockerfile  wordpress-4.7.4-zh_CN.tar.gz  yum.log</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">cp</span> anaconda-ks.cfg 06b28d43f700:/tmp/        <span class="comment">#将本地文件复制到容器进程里</span></span><br><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> 06b28d43f700 <span class="built_in">ls</span> /tmp</span><br><span class="line">anaconda-ks.cfg      <span class="comment">#复制成功 </span></span><br><span class="line">ks-script-7RxiSx</span><br><span class="line">yum.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-15-Docker命令：create"><a href="#3-15-Docker命令：create" class="headerlink" title="3.15 Docker命令：create"></a>3.15 Docker命令：create</h3><blockquote><p>用于创建一个容器进程，但是并不启动它</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        About an hour ago   200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        2 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost ~]# docker create -it d396465fd814      <span class="comment">#创建一个镜像的容器进程，但不直接启动</span></span><br><span class="line">5969d37135488e62ca32073163b86eb8bafc2d86854b16df58ae01ce858d3c7a</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         8 seconds ago       Created                                            optimistic_lewin       <span class="comment">#创建状态并未启动</span></span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         About an hour ago   Up About an hour                                   loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 hours ago         Exited (0) About an hour ago                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker start 5969d3713548       <span class="comment">#启动容器进程</span></span><br><span class="line">5969d3713548</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         46 seconds ago      Up 1 second                                        optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         About an hour ago   Up About an hour                                   loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 hours ago         Exited (0) About an hour ago                       xenodochial_colden</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-16-Docker命令：diff"><a href="#3-16-Docker命令：diff" class="headerlink" title="3.16 Docker命令：diff"></a>3.16 Docker命令：diff</h3><blockquote><p>查看容器进程与源镜像做对比，发生了改变的文件或文件夹</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         2 minutes ago       Up About a minute                                  optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         About an hour ago   Up About an hour                                   loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 hours ago         Exited (0) About an hour ago                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker attach 5969d3713548      <span class="comment">#切入容器进程</span></span><br><span class="line">[root@5969d3713548 /]# <span class="built_in">cd</span> /yunjisuan/</span><br><span class="line">[root@5969d3713548 yunjisuan]# <span class="built_in">pwd</span>          </span><br><span class="line">/yunjisuan</span><br><span class="line">[root@5969d3713548 yunjisuan]# <span class="built_in">touch</span> &#123;1..10&#125;        <span class="comment">#在容器进程中创建文件</span></span><br><span class="line">[root@5969d3713548 yunjisuan]# <span class="built_in">ls</span></span><br><span class="line">1  10  2  3  4  5  6  7  8  9</span><br><span class="line">[root@5969d3713548 yunjisuan]# <span class="built_in">exit</span>                 <span class="comment">#退出容器进程</span></span><br><span class="line"><span class="built_in">exit</span>    </span><br><span class="line">[root@localhost ~]# docker diff 5969d3713548        <span class="comment">#查看容器进程的变化</span></span><br><span class="line">C /root</span><br><span class="line">C /root/.bash_history</span><br><span class="line">C /yunjisuan</span><br><span class="line">A /yunjisuan/1</span><br><span class="line">A /yunjisuan/7</span><br><span class="line">A /yunjisuan/3</span><br><span class="line">A /yunjisuan/4</span><br><span class="line">A /yunjisuan/5</span><br><span class="line">A /yunjisuan/6</span><br><span class="line">A /yunjisuan/8</span><br><span class="line">A /yunjisuan/9</span><br><span class="line">A /yunjisuan/10</span><br><span class="line">A /yunjisuan/2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-17-Docker命令：events"><a href="#3-17-Docker命令：events" class="headerlink" title="3.17 Docker命令：events"></a>3.17 Docker命令：events</h3><blockquote><p>时时监测容器的变化情况</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker events</span><br><span class="line">2018-10-14T00:23:29.522641941+08:00 container <span class="built_in">kill</span> 06b28d43f70046b002a37a6431b658b0455dc261c4f55dd4f010c5aadde31f0e (MAINTATNER=zhaoshuo, image=d396465fd814, name=loving_jepsen, org.label-schema.build-date=20181006, org.label-schema.license=GPLv2, org.label-schema.name=CentOS Base Image, org.label-schema.schema-version=1.0, org.label-schema.vendor=CentOS, signal=15)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>前台时时监控容器的变化若要检测，需要另外再起一个窗口进行操作</p></blockquote><h3 id="3-18-Docker命令：export"><a href="#3-18-Docker命令：export" class="headerlink" title="3.18 Docker命令：export"></a>3.18 Docker命令：export</h3><blockquote><p>将容器进程的文件系统导出到本地</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         7 minutes ago       Exited (0) 3 minutes ago                           optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         About an hour ago   Exited (137) 37 seconds ago                        loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 hours ago         Exited (0) About an hour ago                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker start 596            <span class="comment">#启动一个容器进程</span></span><br><span class="line">596</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         7 minutes ago       Up 3 seconds                                       optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         About an hour ago   Exited (137) 54 seconds ago                        loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 hours ago         Exited (0) About an hour ago                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">export</span> 5969d3713548 &gt; test.tar       <span class="comment">#将容器进程导出成一个tar包</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg  dockerfile  test.tar  wordpress-4.7.4-zh_CN.tar.gz  yum.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-19-Docker命令：import"><a href="#3-19-Docker命令：import" class="headerlink" title="3.19 Docker命令：import"></a>3.19 Docker命令：import</h3><blockquote><p>用于将export导出的文件系统创建为一个镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg  dockerfile  test.tar  wordpress-4.7.4-zh_CN.tar.gz  yum.log</span><br><span class="line">[root@localhost ~]# docker import test.tar zhaoshuo/centos:3</span><br><span class="line">sha256:0ac5e5b6feadedc5f47130d165cc911fc6170cc1423abe45d74abf67ec3c29b6</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        12 seconds ago      200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        About an hour ago   200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        2 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-20-Docker命令：history"><a href="#3-20-Docker命令：history" class="headerlink" title="3.20 Docker命令：history"></a>3.20 Docker命令：history</h3><blockquote><p>用于查看一个镜像的历史修改纪录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        40 seconds ago      200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        About an hour ago   200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        2 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">history</span> 0ac5e5b6fead</span><br><span class="line">IMAGE               CREATED              CREATED BY          SIZE                COMMENT</span><br><span class="line">0ac5e5b6fead        About a minute ago                       200MB               Imported from -</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">history</span> d396465fd814</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">d396465fd814        About an hour ago   /bin/bash                                       27B                 </span><br><span class="line">a456dd68d802        2 hours ago         /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/home/test/docker.s…   0B                  </span></span><br><span class="line">69498dec7fae        2 hours ago         /bin/sh -c <span class="built_in">chmod</span> +x /home/test/docker.sh        63B                 </span><br><span class="line">55b4caef0d35        2 hours ago         /bin/sh -c <span class="comment">#(nop) ADD file:5bd1c2d39928ac84c…   63B                 </span></span><br><span class="line">3e7396341559        2 hours ago         /bin/sh -c <span class="built_in">ln</span> -sfv /usr/share/zoneinfo/Asia/…   33B                 </span><br><span class="line">8af9c0b32fec        2 hours ago         /bin/sh -c <span class="comment">#(nop)  LABEL MAINTATNER=zhaoshuo    0B                  </span></span><br><span class="line">75835a67d134        3 days ago          /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span></span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c <span class="comment">#(nop)  LABEL org.label-schema.sc…   0B                  </span></span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c <span class="comment">#(nop) ADD file:fbe9badfd2790f074…   200MB   </span></span><br></pre></td></tr></table></figure><h3 id="3-21-Docker命令：info"><a href="#3-21-Docker命令：info" class="headerlink" title="3.21 Docker命令：info"></a>3.21 Docker命令：info</h3><blockquote><p>用于查看当前操作系统的docker运行信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker info</span><br><span class="line">Containers: 3       <span class="comment">#容器进程3个</span></span><br><span class="line"> Running: 1         <span class="comment">#正在运行状态的容器1个</span></span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 2</span><br><span class="line">Images: 8           <span class="comment">#一共有8个镜像</span></span><br><span class="line">Server Version: 18.06.1-ce</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: xfs</span><br><span class="line"> Supports d_type: <span class="literal">true</span></span><br><span class="line"> Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: <span class="built_in">local</span></span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e</span><br><span class="line">runc version: 69663f0bd4b60df09991c08812a60108003fa340</span><br><span class="line">init version: fec3683</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 3.10.0-862.el7.x86_64</span><br><span class="line">Operating System: CentOS Linux 7 (Core)</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 1</span><br><span class="line">Total Memory: 974.6MiB</span><br><span class="line">Name: localhost.localdomain</span><br><span class="line">ID: MUQB:NDRG:NF4L:KCWN:2WKA:DVZ2:CJKJ:CBFO:MP5J:XSIK:CTZO:SJJY</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">Debug Mode (client): <span class="literal">false</span></span><br><span class="line">Debug Mode (server): <span class="literal">false</span></span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br><span class="line">Experimental: <span class="literal">false</span></span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com/</span><br><span class="line">Live Restore Enabled: <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-22-Docker命令：inspect"><a href="#3-22-Docker命令：inspect" class="headerlink" title="3.22 Docker命令：inspect"></a>3.22 Docker命令：inspect</h3><blockquote><p>查看某个镜像的详细信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        2 minutes ago       200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        About an hour ago   200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        2 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost ~]# docker inspect 0ac5e5b6fead</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;sha256:0ac5e5b6feadedc5f47130d165cc911fc6170cc1423abe45d74abf67ec3c29b6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RepoTags&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;zhaoshuo/centos:3&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;RepoDigests&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;Parent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Comment&quot;</span>: <span class="string">&quot;Imported from -&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2018-10-13T16:26:34.706635044Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Container&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ContainerConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: null</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;DockerVersion&quot;</span>: <span class="string">&quot;18.06.1-ce&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: null</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Architecture&quot;</span>: <span class="string">&quot;amd64&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Os&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Size&quot;</span>: 200375235,</span><br><span class="line">        <span class="string">&quot;VirtualSize&quot;</span>: 200375235,</span><br><span class="line">        <span class="string">&quot;GraphDriver&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/1ce82fb0cc05791fa02aa4d77f4bc34001c725f16d5389b36540e9bef1fb05b5/merged&quot;</span>,</span><br><span class="line">                <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/1ce82fb0cc05791fa02aa4d77f4bc34001c725f16d5389b36540e9bef1fb05b5/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/1ce82fb0cc05791fa02aa4d77f4bc34001c725f16d5389b36540e9bef1fb05b5/work&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;RootFS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;layers&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Layers&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;sha256:2a18295dfc1f31d9fc66201ce7c08e5a84e65f514bae0ae4fcbcf38cdd541659&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Metadata&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;LastTagTime&quot;</span>: <span class="string">&quot;2018-10-14T00:26:36.091455174+08:00&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-23-Docker命令：kill"><a href="#3-23-Docker命令：kill" class="headerlink" title="3.23 Docker命令：kill"></a>3.23 Docker命令：kill</h3><blockquote><p>强行停止一个或多个正在运行状态的容器进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         13 minutes ago      Up 5 minutes                                       optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         About an hour ago   Exited (137) 6 minutes ago                         loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 hours ago         Exited (0) About an hour ago                       xenodochial_colden</span><br><span class="line">[root@localhost ~]# docker <span class="built_in">kill</span> 5969d3713548</span><br><span class="line">5969d3713548</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         14 minutes ago      Exited (137) 1 second ago                        optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         About an hour ago   Exited (137) 7 minutes ago                       loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 hours ago         Exited (0) 2 hours ago                           xenodochial_colden</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-24-Docker命令：save"><a href="#3-24-Docker命令：save" class="headerlink" title="3.24 Docker命令：save"></a>3.24 Docker命令：save</h3><blockquote><p>用于将一个镜像的文件系统导出到本地（export导出的是容器）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重新build一个镜像</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> dockerfile/lib/centos/7/</span><br><span class="line">[root@localhost 7]# docker build -t <span class="built_in">test</span>:1 .</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/6 : FROM centos</span><br><span class="line"> ---&gt; 75835a67d134</span><br><span class="line">Step 2/6 : LABEL MAINTATNER=<span class="string">&quot;zhaoshuo&quot;</span></span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 8af9c0b32fec</span><br><span class="line">Step 3/6 : RUN <span class="built_in">ln</span> -sfv /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 3e7396341559</span><br><span class="line">Step 4/6 : ADD docker.sh /home/test/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 55b4caef0d35</span><br><span class="line">Step 5/6 : RUN <span class="built_in">chmod</span> +x /home/test/docker.sh</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 69498dec7fae</span><br><span class="line">Step 6/6 : CMD [<span class="string">&quot;/home/test/docker.sh&quot;</span>]</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a456dd68d802</span><br><span class="line">Successfully built a456dd68d802</span><br><span class="line">Successfully tagged <span class="built_in">test</span>:1</span><br><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        5 minutes ago       200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                1                   a456dd68d802        2 hours ago         200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        2 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost 7]# docker save <span class="built_in">test</span>:1 &gt; test.tar           <span class="comment">#save导出test：1这个镜像（也可以用id号）</span></span><br><span class="line">[root@localhost 7]# <span class="built_in">ls</span></span><br><span class="line">Dockerfile  docker.sh  test.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-25-Docker命令：load"><a href="#3-25-Docker命令：load" class="headerlink" title="3.25 Docker命令：load"></a>3.25 Docker命令：load</h3><blockquote><p>用于将save导出到本地的tar包，重新加载为镜像（和源镜像的名字标识完全一样）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        7 minutes ago       200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost 7]# docker rmi <span class="built_in">test</span>:1       <span class="comment">#删除镜像test：1</span></span><br><span class="line">Untagged: <span class="built_in">test</span>:1</span><br><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        8 minutes ago       200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost 7]# docker load &lt; test.tar      <span class="comment">#将之前test：1这个镜像的save备份导入系统</span></span><br><span class="line">Loaded image: <span class="built_in">test</span>:1</span><br><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        8 minutes ago       200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                1                   a456dd68d802        3 hours ago         200MB       <span class="comment">#和原来的镜像完全一样</span></span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-26-Docker命令：logs"><a href="#3-26-Docker命令：logs" class="headerlink" title="3.26 Docker命令：logs"></a>3.26 Docker命令：logs</h3><blockquote><p>用于输出一个容器进程内的操作日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        19 minutes ago      200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         29 minutes ago      Exited (137) 15 minutes ago                       optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>         2 hours ago         Exited (137) 22 minutes ago                       loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>         2 hours ago         Exited (0) 2 hours ago                            xenodochial_colden</span><br><span class="line">[root@localhost 7]# docker run -d -it <span class="built_in">test</span>:1</span><br><span class="line">28eea5848ffcdd22ff144cdaf31732efd86aa23dcef4da85225face907dcf612</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">28eea5848ffc        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   2 seconds ago       Up 1 second                                       dazzling_ride</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>              29 minutes ago      Exited (137) 15 minutes ago                       optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>              2 hours ago         Exited (137) 22 minutes ago                       loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>              2 hours ago         Exited (0) 2 hours ago                            xenodochial_colden</span><br><span class="line">[root@localhost 7]# docker logs 28eea5848ffc</span><br><span class="line">welcome</span><br><span class="line">welcome</span><br><span class="line">welcome</span><br><span class="line">welcome</span><br><span class="line">welcome</span><br><span class="line"></span><br><span class="line">[root@localhost 7]# docker logs --<span class="built_in">tail</span> 5  28eea5848ffc      <span class="comment">#只显示容器日志的后5行</span></span><br><span class="line">welcome</span><br><span class="line">welcome</span><br><span class="line">welcome</span><br><span class="line">welcome</span><br><span class="line">welcome</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-27-Docker命令：pause-unpause"><a href="#3-27-Docker命令：pause-unpause" class="headerlink" title="3.27 Docker命令：pause &amp;&amp; unpause"></a>3.27 Docker命令：pause &amp;&amp; unpause</h3><blockquote><p>用于将一个或多个容器的进程暂停和恢复</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">28eea5848ffc        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   6 minutes ago       Up 6 minutes                                      dazzling_ride</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>              35 minutes ago      Exited (137) 21 minutes ago                       optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>              2 hours ago         Exited (137) 28 minutes ago                       loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>              2 hours ago         Exited (0) 2 hours ago                            xenodochial_colden</span><br><span class="line">[root@localhost 7]# docker pause 28eea5848ffc       <span class="comment">#暂停容器进程</span></span><br><span class="line">28eea5848ffc</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">28eea5848ffc        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   6 minutes ago       Up 6 minutes (Paused)                             dazzling_ride</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>              36 minutes ago      Exited (137) 22 minutes ago                       optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>              2 hours ago         Exited (137) 29 minutes ago                       loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>              2 hours ago         Exited (0) 2 hours ago                            xenodochial_colden</span><br><span class="line">[root@localhost 7]# docker unpause 28eea5848ffc     <span class="comment">#恢复容器进程</span></span><br><span class="line">28eea5848ffc</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">28eea5848ffc        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   7 minutes ago       Up 7 minutes                                      dazzling_ride</span><br><span class="line">5969d3713548        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>              36 minutes ago      Exited (137) 22 minutes ago                       optimistic_lewin</span><br><span class="line">06b28d43f700        d396465fd814        <span class="string">&quot;/bin/bash&quot;</span>              2 hours ago         Exited (137) 29 minutes ago                       loving_jepsen</span><br><span class="line">af5a8cfcfe5b        a456dd68d802        <span class="string">&quot;/bin/bash&quot;</span>              2 hours ago         Exited (0) 2 hours ago                            xenodochial_colden</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-28-Docker命令：port"><a href="#3-28-Docker命令：port" class="headerlink" title="3.28 Docker命令：port"></a>3.28 Docker命令：port</h3><blockquote><p>用于列出一个容器的端口映射及协议</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        31 minutes ago      200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost 7]# docker run -d -it -p 2222:22 <span class="built_in">test</span>:1     <span class="comment">#启动一个镜像的容器进程 -p 指定本地2222端口映射到容器的22端口</span></span><br><span class="line">30cf521af35820e9bf3803ab526f02065bdb2935a4f58c7278fb17a99ea71163</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">30cf521af358        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   4 seconds ago       Up 3 seconds        0.0.0.0:2222-&gt;22/tcp   hardcore_cori     </span><br><span class="line">[root@localhost 7]# docker port 30cf521af358            <span class="comment">#查看容器进程的端口映射及协议</span></span><br><span class="line">22/tcp -&gt; 0.0.0.0:2222</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-29-Docker命令：rename"><a href="#3-29-Docker命令：rename" class="headerlink" title="3.29 Docker命令：rename"></a>3.29 Docker命令：rename</h3><blockquote><p>给容器进程重命名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                  NAMES</span><br><span class="line">30cf521af358        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:2222-&gt;22/tcp   hardcore_cori</span><br><span class="line">[root@localhost 7]# docker rename hardcore_cori zhaoshuo</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">30cf521af358        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   2 minutes ago       Up 2 minutes        0.0.0.0:2222-&gt;22/tcp   zhaoshuo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-30-Docker命令：restart"><a href="#3-30-Docker命令：restart" class="headerlink" title="3.30 Docker命令：restart"></a>3.30 Docker命令：restart</h3><blockquote><p>重启一个容器进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">30cf521af358        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   3 minutes ago       Up 3 minutes        0.0.0.0:2222-&gt;22/tcp   zhaoshuo</span><br><span class="line">[root@localhost 7]# docker restart 30cf521af358</span><br><span class="line">30cf521af358</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">30cf521af358        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   3 minutes ago       Up 1 second         0.0.0.0:2222-&gt;22/tcp   zhaoshuo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-31-Docker命令：stats"><a href="#3-31-Docker命令：stats" class="headerlink" title="3.31 Docker命令：stats"></a>3.31 Docker命令：stats</h3><blockquote><p>用于时时输出容器的资源使用情况</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">30cf521af358        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   5 minutes ago       Up 2 minutes        0.0.0.0:2222-&gt;22/tcp   zhaoshuo</span><br><span class="line">[root@localhost 7]# docker stats 30cf521af358</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/articles/2018/10/02/dockerjichu-shang/4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#--no-tream只输出一次</span><br><span class="line">[root@localhost 7]# docker stats 30cf521af358 --no-stream</span><br><span class="line">CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class="line">30cf521af358        zhaoshuo            0.00%               288KiB / 974.6MiB   0.03%               648B / 0B           0B / 0B             2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-32-Docker命令：tag"><a href="#3-32-Docker命令：tag" class="headerlink" title="3.32 Docker命令：tag"></a>3.32 Docker命令：tag</h3><blockquote><p>用于从一个指定的镜像创建另外一个镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        39 minutes ago      200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost 7]# docker tag <span class="built_in">test</span>:1 <span class="built_in">test</span>:2        <span class="comment">#我们可以指定名字：标志来创建</span></span><br><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        39 minutes ago      200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                2                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost 7]# docker rmi <span class="built_in">test</span>:2</span><br><span class="line">Untagged: <span class="built_in">test</span>:2</span><br><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        39 minutes ago      200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">[root@localhost 7]# docker tag a456dd68d802 <span class="built_in">test</span>:2      <span class="comment">#我们也可以指定image id来创建</span></span><br><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos     3                   0ac5e5b6fead        40 minutes ago      200MB</span><br><span class="line">zhaoshuo/centos     2                   d396465fd814        2 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line"><span class="built_in">test</span>                2                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-33-Docker命令：top"><a href="#3-33-Docker命令：top" class="headerlink" title="3.33 Docker命令：top"></a>3.33 Docker命令：top</h3><blockquote><p>用于显示指定容器的进程信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">30cf521af358        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   9 minutes ago       Up 5 minutes        0.0.0.0:2222-&gt;22/tcp   zhaoshuo</span><br><span class="line">[root@localhost 7]# docker top 30cf521af358</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                4307                4293                0                   01:02               pts/0               00:00:00            /bin/bash /home/test/docker.sh</span><br><span class="line">root                4484                4307                0                   01:08               pts/0               00:00:00            <span class="built_in">sleep</span> 5</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-34-Docker命令：update"><a href="#3-34-Docker命令：update" class="headerlink" title="3.34 Docker命令：update"></a>3.34 Docker命令：update</h3><blockquote><p>用于调整一个或多个容器的启动配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker update --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:docker update [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Update configuration of one or more containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --blkio-weight uint16        Block IO (relative weight), between 10 and 1000, or 0 to <span class="built_in">disable</span></span><br><span class="line">                                   (default 0)</span><br><span class="line">      --cpu-period int             Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class="line">      --cpu-quota int              Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class="line">      --cpu-rt-period int          Limit the CPU real-time period <span class="keyword">in</span> microseconds</span><br><span class="line">      --cpu-rt-runtime int         Limit the CPU real-time runtime <span class="keyword">in</span> microseconds</span><br><span class="line">  -c, --cpu-shares int             CPU shares (relative weight)</span><br><span class="line">      --cpus decimal               Number of CPUs</span><br><span class="line">      --cpuset-cpus string         CPUs <span class="keyword">in</span> <span class="built_in">which</span> to allow execution (0-3, 0,1)</span><br><span class="line">      --cpuset-mems string         MEMs <span class="keyword">in</span> <span class="built_in">which</span> to allow execution (0-3, 0,1)</span><br><span class="line">      --kernel-memory bytes        Kernel memory <span class="built_in">limit</span></span><br><span class="line">  -m, --memory bytes               Memory <span class="built_in">limit</span></span><br><span class="line">      --memory-reservation bytes   Memory soft <span class="built_in">limit</span></span><br><span class="line">      --memory-swap bytes          Swap <span class="built_in">limit</span> equal to memory plus swap: <span class="string">&#x27;-1&#x27;</span> to <span class="built_in">enable</span> unlimited swap</span><br><span class="line">      --restart string             Restart policy to apply when a container exits</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-35-Docker命令：version-and-wait"><a href="#3-35-Docker命令：version-and-wait" class="headerlink" title="3.35 Docker命令：version and wait"></a>3.35 Docker命令：version and wait</h3><blockquote><p>version用于显示docker的版本信息<br>wait用于捕捉一个或多个容器的退出状态,并返回退出状态码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示docker版本信息</span></span><br><span class="line">[root@localhost 7]# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.06.1-ce</span><br><span class="line"> API version:       1.38</span><br><span class="line"> Go version:        go1.10.3</span><br><span class="line"> Git commit:        e68fc7a</span><br><span class="line"> Built:             Tue Aug 21 17:23:03 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.06.1-ce</span><br><span class="line">  API version:      1.38 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.3</span><br><span class="line">  Git commit:       e68fc7a</span><br><span class="line">  Built:            Tue Aug 21 17:25:29 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#监听容器的退出状态并返回状态码</span></span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">30cf521af358        <span class="built_in">test</span>:1              <span class="string">&quot;/home/test/docker.sh&quot;</span>   11 minutes ago      Up 8 minutes        0.0.0.0:2222-&gt;22/tcp   zhaoshuo</span><br><span class="line"></span><br><span class="line">[root@localhost 7]# docker <span class="built_in">wait</span> 30cf521af358        <span class="comment">#需要在开一个窗口stop这个容器进程再查看</span></span><br><span class="line">137</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-36-Docker命令：login-logout-push"><a href="#3-36-Docker命令：login-logout-push" class="headerlink" title="3.36 Docker命令：login &amp;&amp; logout &amp;&amp; push"></a>3.36 Docker命令：login &amp;&amp; logout &amp;&amp; push</h3><blockquote></blockquote><ul><li>login用于登陆docker hub官方公有仓库</li><li>logout用于登出docker hub官方公有仓库</li><li>push用于将本地镜像提交到docker hub</li></ul><p>DockerHub官方公有镜像仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h2 id="四，管理应用程序数据"><a href="#四，管理应用程序数据" class="headerlink" title="四，管理应用程序数据"></a>四，管理应用程序数据</h2><h3 id="4-1-Volume和Bind-Mount"><a href="#4-1-Volume和Bind-Mount" class="headerlink" title="4.1 Volume和Bind Mount"></a>4.1 Volume和Bind Mount</h3><p><strong>将Docker主机数据挂载到容器</strong></p><ul><li><input checked="" disabled="" type="checkbox"> Docker提供三种不同方式将数据从宿主机挂载到容器中：volumes，bind mounts和tmpfs。 <ul><li>volumes：Docker管理宿主机文件系统的一部分（&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes）</li><li>bind mounts:可以存储在宿主机系统的任意位置</li><li>tmpfs：挂载存储在宿主机系统的内存中，而不会写入宿主机的文件系统</li></ul></li></ul><p><img src="/articles/2018/10/02/dockerjichu-shang/5.png"></p><h3 id="4-1-1-Volume"><a href="#4-1-1-Volume" class="headerlink" title="4.1.1 Volume"></a>4.1.1 Volume</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个卷</span></span><br><span class="line">[root@localhost 7]# docker volume create nginx-vol</span><br><span class="line">nginx-vol</span><br><span class="line">[root@localhost 7]# docker volume <span class="built_in">ls</span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               nginx-vol</span><br><span class="line">[root@localhost 7]# docker volume inspect nginx-vol</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2018-10-14T01:14:25+08:00&quot;</span>,       <span class="comment">#创建时间</span></span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,      <span class="comment">#驱动</span></span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/nginx-vol/_data&quot;</span>,        <span class="comment">#挂载点</span></span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;nginx-vol&quot;</span>,        <span class="comment">#卷名</span></span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载一个nginx官方镜像</span></span><br><span class="line">[root@localhost 7]# docker pull nginx</span><br><span class="line">[root@localhost 7]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">802b00ed6f79: Pull complete </span><br><span class="line">5291925314b3: Pull complete </span><br><span class="line">bd9f53b2c2de: Pull complete </span><br><span class="line">Digest: sha256:9ad0746d8f2ea6df3a17ba89eca40b48c47066dfab55a75e08e2b70fc80d929e</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line"></span><br><span class="line">[root@localhost 7]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">nginx               latest              be1f31be9a87        10 days ago         109MB</span><br><span class="line"></span><br><span class="line">[root@localhost 7]# docker run -dit --name=nginx-test --mount src=nginx-vol,dst=/usr/share/nginx/html nginx</span><br><span class="line">499069e77ce67f55cb1c716d55fc08d783e3a2f2b7fbba9da9d9ed7d010cf1a9</span><br><span class="line"></span><br><span class="line">特别说明：</span><br><span class="line">--name：容器的名字</span><br><span class="line">--mount：挂载</span><br><span class="line">src：源卷的名字</span><br><span class="line">dst：挂载到容器中的路径</span><br><span class="line"></span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">499069e77ce6        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   15 seconds ago      Up 14 seconds       80/tcp              nginx-test</span><br><span class="line"></span><br><span class="line"><span class="comment">#向容器中的挂载目录创建文件，查看是否挂载成功</span></span><br><span class="line">[root@localhost 7]# docker <span class="built_in">exec</span> nginx-test <span class="built_in">touch</span> /usr/share/nginx/html/test.txt</span><br><span class="line">[root@localhost 7]# docker <span class="built_in">exec</span> nginx-test <span class="built_in">ls</span> /usr/share/nginx/html/</span><br><span class="line">50x.html</span><br><span class="line">index.html</span><br><span class="line">test.txt        <span class="comment">#有了</span></span><br><span class="line">[root@localhost 7]# <span class="built_in">ls</span> /var/lib/docker/volumes/nginx-vol/_data/</span><br><span class="line">50x.html  index.html  test.txt      <span class="comment">#成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清理容器进程</span></span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES</span><br><span class="line">499069e77ce6        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute   80/tcp              nginx-test</span><br><span class="line">[root@localhost 7]# docker stop nginx-test</span><br><span class="line">nginx-test</span><br><span class="line">[root@localhost 7]# docker <span class="built_in">rm</span> nginx-test</span><br><span class="line">nginx-test</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@localhost 7]# <span class="built_in">ls</span> /var/lib/docker/volumes/nginx-vol/_data/</span><br><span class="line">50x.html  index.html  test.txt      <span class="comment">#清理容器后，挂载的卷的数据仍旧存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重新启动镜像nginx的容器进程</span></span><br><span class="line">[root@localhost 7]# docker run -dit --name nginx-test -p 88:80 --mount src=nginx-vol,dst=/usr/share/nginx/html nginx</span><br><span class="line">ba61800faa00559c66a557ee6e9e584c29d7af5f73f635fcbd9b83066b235331</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">ba61800faa00        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   4 seconds ago       Up 3 seconds        0.0.0.0:88-&gt;80/tcp   nginx-test</span><br><span class="line"></span><br><span class="line">特别提示：</span><br><span class="line">docker run的-p参数：指定端口的映射，88：80的意思就是将宿主机88端口的访问映射到容器进程的80端口</span><br></pre></td></tr></table></figure><p><strong>现在通过浏览器访问宿主机的88端口，进而访问容器进程的80端口</strong></p><p><img src="/articles/2018/10/02/dockerjichu-shang/6.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在数据卷nginx-vol里换一个网页在访问</span></span><br><span class="line">[root@localhost 7]# <span class="built_in">rm</span> -rf /var/lib/docker/volumes/nginx-vol/_data/*</span><br><span class="line">[root@localhost 7]# <span class="built_in">echo</span> <span class="string">&quot;welcome to yunjisuan&quot;</span> &gt; /var/lib/docker/volumes/nginx-vol/_data/index.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/articles/2018/10/02/dockerjichu-shang/7.png"></p><p><strong>在启动一个镜像nginx的进程，让两个nginx的容器进程公用一个数据卷nginx-vol</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker run -dit --name nginx-test2 -p 89:80 --mount src=nginx-vol,dst=/usr/share/nginx/html nginx</span><br><span class="line">78a9c5517e94527c6822550781cfce5e4c434c322a75541f37cd78333e3c9741</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">78a9c5517e94        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   2 seconds ago       Up 2 seconds        0.0.0.0:89-&gt;80/tcp   nginx-test2</span><br><span class="line">ba61800faa00        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   3 minutes ago       Up 3 minutes        0.0.0.0:88-&gt;80/tcp   nginx-test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>用浏览器访问docker宿主机的89端口</strong></p><p><img src="/articles/2018/10/02/dockerjichu-shang/8.png"></p><h4 id="4-1-2-Bind-Mounts"><a href="#4-1-2-Bind-Mounts" class="headerlink" title="4.1.2 Bind Mounts"></a>4.1.2 Bind Mounts</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                NAMES</span><br><span class="line">78a9c5517e94        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:89-&gt;80/tcp   nginx-test2</span><br><span class="line">ba61800faa00        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   5 minutes ago        Up 5 minutes        0.0.0.0:88-&gt;80/tcp   nginx-test</span><br><span class="line">[root@localhost 7]# docker run -dit --name nginx-test3 -p 90:80 --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/var/lib/docker/volumes/nginx-vol/_data,dst=/usr/share/nginx/html nginx</span><br><span class="line">9cd50b218764905cdc1d37c1c8f317938cc4d8e33cf762dabd0036846cc529fb</span><br><span class="line">[root@localhost 7]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                NAMES</span><br><span class="line">9cd50b218764        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   2 seconds ago        Up 1 second         0.0.0.0:90-&gt;80/tcp   nginx-test3</span><br><span class="line">78a9c5517e94        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute   0.0.0.0:89-&gt;80/tcp   nginx-test2</span><br><span class="line">ba61800faa00        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   5 minutes ago        Up 5 minutes        0.0.0.0:88-&gt;80/tcp   nginx-test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>用浏览器访问docker宿主机的90端口</strong></p><p><img src="/articles/2018/10/02/dockerjichu-shang/9.png"></p><blockquote><p>特别提示：<br>bind mounts可以挂载宿主机上的任意目录，而volume先得创建后才能挂载</p></blockquote><h3 id="4-2-实战容器部署LNMP网站平台"><a href="#4-2-实战容器部署LNMP网站平台" class="headerlink" title="4.2 实战容器部署LNMP网站平台"></a>4.2 实战容器部署LNMP网站平台</h3><blockquote><p>首先下载一个wordpress博客<br><code>wget https://cn.wordpress.org/wordpress-4.7.4-zh_CN.tar.gz</code></p></blockquote><h4 id="4-2-1-创建MySQL数据库容器"><a href="#4-2-1-创建MySQL数据库容器" class="headerlink" title="4.2.1 创建MySQL数据库容器"></a>4.2.1 创建MySQL数据库容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载MySQL5.6版本镜像</span></span><br><span class="line">[root@localhost ~]# docker pull mysql:5.6</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos7    1                   a456dd68d802        3 hours ago         200MB</span><br><span class="line">centos              7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos              latest              75835a67d134        3 days ago          200MB</span><br><span class="line">nginx               latest              be1f31be9a87        10 days ago         109MB</span><br><span class="line">mysql               5.6                 1f47fade220d        5 weeks ago         256MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个自定义网络</span></span><br><span class="line">[root@localhost ~]# docker network create lnmp</span><br><span class="line">e9c6f3aab48b1048af23ad5347408ef0b460c3dbb1917f04565dcd7d4f8498b7</span><br><span class="line">[root@localhost ~]# docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">bb056f017977        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">0f75cc017204        host                host                <span class="built_in">local</span></span><br><span class="line">e9c6f3aab48b        lnmp                bridge              <span class="built_in">local</span>       <span class="comment">#有了（默认驱动为网桥）</span></span><br><span class="line">c71020a2992f        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动MySQL数据库容器</span></span><br><span class="line">[root@localhost ~]# docker run -dit --name lnmp_mysql --network lnmp -p 3306:3306 --mount src=mysql-vol,dst=/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123123 mysql:5.6 --character-set-server=utf8</span><br><span class="line">6acbcd435954d0aef1ffd07a5ddb42581200e85d2c76e160cfc1bd2ee9ebe7fb</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">6acbcd435954        mysql:5.6           <span class="string">&quot;docker-entrypoint.s…&quot;</span>   5 seconds ago       Up 4 seconds        0.0.0.0:3306-&gt;3306/tcp   lnmp_mysql</span><br><span class="line">9cd50b218764        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   5 minutes ago       Exited (0)        0.0.0.0:90-&gt;80/tcp       nginx-test3</span><br><span class="line">78a9c5517e94        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   6 minutes ago       Exited (0)        0.0.0.0:89-&gt;80/tcp       nginx-test2</span><br><span class="line">ba61800faa00        nginx               <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   10 minutes ago      Exited (0)       0.0.0.0:88-&gt;80/tcp       nginx-test</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>特别提示：</p></blockquote><ul><li>自定义网络lnmp如果不提前创建的话，在启动容器进程时会报错</li><li>如果没有提前pull好mysql:5.6那么容器在启动时会自动下载对应镜像</li><li>如果没有提前docker volume create mysql-vol，那么容器启动时会自动创建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看容器lnmp_mysql的日志输出</span></span><br><span class="line">[root@localhost ~]# docker logs lnmp_mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器里启动的进程</span></span><br><span class="line">[root@localhost ~]# docker top lnmp_mysql</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">polkitd             5328                5315                0                   01:33               pts/0               00:00:00            mysqld --character-set-server=utf8</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-2-向容器里的Mysql创建一个库"><a href="#4-2-2-向容器里的Mysql创建一个库" class="headerlink" title="4.2.2 向容器里的Mysql创建一个库"></a>4.2.2 向容器里的Mysql创建一个库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker <span class="built_in">exec</span> lnmp_mysql sh -c <span class="string">&#x27;exec mysql -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot; -e&quot;create database wp&quot;&#x27;</span></span><br><span class="line">Warning: Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-3-在docker宿主机上安装mysql的客户端通过端口映射访问容器内的mysql"><a href="#4-2-3-在docker宿主机上安装mysql的客户端通过端口映射访问容器内的mysql" class="headerlink" title="4.2.3 在docker宿主机上安装mysql的客户端通过端口映射访问容器内的mysql"></a>4.2.3 在docker宿主机上安装mysql的客户端通过端口映射访问容器内的mysql</h4><blockquote><p>因为已经将mysql容器的3306端口映射到了docker宿主机的3306，因此访问本地即可</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装mysql客户端</span></span><br><span class="line">[root@localhost ~]# yum -y install mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看本机IP地址</span></span><br><span class="line">[root@localhost ~]# hostname -I | xargs -n1 | <span class="built_in">head</span> -1</span><br><span class="line">192.168.131.162</span><br><span class="line">xargs: <span class="built_in">echo</span>：因信号 13 而终止</span><br><span class="line"></span><br><span class="line"><span class="comment">#远程方式连接docker宿主机的3306端口</span></span><br><span class="line">[root@localhost ~]# mysql -h192.168.131.162 -P3306 -uroot -p123123</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 2</span><br><span class="line">Server version: 5.6.41 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| wp                 |            <span class="comment">#已经创建wp库了</span></span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.10 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-4-创建nginx-PHP环境容器"><a href="#4-2-4-创建nginx-PHP环境容器" class="headerlink" title="4.2.4 创建nginx+PHP环境容器"></a>4.2.4 创建nginx+PHP环境容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个网页目录</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> -p /app/wwwroot</span><br><span class="line">[root@localhost ~]# ll -d /app/wwwroot</span><br><span class="line">drwxr-xr-x 2 root root 6 10月 14 01:39 /app/wwwroot</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载richarvey/nginx-php-fpm镜像</span></span><br><span class="line">[root@localhost ~]# docker pull richarvey/nginx-php-fpm</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhaoshuo/centos7          1                   a456dd68d802        4 hours ago         200MB</span><br><span class="line">centos                    7                   75835a67d134        3 days ago          200MB</span><br><span class="line">centos                    latest              75835a67d134        3 days ago          200MB</span><br><span class="line">nginx                     latest              be1f31be9a87        10 days ago         109MB</span><br><span class="line">richarvey/nginx-php-fpm   latest              de1554d0b081        2 weeks ago         302MB</span><br><span class="line">mysql                     5.6                 1f47fade220d        5 weeks ago         256MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动richarvey/nginx-php-fpm镜像的容器</span></span><br><span class="line">[root@localhost ~]# docker run -dit --name lnmp_web --network lnmp -p 88:80 --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/app/wwwroot,dst=/var/www/html richarvey/nginx-php-fpm</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS                      PORTS                                   NAMES</span><br><span class="line">677a6ddd712e        richarvey/nginx-php-fpm   <span class="string">&quot;docker-php-entrypoi…&quot;</span>   5 minutes ago       Up 3 seconds                443/tcp, 9000/tcp, 0.0.0.0:88-&gt;80/tcp   lnmp_web</span><br><span class="line">6acbcd435954        mysql:5.6                 <span class="string">&quot;docker-entrypoint.s…&quot;</span>   24 minutes ago      Up 12 seconds               0.0.0.0:3306-&gt;3306/tcp                  lnmp_mysql</span><br><span class="line">9cd50b218764        nginx                     <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   29 minutes ago      Exited (0) 8 minutes ago                                            nginx-test3</span><br><span class="line">78a9c5517e94        nginx                     <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   30 minutes ago      Exited (0) 8 minutes ago                                            nginx-test2</span><br><span class="line">ba61800faa00        nginx                     <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   34 minutes ago      Exited (0) 47 seconds ago                                           nginx-test</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-5-解压wordpress到网页目录-app-wwwroot下"><a href="#4-2-5-解压wordpress到网页目录-app-wwwroot下" class="headerlink" title="4.2.5 解压wordpress到网页目录&#x2F;app&#x2F;wwwroot下"></a>4.2.5 解压wordpress到网页目录&#x2F;app&#x2F;wwwroot下</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# tar xf wordpress-4.7.4-zh_CN.tar.gz -C /app/wwwroot/</span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /app/wwwroot/</span><br><span class="line">[root@localhost wwwroot]# <span class="built_in">ls</span></span><br><span class="line">wordpress</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-6-博客wordpress访问测试"><a href="#4-2-6-博客wordpress访问测试" class="headerlink" title="4.2.6 博客wordpress访问测试"></a>4.2.6 博客wordpress访问测试</h4><blockquote><p>通过浏览器进行docker宿主机的88端口的访问测试<br><a href="http://ip:88/wordpress">http://IP:88/wordpress</a></p></blockquote><p><strong>特别提示：</strong></p><blockquote><p>如果在访问时，出现以下情况</p></blockquote><p><img src="/articles/2018/10/02/dockerjichu-shang/10.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果出现连接不上的情况，那么请按顺序执行以下命令一遍</span></span><br><span class="line">[root@docker wwwroot]# systemctl stop firewalld</span><br><span class="line">[root@docker wwwroot]# systemctl stop iptables.service</span><br><span class="line">Failed to stop iptables.service: Unit iptables.service not loaded.</span><br><span class="line">[root@docker wwwroot]# iptables -F</span><br><span class="line">[root@docker wwwroot]# iptables -P FORWARD ACCEPT</span><br><span class="line">[root@docker wwwroot]# iptables -P INPUT ACCEPT</span><br><span class="line">[root@docker wwwroot]# iptables -P OUTPUT ACCEPT</span><br></pre></td></tr></table></figure><blockquote><p>再次访问</p></blockquote><p><img src="/articles/2018/10/02/dockerjichu-shang/11.png"></p><blockquote><p><strong>成功！！</strong><br>特别提示：<br>如果多次连续访问同一网页，那么浏览器有可能默认去掉指定的端口<br>因此，若访问不到，请查看是否指定了88端口</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 容器自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat详解</title>
      <link href="/articles/2018/08/31/tomcatxiangjie/"/>
      <url>/articles/2018/08/31/tomcatxiangjie/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Tomcat详解"><a href="#Tomcat详解" class="headerlink" title="Tomcat详解"></a>Tomcat详解</h1><h2 id="一，Tomcat简介"><a href="#一，Tomcat简介" class="headerlink" title="一，Tomcat简介"></a>一，Tomcat简介</h2><blockquote></blockquote><ul><li>Tomcat是Apache软件基金会（Apache Software Foundation）的Jakarta项目中的一个核心项目，由Apache，Sun和其他一些公司及个人共同开发而成。</li><li>Tomcat服务器是一个免费的开放源代码的Web应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP程序的首选。</li><li>Tomcat和Nginx，APache（httpd），lighttpd等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Nginx／Apache服务器。</li></ul><h2 id="二，Tomcat安装"><a href="#二，Tomcat安装" class="headerlink" title="二，Tomcat安装"></a>二，Tomcat安装</h2><h3 id="2-1-软件准备"><a href="#2-1-软件准备" class="headerlink" title="2.1 软件准备"></a>2.1 软件准备</h3><p>JDK下载：<a href="https://github.com/frekele/oracle-java/releases">https://github.com/frekele/oracle-java/releases</a></p><p>Tomcat下载：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><blockquote><p>注意：tomcat服务有些功能会和主机名有关。所以，当修改主机名的时候，要把（主机名 127.0.0.1）映射进hosts文件。</p></blockquote><h3 id="2-2-部署java环境jdk"><a href="#2-2-部署java环境jdk" class="headerlink" title="2.2 部署java环境jdk"></a>2.2 部署java环境jdk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jdk的解压安装</span></span><br><span class="line">[root@localhost ~]# tar xf jdk-8u60-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">[root@localhost ~]# <span class="built_in">ln</span> -s /usr/local/jdk1.8.0_60/ /usr/local/jdk</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置java环境变量</span></span><br><span class="line">[root@localhost ~]# sed -i.ori <span class="string">&#x27;$a export JAVA_HOME=/usr/local/jdk\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport CLASSPATH=.$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar&#x27;</span> /etc/profile</span><br><span class="line">[root@localhost ~]# <span class="built_in">tail</span> -3 /etc/profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.<span class="variable">$CLASSPATH</span>:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">[root@localhost ~]# <span class="built_in">source</span> /etc/profile             <span class="comment">#让java环境变量立刻生效</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">which</span> java</span><br><span class="line">/usr/local/jdk/bin/java</span><br><span class="line">[root@localhost ~]# java -version           <span class="comment">#查看版本</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_60&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>sed -i.ori :-i表示对文件本身操作，.ori表示修改的同时备份源文件<br>a：表示文件内容的最后一行，a表示在下面进行数据插入<br>\n :表示插入数据时换行</p></blockquote><h3 id="2-3-安装Tomcat"><a href="#2-3-安装Tomcat" class="headerlink" title="2.3 安装Tomcat"></a>2.3 安装Tomcat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# tar xf apache-tomcat-8.0.27.tar.gz -C /usr/local/</span><br><span class="line">[root@localhost ~]# <span class="built_in">ln</span> -s /usr/local/apache-tomcat-8.0.27/ /usr/local/tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置Tomcat环境变量</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">echo</span> <span class="string">&#x27;export TOMCAT_HOME=/usr/local/tomcat&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">[root@localhost ~]# <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#对jdk及Tomcat安装目录递归授权root</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">chown</span> -R root.root /usr/local/jdk/ /usr/local/tomcat/</span><br></pre></td></tr></table></figure><h3 id="2-4-Tomcat目录介绍"><a href="#2-4-Tomcat目录介绍" class="headerlink" title="2.4 Tomcat目录介绍"></a>2.4 Tomcat目录介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat]# <span class="built_in">cd</span> /usr/local/tomcat/</span><br><span class="line">[root@localhost tomcat]# tree -L 1          <span class="comment">#-L 1：代表只显示第一级目录</span></span><br><span class="line">.</span><br><span class="line">├── bin         <span class="comment">#用以启动，关闭Tomcat或者其他功能的脚本（.bat文件和.sh文件）</span></span><br><span class="line">├── conf        <span class="comment">#用以配置Tomcat的XML及DTD文件</span></span><br><span class="line">├── lib         <span class="comment">#存放web应用能访问的JAR包</span></span><br><span class="line">├── LICENSE</span><br><span class="line">├── logs        <span class="comment">#Catalina和其他Web应用程序的日志文件</span></span><br><span class="line">├── NOTICE</span><br><span class="line">├── RELEASE-NOTES</span><br><span class="line">├── RUNNING.txt</span><br><span class="line">├── temp        <span class="comment">#临时文件</span></span><br><span class="line">├── webapps     <span class="comment">#Web网页根目录</span></span><br><span class="line">└── work        <span class="comment">#用以产生有JSP编译出的Servlet的.java和.class文件</span></span><br><span class="line">7 directories, 4 files</span><br><span class="line"></span><br><span class="line">[root@localhost tomcat]# <span class="built_in">cd</span> webapps/</span><br><span class="line">[root@localhost webapps]# ll</span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x. 14 root root 4096 Oct 24 09:07 docs     <span class="comment">#tomcat帮助文档</span></span><br><span class="line">drwxr-xr-x.  6 root root 4096 Oct 24 09:07 examples <span class="comment">#web应用实例</span></span><br><span class="line">drwxr-xr-x.  5 root root 4096 Oct 24 09:07 host-manager <span class="comment">#管理</span></span><br><span class="line">drwxr-xr-x.  5 root root 4096 Oct 24 09:07 manager      <span class="comment">#管理</span></span><br><span class="line">drwxr-xr-x.  3 root root 4096 Oct 24 09:07 ROOT         <span class="comment">#默认网站根目录</span></span><br></pre></td></tr></table></figure><h3 id="2-5-启动Tomcat"><a href="#2-5-启动Tomcat" class="headerlink" title="2.5 启动Tomcat"></a>2.5 启动Tomcat</h3><p><code>启动程序：/usr/local/tomcat/bin/startup.sh</code><br><code>关闭程序：/usr/local/tomcat/bin/shutdown.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost webapps]# /usr/local/tomcat/bin/startup.sh  <span class="comment">#程序启动</span></span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat    <span class="comment">#检查环境变量CATALINA_BASE</span></span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat    <span class="comment">#检查环境变量CATALINA_HOME</span></span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp   <span class="comment">#检查环境变量CATALINA_TMPDIR</span></span><br><span class="line">Using JRE_HOME:        /usr/local/jdk   <span class="comment">#检查环境变量JRE_HOME</span></span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line">[root@localhost webapps]# netstat -antup | grep java</span><br><span class="line">tcp        0      0 :::8080                     :::*                        LISTEN      1203/java           </span><br><span class="line">tcp        0      0 ::ffff:127.0.0.1:8005       :::*                        LISTEN      1203/java           </span><br><span class="line">tcp        0      0 :::8009                     :::*                        LISTEN      1203/java      </span><br></pre></td></tr></table></figure><h3 id="2-6-访问网站"><a href="#2-6-访问网站" class="headerlink" title="2.6 访问网站"></a>2.6 访问网站</h3><blockquote><p>网址为服务器ip：192.168.131.132:8080（访问时请注意关闭iptables）</p></blockquote><p><img src="/articles/2018/08/31/tomcatxiangjie/1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">[root@localhost webapps]# <span class="built_in">cat</span> /usr/local/tomcat/logs/catalina.out </span><br><span class="line">01-Sep-2018 19:45:02.874 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Server version:        Apache Tomcat/8.0.27</span><br><span class="line">01-Sep-2018 19:45:02.882 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Server built:          Sep 28 2015 08:17:25 UTC</span><br><span class="line">01-Sep-2018 19:45:02.882 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Server number:         8.0.27.0</span><br><span class="line">01-Sep-2018 19:45:02.882 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> OS Name:               Linux</span><br><span class="line">01-Sep-2018 19:45:02.882 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> OS Version:            2.6.32-431.el6.x86_64</span><br><span class="line">01-Sep-2018 19:45:02.883 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Architecture:          amd64</span><br><span class="line">01-Sep-2018 19:45:02.883 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Java Home:             /usr/local/jdk1.8.0_60/jre</span><br><span class="line">01-Sep-2018 19:45:02.884 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> JVM Version:           1.8.0_60-b27</span><br><span class="line">01-Sep-2018 19:45:02.884 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> JVM Vendor:            Oracle Corporation</span><br><span class="line">01-Sep-2018 19:45:02.884 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> CATALINA_BASE:         /usr/local/apache-tomcat-8.0.27</span><br><span class="line">01-Sep-2018 19:45:02.884 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> CATALINA_HOME:         /usr/local/apache-tomcat-8.0.27</span><br><span class="line">01-Sep-2018 19:45:02.886 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties</span><br><span class="line">01-Sep-2018 19:45:02.886 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager</span><br><span class="line">01-Sep-2018 19:45:02.887 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Command line argument: -Djava.endorsed.dirs=/usr/local/tomcat/endorsed</span><br><span class="line">01-Sep-2018 19:45:02.887 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Command line argument: -Dcatalina.base=/usr/local/tomcat</span><br><span class="line">01-Sep-2018 19:45:02.891 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Command line argument: -Dcatalina.home=/usr/local/tomcat</span><br><span class="line">01-Sep-2018 19:45:02.891 INFO [main] org.apache.catalina.startup.VersionLoggerListener.<span class="built_in">log</span> Command line argument: -Djava.io.tmpdir=/usr/local/tomcat/temp</span><br><span class="line">01-Sep-2018 19:45:02.891 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent The APR based Apache Tomcat Native library <span class="built_in">which</span> allows optimal performance <span class="keyword">in</span> production environments was not found on the java.library.path: /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line">01-Sep-2018 19:45:03.446 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class="string">&quot;http-nio-8080&quot;</span>]</span><br><span class="line">01-Sep-2018 19:45:03.480 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class="keyword">for</span> servlet write/read</span><br><span class="line">01-Sep-2018 19:45:03.489 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class="string">&quot;ajp-nio-8009&quot;</span>]</span><br><span class="line">01-Sep-2018 19:45:03.493 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class="keyword">for</span> servlet write/read</span><br><span class="line">01-Sep-2018 19:45:03.496 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed <span class="keyword">in</span> 1541 ms</span><br><span class="line">01-Sep-2018 19:45:03.559 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service Catalina</span><br><span class="line">01-Sep-2018 19:45:03.559 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.0.27</span><br><span class="line">01-Sep-2018 19:45:03.583 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/apache-tomcat-8.0.27/webapps/manager</span><br><span class="line">01-Sep-2018 19:45:04.155 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/apache-tomcat-8.0.27/webapps/manager has finished <span class="keyword">in</span> 572 ms</span><br><span class="line">01-Sep-2018 19:45:04.155 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/apache-tomcat-8.0.27/webapps/docs</span><br><span class="line">01-Sep-2018 19:45:04.192 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/apache-tomcat-8.0.27/webapps/docs has finished <span class="keyword">in</span> 37 ms</span><br><span class="line">01-Sep-2018 19:45:04.195 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/apache-tomcat-8.0.27/webapps/examples</span><br><span class="line">01-Sep-2018 19:45:04.923 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/apache-tomcat-8.0.27/webapps/examples has finished <span class="keyword">in</span> 728 ms</span><br><span class="line">01-Sep-2018 19:45:04.924 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/apache-tomcat-8.0.27/webapps/host-manager</span><br><span class="line">01-Sep-2018 19:45:05.134 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/apache-tomcat-8.0.27/webapps/host-manager has finished <span class="keyword">in</span> 209 ms</span><br><span class="line">01-Sep-2018 19:45:05.134 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory /usr/local/apache-tomcat-8.0.27/webapps/ROOT</span><br><span class="line">01-Sep-2018 19:45:05.288 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory /usr/local/apache-tomcat-8.0.27/webapps/ROOT has finished <span class="keyword">in</span> 154 ms</span><br><span class="line">01-Sep-2018 19:45:05.291 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class="string">&quot;http-nio-8080&quot;</span>]</span><br><span class="line">01-Sep-2018 19:45:05.310 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class="string">&quot;ajp-nio-8009&quot;</span>]</span><br><span class="line">01-Sep-2018 19:45:05.316 INFO [main] org.apache.catalina.startup.Catalina.start Server startup <span class="keyword">in</span> 1819 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三，Tomcat的配置文件"><a href="#三，Tomcat的配置文件" class="headerlink" title="三，Tomcat的配置文件"></a>三，Tomcat的配置文件</h2><h3 id="3-1-Tomcat配置文件"><a href="#3-1-Tomcat配置文件" class="headerlink" title="3.1 Tomcat配置文件"></a>3.1 Tomcat配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost logs]# <span class="built_in">cd</span> /usr/local/tomcat/conf/</span><br><span class="line">[root@localhost conf]# ll -h</span><br><span class="line">total 216K</span><br><span class="line">drwxr-xr-x. 3 root root 4.0K Oct 24 09:20 Catalina</span><br><span class="line">-rw-------. 1 root root  13K Sep 28  2015 catalina.policy</span><br><span class="line">-rw-------. 1 root root 7.0K Sep 28  2015 catalina.properties</span><br><span class="line">-rw-------. 1 root root 1.6K Sep 28  2015 context.xml</span><br><span class="line">-rw-------. 1 root root 3.4K Sep 28  2015 logging.properties</span><br><span class="line">-rw-------. 1 root root 6.4K Sep 28  2015 server.xml    <span class="comment">#主配置文件</span></span><br><span class="line">-rw-------. 1 root root 1.8K Sep 28  2015 tomcat-users.xml  <span class="comment">#Tomcat管理用户配置文件</span></span><br><span class="line">-rw-------. 1 root root 1.9K Sep 28  2015 tomcat-users.xsd</span><br><span class="line">-rw-------. 1 root root 164K Sep 28  2015 web.xml</span><br></pre></td></tr></table></figure><h3 id="3-2-Tomcat管理"><a href="#3-2-Tomcat管理" class="headerlink" title="3.2 Tomcat管理"></a>3.2 Tomcat管理</h3><blockquote><p>测试功能，生产环境不要用：<br>Tomcat管理功能用于对Tomcat自身以及部署在Tomcat上的应用进行管理的Web应用。在默认情况下是处于禁用状态的。如果需要开启这个功能，就需要配置管理用户，即配置前面说过的tomcat-users.xml。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找到配置文件的第38行</span></span><br><span class="line">[root@localhost conf]# <span class="built_in">cat</span> -n /usr/local/tomcat/conf/tomcat-users.xml | sed -n <span class="string">&#x27;38p&#x27;</span></span><br><span class="line">    38  &lt;/tomcat-users&gt;</span><br><span class="line"><span class="comment">#在38行上加入如下三行代码</span></span><br><span class="line">[root@localhost conf]# <span class="built_in">tail</span> -4 /usr/local/tomcat/conf/tomcat-users.xml</span><br><span class="line">&lt;role rolename=<span class="string">&quot;manager-gui&quot;</span>/&gt;      <span class="comment">#加入此行</span></span><br><span class="line">&lt;role rolename=<span class="string">&quot;admin-gui&quot;</span>/&gt;        <span class="comment">#加入此行</span></span><br><span class="line">&lt;user username=<span class="string">&quot;tomcat&quot;</span> password=<span class="string">&quot;tomcat&quot;</span> roles=<span class="string">&quot;manager-gui,admin-gui&quot;</span>/&gt;    <span class="comment">#加入此行</span></span><br><span class="line">&lt;/tomcat-users&gt;</span><br><span class="line"><span class="comment">#重启tomcat服务</span></span><br><span class="line">[root@localhost conf]# /usr/local/tomcat/bin/shutdown.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/jdk</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">[root@localhost conf]# /usr/local/tomcat/bin/startup.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/jdk</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><p><strong>在浏览器里输入<a href="http://192.168.131.132:8080/manager/status%E8%BF%9B%E8%A1%8CTOMCAT%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2">http://192.168.131.132:8080/manager/status进行TOMCAT管理页面</a></strong></p><blockquote><p>登陆验证信息：账号：tomcat 密码：tomcat</p></blockquote><p><img src="/articles/2018/08/31/tomcatxiangjie/2.png"></p><h3 id="3-3-Tomcat主配置文件Server-xml"><a href="#3-3-Tomcat主配置文件Server-xml" class="headerlink" title="3.3 Tomcat主配置文件Server.xml"></a>3.3 Tomcat主配置文件Server.xml</h3><h4 id="3-3-1-Server-xml组件类别"><a href="#3-3-1-Server-xml组件类别" class="headerlink" title="3.3.1 Server.xml组件类别"></a>3.3.1 Server.xml组件类别</h4><ul><li>顶级组件：位于整个配置的顶层，如server。</li><li>容器类组件：可以包含其他组件的组件，如service，engine，host，context</li><li>连接器组件：连接用户请求至tomcat，如connector。</li><li>被嵌套类组件：位于一个容器当中，不能包含其他组件，如Valve，logger。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">     &lt;service&gt;</span><br><span class="line">     &lt;connector /&gt;</span><br><span class="line">     &lt;engine&gt;</span><br><span class="line">     &lt;host&gt;</span><br><span class="line">     &lt;context&gt;&lt;/context&gt;</span><br><span class="line">     &lt;/host&gt;</span><br><span class="line">     &lt;host&gt;</span><br><span class="line">     &lt;context&gt;&lt;/context&gt;</span><br><span class="line">     &lt;/host&gt;</span><br><span class="line">     &lt;/engine&gt;</span><br><span class="line">     &lt;/service&gt;</span><br><span class="line">&lt;/server&gt;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-组件详解"><a href="#3-3-2-组件详解" class="headerlink" title="3.3.2 组件详解"></a>3.3.2 组件详解</h4><blockquote></blockquote><ul><li>engine:核心容器组件，catalina引擎，负责通过connector接收用户请求，并处理请求，将请求转至对应的虚拟主机host。</li><li>host：类似于httpd中的虚拟主机，一般而言支持基于FQDN的虚拟主机。</li><li>context：定义一个应用程序，是一个最内层的容器类组件（不能再嵌套）。配置context的主要目的指定对应对的webapp的根目录，类似于httpd的alias，其还能为webapp指定额外的属性，如部署方式等。</li><li>connector：接收用户请求，类似于httpd的listen配置监听端口。</li><li>service（服务）：将connector关联至engine，因此一个service内部可以有多个connector，但只能又一个引擎engine。service内部有两个connector，一个engine。因此，一般情况下一个server内部只有一个service，一个service内部只有一个engine，但一个service内部可以有多个connector。</li><li>server：表示一个运行于JVM中的tomcat实例。 </li><li>Valve：阀门，拦截请求并在将其转至对应的webapp前进行某种处理操作，可以用于任何容器中，比如记录日志（access log valve），基于IP做访问控制（remote address filer valve）。</li><li>logger：日志记录器，用于记录组件内部的状态信息，可以用于除context外的任何容器中。</li><li>realm：可以用于任意容器类的组件中，关联一个用户认证库，实现认证和授权。可以关联的认证库有两种：UserDatabaseRealm，MemoryRealm和JDBCRealm。</li><li>UserDatabaseRealm：使用JNDI自定义的用户认证库。</li><li>MemoryRealm：认证信息定义在tomcat-users.xml中。</li><li>JDBCRealm：认证信息定义在数据库中，并通过JDBC连接至数据库中查找认证用户。</li></ul><p>####3.3.3 配置文件注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&#x27;1.0&#x27;</span> encoding=<span class="string">&#x27;utf-8&#x27;</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;Server&gt;元素代表整个容器,是Tomcat实例的顶层元素.由org.apache.catalina.Server接口来定义.它包含一个&lt;Service&gt;元素.并且它不能做为任何元素的子元素.</span><br><span class="line">    port指定Tomcat监听shutdown命令端口.终止服务器运行时,必须在Tomcat服务器所在的机器上发出shutdown命令.该属性是必须的.</span><br><span class="line">    shutdown指定终止Tomcat服务器运行时,发给Tomcat服务器的shutdown监听端口的字符串.该属性必须设置</span><br><span class="line">--&gt;</span><br><span class="line">&lt;Server port=<span class="string">&quot;8005&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><br><span class="line">  &lt;Listener className=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span><br><span class="line">  &lt;Listener className=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> SSLEngine=<span class="string">&quot;on&quot;</span> /&gt;</span><br><span class="line">  &lt;Listener className=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span><br><span class="line">  &lt;Listener className=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span><br><span class="line">  &lt;Listener className=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span><br><span class="line">  &lt;GlobalNamingResources&gt;</span><br><span class="line">    &lt;Resource name=<span class="string">&quot;UserDatabase&quot;</span> auth=<span class="string">&quot;Container&quot;</span></span><br><span class="line">              <span class="built_in">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span><br><span class="line">              description=<span class="string">&quot;User database that can be updated and saved&quot;</span></span><br><span class="line">              factory=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span><br><span class="line">              pathname=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span><br><span class="line">  &lt;/GlobalNamingResources&gt;</span><br><span class="line">  &lt;!--service服务组件--&gt;</span><br><span class="line">  &lt;Service name=<span class="string">&quot;Catalina&quot;</span>&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    connector：接收用户请求，类似于httpd的listen配置监听端口.</span><br><span class="line">        port指定服务器端要创建的端口号，并在这个端口监听来自客户端的请求。</span><br><span class="line">        address：指定连接器监听的地址，默认为所有地址（即0.0.0.0）</span><br><span class="line">        protocol连接器使用的协议，支持HTTP和AJP。AJP（Apache Jserv Protocol）专用于tomcat与apache建立通信的， 在httpd反向代理用户请求至tomcat时使用（可见Nginx反向代理时不可用AJP协议）。</span><br><span class="line">        minProcessors服务器启动时创建的处理请求的线程数</span><br><span class="line">        maxProcessors最大可以创建的处理请求的线程数</span><br><span class="line">        enableLookups如果为<span class="literal">true</span>，则可以通过调用request.getRemoteHost()进行DNS查询来得到远程客户端的实际主机名，若为<span class="literal">false</span>则不进行DNS查询，而是返回其ip地址</span><br><span class="line">        redirectPort指定服务器正在处理http请求时收到了一个SSL传输请求后重定向的端口号</span><br><span class="line">        acceptCount指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理</span><br><span class="line">        connectionTimeout指定超时的时间数(以毫秒为单位)</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">               connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">               redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line">    &lt;Connector port=<span class="string">&quot;8009&quot;</span> protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line">    &lt;!--engine,核心容器组件,catalina引擎,负责通过connector接收用户请求,并处理请求,将请求转至对应的虚拟主机host</span><br><span class="line">        defaultHost指定缺省的处理请求的主机名，它至少与其中的一个host元素的name属性值是一样的</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;Engine name=<span class="string">&quot;Catalina&quot;</span> defaultHost=<span class="string">&quot;localhost&quot;</span>&gt;</span><br><span class="line">      &lt;!--Realm表示存放用户名，密码及role的数据库--&gt;</span><br><span class="line">      &lt;Realm className=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span><br><span class="line">        &lt;Realm className=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span><br><span class="line">               resourceName=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span><br><span class="line">      &lt;/Realm&gt;</span><br><span class="line">      &lt;!--</span><br><span class="line">      host表示一个虚拟主机</span><br><span class="line">        name指定主机名</span><br><span class="line">        appBase应用程序基本目录，即存放应用程序的目录.一般为appBase=<span class="string">&quot;webapps&quot;</span> ，相对于CATALINA_HOME而言的，也可以写绝对路径。</span><br><span class="line">        unpackWARs如果为<span class="literal">true</span>，则tomcat会自动将WAR文件解压，否则不解压，直接从WAR文件中运行应用程序</span><br><span class="line">        autoDeploy：在tomcat启动时，是否自动部署。</span><br><span class="line">        xmlValidation：是否启动xml的校验功能，一般xmlValidation=<span class="string">&quot;false&quot;</span>。</span><br><span class="line">        xmlNamespaceAware：检测名称空间，一般xmlNamespaceAware=<span class="string">&quot;false&quot;</span>。</span><br><span class="line">      --&gt;</span><br><span class="line">      &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;webapps&quot;</span></span><br><span class="line">            unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        Context表示一个web应用程序，通常为WAR文件</span><br><span class="line">            docBase应用程序的路径或者是WAR文件存放的路径,也可以使用相对路径，起始路径为此Context所属Host中appBase定义的路径。</span><br><span class="line">            path表示此web应用程序的url的前缀，这样请求的url为http://localhost:8080/path/****</span><br><span class="line">            reloadable这个属性非常重要，如果为<span class="literal">true</span>，则tomcat会自动检测应用程序的/WEB-INF/lib 和/WEB-INF/classes目录的变化，自动装载新的应用程序，可以在不重启tomcat的情况下改变应用程序</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;Context path=<span class="string">&quot;&quot;</span> docBase=<span class="string">&quot;&quot;</span> debug=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">        &lt;Valve className=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> directory=<span class="string">&quot;logs&quot;</span></span><br><span class="line">               prefix=<span class="string">&quot;localhost_access_log&quot;</span> suffix=<span class="string">&quot;.txt&quot;</span></span><br><span class="line">               pattern=<span class="string">&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot;</span> /&gt;</span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line">    &lt;/Engine&gt;</span><br><span class="line">  &lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure><h2 id="四，WEB站点部署"><a href="#四，WEB站点部署" class="headerlink" title="四，WEB站点部署"></a>四，WEB站点部署</h2><blockquote><p>上线的代码有两种方式，第一种方式是直接将程序目录放在webapps目录下面。第二种方式是使用开发工具将程序打包成war包，然后上传到webapps目录下面。</p></blockquote><h3 id="4-1-使用war包部署web站点"><a href="#4-1-使用war包部署web站点" class="headerlink" title="4.1 使用war包部署web站点"></a>4.1 使用war包部署web站点</h3><p>第二种代码上线方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cp</span> memtest.war /usr/local/tomcat/webapps/</span><br><span class="line">[root@localhost ~]# <span class="built_in">cp</span> jpress-web-newest.war /usr/local/tomcat/webapps/</span><br><span class="line">[root@localhost ~]# /usr/local/tomcat/bin/shutdown.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/jdk</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">[root@localhost ~]# /usr/local/tomcat/bin/startup.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/jdk</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span> /usr/local/tomcat/webapps/</span><br><span class="line">docs  examples  host-manager  jpress-web-newest  jpress-web-newest.war  manager  memtest  memtest.war  ROOT</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>用浏览器访问：<a href="http://192.168.131.132:8080/memtest/meminfo.jsp%E5%A6%82%E4%B8%8B%EF%BC%9A">http://192.168.131.132:8080/memtest/meminfo.jsp如下：</a></strong></p><p><img src="/articles/2018/08/31/tomcatxiangjie/3.png"></p><h3 id="4-2-自定义默认网站目录"><a href="#4-2-自定义默认网站目录" class="headerlink" title="4.2 自定义默认网站目录"></a>4.2 自定义默认网站目录</h3><p>上面访问的网址为：<a href="http://192.168.131.132:8080/memtest/meminfo.jsp">http://192.168.131.132:8080/memtest/meminfo.jsp</a><br>现在我想访问格式为：<a href="http://192.168.131.132:8080/meminfo.jsp">http://192.168.131.132:8080/meminfo.jsp</a></p><p><strong>方法一：</strong></p><blockquote><p>将meminfo.jsp或其他程序放在tomcat&#x2F;webapps&#x2F;ROOT目录下即可。因为默认网站根目录为tomcat&#x2F;webapps&#x2F;ROOT</p></blockquote><p><strong>方法二：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat ~]# vim /application/tomcat/conf/server.xml</span><br><span class="line">      &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;webapps&quot;</span></span><br><span class="line">            unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">         &lt;Context path=<span class="string">&quot;&quot;</span> docBase=<span class="string">&quot;/usr/local/tomcat/webapps/memtest&quot;</span> debug=<span class="string">&quot;0&quot;</span> reloadable=<span class="string">&quot;false&quot;</span> crossContext=<span class="string">&quot;true&quot;</span>/&gt;      <span class="comment">#在虚拟主机这里添加一行代码限定web站点的根目录路径</span></span><br><span class="line">[root@tomcat ~]# /application/tomcat/bin/shutdown.sh</span><br><span class="line">[root@tomcat ~]# /application/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><h2 id="五，Tomcat多实例及集群架构"><a href="#五，Tomcat多实例及集群架构" class="headerlink" title="五，Tomcat多实例及集群架构"></a>五，Tomcat多实例及集群架构</h2><h3 id="5-1-Tomcat多实例"><a href="#5-1-Tomcat多实例" class="headerlink" title="5.1 Tomcat多实例"></a>5.1 Tomcat多实例</h3><h4 id="5-1-1-复制Tomcat目录"><a href="#5-1-1-复制Tomcat目录" class="headerlink" title="5.1.1 复制Tomcat目录"></a>5.1.1 复制Tomcat目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/local/</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">ls</span></span><br><span class="line">apache-tomcat-8.0.27  bin  etc  games  include  jdk  jdk1.8.0_60  lib  lib64  libexec  sbin  share  src  tomcat</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">cp</span> -a apache-tomcat-8.0.27/ tomcat8_1</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">cp</span> -a apache-tomcat-8.0.27/ tomcat8_2</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">ls</span></span><br><span class="line">apache-tomcat-8.0.27  etc    include  jdk1.8.0_60  lib64    sbin   src     tomcat8_1</span><br><span class="line">bin                   games  jdk      lib          libexec  share  tomcat  tomcat8_2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-1-2-修改多实例配置文件"><a href="#5-1-2-修改多实例配置文件" class="headerlink" title="5.1.2 修改多实例配置文件"></a>5.1.2 修改多实例配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建多实例的网页根目录</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">mkdir</span> -p /data/www/www/ROOT</span><br><span class="line"><span class="comment">#将网页程序拷贝到，多实例根目录ROOT下</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">cp</span> /usr/local/tomcat/webapps/memtest/meminfo.jsp /data/www/www/ROOT/</span><br><span class="line"><span class="comment">#修改多实例配置文件的以下三行</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">cat</span> -n /usr/local/tomcat/conf/server.xml | sed -n <span class="string">&#x27;22p;69p;123p&#x27;</span></span><br><span class="line">    22  &lt;Server port=<span class="string">&quot;8005&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;    <span class="comment">#管理端口及停止命令</span></span><br><span class="line">    69      &lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span>  <span class="comment">#对外提供服务的端口</span></span><br><span class="line">   123        &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;webapps&quot;</span> <span class="comment">#网站域名及网页根目录路径</span></span><br><span class="line"><span class="comment">#修改第一个多实例配置文件</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]# sed -i <span class="string">&#x27;22s#8005#8011#;69s#8080#8081#;123s#appBase=&quot;.*&quot;#appBase=&quot;/data/www/www&quot;#&#x27;</span> /usr/local/tomcat8_1/conf/server.xml </span><br><span class="line">[root@localhost <span class="built_in">local</span>]# sed -n <span class="string">&#x27;22p;69p;123p&#x27;</span> /usr/local/tomcat8_1/conf/server.xml</span><br><span class="line">&lt;Server port=<span class="string">&quot;8011&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><br><span class="line">    &lt;Connector port=<span class="string">&quot;8081&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">      &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;/data/www/www&quot;</span></span><br><span class="line"><span class="comment">#修改第二个多实例配置文件</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]# sed -i <span class="string">&#x27;22s#8005#8012#;69s#8080#8082#;123s#appBase=&quot;.*&quot;#appBase=&quot;/data/www/www&quot;#&#x27;</span> /usr/local/tomcat8_2/conf/server.xml </span><br><span class="line">[root@localhost <span class="built_in">local</span>]# sed -n <span class="string">&#x27;22p;69p;123p&#x27;</span> /usr/local/tomcat8_2/conf/server.xml</span><br><span class="line">&lt;Server port=<span class="string">&quot;8012&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><br><span class="line">    &lt;Connector port=<span class="string">&quot;8082&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">      &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;/data/www/www&quot;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-3-启动多实例"><a href="#5-1-3-启动多实例" class="headerlink" title="5.1.3 启动多实例"></a>5.1.3 启动多实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动多实例</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]# /usr/local/tomcat8_1/bin/startup.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat8_1</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat8_1</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat8_1/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/jdk</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat8_1/bin/bootstrap.jar:/usr/local/tomcat8_1/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# /usr/local/tomcat8_2/bin/startup.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat8_2</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat8_2</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat8_2/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/jdk</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat8_2/bin/bootstrap.jar:/usr/local/tomcat8_2/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看多实例进程启动情况</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]# netstat -antup | grep java</span><br><span class="line">tcp        0      0 ::ffff:127.0.0.1:8011       :::*                        LISTEN      1671/java           </span><br><span class="line">tcp        0      0 ::ffff:127.0.0.1:8012       :::*                        LISTEN      1697/java           </span><br><span class="line">tcp        0      0 :::8080                     :::*                        LISTEN      1434/java           </span><br><span class="line">tcp        0      0 :::8081                     :::*                        LISTEN      1671/java           </span><br><span class="line">tcp        0      0 :::8082                     :::*                        LISTEN      1697/java           </span><br><span class="line">tcp        0      0 ::ffff:127.0.0.1:8005       :::*                        LISTEN      1434/java           </span><br><span class="line">tcp        0      0 :::8009                     :::*                        LISTEN      1434/java       </span><br></pre></td></tr></table></figure><blockquote><p>浏览器可以分别访问<a href="http://192.168.131.132:8081/meminfo.jsp%E5%92%8Chttp://192.168.131.132:8082/meminfo.jsp">http://192.168.131.132:8081/meminfo.jsp和http://192.168.131.132:8082/meminfo.jsp</a></p></blockquote><p><img src="/articles/2018/08/31/tomcatxiangjie/4.png"><br><img src="/articles/2018/08/31/tomcatxiangjie/5.png"></p><h3 id="5-2-Tomcat集群"><a href="#5-2-Tomcat集群" class="headerlink" title="5.2 Tomcat集群"></a>5.2 Tomcat集群</h3><blockquote><p>使用nginx+Tomcat反向代理集群</p></blockquote><h4 id="5-2-1-安装nginx"><a href="#5-2-1-安装nginx" class="headerlink" title="5.2.1 安装nginx"></a>5.2.1 安装nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install pcre-devel openssl-devel</span><br><span class="line">[root@localhost ~]# wget -q http://nginx.org/download/nginx-1.10.2.tar.gz</span><br><span class="line">[root@localhost ~]# useradd -s /sbin/nologin -M nginx</span><br><span class="line">[root@localhost ~]# tar xf nginx-1.10.2.tar.gz -C /usr/src/</span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/src/nginx-1.10.2/</span><br><span class="line">[root@localhost nginx-1.10.2]# ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">[root@localhost nginx-1.10.2]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="5-2-2-修改nginx配置文件如下"><a href="#5-2-2-修改nginx配置文件如下" class="headerlink" title="5.2.2 修改nginx配置文件如下"></a>5.2.2 修改nginx配置文件如下</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建配置文件模版</span></span><br><span class="line">[root@localhost nginx]# egrep -v <span class="string">&quot;#|^$&quot;</span> /usr/local/nginx/conf/nginx.conf.default &gt; /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment">#修改配置文件内容如下：</span></span><br><span class="line">[root@localhost nginx]# <span class="built_in">cat</span> /usr/local/nginx/conf/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream web_pools &#123;</span><br><span class="line">        server 127.0.0.1:8081;</span><br><span class="line">        server 127.0.0.1:8082;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.jsp index.html index.htm;</span><br><span class="line">            proxy_pass http://web_pools;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#检测语法并启动nginx</span></span><br><span class="line">[root@localhost nginx]# /usr/local/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">[root@localhost nginx]# /usr/local/nginx/sbin/nginx</span><br><span class="line">[root@localhost nginx]# netstat -antup | grep nginx</span><br><span class="line">tcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      4833/nginx</span><br></pre></td></tr></table></figure><h3 id="5-3-使用Tomcat安装Jpress"><a href="#5-3-使用Tomcat安装Jpress" class="headerlink" title="5.3 使用Tomcat安装Jpress"></a>5.3 使用Tomcat安装Jpress</h3><blockquote><p>JPress，一个wordpress的java代替版本，使用JFinal开发。需要maven支持</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# tar xf apache-maven-3.3.9-bin.tar.gz -C /usr/local/</span><br><span class="line">[root@localhost ~]# <span class="built_in">ln</span> -s /usr/local/apache-maven-3.3.9 /usr/local/maven</span><br><span class="line">[root@localhost ~]# <span class="built_in">tail</span> -2 /etc/profile</span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">source</span> /etc/profile</span><br><span class="line">[root@localhost ~]# mvn -version        <span class="comment">#出现这个表示成功</span></span><br><span class="line">Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T11:41:47-05:00)</span><br><span class="line">Maven home: /usr/local/maven</span><br><span class="line">Java version: 1.8.0_60, vendor: Oracle Corporation</span><br><span class="line">Java home: /usr/local/jdk1.8.0_60/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: <span class="string">&quot;linux&quot;</span>, version: <span class="string">&quot;2.6.32-431.el6.x86_64&quot;</span>, <span class="built_in">arch</span>: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;unix&quot;</span></span><br></pre></td></tr></table></figure><p><strong>将 jpress-web-newest.war包放到Tomcat网站根目录下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">mv</span> jpress-web-newest.war /data/www/www/ROOT/        <span class="comment">#将war包放到网站根目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解压war包</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">which</span> jar</span><br><span class="line">/usr/local/jdk/bin/jar</span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /data/www/www/ROOT/</span><br><span class="line">[root@localhost ROOT]# jar xf jpress-web-newest.war             <span class="comment">#jar是war包的解压命令</span></span><br><span class="line">[root@localhost ROOT]# <span class="built_in">ls</span></span><br><span class="line">jpress-web-newest.war  meminfo.jsp  META-INF  robots.txt  static  templates  WEB-INF</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>用浏览器访问：<a href="http://192.168.131.132:8080/install%E8%BF%9B%E5%85%A5jpress%E5%AE%89%E8%A3%85%E5%90%91%E5%AF%BC">http://192.168.131.132:8080/install进入jpress安装向导</a></strong></p><p><img src="/articles/2018/08/31/tomcatxiangjie/6.png"></p><h2 id="六，Tomcat安全优化和性能优化"><a href="#六，Tomcat安全优化和性能优化" class="headerlink" title="六，Tomcat安全优化和性能优化"></a>六，Tomcat安全优化和性能优化</h2><h3 id="6-1-安全优化"><a href="#6-1-安全优化" class="headerlink" title="6.1 安全优化"></a>6.1 安全优化</h3><blockquote><p>最重要的优化为如下4项，但并不止这四种</p></blockquote><ul><li>降权启动</li><li>telnet管理端口保护</li><li>ajp连接端口保护</li><li>禁用管理端</li></ul><p><strong>具体操作如下：</strong></p><p>（1）降权启动（同nginx优化部分的监牢模式）</p><blockquote></blockquote><p>降权的原则就是利用普通用户来启动Tomcat<br>（1）将Tomcat程序目录拷贝到普通用户家目录下<br>（2）修改家目录下程序的配置文件（启动端口，检测端口等），并重新指定网页根目录路径。<br>（3）递归授权拷贝后的Tomcat程序的属主属组为普通用户。<br>（4）用su命令切换为普通用户，启动Tomcat进程<br>（5）此时Tomcat进程的权限为普通用户权限<br>（6）如果利用&#x2F;etc&#x2F;rc.local文件配置普通用户程序的开机启动，那么需要利用su -c临时切换身份启动。</p><p>（2）telnet管理端口保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sed -n <span class="string">&#x27;22p&#x27;</span> /usr/local/tomcat/conf/server.xml</span><br><span class="line">&lt;Server port=<span class="string">&quot;8005&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;    <span class="comment">#表示通过8005端口来接受SHUTDOWN，用来停止Tomcat进程。默认的方式是非常危险的。需要进行修改</span></span><br><span class="line">[root@localhost ~]# netstat -antup | grep java</span><br><span class="line">tcp        0      0 ::ffff:127.0.0.1:8011       :::*                        LISTEN      2295/java           <span class="comment">#本地8011端口接收SHUTDOWN命令</span></span><br><span class="line">tcp        0      0 ::ffff:127.0.0.1:8012       :::*                        LISTEN      2321/java           <span class="comment">#本地8012端口接收SHUTDOWN命令</span></span><br><span class="line">tcp        0      0 :::8080                     :::*                        LISTEN      2031/java           </span><br><span class="line">tcp        0      0 :::8081                     :::*                        LISTEN      2295/java           </span><br><span class="line">tcp        0      0 :::8082                     :::*                        LISTEN      2321/java           </span><br><span class="line">tcp        0      0 ::ffff:127.0.0.1:8005       :::*                        LISTEN      2031/java           <span class="comment">#本地8005端口接收SHUTDOWN命令</span></span><br><span class="line">tcp        0      0 :::8009                     :::*                        LISTEN      2031/java </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Tomcat默认通过8005端口来接收SHUTDOWN这个字符串来关闭Tomcat进程，但这是非常危险的，因此需要修改端口号来防护。否则，通过telnet命令即可强行关闭Tomcat进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用Telnet来关闭Tomcat进程</span></span><br><span class="line">[root@localhost ~]# telnet 127.0.0.1 8005   <span class="comment">#通过telnet连接本地8005端口</span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">SHUTDOWN        <span class="comment">#发送SHUTDOWN字符串</span></span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">[root@localhost ~]# netstat -antup | grep java      <span class="comment">#可以发现8005端口和8080端口的Tomcat进程没了</span></span><br><span class="line">tcp        0      0 ::ffff:127.0.0.1:8011       :::*                        LISTEN      2295/java           </span><br><span class="line">tcp        0      0 ::ffff:127.0.0.1:8012       :::*                        LISTEN      2321/java           </span><br><span class="line">tcp        0      0 :::8081                     :::*                        LISTEN      2295/java           </span><br><span class="line">tcp        0      0 :::8082                     :::*                        LISTEN      2321/java           </span><br><span class="line">[root@localhost ~]# </span><br></pre></td></tr></table></figure><p>（3）ajp连接端口保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sed -n <span class="string">&#x27;91p&#x27;</span> /usr/local/tomcat/conf/server.xml</span><br><span class="line">    &lt;Connector port=<span class="string">&quot;8009&quot;</span> protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;    <span class="comment">#这是AJP协议打开的端口，我们并不需要开启这个端口，因此注释掉本行</span></span><br></pre></td></tr></table></figure><p>（4）禁用管理端</p><blockquote><p>Tomcat默认在安装完成后的网页目录里有很多多余的目录，删除所有不需要用到的目录，并清空ROOT网页默认根目录下的所有东西，规避可能的代码漏洞</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/local/tomcat/webapps/</span><br><span class="line">[root@localhost webapps]# <span class="built_in">ls</span></span><br><span class="line">docs  examples  host-manager  manager  memtest  memtest.war  ROOT   <span class="comment">#有很多多余的东西，只留下ROOT目录，其他都删掉或者mv移走</span></span><br><span class="line">[root@localhost webapps]# <span class="built_in">ls</span> ROOT/  <span class="comment">#很多多余的东西，因此清空本目录，或者都移走</span></span><br><span class="line">asf-logo.png       bg-button.png  bg-nav-item.png  bg-upper.png  favicon.ico  meminfo.jsp        tomcat.css  tomcat.png        tomcat.svg</span><br><span class="line">asf-logo-wide.gif  bg-middle.png  bg-nav.png       build.xml     index.jsp    RELEASE-NOTES.txt  tomcat.gif  tomcat-power.gif  WEB-INF</span><br></pre></td></tr></table></figure><h3 id="6-2-性能优化"><a href="#6-2-性能优化" class="headerlink" title="6.2 性能优化"></a>6.2 性能优化</h3><h4 id="6-2-1-屏蔽DNS查询"><a href="#6-2-1-屏蔽DNS查询" class="headerlink" title="6.2.1 屏蔽DNS查询"></a>6.2.1 屏蔽DNS查询</h4><p><code>enableLookups=&quot;false&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认没有，需添加配置文件如下代码段，在Connector标签位置。表示禁止DNS查询</span></span><br><span class="line">    &lt;Connector  port=<span class="string">&quot;8081&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">               connectionTimeout=<span class="string">&quot;6000&quot;</span> enableLookups=<span class="string">&quot;false&quot;</span> acceptCount=<span class="string">&quot;800&quot;</span></span><br><span class="line">               redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-jvm调优"><a href="#6-2-2-jvm调优" class="headerlink" title="6.2.2 jvm调优"></a>6.2.2 jvm调优</h4><blockquote><p>Tomcat最吃内存，只要内存足够，这只猫就跑的很快。如果系统资源有限，那就需要进行调优，提高资源使用率。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#优化catalina.sh初始化脚本。在catalina.sh初始化脚本中添加以下代码：</span></span><br><span class="line"><span class="comment">#catalina.sh的路径为:/usr/local/tomcat/bin/catalina.sh</span></span><br><span class="line"><span class="comment">#此行优化代码需要加在脚本的最开始，声明位置。不要放在后边</span></span><br><span class="line">JAVA_OPTS=<span class="string">&quot;-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms1024m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=512m -XX:MaxPermSize=512m&quot;</span></span><br><span class="line"><span class="comment">#代码说明：</span></span><br><span class="line">server:一定要作为第一个参数，在多个CPU时性能佳</span><br><span class="line">-Xms：初始堆内存Heap大小，使用的最小内存,cpu性能高时此值应设的大一些</span><br><span class="line">-Xmx：初始堆内存heap最大值，使用的最大内存</span><br><span class="line">上面两个值是分配JVM的最小和最大内存，取决于硬件物理内存的大小，建议均设为物理内存的一半。</span><br><span class="line">-XX:PermSize:设定内存的永久保存区域</span><br><span class="line">-XX:MaxPermSize:设定最大内存的永久保存区域</span><br><span class="line">-XX:MaxNewSize:</span><br><span class="line">-Xss 15120 这使得JBoss每增加一个线程（thread)就会立即消耗15M内存，而最佳值应该是128K,默认值好像是512k.</span><br><span class="line">+XX:AggressiveHeap 会使得 Xms没有意义。这个参数让jvm忽略Xmx参数,疯狂地吃完一个G物理内存,再吃尽一个G的swap。</span><br><span class="line">-Xss：每个线程的Stack大小</span><br><span class="line">-verbose:gc 现实垃圾收集信息</span><br><span class="line">-Xloggc:gc.log 指定垃圾收集日志文件</span><br><span class="line">-Xmn：young generation的heap大小，一般设置为Xmx的3、4分之一</span><br><span class="line">-XX:+UseParNewGC ：缩短minor收集的时间</span><br><span class="line">-XX:+UseConcMarkSweepGC ：缩短major收集的时间</span><br></pre></td></tr></table></figure><blockquote><p>jvm拓展：<a href="http://www.cnblogs.com/xingzc/p/5756119.html">http://www.cnblogs.com/xingzc/p/5756119.html</a></p></blockquote><p><strong>案例：Linux下java&#x2F;http进程高解决案例</strong></p><blockquote><p>生产环境下某台tomcat7服务器，在刚发布的时候一切都很正常，在运行一段时间后就出现CPU占用很高的问题，基本上是负载一天比一天高。诸如此类问题，请排查！</p></blockquote><p><strong>问题分析：</strong></p><blockquote></blockquote><p>（1）程序属于CPU密集型，和开发沟通过，排除此类情况<br>（2）程序代码有问题，出现死循环，可能性极大</p><p><strong>问题解决：</strong></p><blockquote></blockquote><p>（1）开发那边无法排查代码某个模块有问题，从日志上也无法分析得出<br>（2）我们可以尝试通过jstack命令来精确定位出现错误的代码段，从而拿给开发排查。</p><p>（1）首先查找进程高的PID号(先找到是哪个PID号的进程导致的)</p><p><code>top -H</code></p><p>（2）查看这个进程所有系统调用（再找到是哪个PID号的线程导致的）</p><p><code>strace -p 进程的PID</code></p><p>（3）如果是Web应用，可以继续打印该线程的堆栈信息（找出有问题的代码块）</p><p><code>printf &quot;%x\n&quot; 线程的PID</code> #将有问题的线程的PID号转换成16进制格式</p><p><code>jstack 进程的PID | grep 线程PID号的十六进制格式 -A 30</code> #过滤出有问题的线程的堆栈信息，找出问题代码块，-A 30 是继续向后显示30行、-B 30 是向前显示30行、-C 30是上下个各15行</p><p><strong>操作演示：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ROOT]# pgrep -l java</span><br><span class="line">2031 java       <span class="comment">#java进程及对应PID号</span></span><br><span class="line">2295 java</span><br><span class="line">2321 java</span><br><span class="line">[root@localhost ROOT]# strace -p 2031       <span class="comment">#查看PID号为2031的java进程的所有线程调用情况</span></span><br><span class="line">Process 2031 attached - interrupt to quit</span><br><span class="line">futex(0x7f4cdd0e79d0, FUTEX_WAIT, 2032, NULL    <span class="comment">#只有一个线程，线程的PID号为2032</span></span><br><span class="line">&lt;unfinished ...&gt;</span><br><span class="line">Process 2031 detached</span><br><span class="line">[root@localhost ROOT]# <span class="built_in">printf</span> <span class="string">&quot;%x\n&quot;</span> 2032   <span class="comment">#将线程的PID号2032转换成十六进制格式</span></span><br><span class="line">7f0</span><br><span class="line">[root@localhost ROOT]# jstack 2031 | grep 7f0 -A 30 <span class="comment">#追踪进称号为2031的进程的所有线程调用，从里面过滤出16进制为7f0的线程的代码调用情况</span></span><br><span class="line"><span class="string">&quot;main&quot;</span> <span class="comment">#1 prio=5 os_prio=0 tid=0x00007f4cd4008800 nid=0x7f0 runnable [0x00007f4cdd0e5000]</span></span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">    at java.net.PlainSocketImpl.socketAccept(Native Method)</span><br><span class="line">    at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:409)    <span class="comment">#圆括号里显示的是（代码类名:具体调用的代码行号）</span></span><br><span class="line">    at java.net.ServerSocket.implAccept(ServerSocket.java:545)</span><br><span class="line">    at java.net.ServerSocket.accept(ServerSocket.java:513)</span><br><span class="line">    at org.apache.catalina.core.StandardServer.await(StandardServer.java:446)</span><br><span class="line">    at org.apache.catalina.startup.Catalina.await(Catalina.java:713)</span><br><span class="line">    at org.apache.catalina.startup.Catalina.start(Catalina.java:659)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:497)</span><br><span class="line">    at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:351)</span><br><span class="line">    at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:485)</span><br><span class="line"><span class="string">&quot;VM Thread&quot;</span> os_prio=0 tid=0x00007f4cd406d000 nid=0x7f1 runnable </span><br><span class="line"><span class="string">&quot;VM Periodic Task Thread&quot;</span> os_prio=0 tid=0x00007f4cd40b8800 nid=0x7f8 waiting on condition </span><br><span class="line">JNI global references: 244</span><br></pre></td></tr></table></figure><p>##jstack命令（Java stack Trace）</p><p><strong>（1）介绍</strong></p><blockquote></blockquote><ul><li>jstack用于打印出给定的java进程ID或core file或远程调试服务的Java堆栈信息，如果是在64位机器上，需要指定选项”-J-d64”，Windows的jstack使用方式只支持以下的这种方式：<br>jstack [-l] pid</li><li>如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。另外，jstack工具还可以附属到正在运行的java程序中，看到当时运行的java程序的java stack和native stack的信息, 如果现在运行的java程序呈现hung的状态，jstack是非常有用的。</li></ul><p><strong>（2）命令格式</strong></p><p>jstack [ option ] pid<br>jstack [ option ] executable core<br>jstack [ option ] [server-id@]remote-hostname-or-IP</p><p><strong>（3）常用参数说明</strong></p><p>1)、options：</p><p>executable Java executable from which the core dump was produced.<br>(可能是产生core dump的java可执行程序)<br>core 将被打印信息的core dump文件<br>remote-hostname-or-IP 远程debug服务的主机名或ip<br>server-id 唯一id,假如一台主机上多个远程debug服务</p><p>2）、基本参数：</p><p>-F：当’jstack [-l] pid’没有相应的时候强制打印栈信息<br>-l：长列表. 打印关于锁的附加信息,例如属于java.util.concurrent的ownable synchronizers列表.<br>-m：打印java和native c&#x2F;c++框架的所有栈信息.<br>-h | -help：打印帮助信息<br>pid ：需要被打印配置信息的java进程id,可以用jps查询.</p>]]></content>
      
      
      <categories>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keepalived高可用集群</title>
      <link href="/articles/2018/08/31/keepalivedgaokeyongjiqun/"/>
      <url>/articles/2018/08/31/keepalivedgaokeyongjiqun/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Keepalived高可用集群"><a href="#Keepalived高可用集群" class="headerlink" title="Keepalived高可用集群"></a>Keepalived高可用集群</h1><h2 id="一，Keepalived高可用软件"><a href="#一，Keepalived高可用软件" class="headerlink" title="一，Keepalived高可用软件"></a>一，Keepalived高可用软件</h2><h3 id="1-1-Keepalived介绍"><a href="#1-1-Keepalived介绍" class="headerlink" title="1.1 Keepalived介绍"></a>1.1 Keepalived介绍</h3><blockquote></blockquote><ul><li>Keepalived软件起初是专门为LVS负载均衡软件设计的，用来管理并监控LVS集群系统中各个服务节点的状态，后来又加入了可以实现高可用的VRRP功能。因此，Keepalived除了能够管理LVS软件外，还可以作为其他服务（例如：Nginx，Haproxy，MySQL等）的高可用解决方案软件。</li><li>Keepalived软件主要是通过VRRP协议实现高可用功能的。VRRP是Virtual Router Redundancy Protocol（虚拟路由器冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，他能够保证当个别节点宕机时，整个网络可以不间断地运行。所以，Keepalived一方面具有配置管理LVS的功能，同时还具有对LVS下面节点进行健康检查的功能，另一方面也可实现系统网络服务的高可用功能。</li></ul><h3 id="1-2-Keepalived服务的三个重要功能"><a href="#1-2-Keepalived服务的三个重要功能" class="headerlink" title="1.2 Keepalived服务的三个重要功能"></a>1.2 Keepalived服务的三个重要功能</h3><p>（1）管理LVS负载均衡软件</p><p>（2）实现对LVS集群节点健康检查功能（healthcheck）</p><p>（3）作为系统网络服务的高可用功能（failover）</p><h3 id="1-3-Keepalived高可用故障切换转移原理"><a href="#1-3-Keepalived高可用故障切换转移原理" class="headerlink" title="1.3 Keepalived高可用故障切换转移原理"></a>1.3 Keepalived高可用故障切换转移原理</h3><blockquote></blockquote><ul><li>Keepalived高可用服务之间的故障切换转移，是通过VRRP（Virtual Router Redundancy Protocol，虚拟路由器冗余协议）来实现的。</li><li>在Keepalived服务正常工作时，主Master节点会不断地向备节点发送（多播的方式）心跳消息，用以告诉备Backup节点自己还活着，当主Master节点发生故障时，就无法发送心跳消息，备节点也就因此无法继续检测到来自主Master节点的心跳了，于是调用自身的接管程序，接管主Master节点的IP资源及服务。而当主Master节点恢复时，备Backup节点又会释放主节点故障时自身接管的IP资源及服务，恢复到原来的备用角色。</li><li>VRRP协议：<br>VRRP，全称Virtual Router Redundancy Protocol，中文名为虚拟路由冗余协议，VRRP的出现就是为了解决静态路由的单点故障问题，VRRP是通过一种竞选机制来将路由的任务交给某台VRRP路由器的。</li></ul><h2 id="二，Keepalived高可用服务搭建准备"><a href="#二，Keepalived高可用服务搭建准备" class="headerlink" title="二，Keepalived高可用服务搭建准备"></a>二，Keepalived高可用服务搭建准备</h2><h3 id="2-1-安装Keepalived环境"><a href="#2-1-安装Keepalived环境" class="headerlink" title="2.1 安装Keepalived环境"></a>2.1 安装Keepalived环境</h3><blockquote><p>nginx装高可用需要三块网卡，一块连接外网，一块连接内网，还有一块直连keepalive心跳线。</p></blockquote><p><strong>首先添加一块网卡，用于直连心跳线</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# <span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">[root@nginx-master network-scripts]# <span class="built_in">cp</span> ifcfg-eth0 ifcfg-eth1</span><br><span class="line">[root@nginx-master network-scripts]# vim ifcfg-eth1</span><br><span class="line">DEVICE=eth1</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">NM_CONTROLLED=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=dhcp              <span class="comment">#因为是仅主机模式</span></span><br><span class="line"><span class="comment">#IPADDR=192.168.27.203</span></span><br><span class="line"><span class="comment">#NETMASK=255.255.255.0</span></span><br><span class="line"><span class="comment">#GATEAWY=192.168.27.1</span></span><br><span class="line"><span class="comment">#DNS1=202.106.0.20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-开始安装Keepalived软件"><a href="#2-2-开始安装Keepalived软件" class="headerlink" title="2.2 开始安装Keepalived软件"></a>2.2 开始安装Keepalived软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# yum -y install keepalived            <span class="comment">#主备两台都安装</span></span><br></pre></td></tr></table></figure><h3 id="2-3-启动Keepalived服务并检查"><a href="#2-3-启动Keepalived服务并检查" class="headerlink" title="2.3 启动Keepalived服务并检查"></a>2.3 启动Keepalived服务并检查</h3><p><strong>启动及检查Keepalived服务的命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# /etc/init.d/keepalived start</span><br><span class="line">Starting keepalived:                                       [  OK  ]</span><br><span class="line">[root@nginx-master ~]# ps -ef | grep keep | grep -v grep</span><br><span class="line">root       1330      1  0 01:15 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class="line">root       1332   1330  0 01:15 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class="line">root       1333   1330  0 01:15 ?        00:00:00 /usr/sbin/keepalived -D</span><br><span class="line"></span><br><span class="line"><span class="comment">#提示：启动后有3个Keepalived进程表示安装正确</span></span><br><span class="line"></span><br><span class="line">[root@nginx-master ~]# ip add | grep 192.168        <span class="comment">#提示：启动后有3个Keepalived进程表示安装正确</span></span><br><span class="line">    inet 192.168.131.132/24 brd 192.168.131.255 scope global eth0</span><br><span class="line">    inet 192.168.200.16/32 scope global eth0</span><br><span class="line">    inet 192.168.200.17/32 scope global eth0</span><br><span class="line">    inet 192.168.200.18/32 scope global eth0</span><br><span class="line">    inet 192.168.88.128/24 brd 192.168.88.255 scope global eth1</span><br><span class="line">[root@nginx-master ~]# /etc/init.d/keepalived stop</span><br><span class="line">Stopping keepalived:                                       [  OK  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：主备两台都需要测试</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Keepalived配置文件说明"><a href="#2-4-Keepalived配置文件说明" class="headerlink" title="2.4 Keepalived配置文件说明"></a>2.4 Keepalived配置文件说明</h3><p><code>vim /etc/keepalived/keepalived.conf</code></p><p><strong>这里的具备高可用功能的Keepalived.conf配置文件包含了两个重要区块</strong></p><p>（1）全局定义（Global Definitions）部分</p><p>这部分主要用来设置Keepalived的故障通知机制和Router ID标识。示例代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# <span class="built_in">head</span> -13 /etc/keepalived/keepalived.conf | <span class="built_in">cat</span> -n</span><br><span class="line">     1  ! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">     2  </span><br><span class="line">     3  global_defs &#123;</span><br><span class="line">     4     notification_email &#123;</span><br><span class="line">     5       acassen@firewall.loc</span><br><span class="line">     6       failover@firewall.loc</span><br><span class="line">     7       sysadmin@firewall.loc</span><br><span class="line">     8     &#125;</span><br><span class="line">     9     notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">    10     smtp_server 192.168.200.1</span><br><span class="line">    11     smtp_connect_timeout 30</span><br><span class="line">    12     router_id LVS_DEVEL</span><br><span class="line">    13  &#125;</span><br></pre></td></tr></table></figure><p><strong>基础参数说明：</strong></p><p>第1行是注释，！开头和#号开发一样，都是注释。<br>第2行是空行。<br>第3~8行是定义服务故障报警的Email地址。作用是当服务发生切换或RS节点等有故障时，发报警邮件。这几行是可选配置，notification_email指定在Keepalived发生事件时，需要发送的Email地址，可以有多个，每行一个。<br>第9行是指定发送邮件的发送人，即发件人地址，也是可选的配置。<br>第10行smtp_server指定发送邮件的smtp服务器，如果本机开启了sendmail或postfix，就可以使用上面默认配置实现邮件发送，也是可选配置。<br>第11行smtp_connect_timeout是连接smtp的超时时间，也是可选配置。</p><p>注意：<br>第4~11行所有和邮件报警相关的参数均可以不配，在实际工作中会将监控的任务交给更加擅长监控报警的Nagios或Zabbix软件。<br>第12行是Keepalived服务器的路由标识（router_id）.在一个局域网内，这个标识（router_id）应该是唯一的。<br>大括号“{}”。用来分隔区块，要成对出现。如果漏写了半个大括号，Keepalived运行时，不会报错，但也不会得到预期的结果。另外，由于区块间存在多层嵌套关系，因此很容易遗漏区块结尾处的大括号，要特别注意。</p><p>（2）VRRP实例定义区块（VRRP instance（s））部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# sed -n <span class="string">&#x27;15,30&#123;=;p&#125;&#x27;</span> /etc/keepalived/keepalived.conf | xargs -L2</span><br><span class="line">15 vrrp_instance VI_1 &#123;</span><br><span class="line">16 state MASTER</span><br><span class="line">17 interface eth0</span><br><span class="line">18 virtual_router_id 51</span><br><span class="line">19 priority 100</span><br><span class="line">20 advert_int 1</span><br><span class="line">21 authentication &#123;</span><br><span class="line">22 auth_type PASS</span><br><span class="line">23 auth_pass 1111</span><br><span class="line">24 &#125;</span><br><span class="line">25 virtual_ipaddress &#123;</span><br><span class="line">26 192.168.200.16</span><br><span class="line">27 192.168.200.17</span><br><span class="line">28 192.168.200.18</span><br><span class="line">29 &#125;</span><br><span class="line">30 &#125;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><p>第15行表示定义一个vrrp_instance实例，名字是VI_1,每个vrrp_instance实例可以认为是Keepalived服务的一个实例或者作为一个业务服务，在Keepalived服务配置中，这样的vrrp_instance实例可以有多个。注意，存在于主节点中的vrrp_instance实例在备节点中也要存在，这样才能实现故障切换接管。</p><p>第16行state MASTER表示当前实例VI_1的角色状态，当前角色为MASTER，这个状态只能有MASTER和BACKUP两种状态，并且需要大写这些字符。其中MASTER为正式工作的状态，BACKUP为备用的状态。当MASTER所在的服务器故障或失效时，BACKUP所在的服务器会接管故障的MASTER继续提供服务。</p><p>第17行interface为网络通信接口。为对外提供服务的网络接口，如eth0,eth1。当前主流的服务器都有2~4个网络接口，在选择服务接口时，要搞清楚了。</p><p>第18行virtual_router_id为虚拟路由ID标识，这个标识最好是一个数字，并且要在一个keepalived.conf配置中是唯一的。但是MASTER和BACKUP配置中相同实例的virtual_router_id又必须是一致的，否则将出现脑裂问题。</p><p>第19行priority为优先级，其后面的数值也是一个数字，数字越大，表示实例优先级越高。在同一个vrrp_instance实例里，MASTER的优先级配置要高于BACKUP的。若MASTER的priority值为150，那么BACKUP的priority必须小于150，一般建议间隔50以上为佳，例如：设置BACKUP的priority为100或更小的数值。</p><p>第20行advert_int为同步通知间隔。MASTER与BACKUP之间通信检查的时间间隔，单位为秒，默认为1.</p><p>第21~24行authentication为权限认证配置。包含认证类型（auth_type）和认证密码（auth_pass）。认证类型有PASS（Simple Passwd（suggested）），AH（IPSEC（not recommended））两种，官方推荐使用的类型为PASS。验证密码为明文方式，最好长度不要超过8个字符，建议用4位数字，同一vrrp实例的MASTER与BACKUP使用相同的密码才能正常通信。</p><p>第25 ~ 29 行virtual_ipaddress为虚拟IP地址。可以配置多个IP地址，每个地址占一行，配置时最好明确指定子网掩码以及虚拟IP绑定的网络接口。否则，子网掩码默认是32位，绑定的接口和前面的interface参数配置的一致。注意，这里的虚拟IP就是在工作中需要和域名绑定的IP，即和配置的高可用服务监听的IP要保持一致！</p><h2 id="三，Keepalived高可用服务单实例"><a href="#三，Keepalived高可用服务单实例" class="headerlink" title="三，Keepalived高可用服务单实例"></a>三，Keepalived高可用服务单实例</h2><h3 id="3-1-配置Keepalived实现单实例单IP自动漂移接管"><a href="#3-1-配置Keepalived实现单实例单IP自动漂移接管" class="headerlink" title="3.1 配置Keepalived实现单实例单IP自动漂移接管"></a>3.1 配置Keepalived实现单实例单IP自动漂移接管</h3><p>（1）配置Keepalived主服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="comment">#删掉已有的所有默认配置，加入经过修改好的如下配置：</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">        424219678@qq.com            <span class="comment">#邮箱随便写</span></span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1            <span class="comment">#邮件服务器IP</span></span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id nginx-master           <span class="comment">#id为nginx-master，不能和其他Keepalived节点相同（全局唯一）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;                <span class="comment">#实例名字为VI_1,相同实例的备节点名字要和这个相同</span></span><br><span class="line">    state MASTER                    <span class="comment">#状态为MASTER，备节点状态需要为BACKUP</span></span><br><span class="line">    interface eth1                  <span class="comment">#通信（心跳）接口为eth1，此参数备节点设置和主节点相同</span></span><br><span class="line">    virtual_router_id 55            <span class="comment">#实例ID为55，要和备节点相同</span></span><br><span class="line">    priority 150                    <span class="comment">#优先级为150，备节点的优先级必须比此数字低</span></span><br><span class="line">    advert_int 1                    <span class="comment">#通信检查间隔时间1秒</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS              <span class="comment">#PASS认证类型，此参数备节点设置和主节点相同</span></span><br><span class="line">        auth_pass 1111              <span class="comment">#密码1111，此参数备节点设置和主节点相同</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.240/24 dev eth0 label eth0:1        <span class="comment">#虚拟IP，即VIP为192.168.131.240,子网掩码为24位，绑定接口为eth0，别名为eth0：1，此参数备节点设置和主节点相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置完毕后，启动Keepalived服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# /etc/init.d/keepalived start</span><br><span class="line">Starting keepalived:                                       [  OK  ]</span><br><span class="line">[root@nginx-master ~]# ifconfig </span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:0C:29:D5:71:25  </span><br><span class="line">          inet addr:192.168.131.132  Bcast:192.168.131.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fed5:7125/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:7970 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2302 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:574674 (561.2 KiB)  TX bytes:312605 (305.2 KiB)</span><br><span class="line"></span><br><span class="line">eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:D5:71:25                     <span class="comment">#成功了</span></span><br><span class="line">          inet addr:192.168.131.240  Bcast:0.0.0.0  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:D5:71:2F  </span><br><span class="line">          inet addr:192.168.88.128  Bcast:192.168.88.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fed5:712f/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:55 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:50 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:7316 (7.1 KiB)  TX bytes:4848 (4.7 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）实战配置Keepalived备服务器lb02 BACKUP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-slave ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">        424219678@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id nginx-slave            <span class="comment">#此参数和nginx-master MASTER不同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;                <span class="comment">#此参数和nginx-master MASTER同</span></span><br><span class="line">    state BACKUP                    <span class="comment">#此参数和nginx-master MASTER不同</span></span><br><span class="line">    interface eth1                  <span class="comment">#此参数和nginx-master MASTER同</span></span><br><span class="line">    virtual_router_id 55            <span class="comment">#此参数和nginx-master MASTER同</span></span><br><span class="line">    priority 100                    <span class="comment">#此参数和nginx-master MASTER不同</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.240/24 dev eth0 label eth0:1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置完成后，启动Keepalived服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-slave ~]# /etc/init.d/keepalived start</span><br><span class="line">Starting keepalived:                                       [  OK  ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）进行高可用主备服务器切换实验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# ifconfig eth0:1</span><br><span class="line">eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:D5:71:25  </span><br><span class="line">          inet addr:192.168.131.240  Bcast:0.0.0.0  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line">[root@nginx-master ~]# /etc/init.d/keepalived stop</span><br><span class="line">Stopping keepalived:                                       [  OK  ]</span><br><span class="line">[root@nginx-master ~]# ifconfig eth0:1</span><br><span class="line">eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:D5:71:25  </span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line"><span class="comment">#这时候看slave服务器</span></span><br><span class="line">[root@nginx-slave ~]# ifconfig eth0:1               <span class="comment">#漂移成功</span></span><br><span class="line">eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:B3:7E:B5  </span><br><span class="line">          inet addr:192.168.131.240  Bcast:0.0.0.0  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>主节点启动Keepalived服务后，发现很快就又接管了VIP 192.168.131.240</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# /etc/init.d/keepalived start</span><br><span class="line">Starting keepalived:                                       [  OK  ]</span><br><span class="line">[root@nginx-master ~]# ifconfig eth0:1</span><br><span class="line">eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:D5:71:25  </span><br><span class="line">          inet addr:192.168.131.240  Bcast:0.0.0.0  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五，Keepalived双实例双主模式配置"><a href="#五，Keepalived双实例双主模式配置" class="headerlink" title="五，Keepalived双实例双主模式配置"></a>五，Keepalived双实例双主模式配置</h2><p><strong>首先，配置nginx-master的Keepalived.conf，在单实例的基础上增加一个vrrp_instance VI_2实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">        424219678@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id nginx-master</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth1</span><br><span class="line">    virtual_router_id 55</span><br><span class="line">    priority 150</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.240/24 dev eth0 label eth0:1</span><br><span class="line">    &#125;</span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth1</span><br><span class="line">    virtual_router_id 56</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.250/24 dev eth0 label eth0:2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#提示：</span></span><br><span class="line">以vrrp_instance VI_1在master服务器上的角色为主，vrrp_instance VI_2在slave服务器上的角色为备。</span><br></pre></td></tr></table></figure><p><strong>然后配置nginx-slave的Keepalived.conf，在单实例的基础上增加vrrp_instance VI_2实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-slave ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">        424219678@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id nginx-slave</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth1</span><br><span class="line">    virtual_router_id 55</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.240/24 dev eth0 label eth0:1</span><br><span class="line">    &#125;</span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth1</span><br><span class="line">    virtual_router_id 56</span><br><span class="line">    priority 150</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.250/24 dev eth0 label eth0:2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重启服务(两台)</strong><br>示例一台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master ~]# /etc/init.d/keepalived restart</span><br><span class="line">Stopping keepalived:                                       [  OK  ]</span><br><span class="line">Starting keepalived:                                       [  OK  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭slave服务器的keepalive服务，查看master服务器</span></span><br><span class="line">[root@nginx-master ~]# ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:0C:29:D5:71:25  </span><br><span class="line">          inet addr:192.168.131.132  Bcast:192.168.131.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fed5:7125/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8916 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2574 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:642080 (627.0 KiB)  TX bytes:348713 (340.5 KiB)</span><br><span class="line"></span><br><span class="line">eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:D5:71:25  </span><br><span class="line">          inet addr:192.168.131.240  Bcast:0.0.0.0  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line">eth0:2    Link encap:Ethernet  HWaddr 00:0C:29:D5:71:25                         <span class="comment">#漂移成功</span></span><br><span class="line">          inet addr:192.168.131.250  Bcast:0.0.0.0  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:D5:71:2F  </span><br><span class="line">          inet addr:192.168.88.128  Bcast:192.168.88.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fed5:712f/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:166 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1039 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:15552 (15.1 KiB)  TX bytes:59022 (57.6 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四，Keepalived高可用服务器的“裂脑”问题"><a href="#四，Keepalived高可用服务器的“裂脑”问题" class="headerlink" title="四，Keepalived高可用服务器的“裂脑”问题"></a>四，Keepalived高可用服务器的“裂脑”问题</h2><h3 id="4-1-什么是裂脑"><a href="#4-1-什么是裂脑" class="headerlink" title="4.1 什么是裂脑"></a>4.1 什么是裂脑</h3><blockquote><p>由于某些原因，导致两台高可用服务器对在指定时间内，无法检测到对方的心跳消息，各自取得资源及服务的所有权，而此时的两台高可用服务器对都还活着并在正常运行，这样就会导致同一个IP或服务在两端同时存在而发生冲突，最严重的是两台主机占用同一个VIP地址，当用户写入数据时可能会分别写入到两端，这可能会导致服务器两端的数据不一致或造成数据丢失，这种情况就被称为裂脑。</p></blockquote><h3 id="4-2，导致裂脑发生的原因"><a href="#4-2，导致裂脑发生的原因" class="headerlink" title="4.2，导致裂脑发生的原因"></a>4.2，导致裂脑发生的原因</h3><p><strong>一般来说，裂脑的发生，有以下几种原因：</strong></p><ul><li>高可用服务器对之间心跳线链路发生故障，导致无法正常通信。</li><li>心跳线坏了（包括断了,老化）</li><li>网卡及相关驱动坏了，IP配置及冲突问题（网卡直连）。</li><li>心跳线间连接的设备故障（网卡及交换机）</li><li>仲裁的机器出问题（采用仲裁的方案）</li><li>高可用服务器上开启了iptables防火墙阻挡了心跳消息传输</li><li>高可用服务器上心跳网卡地址等信息配置不正确，导致发送心跳失败。</li><li>其他服务配置不当等原因，如心跳方式不同，心跳广播冲突，软件BUG等</li></ul><blockquote><p>提示：<br>Keepalived配置里同一VRRP实例如果virtual_router_id两端参数配置不一致，也会导致裂脑问题发生。</p></blockquote><h3 id="4-3-解决裂脑的常见方案"><a href="#4-3-解决裂脑的常见方案" class="headerlink" title="4.3 解决裂脑的常见方案"></a>4.3 解决裂脑的常见方案</h3><p><strong>在实际生产环境中，我们可以从以下几个方面来防止裂脑问题的发生：</strong></p><ul><li>同时使用串行电缆和以太网电缆连接，同时用两条心跳线路，这样一条线路坏了，另一个还是好的，依然能传送心跳消息。</li><li>当检测到裂脑时强行关闭一个心跳节点（这个功能需特殊设备支持，如Stonith，fence）。相当于备节点接收不到心跳消息，通过单独的线路发送关机命令关闭主节点的电源。</li><li>做好对裂脑的监控报警（如邮件及手机短信等或值班），在问题发生时人为第一时间介入仲裁，降低损失。例如，百度的监控报警短信就有上行和下行的区别。报警信息发送到管理员手机上，管理员可以通过手机回复对应数字或简单的字符串操作返回给服务器，让服务器根据指令自动处理相应故障，这样解决故障的时间更短。</li><li>当然，在实施高可用方案时，要根据业务实际需求确定是否能容忍这样的损失。对于一般的网站常规业务，这个损失是可容忍的。</li></ul><h3 id="4-4-解决Keepalived裂脑的常见方案"><a href="#4-4-解决Keepalived裂脑的常见方案" class="headerlink" title="4.4 解决Keepalived裂脑的常见方案"></a>4.4 解决Keepalived裂脑的常见方案</h3><blockquote><p>作为互联网应用服务器的高可用，特别是前端Web负载均衡器的高可用，裂脑的问题对普通业务的影响是可以忍受的，如果是数据库或者存储的业务，一般出现裂脑问题就非常严重了。因此，可以通过增加冗余心跳线路来避免裂脑问题的发生，同时加强对系统的监控，以便裂脑发生时人为快速介入解决问题。</p></blockquote><ul><li>如果开启防火墙，一定要让心跳消息通过，一般通过允许IP段的形式解决。</li><li>可以拉一条以太网网线或者串口线作为主被节点心跳线路的冗余。</li><li>开发检测程序通过监控软件（例如Nagios）检测裂脑。</li></ul><p><strong>生产场景检测裂脑故障的一些思路：</strong></p><p>1)简单判断的思想：只要备节点出现VIP就报警，这个报警有两种情况，一是主机宕机了备机接管了；二是主机没宕，裂脑了。不管属于哪个情况，都进行报警，然后由人工查看判断及解决。</p><p>2）比较严谨的判断：备节点出现对应VIP，并且主节点及对应服务（如果能远程连接主节点看是否有VIP就更好了）还活着，就说明发生裂脑了。</p><h2 id="五，开发检测Keepalived裂脑的脚本"><a href="#五，开发检测Keepalived裂脑的脚本" class="headerlink" title="五，开发检测Keepalived裂脑的脚本"></a>五，开发检测Keepalived裂脑的脚本</h2><p>1）在nginx-slave备节点开发脚本并执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-slave scripts]# <span class="built_in">cat</span> check_split_brain.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">nginx_master_vip=192.168.131.240</span><br><span class="line">nginx_aster_ip=192.168.131.132</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ping -c 2 -W 3 <span class="variable">$nginx_aster_ip</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 -a `ip a | grep <span class="string">&quot;<span class="variable">$nginx_master_vip</span>&quot;</span> | <span class="built_in">wc</span> -l` -eq 1 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;ha is split brain.warning.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;ha is OK&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">sleep</span> 5</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">[root@nginx-slave scripts]# sh check_split_brain.sh </span><br><span class="line">ha is OK</span><br><span class="line">ha is OK</span><br><span class="line">ha is OK</span><br><span class="line"><span class="comment">#正常情况下，主节点活着，VIP 192.168.131.132在主节点，因此不会报警，提示“ha is OK”</span></span><br></pre></td></tr></table></figure><p>2）停止Keepalived服务看nginx-slave脚本执行情况。</p><p><strong>nginx-master上：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-master scripts]# /etc/init.d/keepalived stop</span><br><span class="line">Stopping keepalived:                                       [  OK  ]</span><br><span class="line">[root@nginx-master scripts]# ip a | grep 192.168.0.240</span><br><span class="line">[root@nginx-master scripts]# </span><br><span class="line"><span class="comment">#在nginx-slave上观察即可，此前脚本已经执行。</span></span><br><span class="line">[root@nginx-slave scripts]# sh check_split_brain.sh </span><br><span class="line">ha is OK</span><br><span class="line">ha is OK</span><br><span class="line">ha is OK</span><br><span class="line">ha is <span class="built_in">split</span> brain.warning.</span><br><span class="line">ha is <span class="built_in">split</span> brain.warning.</span><br><span class="line">ha is <span class="built_in">split</span> brain.warning.</span><br></pre></td></tr></table></figure><p>3）关掉nginx-master服务器，然后再观察nginx-slave脚本的输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx-slave scripts]# sh check_split_brain.sh </span><br><span class="line">ha is OK</span><br><span class="line">ha is OK</span><br><span class="line">ha is OK</span><br><span class="line">ha is <span class="built_in">split</span> brain.warning.</span><br><span class="line">ha is <span class="built_in">split</span> brain.warning.</span><br><span class="line">ha is <span class="built_in">split</span> brain.warning.</span><br><span class="line">ha is OK</span><br><span class="line">ha is OK</span><br><span class="line">ha is OK</span><br><span class="line"><span class="comment">#裂脑报警恢复了。</span></span><br></pre></td></tr></table></figure><h2 id="六，解决高可用服务只针对物理服务器的问题"><a href="#六，解决高可用服务只针对物理服务器的问题" class="headerlink" title="六，解决高可用服务只针对物理服务器的问题"></a>六，解决高可用服务只针对物理服务器的问题</h2><h3 id="第一种（主服务器）"><a href="#第一种（主服务器）" class="headerlink" title="第一种（主服务器）"></a>第一种（主服务器）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 scripts]# <span class="built_in">cat</span> check_nginx.sh</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ `netstat -antup | grep nginx | <span class="built_in">wc</span> -l` -ne 1 ];<span class="keyword">then</span></span><br><span class="line">        /etc/init.d/keepalived stop</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">sleep</span> 5</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#此脚本的基本思想是若没有80端口存在，就停掉Keepalived服务实现释放本地的VIP。在后台执行上述脚本并检查：</span></span><br><span class="line">[root@lb01 scripts]# sh check_nginx.sh &amp;</span><br><span class="line">[1] 1521</span><br><span class="line">[root@lb01 scripts]# ps -ef | grep check | grep -v grep</span><br><span class="line">root       1521   1195  0 10:49 pts/0    00:00:00 sh check_nginx.sh</span><br><span class="line"><span class="comment">#确认Nginx以及Keepalived服务是正常的</span></span><br><span class="line">[root@lb01 scripts]# netstat -antup | grep nginx</span><br><span class="line">tcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      1492/nginx          </span><br><span class="line">[root@lb01 scripts]# /etc/init.d/keepalived status</span><br><span class="line">keepalived (pid  1512) is running...</span><br><span class="line"><span class="comment">#然后模拟Nginx服务挂掉，看IP是否发生切换。</span></span><br><span class="line">[root@lb01 scripts]# /usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">[root@lb01 scripts]# Stopping keepalived:                  [  OK  ]</span><br><span class="line">[root@lb01 scripts]# /etc/init.d/keepalived status</span><br><span class="line">keepalived is stopped</span><br><span class="line">[root@lb01 scripts]# netstat -antup | grep nginx</span><br><span class="line"><span class="comment">#此时，备节点已接管：</span></span><br><span class="line">[root@lb02 ~]# ip a | grep 192.168.0.240</span><br><span class="line">    inet 192.168.0.240/24 scope global secondary eth0:1</span><br></pre></td></tr></table></figure><h3 id="第二种（主服务器）"><a href="#第二种（主服务器）" class="headerlink" title="第二种（主服务器）"></a>第二种（主服务器）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 scripts]# <span class="built_in">cat</span> chk_nginx_proxy.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ `netstat -antup | grep nginx | <span class="built_in">wc</span> -l` -ne 1 ];<span class="keyword">then</span></span><br><span class="line">    /etc/init.d/keepalived stop</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">[root@lb01 scripts]# <span class="built_in">chmod</span> +x chk_nginx_proxy.sh </span><br><span class="line">[root@lb01 scripts]# <span class="built_in">ls</span> -l chk_nginx_proxy.sh </span><br><span class="line">-rwxr-xr-x. 1 root root 102 Jul 31 10:59 chk_nginx_proxy.sh</span><br></pre></td></tr></table></figure><p>此时，Keepalived服务的完整配置为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 scripts]# <span class="built_in">cat</span> /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">    215379068@qq.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id lb01</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_nginx_proxy &#123;       <span class="comment">#定义vrrp脚本，检测HTTP端口</span></span><br><span class="line">    script <span class="string">&quot;/server/scripts/chk_nginx_proxy.sh&quot;</span>     <span class="comment">#执行脚本，当Nginx服务有问题，就停掉Keepalived服务</span></span><br><span class="line">    interval 2          <span class="comment">#间隔2秒</span></span><br><span class="line">    weight 2</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth1</span><br><span class="line">    virtual_router_id 55</span><br><span class="line">    priority 150</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    192.168.0.240/24 dev eth0 label eth0:1</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">    chk_nginx_proxy         <span class="comment">#触发检查</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible批量自动化管理工具</title>
      <link href="/articles/2018/08/28/ansiblepiliangzidonghuaguanligongju/"/>
      <url>/articles/2018/08/28/ansiblepiliangzidonghuaguanligongju/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Ansible批量自动化管理工具"><a href="#Ansible批量自动化管理工具" class="headerlink" title="Ansible批量自动化管理工具"></a>Ansible批量自动化管理工具</h1><h2 id="一，-ansible简介"><a href="#一，-ansible简介" class="headerlink" title="一， ansible简介"></a>一， ansible简介</h2><blockquote><p>批量管理服务器的工具，无需部署agent，通过ssh进行管理 </p></blockquote><p><strong>jenkins简介</strong></p><blockquote><p>可视化运维（主要用在可视化部署）<br>持续构建，可以和git，svn结合<br>可结合ssh实现可视化运维<br>可结合ansible实现可视化运维</p></blockquote><h2 id="二，Python3与ansible的安装"><a href="#二，Python3与ansible的安装" class="headerlink" title="二，Python3与ansible的安装"></a>二，Python3与ansible的安装</h2><h3 id="2-1-使用源码安装Python3-5"><a href="#2-1-使用源码安装Python3-5" class="headerlink" title="2.1 使用源码安装Python3.5"></a>2.1 使用源码安装Python3.5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install lrzsz vim net-tools gcc gcc-c++ ncurses ncurses-devel unzip zlib-devel zlib openssl-devel openssl           <span class="comment">#安装支持包</span></span><br><span class="line">[root@localhost ~]# tar xf Python-3.5.2.tgz -C /usr/src/</span><br><span class="line">[root@localhost Python-3.5.2]# <span class="built_in">cd</span> /usr/src/Python-3.5.2/</span><br><span class="line">[root@localhost Python-3.5.2]# ./configure --prefix=/usr/local/python</span><br><span class="line">[root@localhost Python-3.5.2]# make &amp;&amp; make install</span><br><span class="line">[root@localhost Python-3.5.2]# <span class="built_in">ln</span> -s /usr/local/python/bin/python3 /usr/bin/python3</span><br><span class="line">[root@localhost Python-3.5.2]# <span class="built_in">which</span> python3</span><br><span class="line">/usr/bin/python3</span><br><span class="line">[root@localhost Python-3.5.2]# python3 -V</span><br><span class="line">Python 3.5.2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-使用pip3安装ansible"><a href="#2-2-使用pip3安装ansible" class="headerlink" title="2.2 使用pip3安装ansible"></a>2.2 使用pip3安装ansible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装ansible最新版本</span></span><br><span class="line">[root@localhost Python-3.5.2]# /usr/local/python/bin/pip3 install ansible</span><br><span class="line">等待安装...</span><br><span class="line"></span><br><span class="line">[root@localhost Python-3.5.2]# <span class="built_in">ln</span> -s /usr/local/python/bin/ansible /usr/local/bin</span><br><span class="line">[root@localhost Python-3.5.2]# <span class="built_in">which</span> ansible</span><br><span class="line">/usr/local/bin/ansible</span><br><span class="line">[root@localhost Python-3.5.2]# ansible --version</span><br><span class="line">ansible 2.6.3</span><br><span class="line">  config file = None</span><br><span class="line">  configured module search path = [<span class="string">&#x27;/root/.ansible/plugins/modules&#x27;</span>, <span class="string">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class="line">  ansible python module location = /usr/local/python/lib/python3.5/site-packages/ansible</span><br><span class="line">  executable location = /usr/local/bin/ansible</span><br><span class="line">  python version = 3.5.2 (default, Aug 29 2018, 05:04:47) [GCC 4.4.7 20120313 (Red Hat 4.4.7-4)]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-ansible查看帮助"><a href="#2-3-ansible查看帮助" class="headerlink" title="2.3 ansible查看帮助"></a>2.3 ansible查看帮助</h3><p><code>[root@localhost ~]# /usr/local/python/bin/ansible-doc -l</code> 查看总帮助<br><code>[root@localhost ~]# /usr/local/python/bin/ansible-doc -s shell</code> 查看shell模块的帮助<br><code>[root@localhost ~]# /usr/local/python/bin/ansible-doc -s raw</code></p><h2 id="三，使用公私钥实现ssh无密码登陆"><a href="#三，使用公私钥实现ssh无密码登陆" class="headerlink" title="三，使用公私钥实现ssh无密码登陆"></a>三，使用公私钥实现ssh无密码登陆</h2><table><thead><tr><th>host</th><th>IP</th></tr></thead><tbody><tr><td>ansible</td><td>192.168.131.109</td></tr><tr><td>webA</td><td>192.168.131.132</td></tr><tr><td>webB</td><td>192.168.131.110</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install openssh-clients          <span class="comment">#安装ssh包</span></span><br><span class="line">[root@localhost ~]# ssh-keygen -t rsa -f ~/.ssh/id_rsa -P <span class="string">&quot;&quot;</span>            <span class="comment">#生成密钥对</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Created directory <span class="string">&#x27;/root/.ssh&#x27;</span>.</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">d8:e8:42:7c:48:dc:84:5c:01:11:63:57:a7:09:10:9a root@localhost.localdomain</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|   .OO*o. .      |</span></span><br><span class="line"><span class="string">|   =o= . +       |</span></span><br><span class="line"><span class="string">|  E o . o        |</span></span><br><span class="line"><span class="string">|   o . +         |</span></span><br><span class="line"><span class="string">|    + + S        |</span></span><br><span class="line"><span class="string">|   . o           |</span></span><br><span class="line"><span class="string">|    . .          |</span></span><br><span class="line"><span class="string">|     .           |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br><span class="line"><span class="string">[root@localhost ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub &quot;-o StrictHostKeyChecking=no&quot; 192.168.131.132</span></span><br><span class="line"><span class="string">                                                                                    #自动分发密钥</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>192.168.131.132<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@192.168.131.132&#x27;</span>s password: </span><br><span class="line">Now try logging into the machine, with <span class="string">&quot;ssh &#x27;-o StrictHostKeyChecking=no 192.168.131.132&#x27;&quot;</span>, and check <span class="keyword">in</span>:</span><br><span class="line"></span><br><span class="line">  .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">to make sure we haven<span class="string">&#x27;t added extra keys that you weren&#x27;</span>t expecting.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ssh 192.168.131.132             <span class="comment">#访问测试</span></span><br><span class="line">Last login: Thu Aug 30 04:58:46 2018 from 192.168.131.1</span><br><span class="line">[root@localhost ~]# hostname -I         <span class="comment">#访问成功</span></span><br><span class="line">192.168.131.132 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四，ansible的简单配置和ping模块"><a href="#四，ansible的简单配置和ping模块" class="headerlink" title="四，ansible的简单配置和ping模块"></a>四，ansible的简单配置和ping模块</h2><h3 id="4-1-ansible的配置文件"><a href="#4-1-ansible的配置文件" class="headerlink" title="4.1 ansible的配置文件"></a>4.1 ansible的配置文件</h3><blockquote><p>过pip安装的ansible是没有配置文件的,需要手动创建</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> -p /etc/ansible       </span><br><span class="line">[root@localhost ~]# vim /etc/ansible/hosts      <span class="comment">#编辑配置文件</span></span><br><span class="line">[nginx]              <span class="comment">#被管理的主机组名称</span></span><br><span class="line">webA ansible_ssh_host=192.168.131.132 ansible_ssh_port=22 ansible_ssh_user=root     <span class="comment">#第一台主机</span></span><br><span class="line">webB ansible_ssh_host=192.168.131.110 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=123456             <span class="comment">#第二台主机</span></span><br><span class="line"></span><br><span class="line">特别提示：</span><br><span class="line">WebA  ===&gt; 主机名</span><br><span class="line">ansible_ssh_host ===&gt;主机IP</span><br><span class="line">ansible_ssh_port ===&gt;ssh的默认端口</span><br><span class="line">ansible_ssh_user ===&gt;ssh的用户名</span><br><span class="line">ansible_ssh_pass ===&gt;ssh的用户的连接密码</span><br></pre></td></tr></table></figure><blockquote><p>如果已经设置了ssh免密钥了。那么就不需要写密码了。例如：webA<br>要是没有设置免密钥，那么就需要安装sshpass工具，并在&#x2F;etc&#x2F;ansible&#x2F;hosts文件里写上主机的连接密码。例如webB</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载epel源安装sshpass</span></span><br><span class="line">[root@localhost ~]# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line">[root@localhost ~]# yum -y clean all</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Cleaning repos: c6-media epel</span><br><span class="line">Cleaning up Everything</span><br><span class="line">Cleaning up list of fastest mirrors</span><br><span class="line">[root@localhost ~]# yum makecache</span><br><span class="line">[root@localhost ~]# yum -y install sshpass</span><br><span class="line">[root@localhost ~]# <span class="built_in">which</span> sshpass</span><br><span class="line">/usr/bin/sshpass</span><br></pre></td></tr></table></figure><h3 id="4-2-进行ansible远程执行命令测试"><a href="#4-2-进行ansible远程执行命令测试" class="headerlink" title="4.2 进行ansible远程执行命令测试"></a>4.2 进行ansible远程执行命令测试</h3><p><strong>语法：</strong></p><p><code>ansible all -m command -a &#39;uptime&#39; </code><br>ansible 主机组 -m ansible内置功能模块名 -a 命令</p><p><strong>进行命令测试：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ansible nginx -m ping</span><br><span class="line">paramiko: The authenticity of host <span class="string">&#x27;192.168.131.110&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">The ssh-rsa key fingerprint is b&#x27;</span>0900a44abeb172d26fb5fc3501a30483<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?              #首次连接，需要交互</span></span><br><span class="line"><span class="string">webA | SUCCESS =&gt; &#123;</span></span><br><span class="line"><span class="string">    &quot;changed&quot;: false,</span></span><br><span class="line"><span class="string">    &quot;ping&quot;: &quot;pong&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">yes</span></span><br><span class="line"><span class="string">webB | SUCCESS =&gt; &#123;</span></span><br><span class="line"><span class="string">    &quot;changed&quot;: false,</span></span><br><span class="line"><span class="string">    &quot;ping&quot;: &quot;pong&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="4-3-ansible的简单使用方式"><a href="#4-3-ansible的简单使用方式" class="headerlink" title="4.3 ansible的简单使用方式"></a>4.3 ansible的简单使用方式</h3><p><code>ansible -i /etc/ansible/hosts 主机或主机组 -m 指定模块 -a 命令</code></p><blockquote><p>不用-i指定配置文件默认为&#x2F;etc&#x2F;ansible&#x2F;hosts</p></blockquote><h3 id="4-4-使用ping模块用来查看服务器是否连接正常，ping模块不需要-a指定参数"><a href="#4-4-使用ping模块用来查看服务器是否连接正常，ping模块不需要-a指定参数" class="headerlink" title="4.4 使用ping模块用来查看服务器是否连接正常，ping模块不需要-a指定参数"></a>4.4 使用ping模块用来查看服务器是否连接正常，ping模块不需要-a指定参数</h3><p><code>ansible all -m ping</code></p><blockquote><p>主机组，主机，all代表所有</p></blockquote><p><strong>主机和主机组注意事项：</strong></p><table><thead><tr><th>主机组范围</th><th>解释</th></tr></thead><tbody><tr><td>all</td><td>代表所有主机</td></tr><tr><td>webA:webB</td><td>可以指定多台主机</td></tr><tr><td>all:\!webA</td><td>指定all但不包含webB，注意”!”前需要加转义符号”&quot;</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ansible webA -m ping                <span class="comment">#测试</span></span><br><span class="line">webA | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">[root@localhost ~]# ansible all -m ping</span><br><span class="line">webA | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">webB | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">[root@localhost ~]# ansible all:\!webA -m ping</span><br><span class="line">webB | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">[root@localhost ~]# ansible webA:webB -m <span class="built_in">command</span> -a <span class="string">&#x27;uptime&#x27;</span></span><br><span class="line">webA | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"> 06:06:05 up  1:09,  3 <span class="built_in">users</span>,  load average: 0.00, 0.00, 0.00</span><br><span class="line"></span><br><span class="line">webB | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"> 06:06:07 up  1:08,  3 <span class="built_in">users</span>,  load average: 0.00, 0.00, 0.00</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五，ansible的命令模块"><a href="#五，ansible的命令模块" class="headerlink" title="五，ansible的命令模块"></a>五，ansible的命令模块</h2><h3 id="5-1-ansible模块command（不支持管道，不支持重定向）"><a href="#5-1-ansible模块command（不支持管道，不支持重定向）" class="headerlink" title="5.1 ansible模块command（不支持管道，不支持重定向）"></a>5.1 ansible模块command（不支持管道，不支持重定向）</h3><p>不建议使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#command支持直接回显命令的执行结果</span></span><br><span class="line">[root@localhost ~]# ansible all -m <span class="built_in">command</span> -a <span class="string">&#x27;pwd&#x27;</span></span><br><span class="line">webB | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">/root</span><br><span class="line"></span><br><span class="line">webA | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><h3 id="5-2-ansible模块shell（支持管道，支持重定向）"><a href="#5-2-ansible模块shell（支持管道，支持重定向）" class="headerlink" title="5.2 ansible模块shell（支持管道，支持重定向）"></a>5.2 ansible模块shell（支持管道，支持重定向）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ansible all -m shell -a <span class="string">&#x27;echo bb &gt;&gt; /tmp/zhaoshuo&#x27;</span></span><br><span class="line">webA | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line">webB | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ansible all -m shell -a <span class="string">&#x27;echo zhaoshuo | grep a&#x27;</span></span><br><span class="line">webB | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">zhaoshuo</span><br><span class="line"></span><br><span class="line">webA | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">zhaoshuo</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果遇到特殊符号需要加入\转义，这样子ansible才能正常运行</span></span><br><span class="line">[root@localhost ~]# ansible all -m shell -a <span class="string">&quot;cat /etc/passwd | awk -F &quot;</span>:<span class="string">&quot; &#x27;&#123;print \$1&#125;&#x27;&quot;</span></span><br><span class="line">webB | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line"><span class="built_in">sync</span></span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">gopher</span><br><span class="line">ftp</span><br><span class="line">nobody</span><br><span class="line">vcsa</span><br><span class="line">saslauth</span><br><span class="line">postfix</span><br><span class="line">sshd</span><br><span class="line"></span><br><span class="line">webA | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line"><span class="built_in">sync</span></span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">gopher</span><br><span class="line">ftp</span><br><span class="line">nobody</span><br><span class="line">vcsa</span><br><span class="line">saslauth</span><br><span class="line">postfix</span><br><span class="line">sshd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-3-ansible模块raw，最原始的方式运行命令（不依赖python，仅通过ssh实现）"><a href="#5-3-ansible模块raw，最原始的方式运行命令（不依赖python，仅通过ssh实现）" class="headerlink" title="5.3 ansible模块raw，最原始的方式运行命令（不依赖python，仅通过ssh实现）"></a>5.3 ansible模块raw，最原始的方式运行命令（不依赖python，仅通过ssh实现）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ansible all -m raw -a <span class="string">&quot;yum -y clean all&quot;</span></span><br><span class="line">webA | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Cleaning repos: c6-media</span><br><span class="line">Cleaning up Everything</span><br><span class="line">Cleaning up list of fastest mirrors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">webB | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Cleaning repos: c6-media</span><br><span class="line">Cleaning up Everything</span><br><span class="line">Cleaning up list of fastest mirrors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ansible all -m raw -a <span class="string">&quot;yum makecache&quot;</span></span><br><span class="line">webB | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Determining fastest mirrors</span><br><span class="line"> * c6-media: </span><br><span class="line">file:///media/CentOS/repodata/repomd.xml: [Errno 14] Could not open/read file:///media/CentOS/repodata/repomd.xml</span><br><span class="line">Trying other mirror.</span><br><span class="line">file:///media/cdrecorder/repodata/repomd.xml: [Errno 14] Could not open/read file:///media/cdrecorder/repodata/repomd.xml</span><br><span class="line">Trying other mirror.</span><br><span class="line">c6-media                                                 | 4.0 kB     00:00 ... </span><br><span class="line">c6-media/group_gz                                        | 220 kB     00:00 ... </span><br><span class="line">c6-media/filelists_db                                    | 5.8 MB     00:00 ... </span><br><span class="line">c6-media/primary_db                                      | 4.4 MB     00:00 ... </span><br><span class="line">c6-media/other_db                                        | 2.7 MB     00:00 ... </span><br><span class="line">Metadata Cache Created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">webA | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Determining fastest mirrors</span><br><span class="line"> * c6-media: </span><br><span class="line">file:///media/CentOS/repodata/repomd.xml: [Errno 14] Could not open/read file:///media/CentOS/repodata/repomd.xml</span><br><span class="line">Trying other mirror.</span><br><span class="line">file:///media/cdrecorder/repodata/repomd.xml: [Errno 14] Could not open/read file:///media/cdrecorder/repodata/repomd.xml</span><br><span class="line">Trying other mirror.</span><br><span class="line">c6-media                                                 | 4.0 kB     00:00 ... </span><br><span class="line">c6-media/group_gz                                        | 220 kB     00:00 ... </span><br><span class="line">c6-media/filelists_db                                    | 5.8 MB     00:00 ... </span><br><span class="line">c6-media/primary_db                                      | 4.4 MB     00:00 ... </span><br><span class="line">c6-media/other_db                                        | 2.7 MB     00:00 ... </span><br><span class="line">Metadata Cache Created</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-4-yum模块"><a href="#5-4-yum模块" class="headerlink" title="5.4 yum模块"></a>5.4 yum模块</h3><blockquote><p>利用yum模块安装软件包，虽然能被shell模块替代<br>但是用yum模块更显专业一些</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> 软件包名： <ul><li>name：指定软件包的名字</li></ul></li><li><input checked="" disabled="" type="checkbox"> state状态： <ul><li>present：安装软件包（默认就是这个）</li><li>absent：卸载软件包</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装nmap软件包</span></span><br><span class="line">[root@ansible ~]# ansible all -m yum -a <span class="string">&#x27;name=nmap&#x27;</span></span><br><span class="line"><span class="comment">#卸载nmap软件包</span></span><br><span class="line">[root@ansible ~]# ansible all -m yum -a <span class="string">&#x27;name=nmap state=absent&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="六，ansible的copy模块批量下发文件或文件夹"><a href="#六，ansible的copy模块批量下发文件或文件夹" class="headerlink" title="六，ansible的copy模块批量下发文件或文件夹"></a>六，ansible的copy模块批量下发文件或文件夹</h2><h3 id="6-1-copy模块概述"><a href="#6-1-copy模块概述" class="headerlink" title="6.1 copy模块概述"></a>6.1 copy模块概述</h3><ul><li><input checked="" disabled="" type="checkbox"> copy模块的参数,ansible 主机组 -m 模块 -a 命令<ul><li>src：指定源文件或目录</li><li>dest：指定目标服务器的文件或目录</li><li>backup：是否要备份</li><li>owner：拷贝到目标服务器后，文件或目录的所属用户</li><li>group：拷贝到目标服务器后，文件或目录的所属群组</li><li>mode：文件或目录的权限</li></ul></li></ul><blockquote><p><strong>说明：</strong><br>若出现错误，说明节点未安装libselinux-python支持包。</p></blockquote><p><strong>准备工作:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> -p /service/scripts</span><br><span class="line">[root@localhost ~]# <span class="built_in">echo</span> <span class="string">&quot;aaa&quot;</span> &gt; /service/scripts/test.txt</span><br><span class="line">[root@localhost ~]# <span class="built_in">echo</span> <span class="string">&quot;bbb&quot;</span> &gt; /service/scripts/test2.txt</span><br><span class="line">所有被管理端节点必须安装libselinux-python包</span><br><span class="line">yum -y install libselinux-python</span><br></pre></td></tr></table></figure><h3 id="6-2-copy模块拷贝文件"><a href="#6-2-copy模块拷贝文件" class="headerlink" title="6.2 copy模块拷贝文件"></a>6.2 copy模块拷贝文件</h3><blockquote><p>提示：如果目标路径不存在会自动创建 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ansible all -m copy -a <span class="string">&quot;src=/service/scripts/text.txt dest=/service/scripts/&quot;</span></span><br><span class="line">webA | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;972a1a11f19934401291cc99117ec614933374ce&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/service/scripts/text.txt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;5c9597f3c8245907ea71a89d9d39d08e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>,</span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secontext&quot;</span>: <span class="string">&quot;system_u:object_r:svc_svc_t:s0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 4,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1535636459.4482992-11332265234244/source&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">webB | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;972a1a11f19934401291cc99117ec614933374ce&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/service/scripts/text.txt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gid&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;5c9597f3c8245907ea71a89d9d39d08e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>,</span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secontext&quot;</span>: <span class="string">&quot;system_u:object_r:svc_svc_t:s0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: 4,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1535636459.4617953-50994191944169/source&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-3-copy模块拷贝文件夹"><a href="#6-3-copy模块拷贝文件夹" class="headerlink" title="6.3 copy模块拷贝文件夹"></a>6.3 copy模块拷贝文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拷贝/service/scripts/  目录下所有内容到dest的路径下（注意两条命令的对比）</span></span><br><span class="line">[root@localhost ~]# ansible webA -m copy -a <span class="string">&quot;src=/service/scripts/ dest=/service/scripts/&quot;</span></span><br><span class="line">webA | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#拷贝/service/scripts目录本身及其内部的所有内容到dest的路径下</span></span><br><span class="line">[root@localhost ~]# ansible webA -m copy -a <span class="string">&quot;src=/service/scripts dest=/service/scripts/&quot;</span></span><br><span class="line">webA | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/service/scripts&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-4-copy模块自动备份"><a href="#6-4-copy模块自动备份" class="headerlink" title="6.4 copy模块自动备份"></a>6.4 copy模块自动备份</h3><blockquote><p>说明：backup&#x3D;yes  意思是，如果目标路径下，有与我同名但不同内容的文件时，在覆盖前，对目标文件先进行备份。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ansible webB -m copy -a <span class="string">&quot;src=/service/scripts/ dest=/service/scripts/ backup=yes&quot;</span></span><br><span class="line">webB | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-5-copy模块指定用户和属主"><a href="#6-5-copy模块指定用户和属主" class="headerlink" title="6.5 copy模块指定用户和属主"></a>6.5 copy模块指定用户和属主</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ansible webA -m copy -a <span class="string">&quot;src=/service/scripts/ dest=/service/scripts/ owner=nobody group=nobody mode=0600&quot;</span></span><br><span class="line">webA | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webA服务器：</span><br><span class="line">[root@localhost ~]# ll /service/scripts/</span><br><span class="line">total 12</span><br><span class="line">-rw-------. 1 nobody nobody    4 Aug 30 21:43 text2.txt</span><br><span class="line">-rw-------. 1 nobody nobody    4 Aug 30 21:41 text.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="七，ansible的script模块批量运行脚本"><a href="#七，ansible的script模块批量运行脚本" class="headerlink" title="七，ansible的script模块批量运行脚本"></a>七，ansible的script模块批量运行脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# <span class="built_in">pwd</span></span><br><span class="line">/service/scripts</span><br><span class="line">[root@localhost scripts]# vim auto_nginx.sh             <span class="comment">#nginx安装脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#nginx install shell scripts</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -d /media/cdrom || <span class="built_in">mkdir</span> -p /media/cdrom</span><br><span class="line">mount /dev/sr0 /media/cdrom &amp;&gt;/dev/null</span><br><span class="line">yum -y install gcc gcc-c++ make pcre pcre-devel zlib zlib-devel openssl  openssl-devel &amp;&gt;/dev/null</span><br><span class="line"><span class="built_in">test</span> -d /service/scripts || <span class="built_in">exit</span> 3</span><br><span class="line"><span class="built_in">cd</span> /service/scripts/</span><br><span class="line">tar xf nginx-1.10.2.tar.gz -C /usr/src/</span><br><span class="line"><span class="built_in">cd</span> /usr/src/nginx-1.10.2/</span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module &amp;&gt;/dev/null</span><br><span class="line">make &amp;&gt;/dev/null</span><br><span class="line">make install &amp;&gt;/dev/null</span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# vim fenfa.sh              <span class="comment">#源码包和安装脚本的批量分发脚本</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment">#批量分发脚本</span></span><br><span class="line"></span><br><span class="line">Group=<span class="variable">$1</span></span><br><span class="line">ansible <span class="variable">$Group</span> -m copy -a <span class="string">&quot;src=/service/scripts/ dest=/service/scripts/ mode=0755&quot;</span></span><br><span class="line">ansible <span class="variable">$Group</span> -m script -a <span class="string">&quot;/bin/bash /service/scripts/auto_nginx.sh&quot;</span></span><br><span class="line">[root@localhost scripts]# <span class="built_in">ls</span></span><br><span class="line">auto_nginx.sh  fenfa.sh  nginx-1.10.2.tar.gz</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# sh fenfa.sh all           <span class="comment">#激活脚本</span></span><br><span class="line">webA | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">webB | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/service/scripts/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">webA | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;rc&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stderr_lines&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stdout_lines&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line">webB | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;rc&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stderr_lines&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stdout_lines&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="八，ansible-playbook的初步使用"><a href="#八，ansible-playbook的初步使用" class="headerlink" title="八，ansible-playbook的初步使用"></a>八，ansible-playbook的初步使用</h2><blockquote><p>playbook的使用，playbook可以把ansible的模块进行组合</p></blockquote><p><code>先做软链接ln -s /usr/local/python/bin/ansible-playbook /usr/local/bin/</code></p><h3 id="8-1-playbook的简单shell模块的使用"><a href="#8-1-playbook的简单shell模块的使用" class="headerlink" title="8.1 playbook的简单shell模块的使用"></a>8.1 playbook的简单shell模块的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim test_shell.yaml       <span class="comment">#playbook的执行模板</span></span><br><span class="line">---             <span class="comment">#开头三个小-开头</span></span><br><span class="line">- hosts: webB</span><br><span class="line">  tasks:</span><br><span class="line">  - name: <span class="built_in">test</span></span><br><span class="line">    shell: <span class="built_in">echo</span> <span class="string">&quot;welcome to yunjisuan&quot;</span> &gt;&gt; /tmp/username</span><br><span class="line">  - name: test2</span><br><span class="line">    shell: <span class="built_in">echo</span> <span class="string">&quot;welcome to yunjisuan&quot;</span> &gt;&gt; /tmp/username</span><br><span class="line">    </span><br><span class="line">模板说明：</span><br><span class="line">---  <span class="comment">#开头必须有三个小-，顶格写</span></span><br><span class="line">- hosts：   <span class="comment">#正文配置代码的第一级，必须有两个空格（-占一个空格位）</span></span><br><span class="line">- host: webB   <span class="comment">#webB是host参数的值，值和hosts：之间要有一个空格</span></span><br><span class="line">  tasks:        <span class="comment">#tasks：表示接下来要执行的具体任务</span></span><br><span class="line">  - name:     <span class="comment">#相对于tasks再多缩进两个格（-占一个空格位），表示属于tasks的下一级</span></span><br><span class="line">  - name: <span class="built_in">test</span>  <span class="comment">#test只是要执行的具体命令的名字可以随便写。name:后还是有一个空格要注意</span></span><br><span class="line">    shell:  <span class="comment">#表示调用shell模块执行命令相对于tasks仍旧要多缩进两个空格</span></span><br><span class="line">    shell: <span class="built_in">echo</span> <span class="string">&quot;xxx&quot;</span> &gt;&gt; xxx     <span class="comment">#shell:后边还是要有个空格，需要注意。</span></span><br></pre></td></tr></table></figure><p><strong>执行playbook配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# ansible-playbook test_shell.yaml              <span class="comment">#执行playbook配置文件</span></span><br><span class="line"></span><br><span class="line">PLAY [webB] ************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************</span><br><span class="line">ok: [webB]</span><br><span class="line"></span><br><span class="line">TASK [<span class="built_in">test</span>] ************************************************************************************************************</span><br><span class="line">changed: [webB]</span><br><span class="line"></span><br><span class="line">TASK [test2] ***********************************************************************************************************</span><br><span class="line">changed: [webB]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *************************************************************************************************************</span><br><span class="line">webB                       : ok=3    changed=2    unreachable=0    failed=0 </span><br></pre></td></tr></table></figure><h3 id="8-2-playbook的简单copy模块的使用"><a href="#8-2-playbook的简单copy模块的使用" class="headerlink" title="8.2 playbook的简单copy模块的使用"></a>8.2 playbook的简单copy模块的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# <span class="built_in">echo</span> <span class="string">&quot;welcome&quot;</span> &gt;&gt; /tmp/test_copy</span><br><span class="line">[root@localhost scripts]# vim test_copy.yaml</span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">  - name: <span class="built_in">test</span> copy</span><br><span class="line">    copy: src=/tmp/test_copy dest=/tmp</span><br><span class="line">    </span><br><span class="line">[root@localhost scripts]# ansible-playbook /service/scripts/test_copy.yaml          <span class="comment">#执行文件</span></span><br><span class="line"></span><br><span class="line">PLAY [all] *************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************</span><br><span class="line">ok: [webB]</span><br><span class="line">ok: [webA]</span><br><span class="line"></span><br><span class="line">TASK [<span class="built_in">test</span> copy] *******************************************************************************************************</span><br><span class="line">changed: [webA]</span><br><span class="line">changed: [webB]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *************************************************************************************************************</span><br><span class="line">webA                       : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line">webB                       : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-3-playbook使用register输出命令运行结果"><a href="#8-3-playbook使用register输出命令运行结果" class="headerlink" title="8.3 playbook使用register输出命令运行结果"></a>8.3 playbook使用register输出命令运行结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim test_register.yaml</span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">  - name: <span class="built_in">test</span> register</span><br><span class="line">    shell: <span class="built_in">echo</span> <span class="string">&quot;welcome to yunjisuan&quot;</span></span><br><span class="line">    register: print_result          <span class="comment">#将之前命令的输出结果保存在变量print_result里（变量随便写）</span></span><br><span class="line">  - debug: var=print_result         <span class="comment">#将变量的值作为debug输出出来</span></span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# ansible-playbook test_register.yaml </span><br><span class="line"></span><br><span class="line">PLAY [all] *************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************</span><br><span class="line">ok: [webB]</span><br><span class="line">ok: [webA]</span><br><span class="line"></span><br><span class="line">TASK [<span class="built_in">test</span> register] ***************************************************************************************************</span><br><span class="line">changed: [webA]</span><br><span class="line">changed: [webB]</span><br><span class="line"></span><br><span class="line">TASK [debug] ***********************************************************************************************************</span><br><span class="line">ok: [webA] =&gt; &#123;                                              <span class="comment">#命令的执行结果有输出了</span></span><br><span class="line">    <span class="string">&quot;print_result&quot;</span>: &#123;                                       </span><br><span class="line">        <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;echo \&quot;welcome to yunjisuan\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;delta&quot;</span>: <span class="string">&quot;0:00:00.002454&quot;</span>,</span><br><span class="line">        <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2018-08-31 00:30:03.681237&quot;</span>,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;rc&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2018-08-31 00:30:03.678783&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr_lines&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;welcome to yunjisuan&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;welcome to yunjisuan&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ok: [webB] =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;print_result&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;echo \&quot;welcome to yunjisuan\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;delta&quot;</span>: <span class="string">&quot;0:00:00.002346&quot;</span>,</span><br><span class="line">        <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2018-08-31 00:30:04.162016&quot;</span>,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;rc&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2018-08-31 00:30:04.159670&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr_lines&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;welcome to yunjisuan&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;welcome to yunjisuan&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *************************************************************************************************************</span><br><span class="line">webA                       : ok=3    changed=1    unreachable=0    failed=0   </span><br><span class="line">webB                       : ok=3    changed=1    unreachable=0    failed=0   </span><br></pre></td></tr></table></figure><h3 id="8-4-nginx配置下发并检测"><a href="#8-4-nginx配置下发并检测" class="headerlink" title="8.4 nginx配置下发并检测"></a>8.4 nginx配置下发并检测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# <span class="built_in">cat</span> test_nginx_conf.yaml </span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copy nginx.conf</span><br><span class="line">    copy: src=/tmp/nginx.conf dest=/usr/local/nginx/conf/ backup=<span class="built_in">yes</span></span><br><span class="line">  - name:</span><br><span class="line">    shell: /usr/local/nginx/sbin/nginx -t</span><br><span class="line">    register: nginx_result</span><br><span class="line">  - debug: var=nginx_result</span><br></pre></td></tr></table></figure><h2 id="九，playbook的自定义变量和内置变量"><a href="#九，playbook的自定义变量和内置变量" class="headerlink" title="九，playbook的自定义变量和内置变量"></a>九，playbook的自定义变量和内置变量</h2><h3 id="9-1-在Playbook中使用自定义变量"><a href="#9-1-在Playbook中使用自定义变量" class="headerlink" title="9.1 在Playbook中使用自定义变量"></a>9.1 在Playbook中使用自定义变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim test_vars.yaml</span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  vars:                 <span class="comment">#定义变量</span></span><br><span class="line">  - Name: <span class="string">&quot;yunjisuan&quot;</span>           <span class="comment">#第一个Name变量</span></span><br><span class="line">    age: <span class="string">&quot;3&quot;</span>                    <span class="comment">#第二个age变量</span></span><br><span class="line">  tasks:</span><br><span class="line">  - name: <span class="string">&quot;&#123;&#123; Name &#125;&#125;&quot;</span>              <span class="comment">#&#123;&#123;&#125;&#125;两对大括号引用变量，变量名两头空格</span></span><br><span class="line">    shell: <span class="built_in">echo</span> <span class="string">&quot;myname &#123;&#123; Name &#125;&#125;,myage &#123;&#123; age &#125;&#125;&quot;</span></span><br><span class="line">    register: var_result</span><br><span class="line">  - debug: var=var_result</span><br><span class="line"></span><br><span class="line">特别提示：</span><br><span class="line">引用变量需要在双引号中引用。</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# ansible-playbook test_vars.yaml</span><br><span class="line"></span><br><span class="line">PLAY [all] *************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************</span><br><span class="line">ok: [webB]</span><br><span class="line">ok: [webA]</span><br><span class="line"></span><br><span class="line">TASK [yunjisuan] *******************************************************************************************************</span><br><span class="line">changed: [webA]</span><br><span class="line">changed: [webB]</span><br><span class="line"></span><br><span class="line">TASK [debug] ***********************************************************************************************************</span><br><span class="line">ok: [webA] =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;var_result&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;echo \&quot;myname yunjisuan,myage 3\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;delta&quot;</span>: <span class="string">&quot;0:00:00.002324&quot;</span>,</span><br><span class="line">        <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2018-08-31 01:10:51.436707&quot;</span>,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;rc&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2018-08-31 01:10:51.434383&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr_lines&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;myname yunjisuan,myage 3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;myname yunjisuan,myage 3&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ok: [webB] =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;var_result&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;echo \&quot;myname yunjisuan,myage 3\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;delta&quot;</span>: <span class="string">&quot;0:00:00.003688&quot;</span>,</span><br><span class="line">        <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2018-08-31 01:10:51.908615&quot;</span>,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;rc&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2018-08-31 01:10:51.904927&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr_lines&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;myname yunjisuan,myage 3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;myname yunjisuan,myage 3&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *************************************************************************************************************</span><br><span class="line">webA                       : ok=3    changed=1    unreachable=0    failed=0   </span><br><span class="line">webB                       : ok=3    changed=1    unreachable=0    failed=0 </span><br></pre></td></tr></table></figure><h3 id="9-2-在playbook中使用ansible内置变量"><a href="#9-2-在playbook中使用ansible内置变量" class="headerlink" title="9.2 在playbook中使用ansible内置变量"></a>9.2 在playbook中使用ansible内置变量</h3><blockquote><p>使用<code>ansible all -m setup | less</code>查看ansible内置变量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim test_setupvars.yaml</span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  gather_facts: True            <span class="comment">#使用ansible内置变量（开启内置变量）</span></span><br><span class="line">  tasks:</span><br><span class="line">  - name: setup var             <span class="comment">#定义任务名</span></span><br><span class="line">    shell: <span class="built_in">echo</span> <span class="string">&quot;ip &#123;&#123; ansible_all_ipv4_addresses[0] &#125;&#125; cpu &#123;&#123; ansible_processor_count &#125;&#125;&quot;</span></span><br><span class="line">    register: var_result</span><br><span class="line">  - debug: var=var_result</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# ansible-playbook test_setupvars.yaml </span><br><span class="line"></span><br><span class="line">PLAY [all] *************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************</span><br><span class="line">ok: [webB]</span><br><span class="line">ok: [webA]</span><br><span class="line"></span><br><span class="line">TASK [setup var] *******************************************************************************************************</span><br><span class="line">changed: [webA]</span><br><span class="line">changed: [webB]</span><br><span class="line"></span><br><span class="line">TASK [debug] ***********************************************************************************************************</span><br><span class="line">ok: [webA] =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;var_result&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;echo \&quot;ip 192.168.131.132 cpu 1\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;delta&quot;</span>: <span class="string">&quot;0:00:00.006103&quot;</span>,</span><br><span class="line">        <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2018-08-31 01:15:24.088136&quot;</span>,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;rc&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2018-08-31 01:15:24.082033&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr_lines&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;ip 192.168.131.132 cpu 1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;ip 192.168.131.132 cpu 1&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ok: [webB] =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;var_result&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;echo \&quot;ip 192.168.131.110 cpu 1\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;delta&quot;</span>: <span class="string">&quot;0:00:00.002989&quot;</span>,</span><br><span class="line">        <span class="string">&quot;end&quot;</span>: <span class="string">&quot;2018-08-31 01:15:24.559372&quot;</span>,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;rc&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;start&quot;</span>: <span class="string">&quot;2018-08-31 01:15:24.556383&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stderr_lines&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;ip 192.168.131.110 cpu 1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;ip 192.168.131.110 cpu 1&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *************************************************************************************************************</span><br><span class="line">webA                       : ok=3    changed=1    unreachable=0    failed=0   </span><br><span class="line">webB                       : ok=3    changed=1    unreachable=0    failed=0 </span><br></pre></td></tr></table></figure><blockquote><p>演示ansible内置变量的取用方法ansible all -m setup | less</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# <span class="built_in">cat</span> test_setupvars.yaml</span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  gather_facts: True</span><br><span class="line">  tasks:</span><br><span class="line">  - name: setup var</span><br><span class="line">    shell: <span class="built_in">echo</span> <span class="string">&quot;ip &#123;&#123; ansible_all_ipv4_addresses[0] &#125;&#125; cpu &#123;&#123; ansible_processor_count &#125;&#125;&quot;</span> &gt;&gt; /tmp/test</span><br><span class="line">  - name: setup var2</span><br><span class="line">    shell: <span class="built_in">echo</span> <span class="string">&quot;time &#123;&#123; ansible_date_time[&quot;</span><span class="built_in">date</span><span class="string">&quot;] &#125;&#125;&quot;</span> &gt;&gt; /tmp/test</span><br><span class="line">    register: var_result</span><br><span class="line">  - debug: var=var_result</span><br></pre></td></tr></table></figure><h2 id="十，Playbook下发可变配置文件"><a href="#十，Playbook下发可变配置文件" class="headerlink" title="十，Playbook下发可变配置文件"></a>十，Playbook下发可变配置文件</h2><h3 id="10-1-利用template模块下发可变的配置文件"><a href="#10-1-利用template模块下发可变的配置文件" class="headerlink" title="10.1 利用template模块下发可变的配置文件"></a>10.1 利用template模块下发可变的配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim /tmp/test</span><br><span class="line">my name is &#123;&#123; myname &#125;&#125;                 <span class="comment">#自定义变量</span></span><br><span class="line">my name is &#123;&#123; ansible_all_ipv4_addresses[0] &#125;&#125;          <span class="comment">#系统变量</span></span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# vim test_filevars.yaml</span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  gather_facts: True            <span class="comment">#开启系统变量</span></span><br><span class="line">  vars:</span><br><span class="line">  - myname: <span class="string">&quot;yunjisuan&quot;</span>         <span class="comment">#自定义变量</span></span><br><span class="line">  tasks:</span><br><span class="line">  - name: template <span class="built_in">test</span></span><br><span class="line">    template: src=/tmp/test dest=/root/test             <span class="comment">#使用template下发可变配置文件</span></span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# ansible-playbook test_filevars.yaml</span><br><span class="line"></span><br><span class="line">PLAY [all] *************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************</span><br><span class="line">ok: [webA]</span><br><span class="line">ok: [webB]</span><br><span class="line"></span><br><span class="line">TASK [template <span class="built_in">test</span>] ***************************************************************************************************</span><br><span class="line">changed: [webA]</span><br><span class="line">changed: [webB]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *************************************************************************************************************</span><br><span class="line">webA                       : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line">webB                       : ok=2    changed=1    unreachable=0    failed=0 </span><br></pre></td></tr></table></figure><h3 id="10-2-下发配置文件里面使用判断语法"><a href="#10-2-下发配置文件里面使用判断语法" class="headerlink" title="10.2 下发配置文件里面使用判断语法"></a>10.2 下发配置文件里面使用判断语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim /tmp/if.j2 </span><br><span class="line">&#123;% <span class="keyword">if</span> PORT %&#125;       <span class="comment">#if PORT存在</span></span><br><span class="line">ip=0.0.0.0:&#123;&#123; PORT &#125;&#125;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;          <span class="comment">#否则的话</span></span><br><span class="line">ip=0.0.0.0:80</span><br><span class="line">&#123;% endif %&#125;         <span class="comment">#结尾</span></span><br><span class="line">[root@localhost scripts]# vim test_ifvars.yaml </span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  gather_facts: True    <span class="comment">#开启系统内置变量</span></span><br><span class="line">  vars:</span><br><span class="line">  - PORT: 90        <span class="comment">#自定义变量</span></span><br><span class="line">  tasks:</span><br><span class="line">  - name: jinja2 <span class="keyword">if</span> <span class="built_in">test</span></span><br><span class="line">    template: src=/tmp/if.j2 dest=/root/test</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# ansible-playbook test_ifvars.yaml </span><br><span class="line"></span><br><span class="line">PLAY [all] *************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************</span><br><span class="line">ok: [webA]</span><br><span class="line">ok: [webB]</span><br><span class="line"></span><br><span class="line">TASK [jinja2 <span class="keyword">if</span> <span class="built_in">test</span>] **************************************************************************************************</span><br><span class="line">changed: [webB]</span><br><span class="line">changed: [webA]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *************************************************************************************************************</span><br><span class="line">webA                       : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line">webB                       : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#webA服务器：</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> <span class="built_in">test</span> </span><br><span class="line">ip=0.0.0.0:90</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>将变量PORT值为空，结果为：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim test_ifvars.yaml </span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  gather_facts: True</span><br><span class="line">  vars:</span><br><span class="line">  - PORT:       <span class="comment">#置空</span></span><br><span class="line">  tasks:</span><br><span class="line">  - name: jinja2 <span class="keyword">if</span> <span class="built_in">test</span></span><br><span class="line">    template: src=/tmp/if.j2 dest=/root/test</span><br><span class="line">    </span><br><span class="line">[root@localhost scripts]# ansible-playbook test_ifvars.yaml</span><br><span class="line"></span><br><span class="line">PLAY [all] *************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *************************************************************************************************</span><br><span class="line">ok: [webA]</span><br><span class="line">ok: [webB]</span><br><span class="line"></span><br><span class="line">TASK [jinja2 <span class="keyword">if</span> <span class="built_in">test</span>] **************************************************************************************************</span><br><span class="line">changed: [webA]</span><br><span class="line">changed: [webB]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *************************************************************************************************************</span><br><span class="line">webA                       : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line">webB                       : ok=2    changed=1    unreachable=0    failed=0   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#webA服务器:</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> <span class="built_in">test</span> </span><br><span class="line">ip=0.0.0.0:80</span><br></pre></td></tr></table></figure><h2 id="十一，Playbook的notify通知和下发nginx配置"><a href="#十一，Playbook的notify通知和下发nginx配置" class="headerlink" title="十一，Playbook的notify通知和下发nginx配置"></a>十一，Playbook的notify通知和下发nginx配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实战下发可执行动作的可变的nginx配置文件</span></span><br><span class="line">[root@localhost scripts]# <span class="built_in">head</span> -1 /tmp/nginx.j2 </span><br><span class="line">worker_processes  &#123;&#123; ansible_processor_count &#125;&#125;;    <span class="comment">#可变的参数</span></span><br><span class="line">[root@localhost scripts]# <span class="built_in">cat</span> test_nginxvars.yaml </span><br><span class="line">---</span><br><span class="line">- hosts: all</span><br><span class="line">  gather_facts: True    <span class="comment">#开启系统内置变量</span></span><br><span class="line">  tasks:</span><br><span class="line">  - name: nginx conf</span><br><span class="line">    template: src=/tmp/nginx.j2 dest=/usr/local/nginx/conf/nginx.conf</span><br><span class="line">    notify:</span><br><span class="line">    - reload nginx  <span class="comment">#下发通知给handlers模块执行名字叫做reload nginx的动作</span></span><br><span class="line">  handlers: <span class="comment">#定义动作</span></span><br><span class="line">  - name: reload nginx  <span class="comment">#动作的名字</span></span><br><span class="line">    shell: /usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">[root@localhost scripts]# ansible-playbook test_nginxvars.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理</title>
      <link href="/articles/2018/08/22/nginxfanxiangdaili/"/>
      <url>/articles/2018/08/22/nginxfanxiangdaili/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h1><h2 id="1-1-集群简介"><a href="#1-1-集群简介" class="headerlink" title="1.1 集群简介"></a>1.1 集群简介</h2><blockquote></blockquote><ul><li>简单地说，集群就是指一组（若干个）相互独立的计算机，利用高速通信网络组成的一个较大的计算机服务系统，每个集群节点（即集群中的每台计算机）都是运行各自服务的独立服务器。这些服务器之间可以彼此通信，协同向用户提供应用程序，系统资源和数据，并以单一系统的模式加以管理。当用户客户机请求集群系统时，集群给用户的感觉就是一个单一独立的服务器，而实际上用户请求的是一组集群服务器。</li><li>若要用一句话描述集群，即一堆服务器合作做同一件事，这些机器可能需要整个技术团队架构，设计和统一协调管理，这些机器可以分布在一个机房，也可以分布在全国全球各个地区的多个机房。</li></ul><h2 id="1-2-集群的好处"><a href="#1-2-集群的好处" class="headerlink" title="1.2 集群的好处"></a>1.2 集群的好处</h2><blockquote><p>高性能,价格有效性,可伸缩性,高可用性,透明性,可管理性,可编程性</p></blockquote><h2 id="1-3-集群的常见分类"><a href="#1-3-集群的常见分类" class="headerlink" title="1.3 集群的常见分类"></a>1.3 集群的常见分类</h2><h3 id="1-3-1-集群的常见分类"><a href="#1-3-1-集群的常见分类" class="headerlink" title="1.3.1 集群的常见分类"></a>1.3.1 集群的常见分类</h3><p><strong>可分为：</strong></p><ul><li>负载均衡集群，简称LBC或者LB</li><li>高可用性集群，简称HAC</li><li>高性能计算集群，简称HPC</li><li>网格计算集群</li></ul><h3 id="1-3-2-不同种类的集群介绍"><a href="#1-3-2-不同种类的集群介绍" class="headerlink" title="1.3.2 不同种类的集群介绍"></a>1.3.2 不同种类的集群介绍</h3><p><strong>（1）负载均衡集群作用：</strong></p><ul><li>分摊用户访问请求及数据流量（负载均衡）</li><li>保持业务连续性，即7*24小时服务（高可用性）。</li><li>应用于Web业务及数据库从库等服务器的业务</li></ul><p><strong>（2）高可用性集群作用：</strong></p><ul><li>当一台机器宕机时，另外一台机器接管宕机的机器的IP资源和服务资源，提供服务。</li><li>常用于不易实现负载均衡的应用，比如负载均衡器，主数据库，主存储对之间。</li></ul><h2 id="1-4-Nginx负载均衡集群介绍"><a href="#1-4-Nginx负载均衡集群介绍" class="headerlink" title="1.4 Nginx负载均衡集群介绍"></a>1.4 Nginx负载均衡集群介绍</h2><h3 id="1-4-1-搭建负载均衡服务的需求"><a href="#1-4-1-搭建负载均衡服务的需求" class="headerlink" title="1.4.1 搭建负载均衡服务的需求"></a>1.4.1 搭建负载均衡服务的需求</h3><p><strong>负载均衡集群提供了一种廉价，有效，透明的方法，来扩展网络设备和服务器的负载，带宽和吞吐量，同时加强了网络数据处理能力，提高了网络的灵活性和可用性。</strong></p><h2 id="1-5-实践Nginx负载均衡环境准备"><a href="#1-5-实践Nginx负载均衡环境准备" class="headerlink" title="1.5 实践Nginx负载均衡环境准备"></a>1.5 实践Nginx负载均衡环境准备</h2><h3 id="1-5-1-环境准备"><a href="#1-5-1-环境准备" class="headerlink" title="1.5.1 环境准备"></a>1.5.1 环境准备</h3><table><thead><tr><th>HOSTNAME</th><th>IP</th><th>说明</th></tr></thead><tbody><tr><td>nuinx反向代理</td><td>192.168.131.132</td><td>Nginx主负载均衡器</td></tr><tr><td>nginx web1</td><td>192.168.131.101</td><td>web1 服务器</td></tr><tr><td>nginx web2</td><td>192.168.131.102</td><td>web2 服务器</td></tr></tbody></table><h3 id="1-5-2-安装Nginx软件"><a href="#1-5-2-安装Nginx软件" class="headerlink" title="1.5.2 安装Nginx软件"></a>1.5.2 安装Nginx软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y pcre-devel openssl-devel</span><br><span class="line">[root@localhost ~]# useradd -s /sbin/nologin -M nginx       <span class="comment">#创建程序用户</span></span><br><span class="line">[root@localhost ~]# tar xf nginx-1.10.2.tar.gz -C /usr/src/     <span class="comment">#解压</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/src/nginx-1.10.2/</span><br><span class="line">[root@localhost nginx-1.10.2]# ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module &amp;&amp; make &amp;&amp; make install       <span class="comment">#编译安装</span></span><br><span class="line">等待编译......</span><br><span class="line">[root@localhost nginx]# <span class="built_in">ln</span> -s /usr/local/nginx/sbin/* /usr/local/sbin/      <span class="comment">#做软连接，让环境变量能找到</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-5-3-配置用于测试的Web服务"><a href="#1-5-3-配置用于测试的Web服务" class="headerlink" title="1.5.3 配置用于测试的Web服务"></a>1.5.3 配置用于测试的Web服务</h3><p>两台配置相同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/www;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  bbs.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/bbs;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>填充测试文件数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# <span class="built_in">ls</span></span><br><span class="line">conf  html  logs  sbin</span><br><span class="line">[root@localhost nginx]# <span class="built_in">cd</span> html</span><br><span class="line">[root@localhost html]# <span class="built_in">ls</span></span><br><span class="line">50x.html  index.html</span><br><span class="line">[root@localhost html]# <span class="built_in">mkdir</span> www bbs</span><br><span class="line">[root@localhost html]# <span class="built_in">echo</span> <span class="string">&quot;welcome www `hostname -I`&quot;</span> &gt; www/index.html</span><br><span class="line">[root@localhost html]# <span class="built_in">echo</span> <span class="string">&quot;welcome bbs `hostname -I`&quot;</span> &gt; bbs/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置映射：</span></span><br><span class="line">[root@localhost html]# vim /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.131.101 bbs.zhaoshuo.com www.zhaoshuo.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>启动Nginx服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# /usr/local/nginx/sbin/nginx </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>curl测试</strong></p><p>web1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome bbs 192.168.131.101 </span><br><span class="line">[root@localhost html]# curl www.zhaoshuo.com</span><br><span class="line">welcome www 192.168.131.101 </span><br><span class="line">[root@localhost html]# curl 192.168.131.101</span><br><span class="line">welcome www 192.168.131.101 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>web2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome bbs 192.168.131.101 </span><br><span class="line">[root@localhost html]# curl www.zhaoshuo.com</span><br><span class="line">welcome www 192.168.131.101 </span><br><span class="line">[root@localhost html]# curl 192.168.131.102</span><br><span class="line">welcome www 192.168.131.102 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-5-4-实现一个负载均衡"><a href="#1-5-4-实现一个负载均衡" class="headerlink" title="1.5.4 实现一个负载均衡"></a>1.5.4 实现一个负载均衡</h3><p><strong>配置nginx负载均衡器配置文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream www_server &#123;                    <span class="comment">#upstream是服务器池，www_server是服务器池的名字</span></span><br><span class="line">        server 192.168.131.101 weight=1;    <span class="comment">#server就是一个RS节点。weight是权重，负载均衡是按照权重比分配的</span></span><br><span class="line">        server 192.168.131.102 weight=1;</span><br><span class="line">    &#125;   </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  bbs.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://www_server;       proxy_pass是反向代理推送请求，nginx自己发出，跟用户无关</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost html]# /usr/local/nginx/sbin/nginx      <span class="comment">#启动服务</span></span><br></pre></td></tr></table></figure><p><strong>添加映射：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.131.132 bbs.zhaoshuo.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>负载均衡测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome www 192.168.131.101 </span><br><span class="line">[root@localhost conf]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome www 192.168.131.102 </span><br><span class="line">[root@localhost conf]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome www 192.168.131.101 </span><br><span class="line">[root@localhost conf]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome www 192.168.131.102 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-6-Nginx负载均衡核心组件"><a href="#1-6-Nginx负载均衡核心组件" class="headerlink" title="1.6 Nginx负载均衡核心组件"></a>1.6 Nginx负载均衡核心组件</h2><h3 id="1-6-1-Nginx-upstream模块"><a href="#1-6-1-Nginx-upstream模块" class="headerlink" title="1.6.1 Nginx upstream模块"></a>1.6.1 Nginx upstream模块</h3><p><strong>upstream模块语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream www_server &#123;</span><br><span class="line">server 192.168.131.101;   <span class="comment">#这行标签和下行是等价的</span></span><br><span class="line">server 192.168.131.102:80 weight=1 max_fails=1 fail_timeout=10s;       <span class="comment">#这行标签和上一行是等价的，此行多余的部分就是默认配置，不写也可以。</span></span><br><span class="line">server 192.168.131.103:80 weight=1 max_fails=2 fail_timeout=20s backup;  </span><br><span class="line"><span class="comment">#backup是备份，其他server坏了，才会启用此条server，max_fails=1是错误次数，upstream会检查所有server状态，会ping ip，只要有一次不通，就会认为此条server坏了，就不会向此条server推用户</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>upstream模块相关说明</strong></p><p><img src="/articles/2018/08/22/nginxfanxiangdaili/1.png"></p><p><strong>upstream模块调度算法</strong></p><p><strong>（1） rr轮询（默认调度算法，静态调度算法）</strong></p><blockquote><p>按客户端请求顺序把客户端的请求逐一分配到不同的后端节点服务器，这相当于LVS中的rr算法，如果后端节点服务器宕机（默认情况下Nginx只检测80端口），宕机的服务器会被自动从节点服务器池中剔除，以使客户端的用户访问不受影响。新的请求会分配给正常的服务器。</p></blockquote><p><strong>（2）wrr（权重轮询，静态调度算法）</strong></p><blockquote><p>在rr轮询算法的基础上加上权重，即为权重轮询算法，当使用该算法时，权重和用户访问成正比，权重值越大，被转发的请求也就越多。可以根据服务器的配置和性能指定权重值大小，有效解决新旧服务器性能不均带来的请求分配问题。</p></blockquote><p><strong>（3）ip_hash（静态调度算法）（会话保持）</strong></p><blockquote></blockquote><ul><li>每个请求按客户端IP的hash结果分配，当新的请求到达时，先将其客户端IP通过哈希算法哈希出一个值，在随后的客户端请求中，客户IP的哈希值只要相同，就会被分配至同一台服务器，该调度算法可以解决动态网页的session共享问题，但有时会导致请求分配不均，即无法保证1：1的负载均衡，因为在国内大多数公司都是NAT上网模式，多个客户端会对应一个外部IP，所以，这些客户端都会被分配到同一节点服务器，从而导致请求分配不均。LVS负载均衡的-p参数，Keepalived配置里的persistence_timeout 50参数都类似这个Nginx里的ip_hash参数，其功能都可以解决动态网页的session共享问题。</li><li>同一个ip地址的用户永远负载给同一台服务器。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    upstream www_server &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server 192.168.131.101 weight=1;    </span><br><span class="line">        server 192.168.131.102 weight=1;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能有weight和backup，即使有也不会生效。</span><br></pre></td></tr></table></figure><p><strong>（4）fair（动态调度算法）</strong></p><blockquote><p>此算法会根据后端节点服务器的响应时间来分配请求，响应时间短的优先分配。这是更加智能的调度算法。此种算法可以根据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身不支持fair调度算法，如果需要使用这种调度算法，必须下载Nginx相关模块upstream_fair。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream www_server &#123;</span><br><span class="line">        server 192.168.131.101 weight=1;    </span><br><span class="line">        server 192.168.131.102 weight=1;</span><br><span class="line">        fair;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>（5）least_conn</strong></p><blockquote><p>least_conn算法会根据后端节点的连接数来决定分配情况，哪个机器连接数少就分发。 </p></blockquote><p><strong>（6）url_hash算法(web缓存节点)</strong></p><blockquote></blockquote><ul><li>与ip_hash类似，这里是根据访问URL的hash结果来分配请求的，让每个URL定向到同一个后端服务器，后端服务器为缓存服务器时效果显著。在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method使用的是hash算法。<br>url_hash按访问URL的hash结果来分配请求，使每个URL定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率命令率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx的hash模块软件包。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream www_server &#123;</span><br><span class="line">        server 192.168.131.101 weight=1;    </span><br><span class="line">        server 192.168.131.102 weight=1;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">        hash_method crc32;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>（7）一致性hash算法</strong></p><blockquote><p>一致性hash算法一般用于代理后端业务为缓存服务（如Squid，Memcached）的场景，通过将用户请求的URI或者指定字符串进行计算，然后调度到后端的服务器上，此后任何用户查找同一个URI或者指定字符串都会被调度到这一台服务器上，因此后端的每个节点缓存的内容都是不同的，一致性hash算法可以解决后端某个或几个节点宕机后，缓存的数据动荡最小，一致性hash算法知识比较复杂</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream www_server &#123;</span><br><span class="line">        consistent_hash <span class="variable">$request_uri</span>;</span><br><span class="line">        server 192.168.131.101 weight=1;    </span><br><span class="line">        server 192.168.131.102 weight=1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-http-proxy-module模块"><a href="#1-6-2-http-proxy-module模块" class="headerlink" title="1.6.2 http_proxy_module模块"></a>1.6.2 http_proxy_module模块</h3><h4 id="1-6-2-1-proxy-pass指令介绍"><a href="#1-6-2-1-proxy-pass指令介绍" class="headerlink" title="1.6.2.1 proxy_pass指令介绍"></a>1.6.2.1 proxy_pass指令介绍</h4><blockquote><p>proxy_pass指令属于ngx_http_proxy_module模块，此模块可以将请求转发到另一台服务器，在实际的反向代理工作中，会通过location功能匹配指定的URI，然后把接收到的符合匹配URI的请求通过proxy_pass抛给定义好的upstream节点池。</p></blockquote><p><strong>使用方法示例：</strong></p><p>（1）将匹配URI为name的请求抛给<a href="http://127.0.0.1/remote/">http://127.0.0.1/remote/</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /name/ &#123;</span><br><span class="line">proxy_pass http://127.0.0.1/remote/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）将匹配URI为some&#x2F;path的请求抛给<a href="http://127.0.0.1/">http://127.0.0.1</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /some/path/ &#123;</span><br><span class="line">proxy_pass http://127.0.0.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）将匹配URI为name的请求应用指定的rewrite规则，然后抛给<a href="http://127.0.0.1/">http://127.0.0.1</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /name/ &#123;</span><br><span class="line">rewrite /name/( [^/]+ )  /username=<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">proxy_pass http://127.0.0.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-6-2-2-http-proxy模块参数"><a href="#1-6-2-2-http-proxy模块参数" class="headerlink" title="1.6.2.2 http proxy模块参数"></a>1.6.2.2 http proxy模块参数</h4><p><img src="/articles/2018/08/22/nginxfanxiangdaili/2.png"></p><h2 id="1-7-反向代理多虚拟主机节点服务器"><a href="#1-7-反向代理多虚拟主机节点服务器" class="headerlink" title="1.7 反向代理多虚拟主机节点服务器"></a>1.7 反向代理多虚拟主机节点服务器</h2><h3 id="1-7-1-解决域名优先级和ip问题"><a href="#1-7-1-解决域名优先级和ip问题" class="headerlink" title="1.7.1 解决域名优先级和ip问题"></a>1.7.1 解决域名优先级和ip问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="comment">#这是反向代理时，节点服务器获取用户真实IP的必要功能配置</span></span><br></pre></td></tr></table></figure><h4 id="1-7-1-1-修改配置文件"><a href="#1-7-1-1-修改配置文件" class="headerlink" title="1.7.1.1 修改配置文件"></a>1.7.1.1 修改配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# vim conf/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream www_server &#123;</span><br><span class="line">        server 192.168.131.101 weight=1;</span><br><span class="line">        server 192.168.131.102 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  bbs.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://www_server;</span><br><span class="line">        proxy_set_header host <span class="variable">$host</span>;        <span class="comment">#在代理向后端服务器发送的http请求头中加入host字段信息，用于当后端服务器配置有多个虚拟主机时，可以识别代理的是哪个虚拟主机。这是节点服务器多虚拟主机时的关键配置。</span></span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="comment">#在代理向后端服务器发送的http请求头中加入X-Forwarded-For字段信息，用于后端服务器程序，日志等接收记录真实用户的IP，而不是代理服务器的IP</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其它优化参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# <span class="built_in">cat</span> proxy.conf </span><br><span class="line">proxy_set_header host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header x-forwarded-for <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_connect_timeout 60;</span><br><span class="line">proxy_send_timeout 60;</span><br><span class="line">proxy_read_timeout 60;</span><br><span class="line">proxy_buffer_size 4k;</span><br><span class="line">proxy_buffers 4 32k;</span><br><span class="line">proxy_busy_buffers_size 64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：直接include进配置文件即可！</span></span><br></pre></td></tr></table></figure><h4 id="1-7-1-2-重新加载Nginx服务，并用curl测试检查"><a href="#1-7-1-2-重新加载Nginx服务，并用curl测试检查" class="headerlink" title="1.7.1.2 重新加载Nginx服务，并用curl测试检查"></a>1.7.1.2 重新加载Nginx服务，并用curl测试检查</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# nginx -s reload</span><br><span class="line">[root@localhost nginx]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome bbs 192.168.131.101 </span><br><span class="line">[root@localhost nginx]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome bbs 192.168.131.102 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-7-1-3客户端配置"><a href="#1-7-1-3客户端配置" class="headerlink" title="1.7.1.3客户端配置"></a>1.7.1.3客户端配置</h4><p><strong>修改配置文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    log_format main <span class="string">&#x27;$remote_addr-$remote_user[$time_local]&quot;$request&quot;&#x27;</span>          <span class="comment">#自定义日志格式</span></span><br><span class="line">    <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;&quot;$http_user_agent&quot;&quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/www;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log logs/access_www.log main;            <span class="comment">#启用自定义日志</span></span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  bbs.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/bbs;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log logs/access_bbs.log main;            <span class="comment">#启用自定义日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>重启服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-7-1-4-测试访问"><a href="#1-7-1-4-测试访问" class="headerlink" title="1.7.1.4 测试访问"></a>1.7.1.4 测试访问</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@bbs nginx]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome bbs 192.168.131.101 </span><br><span class="line">[root@bbs nginx]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome bbs 192.168.131.101 </span><br><span class="line">[root@bbs nginx]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome bbs 192.168.131.102 </span><br><span class="line">[root@bbs nginx]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome bbs 192.168.131.101 </span><br><span class="line">[root@bbs nginx]# curl bbs.zhaoshuo.com</span><br><span class="line">welcome bbs 192.168.131.102 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/articles/2018/08/22/nginxfanxiangdaili/3.png"></p><h2 id="1-8-根据URL中的目录地址实现代理转发"><a href="#1-8-根据URL中的目录地址实现代理转发" class="headerlink" title="1.8 根据URL中的目录地址实现代理转发"></a>1.8 根据URL中的目录地址实现代理转发</h2><h3 id="1-8-1-nginx反向代理机器配置"><a href="#1-8-1-nginx反向代理机器配置" class="headerlink" title="1.8.1 nginx反向代理机器配置"></a>1.8.1 nginx反向代理机器配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@bbs ~]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream www_server &#123;</span><br><span class="line">        server 192.168.131.101 weight=1;</span><br><span class="line">   &#125;</span><br><span class="line">    upstream bbs_server &#123;</span><br><span class="line">        server 192.168.131.102 weight=1;</span><br><span class="line">   &#125;</span><br><span class="line">    upstream zzz_server &#123;</span><br><span class="line">        server 192.168.131.105 weight=1;</span><br><span class="line">   &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://www_server;</span><br><span class="line">        proxy_set_header host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">        location /bbs/ &#123;</span><br><span class="line">        proxy_pass http://bbs_server;</span><br><span class="line">        proxy_set_header host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">        location /zzz/ &#123;</span><br><span class="line">        proxy_pass http://zzz_server;</span><br><span class="line">        proxy_set_header host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-2-web1服务端配置"><a href="#1-8-2-web1服务端配置" class="headerlink" title="1.8.2 web1服务端配置"></a>1.8.2 web1服务端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@bbs ~]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    log_format main <span class="string">&#x27;$remote_addr-$remote_user[$time_local]&quot;$request&quot;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;&quot;$http_user_agent&quot;&quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/www;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log logs/access_www.log main;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8-3-web2服务端配置"><a href="#1-8-3-web2服务端配置" class="headerlink" title="1.8.3 web2服务端配置"></a>1.8.3 web2服务端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  bbs.zhaoshuo.com;</span><br><span class="line">        location /bbs/ &#123;</span><br><span class="line">            root   html/bbs;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意路径的使用</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /usr/local/nginx/html/bbs/bbs/index.html </span><br><span class="line">welcome to bbs</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8-4-web3服务端配置"><a href="#1-8-4-web3服务端配置" class="headerlink" title="1.8.4 web3服务端配置"></a>1.8.4 web3服务端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# vim conf/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  zzz.zhaoshuo.com;</span><br><span class="line">        location /zzz/ &#123;</span><br><span class="line">            root   html/zzz;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意路径的使用</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /usr/local/nginx/html/zzz/zzz/index.html </span><br><span class="line">hahaha  zzz</span><br></pre></td></tr></table></figure><h3 id="1-8-5-测试"><a href="#1-8-5-测试" class="headerlink" title="1.8.5 测试"></a>1.8.5 测试</h3><p><img src="/articles/2018/08/22/nginxfanxiangdaili/4.png"><br><img src="/articles/2018/08/22/nginxfanxiangdaili/5.png"><br><img src="/articles/2018/08/22/nginxfanxiangdaili/6.png"></p><h2 id="1-9-根据客户端的设备（user-agent）转发实践需求"><a href="#1-9-根据客户端的设备（user-agent）转发实践需求" class="headerlink" title="1.9 根据客户端的设备（user_agent）转发实践需求"></a>1.9 根据客户端的设备（user_agent）转发实践需求</h2><h3 id="1-9-1-根据客户端设备（user-agent）转发请求"><a href="#1-9-1-根据客户端设备（user-agent）转发请求" class="headerlink" title="1.9.1 根据客户端设备（user_agent）转发请求"></a>1.9.1 根据客户端设备（user_agent）转发请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">&quot;MSIE&quot;</span>)</span><br><span class="line"><span class="comment">#如果请求的浏览器为微软IE浏览器（MSIE），则让请求由static_pools池处理</span></span><br><span class="line">&#123;</span><br><span class="line">proxy_pass http://static_pools;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">&quot;Chrome&quot;</span>)</span><br><span class="line"><span class="comment">#如果请求的浏览器为谷歌浏览器（Chrome），则让请求由upload_pools池处理</span></span><br><span class="line">&#123;</span><br><span class="line">proxy_pass http：//upload_pools;</span><br><span class="line">&#125;</span><br><span class="line">proxy_pass http://default_pools;</span><br><span class="line"><span class="comment">#其他客户端，由default_pools处理</span></span><br><span class="line">include proxy.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>除了针对浏览器外，上述“$http_user_agent”变量也可针对移动端，比如安卓，苹果，Ipad设备进行匹配，去请求指定的服务器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">&quot;android&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">proxy_pass http://android_pools;    <span class="comment">#这里是android服务器池</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">&quot;iphone&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">proxy_pass http://iphone_pools;    <span class="comment">#这里是iphone服务器池</span></span><br><span class="line">&#125;</span><br><span class="line">proxy_pass http://pc_pools;     <span class="comment">#这里是默认的pc服务器池</span></span><br><span class="line">include extra/proxy.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-0-根据文件扩展名实现代理转发"><a href="#2-0-根据文件扩展名实现代理转发" class="headerlink" title="2.0 根据文件扩展名实现代理转发"></a>2.0 根据文件扩展名实现代理转发</h2><h3 id="2-0-1-相关server配置"><a href="#2-0-1-相关server配置" class="headerlink" title="2.0.1  相关server配置"></a>2.0.1  相关server配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先看看location方法的匹配规则，如下：</span></span><br><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|css|js)$ &#123;</span><br><span class="line">proxy_pass http://static_pools;</span><br><span class="line">include proxy.conf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#下面是if语句方法的匹配规则：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_uri</span> ~* <span class="string">&quot;.*\.(php|php5)$&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">proxy_pass http://php_server_pools;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_uri</span> ~* <span class="string">&quot;.*\.(jsp|jsp*|do|do*)$&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">proxy_pass http://java_server_pools;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-0-2根据扩展名转发"><a href="#2-0-2根据扩展名转发" class="headerlink" title="2.0.2根据扩展名转发"></a>2.0.2根据扩展名转发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|css|js)$ &#123;</span><br><span class="line">proxy_pass http://static_pools;</span><br><span class="line">include proxy.conf;</span><br><span class="line">&#125;</span><br><span class="line">location ~ .*\.(php|php3|php5)$ &#123;</span><br><span class="line">proxy_pass http://dynamic_pools;</span><br><span class="line">include proxy.conf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-Nginx负载均衡检测节点状态"><a href="#2-1-Nginx负载均衡检测节点状态" class="headerlink" title="2.1 Nginx负载均衡检测节点状态"></a>2.1 Nginx负载均衡检测节点状态</h2><blockquote><p>淘宝技术团队开发了一个Tengine（Nginx的分支）模块Nginx_upstream_check_module,用于提供主动式后端服务器健康检查。通过它可以检测后端realserver的健康状态，如果后端realserver不可用，则所有的请求就不会转发到该节点上。<br>Tengine原生支持这个模块，而Nginx则需要通过打补丁的方式将该模块添加到Nginx中。补丁下载地址：<a href="https://github.com/yaoweibin/nginx_upstream_check_module%E3%80%82">https://github.com/yaoweibin/nginx_upstream_check_module。</a></p></blockquote><h3 id="2-1-1-安装nginx-upstream-check-module模块"><a href="#2-1-1-安装nginx-upstream-check-module模块" class="headerlink" title="2.1.1 安装nginx_upstream_check_module模块"></a>2.1.1 安装nginx_upstream_check_module模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -V          <span class="comment">#查看版本号和详细信息</span></span><br><span class="line">nginx version: nginx/1.10.2</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载补丁包</span></span><br><span class="line">[root@localhost ~]# wget https://codeload.github.com/yaoweibin/nginx_upstream_check_module/zip/master</span><br><span class="line">[root@localhost ~]# unzip master        <span class="comment">#解压 unzip命令需yum安装</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg  install.log  install.log.syslog  master  nginx-1.10.2.tar.gz  nginx_upstream_check_module-master</span><br><span class="line">[root@localhost ~]# <span class="built_in">mv</span> ~/nginx_upstream_check_module-master /usr/src/</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为是对源程序打补丁，所以还需要Nginx源程序</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/src/nginx-1.10.2/</span><br><span class="line">[root@localhost nginx-1.10.2]# patch -p0 &lt; /usr/src/nginx_upstream_check_module-master/check_1.9.2+.patch</span><br><span class="line">patching file src/http/modules/ngx_http_upstream_hash_module.c</span><br><span class="line">patching file src/http/modules/ngx_http_upstream_ip_hash_module.c</span><br><span class="line">patching file src/http/modules/ngx_http_upstream_least_conn_module.c</span><br><span class="line">patching file src/http/ngx_http_upstream_round_robin.c</span><br><span class="line">patching file src/http/ngx_http_upstream_round_robin.h</span><br><span class="line"></span><br><span class="line"><span class="comment">#备份源安装程序</span></span><br><span class="line">[root@localhost nginx-1.10.2]# <span class="built_in">cd</span> /usr/local/</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">ls</span></span><br><span class="line">bin  etc  games  include  lib  lib64  libexec  nginx  sbin  share  src</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">mv</span> nginx&#123;,.ori&#125;</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">ls</span></span><br><span class="line">bin  etc  games  include  lib  lib64  libexec  nginx.ori  sbin  share  src</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新进行编译，编译的参数要和以前一致，最后加上 --add-module=/usr/src/nginx_upstream_check_module-master/</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">cd</span> /usr/src/nginx-1.10.2/</span><br><span class="line">[root@localhost nginx-1.10.2]# ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --add-module=/usr/src/nginx_upstream_check_module-master &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.10.2]# /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.10.2</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --add-module=/usr/src/nginx_upstream_check_module-master/</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝源配置文件到当前Nginx的安装目录下</span></span><br><span class="line">[root@localhost nginx-1.10.2]# <span class="built_in">cd</span> /usr/local/</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">pwd</span></span><br><span class="line">/usr/local</span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">cp</span> </span><br><span class="line">bin/       games/     lib/       libexec/   nginx.ori/ share/     </span><br><span class="line">etc/       include/   lib64/     nginx/     sbin/      src/       </span><br><span class="line">[root@localhost <span class="built_in">local</span>]# <span class="built_in">cp</span> nginx.ori/conf/nginx.conf nginx/conf</span><br><span class="line"><span class="built_in">cp</span>: overwrite `nginx/conf/nginx.conf<span class="string">&#x27;? y</span></span><br><span class="line"><span class="string">[root@localhost local]# /usr/local/nginx/sbin/nginx -t</span></span><br><span class="line"><span class="string">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span></span><br><span class="line"><span class="string">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-配置Nginx健康检查"><a href="#2-1-2-配置Nginx健康检查" class="headerlink" title="2.1.2 配置Nginx健康检查"></a>2.1.2 配置Nginx健康检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream www_server &#123;</span><br><span class="line">server 192.168.131.101 weight=1;</span><br><span class="line">   &#125;</span><br><span class="line">    upstream bbs_server &#123;</span><br><span class="line">server 192.168.131.102 weight=1;</span><br><span class="line">check interval=3000 rise=2 fall=5 <span class="built_in">timeout</span>=1000 <span class="built_in">type</span>=http;       <span class="comment">#对bbs服务器池开启健康监测</span></span><br><span class="line">   &#125;</span><br><span class="line">    upstream zzz_server &#123;</span><br><span class="line">server 192.168.131.105 weight=1;</span><br><span class="line">   &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">proxy_pass http://www_server;</span><br><span class="line">proxy_set_header host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">        location /bbs/ &#123;</span><br><span class="line">proxy_pass http://bbs_server;</span><br><span class="line">proxy_set_header host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">check_status;                                            <span class="comment">#启动健康检查模块</span></span><br><span class="line">access_log off;                                          <span class="comment">#关闭此location的访问日志记录</span></span><br><span class="line">      &#125;</span><br><span class="line">        location /zzz/ &#123;</span><br><span class="line">proxy_pass http://zzz_server;</span><br><span class="line">proxy_set_header host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">check interval=3000 rise=2 fall=5 <span class="built_in">timeout</span>=1000 <span class="built_in">type</span>=http; </span><br><span class="line">上面配置的意思时，对static_pools这个负载均衡条目中的所有节点，每隔3秒检测一次，请求2次正常则标记realserver状态为up，如果检测5次都失败，则标记realserver的状态为down,超时时间为1秒，检查的协议是HTTP。 </span><br></pre></td></tr></table></figure><p><strong>启动服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx </span><br><span class="line">[root@localhost ~]# ss -antup | grep nginx</span><br><span class="line">tcp    LISTEN     0      128                    *:80                    *:*      <span class="built_in">users</span>:((&quot;nginx&quot;,<span class="number">3673</span>,<span class="number">6</span>),(&quot;nginx&quot;,<span class="number">3674</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意此处必须重启Nginx，不能重新加载</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p><img src="/articles/2018/08/22/nginxfanxiangdaili/7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx详细讲解</title>
      <link href="/articles/2018/08/16/nginxxiangxijiangjie/"/>
      <url>/articles/2018/08/16/nginxxiangxijiangjie/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="Nginx详细讲解"><a href="#Nginx详细讲解" class="headerlink" title="Nginx详细讲解"></a>Nginx详细讲解</h1><h2 id="一，Nginx是什么？"><a href="#一，Nginx是什么？" class="headerlink" title="一，Nginx是什么？"></a>一，Nginx是什么？</h2><blockquote></blockquote><ul><li>nginx是一个开源的，支持高性能，高并发的www服务和代理服务软件。</li><li>nginx因具有高并发（特别是静态资源），占用系统资源少等特性，且功能丰富而逐渐流行起来。</li><li>nginx不但是一个优秀Web服务软件，还具有反向代理负载均衡功能和缓存服务功能，与lvs负载均衡及Haproxy等专业代理软件相比，Nginx部署起来更为简单，方便；在缓存功能方面，它又类似于Squid等专业的缓存服务软件。</li><li>nginx还有一个分支，由淘宝开发，叫 Tengine</li></ul><h3 id="1-1-Nginx的重要特性"><a href="#1-1-Nginx的重要特性" class="headerlink" title="1.1 Nginx的重要特性"></a>1.1 Nginx的重要特性</h3><blockquote></blockquote><ul><li>支持高并发：能支持几万并发连接（特别是静态小文件业务环境）</li><li>资源消耗少：在3万并发连接下，开启10个Nginx线程消耗的内存不到200MB</li><li>可以做HTTP反向代理及加速缓存，即负载均衡功能，内置对RS节点服务器健康检查功能，这相当于专业的Haproxy软件或LVS的功能</li><li>具备Squid等专业缓存软件等的缓存功能。</li><li>支持异步网络I／O事件模型epoll（linux2.6+）。</li></ul><h3 id="1-2-nginx的特点"><a href="#1-2-nginx的特点" class="headerlink" title="1.2 nginx的特点"></a>1.2 nginx的特点</h3><blockquote><p>作为HTTP服务软件的后起之秀，Nginx与它的老大哥Apache相比有很多改进之处，比如，在性能上，Nginx占用的系统资源更少，能支持更多的并发连接（特别是静态小文件场景下），达到更高的访问效率；在功能上，Nginx不但是一个优秀的Web服务软件，还可以作为反向代理负载均衡及（前端）缓存服务使用；在安装配置上，Nginx更为方便，简单，灵活，可以说，Nginx是一个极具发展潜力的Web服务软件。</p></blockquote><h3 id="1-3-Nginx软件的主要企业功能应用"><a href="#1-3-Nginx软件的主要企业功能应用" class="headerlink" title="1.3 Nginx软件的主要企业功能应用"></a>1.3 Nginx软件的主要企业功能应用</h3><p><strong>（1）作为Web服务软件</strong></p><blockquote><p>Nginx是一个支持高性能，高并发的Web服务软件，它具有很多优秀的特性，作为Web服务器，与Apache相比，Nginx能够支持更多的并发连接访问，但占用的资源更少，效率更高，在功能上也强大了很多，几乎不逊色于Apache。</p></blockquote><p><strong>（2）反向代理或负载均衡服务</strong></p><blockquote><p>在反向代理或负载均衡服务方面，Nginx可以作为Web服务，PHP等动态服务及Memcached缓存的代理服务器，它具有类似专业反向代理软件（如Haproxy）的功能，同时也是一个优秀的邮件代理服务软件，但是Nginx的代理功能还是相对简单了些，特别是支持TCP的代理（Nginx1.9.0版本已经开始支持TCP代理了）</p></blockquote><p><strong>（3）前端业务数据缓存服务</strong></p><blockquote><p>在Web缓存服务方面，Nginx可通过自身的proxy_cache模块实现类Squid等专业缓存软件的功能。</p></blockquote><h3 id="1-4-为什么Nginx总体性能比Apache高？"><a href="#1-4-为什么Nginx总体性能比Apache高？" class="headerlink" title="1.4 为什么Nginx总体性能比Apache高？"></a>1.4 为什么Nginx总体性能比Apache高？</h3><blockquote></blockquote><ul><li>Nginx使用最新的epoll（Linux2.6内核）和kqueue（freebsd）异步网络I／O模型，而Apache使用的是传统的select模型。目前Linux下能够承受高并发访问的Squid，Memcached软件采用的都是epoll模型。</li><li>处理大量连接的读写时，Apache所采用的select同步网络I／O模型比较低效。</li></ul><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/1.png"></p><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/2.png"></p><p><strong>如何正确选择Web服务器</strong></p><blockquote></blockquote><ul><li>静态业务：若是高并发场景，尽量采用Nginx或Lighttpd，二者首选Nginx。</li><li>动态业务：理论上采用Nginx和Apache均可，建议选择Nginx，为了避免相同业务的服务软件多样化，增加额外- 维护成本。动态业务可以由Nginx兼做前端代理，再根据页面元素的类型或目录，转发到后端相应的服务器进行处理。</li><li>既有静态业务又有动态业务：采用Nginx</li></ul><h2 id="二，nginx的编译安装部署"><a href="#二，nginx的编译安装部署" class="headerlink" title="二，nginx的编译安装部署"></a>二，nginx的编译安装部署</h2><h3 id="2-1-编译安装和安装所需的支持包"><a href="#2-1-编译安装和安装所需的支持包" class="headerlink" title="2.1 编译安装和安装所需的支持包"></a>2.1 编译安装和安装所需的支持包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y pcre-devel openssl-devel</span><br><span class="line">[root@localhost ~]# useradd -s /sbin/nologin -M nginx       <span class="comment">#创建程序用户</span></span><br><span class="line">[root@localhost ~]# tar xf nginx-1.10.2.tar.gz -C /usr/src/     <span class="comment">#解压</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/src/nginx-1.10.2/</span><br><span class="line">[root@localhost nginx-1.10.2]# ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module &amp;&amp; make &amp;&amp; make install       <span class="comment">#编译安装</span></span><br><span class="line">等待编译......</span><br><span class="line">[root@localhost nginx]# <span class="built_in">ln</span> -s /usr/local/nginx/sbin/* /usr/local/sbin/      <span class="comment">#做软连接，让环境变量能找到</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>web排错三部曲客户端排查的思路</strong></p><p><strong>第一步，在客户端上ping服务器端IP，命令如下：</strong></p><p><code>ping 10.0.0.8</code>排除物理线路问题影响</p><p><strong>第二步，在客户端上telnet服务器端IP，端口，命令如下：</strong></p><p><code>telnet 10.0.0.8 80</code>排除防火墙等得影响</p><p><strong>第三步，在客户端使用wget命令检测，如下：</strong></p><p><code>wget 10.0.0.8(curl -I 10.0.0.8)</code>模拟用户访问，排除http服务自身问题，根据输出在排错</p><h3 id="2-2-nginx主配置文件nginx-conf"><a href="#2-2-nginx主配置文件nginx-conf" class="headerlink" title="2.2 nginx主配置文件nginx.conf"></a>2.2 nginx主配置文件nginx.conf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# <span class="built_in">pwd</span></span><br><span class="line">/usr/local/nginx/conf</span><br><span class="line">[root@localhost conf]# <span class="built_in">ls</span></span><br><span class="line">fastcgi.conf            koi-utf             nginx.conf           uwsgi_params</span><br><span class="line">fastcgi.conf.default    koi-win             nginx.conf.default   uwsgi_params.default</span><br><span class="line">fastcgi_params          mime.types          scgi_params          win-utf</span><br><span class="line">fastcgi_params.default  mime.types.default  scgi_params.default</span><br><span class="line"></span><br><span class="line">[root@localhost conf]# egrep -v <span class="string">&quot;#|^$&quot;</span> nginx.conf.default &gt; nginx.conf      <span class="comment">#去掉包含#号和空行的内容</span></span><br><span class="line"></span><br><span class="line">[root@localhost conf]# vim nginx.conf           <span class="comment">#打开nginx的配置文件</span></span><br><span class="line">worker_processes  1;        <span class="comment">#nginx工作的进程个数（刚开始有几核就写几，不能超过核数的二倍）</span></span><br><span class="line"><span class="comment">#events函数是事件函数</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;       <span class="comment">#进程里的工作的线程个数（上限为65535，通常设置为20480）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#http函数为web服务模块</span></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   <span class="comment">#Nginx支持的媒体类型库文件包含（include引入的意思，相对于配置文件当前路径）</span></span><br><span class="line">    default_type  application/octet-stream;         <span class="comment">#默认媒体类型</span></span><br><span class="line">    sendfile        on;         <span class="comment">#文件的高效传输，默认开启</span></span><br><span class="line">    keepalive_timeout  65;      <span class="comment">#连接保持持续65秒（连接超时）</span></span><br><span class="line">    <span class="comment">#server函数代表一个虚拟网站</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;        <span class="comment">#socket进程的监听端口</span></span><br><span class="line">        server_name  localhost;         <span class="comment">#域名</span></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html;        <span class="comment">#站点的根目录（相对于nginx安装路径），root是根的意思</span></span><br><span class="line">            index  index.html index.htm;    <span class="comment">#指定网站的首页是哪个网页名，多个用空格分开</span></span><br><span class="line">        &#125;   </span><br><span class="line">        error_page   500 502 503 504  /50x.html;    <span class="comment">#出现对应的http状态码时，使用50x.html回应客户</span></span><br><span class="line">        location = /50x.html &#123;          <span class="comment">#Location区块开始，访问50x.html</span></span><br><span class="line">            root   html;        <span class="comment">#指定对应的站点目录为html</span></span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-启动进程"><a href="#2-3-启动进程" class="headerlink" title="2.3 启动进程"></a>2.3 启动进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# nginx        <span class="comment">#没配置软件接则要绝对路径启动</span></span><br><span class="line">[root@localhost conf]# ss -antup | grep 80</span><br><span class="line">tcp    LISTEN     0      128                    *:80                    *:*      <span class="built_in">users</span>:((&quot;nginx&quot;,<span class="number">3555</span>,<span class="number">6</span>),(&quot;nginx&quot;,<span class="number">3556</span>,<span class="number">6</span>))</span><br><span class="line">tcp    ESTAB      0      0        192.168.131.132:22        192.168.131.1:60808  <span class="built_in">users</span>:((&quot;sshd&quot;,<span class="number">945</span>,<span class="number">3</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-测试网站搭建"><a href="#2-4-测试网站搭建" class="headerlink" title="2.4 测试网站搭建"></a>2.4 测试网站搭建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# <span class="built_in">ls</span></span><br><span class="line">client_body_temp  conf  fastcgi_temp  html  logs  proxy_temp  sbin  scgi_temp  uwsgi_temp</span><br><span class="line">[root@localhost nginx]# <span class="built_in">cd</span> html/</span><br><span class="line">[root@localhost html]# <span class="built_in">rm</span> -rf *</span><br><span class="line">[root@localhost html]# <span class="built_in">echo</span> <span class="string">&quot;you are welcome&quot;</span> &gt; index.html</span><br><span class="line">[root@localhost html]# <span class="built_in">ls</span></span><br><span class="line">index.html</span><br><span class="line">[root@localhost html]# <span class="built_in">echo</span> <span class="string">&quot;`hostname -I` www.yunjisuan.com&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line">[root@localhost html]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.131.132  www.yunjisuan.com</span><br><span class="line"></span><br><span class="line">模拟访问：</span><br><span class="line">[root@localhost html]# curl www.yunjisuan.com</span><br><span class="line">you are welcome</span><br></pre></td></tr></table></figure><p><strong>修改配置文件，nginx服务要重启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# /usr/local/nginx/sbin/nginx -s reload            <span class="comment">#平滑重启</span></span><br><span class="line">[root@localhost html]# /usr/local/nginx/sbin/nginx -s stop              <span class="comment">#关闭服务</span></span><br><span class="line">[root@localhost html]# /usr/local/nginx/sbin/nginx -t                   <span class="comment">#验证配置文件是否正确</span></span><br></pre></td></tr></table></figure><p><strong>在windows上测试</strong><br><code>C:\Windows\System32\drivers\etc映射文件路径</code></p><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/3.png"></p><p><strong>测试成功</strong></p><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/4.png"></p><h3 id="2-5-同时搭建多个网站"><a href="#2-5-同时搭建多个网站" class="headerlink" title="2.5 同时搭建多个网站"></a>2.5 同时搭建多个网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim /usr/local/nginx/conf/nginx.conf         <span class="comment">#打开配置文件</span></span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;                                            <span class="comment">#多添加两个server模块</span></span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  bbs.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/bbs;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  blog.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/blog;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost conf]# /usr/local/nginx/sbin/nginx -s reload            <span class="comment">#平滑重启</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/local/nginx/html/</span><br><span class="line">[root@localhost html]# <span class="built_in">mkdir</span> bbs blog               <span class="comment">#创建网页目录</span></span><br><span class="line">[root@localhost html]# <span class="built_in">echo</span> <span class="string">&quot;`hostname -I` hahahaha&quot;</span> &gt; bbs/index.html               <span class="comment">#添加内容</span></span><br><span class="line">[root@localhost html]# <span class="built_in">echo</span> <span class="string">&quot;`hostname -I` hello welcome&quot;</span> &gt; blog/index.html</span><br><span class="line"></span><br><span class="line">[root@localhost html]# vim /etc/hosts           <span class="comment">#添加映射</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.131.132  www.yunjisuan.com bbs.yunjisuan.com blog.yunjisuan.com</span><br><span class="line"></span><br><span class="line">开始测试是否成功：</span><br><span class="line">[root@localhost html]# curl www.yunjisuan.com</span><br><span class="line">you are welcome</span><br><span class="line">[root@localhost html]# curl bbs.yunjisuan.com</span><br><span class="line">192.168.131.132  hahahaha</span><br><span class="line">[root@localhost html]# curl blog.yunjisuan.com</span><br><span class="line">192.168.131.132  hello welcome</span><br><span class="line">[root@localhost html]# curl 192.168.131.132 <span class="comment">#当系统分不清找谁时，优先级从上往下，默认找第一个server模块</span></span><br><span class="line">you are welcome</span><br></pre></td></tr></table></figure><p><code>curl -v www.yunjisuan.com</code>查看报头</p><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/5.png"></p><p><strong>一个web服务器搭建多个网站有三种方法</strong></p><blockquote><p>1， 基于不同域名的虚拟网站<br>2， 基于不同监听端口的虚拟网站<br>3， 基于不同ip的虚拟网站</p></blockquote><h3 id="2-6-禁止非法访问操作"><a href="#2-6-禁止非法访问操作" class="headerlink" title="2.6 禁止非法访问操作"></a>2.6 禁止非法访问操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  bbs.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/bbs;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;             <span class="comment">#加个参数，实现默认优先级最高</span></span><br><span class="line">        server_name  blog.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                <span class="built_in">return</span> 403;                 <span class="comment">#用户访问到这会跳出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost html]# /usr/local/nginx/sbin/nginx -s reload                <span class="comment">#平滑重启</span></span><br><span class="line"></span><br><span class="line">[root@localhost html]# curl 192.168.131.132             <span class="comment">#ip访问就出现错误</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=<span class="string">&quot;white&quot;</span>&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx/1.10.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">如果用域名访问，DNS解析会追查用户的位置，判断是否为合法用户，报头会记录访问用户的信息，如：系统型号，访问时间。所以，黑客就不会用域名来访问网站，所以以上搭建一个防黑客操作。黑客用ip访问，修改默认优先级，使之强制跳转到default_server模块，报错403。</span><br></pre></td></tr></table></figure><h3 id="2-7-include用法"><a href="#2-7-include用法" class="headerlink" title="2.7 include用法"></a>2.7 include用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/local/nginx/conf/</span><br><span class="line">[root@localhost conf]# <span class="built_in">ls</span></span><br><span class="line">fastcgi.conf          fastcgi_params.default  mime.types          nginx.conf.default   uwsgi_params</span><br><span class="line">fastcgi.conf.default  koi-utf                 mime.types.default  scgi_params          uwsgi_params.default</span><br><span class="line">fastcgi_params        koi-win                 nginx.conf          scgi_params.default  win-utf</span><br><span class="line">[root@localhost conf]# <span class="built_in">mkdir</span> extra          <span class="comment">#创建一个目录</span></span><br><span class="line">[root@localhost conf]# vim extra/bbs.conf           <span class="comment">#单独创建bbs网站配置文件</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  bbs.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/bbs;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">[root@localhost conf]# vim extra/www.conf           <span class="comment">#单独创建一个www网站配置文件</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vim /usr/local/nginx/conf/nginx.conf            <span class="comment">#打开原配置文件</span></span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    include extra/bbs.conf;                 <span class="comment">#使用include导入</span></span><br><span class="line">    include extra/www.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        server_name  blog.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                <span class="built_in">return</span> 403;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost conf]# curl www.yunjisuan.com           <span class="comment">#配置成功</span></span><br><span class="line">you are welcome</span><br><span class="line">[root@localhost conf]# curl bbs.yunjisuan.com</span><br><span class="line">192.168.131.132  hahahaha</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-8-Nginx状态信息功能检测"><a href="#2-8-Nginx状态信息功能检测" class="headerlink" title="2.8 Nginx状态信息功能检测"></a>2.8 Nginx状态信息功能检测</h3><h4 id="2-8-1-确认编译时是否设定了此模块"><a href="#2-8-1-确认编译时是否设定了此模块" class="headerlink" title="2.8.1 确认编译时是否设定了此模块"></a>2.8.1 确认编译时是否设定了此模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.10.2]# ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module &amp;&amp; make &amp;&amp; make install       <span class="comment">#编译安装</span></span><br><span class="line">等待编译......</span><br><span class="line"></span><br><span class="line"><span class="comment">##说明</span></span><br><span class="line">--with-http_stub_status_module模块就是状态信息模块</span><br></pre></td></tr></table></figure><h4 id="2-8-2-设定信息模块配置"><a href="#2-8-2-设定信息模块配置" class="headerlink" title="2.8.2 设定信息模块配置"></a>2.8.2 设定信息模块配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vim extra/status.conf            <span class="comment">#创建状态信息配置文件</span></span><br><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  status.yunjisuan.com;</span><br><span class="line">       location / &#123;</span><br><span class="line">          stub_status on;</span><br><span class="line">          access_log off;</span><br><span class="line">          allow 192.168.131.132;</span><br><span class="line">          deny all;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vim /usr/local/nginx/conf/nginx.conf        </span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    include extra/bbs.conf;</span><br><span class="line">    include extra/www.conf;             </span><br><span class="line">    include extra/status.conf;               <span class="comment">#在主配置文件引入</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        server_name  blog.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                <span class="built_in">return</span> 403;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost conf]# /usr/local/nginx/sbin/nginx -s reload        <span class="comment">#平滑重启</span></span><br><span class="line"></span><br><span class="line">[root@localhost conf]# vim /etc/hosts       <span class="comment">#添加映射</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.131.132  www.yunjisuan.com bbs.yunjisuan.com blog.yunjisuan.com status.yunjisuan.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试访问</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# curl status.yunjisuan.com</span><br><span class="line">Active connections: 1       <span class="comment">#表示Nginx正在处理的活动连接</span></span><br><span class="line">server accepts handled requests</span><br><span class="line"> 10 10 10 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0 </span><br></pre></td></tr></table></figure><blockquote><p>第一个server表示Nginx启动到现在1共处理了10个连接<br>第二个accepts表示Nginx启动到现在共成功创建了10次握手<br>请求丢失数&#x3D;（握手数-连接数），可以看出，本次状态显示没有丢失请求。<br>第三个handled requests,表示总共处理了10次请求。<br>Reading为Nginx读取到客户端的Header信息数<br>Writing为Nginx返回给客户端的Header信息数<br>Waiting为Nginx已经处理完正在等候下一次请求指令的驻留连接。在开启keep-alive的情况下，这个值等于active - （reading+writing）</p></blockquote><h3 id="2-9-增加错误日志"><a href="#2-9-增加错误日志" class="headerlink" title="2.9 增加错误日志"></a>2.9 增加错误日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">error_log  logs/error.log;    <span class="comment">#非常简单，一般增加此行即可</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    include extra/www.conf;</span><br><span class="line">    include extra/mail.conf;</span><br><span class="line">    include extra/status.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Nginx访问日志轮询切割脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# <span class="built_in">cat</span> /server/scripts/cut_nginx_log.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#日志切割脚本可挂定时任务，每天00点整执行</span></span><br><span class="line">Dateformat=`<span class="built_in">date</span> +%Y%m%d`</span><br><span class="line">Basedir=<span class="string">&quot;/usr/local/nginx&quot;</span></span><br><span class="line">Nginxlogdir=<span class="string">&quot;<span class="variable">$Basedir</span>/logs&quot;</span></span><br><span class="line">Logname=<span class="string">&quot;access&quot;</span></span><br><span class="line">[ -d <span class="variable">$Nginxlogdir</span> ] &amp;&amp; <span class="built_in">cd</span> <span class="variable">$Nginxlogdir</span> || <span class="built_in">exit</span> 1</span><br><span class="line">[ -f <span class="variable">$&#123;Logname&#125;</span>.<span class="built_in">log</span> ] || <span class="built_in">exit</span> 1</span><br><span class="line">/bin/mv <span class="variable">$&#123;Logname&#125;</span>.<span class="built_in">log</span> <span class="variable">$&#123;Dateformat&#125;</span>_<span class="variable">$&#123;Logname&#125;</span>.<span class="built_in">log</span></span><br><span class="line"><span class="variable">$Basedir</span>/sbin/nginx -s reload</span><br><span class="line">[root@localhost nginx]# <span class="built_in">cat</span> &gt;&gt;/var/spool/cron/root &lt;&lt; <span class="string">KOF</span></span><br><span class="line"><span class="string">#cut nginx access log by Mr.chen</span></span><br><span class="line"><span class="string">00 00 * * * /bin/bash /server/scripts/cut_nginx_log.sh &gt;/dev/null 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure><h2 id="三，Nginx-location"><a href="#三，Nginx-location" class="headerlink" title="三，Nginx location"></a>三，Nginx location</h2><h3 id="3-1-location匹配示例"><a href="#3-1-location匹配示例" class="headerlink" title="3.1 location匹配示例"></a>3.1 location匹配示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# <span class="built_in">cat</span> /usr/local/nginx/conf/extra/www.conf </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        <span class="built_in">return</span> 401;     </span><br><span class="line">        &#125;</span><br><span class="line">    location = / &#123;</span><br><span class="line">        <span class="built_in">return</span> 402;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /images/ &#123;</span><br><span class="line">        <span class="built_in">return</span> 501;</span><br><span class="line">    &#125;</span><br><span class="line">    location /documents/ &#123;</span><br><span class="line">        <span class="built_in">return</span> 403;</span><br><span class="line">    &#125;</span><br><span class="line">    location ^~ /images/ &#123;</span><br><span class="line">        <span class="built_in">return</span> 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">        <span class="built_in">return</span> 500;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong><br>location是nginx非常重要的过滤函数，可以通过正则表达式来匹配到不同url里的uri部分。匹配到不同的uri进入到不同的location，也就可以进到不同的网页<br>。</p></blockquote><h3 id="3-2-匹配的优先顺序如下"><a href="#3-2-匹配的优先顺序如下" class="headerlink" title="3.2 匹配的优先顺序如下"></a>3.2 匹配的优先顺序如下</h3><table><thead><tr><th>顺序</th><th>匹配标识的location</th><th>匹配说明</th></tr></thead><tbody><tr><td>1</td><td>“ location &#x3D; &#x2F; { “</td><td>&#x3D;是精确匹配，没有代表模糊匹配</td></tr><tr><td>1</td><td>“ location &#x3D; &#x2F;images&#x2F; { “</td><td>精确匹配 &#x2F;images&#x2F; ，缺少什么都不行</td></tr><tr><td>2</td><td>“ location ^~ &#x2F;images&#x2F; { “</td><td>先进行字符串的前缀匹配，如果匹配到就不做正则匹配检查。^代表特殊正则</td></tr><tr><td>3</td><td>“ loction ~* .(gif | jpg | jpeg)$ { “</td><td>正则匹配，*为不区分大小写，正则匹配只要含有就被匹配</td></tr><tr><td>4</td><td>“ location &#x2F;documents&#x2F; { “</td><td>前缀型匹配，必须从根开始，才能被匹配。虽然是模糊匹配，但是必须在uri起始位置</td></tr><tr><td>5</td><td>“ location &#x2F; { “</td><td>所有location都不能匹配后的默认匹配原则</td></tr></tbody></table><blockquote><p>提示：优先级一至五。正则匹配高于字符串匹配，低于特殊正则匹配。<br>精确匹配（&#x3D;）&gt; 特殊正则（^<del>）&gt; 普通正则（</del>或~*）&gt;字符串前缀匹配 &gt; 默认匹配（&#x2F;）</p></blockquote><h2 id="四，Nginx-rewrite"><a href="#四，Nginx-rewrite" class="headerlink" title="四，Nginx rewrite"></a>四，Nginx rewrite</h2><h3 id="4-1-什么是Nginx-rewrite？"><a href="#4-1-什么是Nginx-rewrite？" class="headerlink" title="4.1 什么是Nginx rewrite？"></a>4.1 什么是Nginx rewrite？</h3><blockquote><p>和Apache等Web服务软件一样，Nginx rewrite的主要功能也是实现URL地址重写。</p></blockquote><h3 id="4-2-Nginx-rewrite-语法"><a href="#4-2-Nginx-rewrite-语法" class="headerlink" title="4.2 Nginx rewrite 语法"></a>4.2 Nginx rewrite 语法</h3><p>（1）rewrite指令语法</p><p>指令语法：rewrite regex replacement 【flag】；<br>默认值：none<br>应用位置：server，location，if<br>rewrite是实现URL重写的关键指令，根据regex（正则表达式）部分的内容，重定向到replacement部分，结尾是flag标记。下面是一个简单的URL rewrite跳转例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^/(.*) http://www.baidu.com/<span class="variable">$1</span>  permanent;</span><br></pre></td></tr></table></figure><p>（2）regex常用正则表达式说明</p><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/6.png"></p><p>（3）rewrite指令的最后一项参数flag标记的说明</p><table><thead><tr><th>flag标记符号</th><th>说明</th></tr></thead><tbody><tr><td>last</td><td>本条规则匹配完成后，继续向下匹配新的location URI规则（必须写在location外面）</td></tr><tr><td>break</td><td>本条规则匹配完成即终止，不在匹配后面的任何规则</td></tr><tr><td>redirect</td><td>返回302临时重定向，浏览器地址栏不会显示跳转后的URL地址</td></tr><tr><td>permanent</td><td>返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</td></tr></tbody></table><h3 id="4-3-Nginx-rewrite-的企业应用场景"><a href="#4-3-Nginx-rewrite-的企业应用场景" class="headerlink" title="4.3 Nginx rewrite 的企业应用场景"></a>4.3 Nginx rewrite 的企业应用场景</h3><p><strong>Nginx的rewrite功能在企业里应用非常广泛：</strong></p><ul><li>可以调整用户浏览的URL，使其看起来更规范，合乎开发及产品人员的需求。</li><li>为了让搜索引擎收录网站内容，并让用户体验更好,企业会将动态URL地址伪装成静态地址提供服务</li><li>网站换新域名后，让旧域名的访问跳转到新的域名上，例如：让京东的360buy换成了jd.com</li><li>根据特殊变量，目录，客户端的信息进行URL跳转等</li></ul><h3 id="4-4-Nginx-rewrite-301-跳转"><a href="#4-4-Nginx-rewrite-301-跳转" class="headerlink" title="4.4 Nginx rewrite 301 跳转"></a>4.4 Nginx rewrite 301 跳转</h3><blockquote><p>以往我们是通过别名方式实现yunjisuan.com和<a href="http://www.yunjisuan.com访问同一个地址的,事实上,除了这个方式外,还可以使用nginx/">www.yunjisuan.com访问同一个地址的，事实上，除了这个方式外，还可以使用nginx</a> rewrite 301 跳转的方式来实现。实现的配置如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# <span class="built_in">cat</span> conf/extra/www.conf </span><br><span class="line"><span class="comment">#www virtualhost by Mr.chen   </span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.yunjisuan.com;</span><br><span class="line">    root    /var/www/html/wwwcom;</span><br><span class="line">        location / &#123;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#   location = / &#123;</span></span><br><span class="line"><span class="comment">#       return 402;</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line">    location = /images/ &#123;</span><br><span class="line">        <span class="built_in">return</span> 501;</span><br><span class="line">    &#125;</span><br><span class="line">    location /documents/ &#123;</span><br><span class="line">        <span class="built_in">return</span> 403;</span><br><span class="line">    &#125;</span><br><span class="line">    location ^~ /images/ &#123;</span><br><span class="line">        <span class="built_in">return</span> 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">        <span class="built_in">return</span> 500;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        server_name yunjisuan.com;</span><br><span class="line">        rewrite ^/(.*)  http://www.yunjisuan.com/<span class="variable">$1</span>    permanent;</span><br><span class="line">        <span class="comment">#当用户访问yunjisuan.com及下面的任意内容时，都会通过这条rewrite跳转到www.yunjisuan.com对应的地址</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>客户端访问测试结果</strong></p><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/7.png"><br><img src="/articles/2018/08/16/nginxxiangxijiangjie/8.png"></p><h3 id="4-5-实现不同域名的URL跳转"><a href="#4-5-实现不同域名的URL跳转" class="headerlink" title="4.5 实现不同域名的URL跳转"></a>4.5 实现不同域名的URL跳转</h3><p>示例：实现访问<a href="http://mail.yunjisuan.com时跳转到http//www.yunjisuan.com/mail/yunjisuan.html">http://mail.yunjisuan.com时跳转到http://www.yunjisuan.com/mail/yunjisuan.html</a></p><blockquote><p>外部跳转时，使用这种方法可以让浏览器地址变为跳转后的地址，另外，要事先设置<a href="http://www.yunjisuan.com/mail/yunjisuan.html%E6%9C%89%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA%EF%BC%8C%E4%B8%8D%E7%84%B6%E4%BC%9A%E5%87%BA%E7%8E%B0401%E7%AD%89%E6%9D%83%E9%99%90%E9%94%99%E8%AF%AF%E3%80%82">http://www.yunjisuan.com/mail/yunjisuan.html有结果输出，不然会出现401等权限错误。</a></p></blockquote><p>（1）配置Nginx rewrite规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# <span class="built_in">cat</span> conf/extra/mail.conf </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  mail.yunjisuan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /var/www/html/mailcom;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$http_host</span> ~* <span class="string">&quot;^(.*)\.yunjisuan\.com$&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$domain</span> <span class="variable">$1</span>;</span><br><span class="line">        rewrite ^(.*) http://www.yunjisuan.com/<span class="variable">$domain</span>/yunjisuan.html <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/9.png"></p><blockquote><p><strong>说明：</strong><br>$1相当于$?，只能使用一次，值会变，所以用set，把$1的值赋给$domain，使之值的内容固定不便。</p></blockquote><p><strong>客户端访问测试</strong></p><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/10.png"></p><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/11.png"></p><h3 id="4-6-Nginx访问认证"><a href="#4-6-Nginx访问认证" class="headerlink" title="4.6 Nginx访问认证"></a>4.6 Nginx访问认证</h3><blockquote><p>使用账号密码才可以访问网站的功能主要应用在企业内部人员访问的地址上，例如：企业网站后台，MySQL客户端phpmyadmin，企业内部的CRM，WIKI网站平台。</p></blockquote><h4 id="4-6-1-创建密码文件"><a href="#4-6-1-创建密码文件" class="headerlink" title="4.6.1 创建密码文件"></a>4.6.1 创建密码文件</h4><p><strong>我们可以借用apache的htpasswd软件，来创建加密的账号和密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">which</span> htpasswd</span><br><span class="line">/usr/bin/htpasswd</span><br><span class="line">[root@localhost ~]# htpasswd -bc /usr/local/nginx/conf/htpasswd yunjisuan 123123</span><br><span class="line">Adding password <span class="keyword">for</span> user yunjisuan</span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /usr/local/nginx/conf/htpasswd </span><br><span class="line">yunjisuan:D3gxGm9PhHG/2     <span class="comment">#账号密码是加密的（htpasswd是文件的名字）</span></span><br></pre></td></tr></table></figure><h4 id="4-6-2-在虚拟主机配置文件里加入两条配置信息"><a href="#4-6-2-在虚拟主机配置文件里加入两条配置信息" class="headerlink" title="4.6.2 在虚拟主机配置文件里加入两条配置信息"></a>4.6.2 在虚拟主机配置文件里加入两条配置信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/nginx/conf/extra/status.conf </span><br><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  status.yunjisuan.com;</span><br><span class="line">       location / &#123;</span><br><span class="line">          stub_status on;</span><br><span class="line">          access_log off;</span><br><span class="line">          auth_basic <span class="string">&quot;welcome to 161&quot;</span>;       <span class="comment">#加入这条配置</span></span><br><span class="line">          auth_basic_user_file /usr/local/nginx/conf/htpasswd;      <span class="comment">#加入这条配置</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">#配置解释：</span></span><br><span class="line">auth_basic :验证的基本信息选项（后边跟着的双引号里就是验证窗口的名字）</span><br><span class="line">auth_basic_user_file ：验证的用户文件（后边根账号密码文件的绝对路径）</span><br></pre></td></tr></table></figure><h4 id="4-6-3-网页登陆验证"><a href="#4-6-3-网页登陆验证" class="headerlink" title="4.6.3 网页登陆验证"></a>4.6.3 网页登陆验证</h4><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/12.png"><br><img src="/articles/2018/08/16/nginxxiangxijiangjie/13.png"><br><img src="/articles/2018/08/16/nginxxiangxijiangjie/14.png"></p><p>登陆成功</p><h3 id="4-7-访问Nginx时出现状态码“403-forbidden”的原因"><a href="#4-7-访问Nginx时出现状态码“403-forbidden”的原因" class="headerlink" title="4.7 访问Nginx时出现状态码“403 forbidden”的原因"></a>4.7 访问Nginx时出现状态码“403 forbidden”的原因</h3><p>（1）Nginx配置文件里没有配置默认首页参数，或者首页文件在站点目录下没有如下内容：</p><p><code>index index.php index.html index.htm;</code></p><p>（2）站点目录或内部的程序文件没有Nginx用户访问权限</p><p>（3）Nginx配置文件中设置了allow，deny等权限控制，导致客户端没有访问权限。</p><p><strong>开启权限方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/nginx/conf/extra/www.conf </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.yunjisuan.com;</span><br><span class="line">        autoindex on;                   #开启权限的参数</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong><br>添加开启权限的参数之后，当用户访问的界面找不到时，就会从根下给用户看网页，并可以下载，会引发安全问题。nginx默认关闭，apache默认开启。</p></blockquote><p><strong>演示：</strong></p><p>先删除网页文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cd</span> /usr/local/nginx/html/</span><br><span class="line">[root@localhost html]# <span class="built_in">ls</span></span><br><span class="line">bbs  blog  index.html</span><br><span class="line">[root@localhost html]# <span class="built_in">rm</span> -rf index.html </span><br><span class="line">[root@localhost html]# <span class="built_in">ls</span> </span><br><span class="line">bbs  blog</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问网页：显示报错403<br><img src="/articles/2018/08/16/nginxxiangxijiangjie/15.png"><br>而添加了uri之后就会报错404<br><img src="/articles/2018/08/16/nginxxiangxijiangjie/16.png"></p><p>开启权限参数之后再访问：<br><img src="/articles/2018/08/16/nginxxiangxijiangjie/17.png"></p><blockquote><p><strong>说明：</strong><br>会把网站从根开始所有的网页都给用户看，可以下载。所以403报错是被安全机制拒绝。404报错是找不到页面。程序用户对index.html没有权限，也会报错403。存放网页的目录没有执行权限也会报错403。</p></blockquote><p><strong>实现最简单的网页跳转：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# vim conf/nginx.conf</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/www;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name mail.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        rewrite ^/(.*) http://www.zhaoshuo.com/mail/<span class="variable">$1</span> permanent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name bbs.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        rewrite ^/(.*) http://www.zhaoshuo.com/bbs/<span class="variable">$1</span> permanent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name org.zhaoshuo.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">        rewrite ^/(.*) http://www.zhaoshuo.com/org/<span class="variable">$1</span> permanent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost nginx]# <span class="built_in">ls</span> html/www/</span><br><span class="line">bbs  index.html  mail  org</span><br><span class="line">[root@localhost nginx]# <span class="built_in">ls</span> html/www/mail/</span><br><span class="line">index.html</span><br><span class="line">[root@localhost nginx]# <span class="built_in">ls</span> html/www/org/</span><br><span class="line">index.html</span><br><span class="line">[root@localhost nginx]# <span class="built_in">ls</span> html/www/bbs/</span><br><span class="line">index.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/articles/2018/08/16/nginxxiangxijiangjie/18.png"><br><img src="/articles/2018/08/16/nginxxiangxijiangjie/19.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http协议原理</title>
      <link href="/articles/2018/08/14/httpxieyiyuanli/"/>
      <url>/articles/2018/08/14/httpxieyiyuanli/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h1 id="http协议原理"><a href="#http协议原理" class="headerlink" title="http协议原理"></a>http协议原理</h1><h2 id="一，Web服务基础"><a href="#一，Web服务基础" class="headerlink" title="一，Web服务基础"></a>一，Web服务基础</h2><h3 id="1-1http服务重要基础"><a href="#1-1http服务重要基础" class="headerlink" title="1.1http服务重要基础"></a>1.1http服务重要基础</h3><h4 id="1-1-1-用户访问网站基本流程"><a href="#1-1-1-用户访问网站基本流程" class="headerlink" title="1.1.1 用户访问网站基本流程"></a>1.1.1 用户访问网站基本流程</h4><ul><li><input checked="" disabled="" type="checkbox"> 第一步：用户在浏览器里输入网址</li><li><input checked="" disabled="" type="checkbox"> 第二步：域名解析出ip地址（DNS）</li><li><input checked="" disabled="" type="checkbox"> 第三步：浏览器发起一个http协议的请求</li><li><input checked="" disabled="" type="checkbox"> 第四步：web服务器响应用户的请求（域名看的是首页）</li><li><input checked="" disabled="" type="checkbox"> 第五步：用户的浏览器解析web服务器相应的数据包</li><li><input checked="" disabled="" type="checkbox"> 第六步：用户就从浏览器里看到了内容</li></ul><h4 id="1-1-2DNS解析原理"><a href="#1-1-2DNS解析原理" class="headerlink" title="1.1.2DNS解析原理"></a>1.1.2DNS解析原理</h4><blockquote><p>DNS就是区域域名服务。</p></blockquote><p><strong>DNS的递归查询过程（前6步）</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 第一步：当我们输入了一个域名，先去内存里看有没有映射（映射的格式就是IP+域名）</li><li><input checked="" disabled="" type="checkbox"> 第二步：如果内存里没有，就会找本地映射文件hosts</li><li><input checked="" disabled="" type="checkbox"> 第三步：如果hosts文件里没有，就会找本地DNS去要（LDNS，L是local的意思）</li><li><input checked="" disabled="" type="checkbox"> 第四步：DNS也在内存里找，如果找到，就会记录在内存里</li><li><input checked="" disabled="" type="checkbox"> 第五步：如果内存里找不到，DNS就会找映射文件</li><li><input checked="" disabled="" type="checkbox"> 第六步：映射文件里没有，DNS就会去域名记录本文件里查找（域名记录本文件就是文件里记录了哪个域名对应哪个IP）</li><li><input checked="" disabled="" type="checkbox"> 第七步：还找不到，就要请外援。（这步开始就叫迭代查询）</li></ul><p><strong>DNS迭代查询过程</strong></p><blockquote><p>全世界公开的最大的DNS服务器有13个，这种服务器叫做“点”服务器。DNS解析域名的顺序是从右往左，先辨别.com&#x2F;.cn&#x2F;.xxx之类的后缀。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> 第一步：LDNS会从DNS系统的（.）根开始请求<a href="http://www.baidu.com域名的解析,根服务器下面是没有www.baidu.com域名解析记录的,但是根下面有www.baidu.com对应的顶级域.org的解析记录,因此,根会把.org对应的dns服务器地址返回给ldns./">www.baidu.com域名的解析，根服务器下面是没有www.baidu.com域名解析记录的，但是根下面有www.baidu.com对应的顶级域.org的解析记录，因此，根会把.org对应的DNS服务器地址返回给LDNS。</a></li><li><input checked="" disabled="" type="checkbox"> 第二步：LDNS获取到.org对应的DNS服务器地址后，就会去.org服务器请求<a href="http://www.baidu.com域名的解析,而.org服务器下面也没有www.baidu.com域名对应的解析记录,但是有baidu.com域名的解析记录,因此,.org服务器会把baidu.com对应的dns服务器地址返回给ldns/">www.baidu.com域名的解析，而.org服务器下面也没有www.baidu.com域名对应的解析记录,但是有baidu.com域名的解析记录，因此，.org服务器会把baidu.com对应的DNS服务器地址返回给LDNS</a></li><li><input checked="" disabled="" type="checkbox"> 第三步：同理，LDNS获取到baidu.com对应的DNS服务器地址后，就会去baidu.org服务器请求<a href="http://www.baidu.com域名的解析,baidu.com域名对应的dns服务器是该域名的授权dns服务器,这个dns服务器正是企业购买域名时管理解析所在的服务器(也可能是自建的授权dns服务器),这个服务器会有www.baidu.com对应的ip解析记录,如果此时没有,就表示企业的域名人员没有为www.baidu.com域名做解析,即网站还没架设好./">www.baidu.com域名的解析，baidu.com域名对应的DNS服务器是该域名的授权DNS服务器，这个DNS服务器正是企业购买域名时管理解析所在的服务器（也可能是自建的授权DNS服务器），这个服务器会有www.baidu.com对应的IP解析记录，如果此时没有，就表示企业的域名人员没有为www.baidu.com域名做解析，即网站还没架设好。</a></li><li><input checked="" disabled="" type="checkbox"> 第四步：baidu.com域名DNS服务器会把<a href="http://www.baidu.com对应的ip解析记录发给ldns/">www.baidu.com对应的IP解析记录发给LDNS</a></li><li><input checked="" disabled="" type="checkbox"> 第五步：用户就访问到了<a href="http://www.baidu.com网站./">www.baidu.com网站。</a></li></ul><h3 id="1-2http协议"><a href="#1-2http协议" class="headerlink" title="1.2http协议"></a>1.2http协议</h3><ul><li>HTTP协议，为超文本传输协议，是互联网中最常用的一种网络协议。HTTP的重要应用之一是WWW服务。</li><li>HTTP协议是互联网上常用的通信协议之一。</li><li>WWW，全称World Wide Web，常称为Web，中文译为“万维网”。它是目前互联网上最受用户欢迎的信息服务形式。HTTP协议的WWW服务应用的默认端口为80（端口的概念），另外的一个加密的WWW服务应用https的默认端口为443，主要用于网银，支付等和钱相关的业务。</li></ul><h4 id="1-2-2-常见的HTTP请求方法"><a href="#1-2-2-常见的HTTP请求方法" class="headerlink" title="1.2.2 常见的HTTP请求方法"></a>1.2.2 常见的HTTP请求方法</h4><table><thead><tr><th>HTTP方法</th><th>作用描述</th></tr></thead><tbody><tr><td>GET（读）</td><td>客户端请求指定资源信息，服务器返回指定资源</td></tr><tr><td>HEAD</td><td>只请求响应报文中的HTTP首部（单纯的看http数据包的头部）</td></tr><tr><td>POST（写）</td><td>将客户端的数据提交到服务器，例：注册表单（提交请求）</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档内容</td></tr><tr><td>DELETE</td><td>请求服务器删除Request-URI所标识的资源</td></tr><tr><td>MOVE</td><td>请求服务器将制定的页面移至另一个网络地址</td></tr></tbody></table><p><strong>http数据包由头部和主体构成，头部用来装http状态码，主体就是网页。</strong></p><h4 id="1-2-3-HTTP状态码"><a href="#1-2-3-HTTP状态码" class="headerlink" title="1.2.3 HTTP状态码"></a>1.2.3 HTTP状态码</h4><ul><li>HTTP状态码是用来表示Web服务器响应http请求状态的数字代码。每当Web客户端向Web服务器发送一个HTTP请求时，Web服务器都会返回一个状态响应代码。这个状态码是一个三位数字代码，作用是告知Web客户端此次的请求是否成功，或者是否要采取其他的动作方式。</li></ul><p>HTTP协议1.1版本中的状态吗可以分为五大类，如下表：</p><table><thead><tr><th>状态码范围</th><th>作用描述</th></tr></thead><tbody><tr><td>100-199</td><td>用于指定客户端相应的某些动作</td></tr><tr><td>200-299</td><td>用于表示请求成功</td></tr><tr><td>300-399</td><td>用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息</td></tr><tr><td>400-499</td><td>用于指出客户端的错误</td></tr><tr><td>500-599</td><td>用于指出服务器端的错误</td></tr></tbody></table><p><strong>生产场景常见的状态吗及其对应的作用</strong></p><table><thead><tr><th>状态代码</th><th>详细描述说明</th></tr></thead><tbody><tr><td>200～OK</td><td>服务器成功返回网页，这是成功的http请求，返回的标准状态码</td></tr><tr><td>301-Moved Permanently</td><td>永久跳转，所有请求的网页将永久跳转到被设定的新的位置，例如：从baidu.com跳转到<a href="http://www.baidu.com/">www.baidu.com</a></td></tr><tr><td>403-Forbidden</td><td>禁止访问，这个请求是合法的，但是服务器端因为匹配了预先设置的规则而拒绝响应客户端的请求，此类问题一般为服务器或服务权限配置不当所致。</td></tr><tr><td>404-Not Found</td><td>服务器找不到客户端请求的指定页面，可能是客户端请求了服务器上不存在的资源导致</td></tr><tr><td>500-Internal Server Error</td><td>内部服务器错误，服务器遇到了意料不到的情况，不能完成客户的请求。这是一个较为笼统地报错，一般为服务器的设置或者内部程序问题导致。例如SElinux开启，而又没有为http设置规则许可，客户端访问就是500</td></tr><tr><td>502-Bad Gateway</td><td>坏的网关，一般是代理服务器请求后端服务时，后端服务不可用或没有完成响应网关服务器。一般为反向代理服务器下面的节点出问题导致。</td></tr><tr><td>503-Service Unavailable</td><td>服务当前不可用，可能因为服务器超载或停机维护导致，或者是反向代理服务器后面没有可以提供服务的节点</td></tr><tr><td>504-Gateway Timeout</td><td>网关超时，一般是网关代理服务器请求后端服务时，后端服务没有在特定的时间内完成处理请求，一般是服务器过载导致没有在指定的时间内返回数据给前端代理服务器。</td></tr></tbody></table><h4 id="1-2-4-HTTP响应报文介绍"><a href="#1-2-4-HTTP响应报文介绍" class="headerlink" title="1.2.4 HTTP响应报文介绍"></a>1.2.4 HTTP响应报文介绍</h4><p>HTTP响应报文由起始行，响应头部，空行和响应报文主体几个部分组成，和HTTP请求报文格式类似。报文如下表：</p><table><thead><tr><th>报文格式</th><th>报文信息</th></tr></thead><tbody><tr><td>起始行</td><td>协议及版本号 数字状态码 状态信息</td></tr><tr><td>响应头部</td><td>字段1:值1 字段2：值2</td></tr><tr><td>空行</td><td>空白内容</td></tr><tr><td>响应报文主体</td><td>就是html的网页</td></tr></tbody></table><p><strong>下面对响应报文的每个部分逐一阐述：</strong></p><p><strong>（1）起始行</strong></p><blockquote><p>响应报文的起始行，也叫状态行，用来说明服务器响应客户端请求的状况。一般为协议及版本号，数字状态码，状态情况。例如：HTTP&#x2F;1.1 200 OK</p></blockquote><p><strong>（2）响应头部</strong></p><blockquote><p>和请求报文类似，起始行的后面一般有若干个头部字段。每个头部字段都包含一个名字和一个值，两者之间用冒号分隔。头部结尾也是以一个空行结束。</p></blockquote><p><strong>（3）空行</strong></p><blockquote><p>最后一个响应头部信息之后是一个空行，发送回车符和换行符，通知客户端空行下文无头部信息。</p></blockquote><p><strong>（4）响应报文主体</strong></p><blockquote><p>响应报文主体中装载了要返回给客户端的数据。这些数据可以是文本，也可以是二进制的（图片，视频）。</p></blockquote><h4 id="1-2-5-HTTP协议原理及重点分析"><a href="#1-2-5-HTTP协议原理及重点分析" class="headerlink" title="1.2.5 HTTP协议原理及重点分析"></a>1.2.5 HTTP协议原理及重点分析</h4><blockquote><p>HTTP协议属于OSI模型中的第七层应用层协议，HTTP协议的重要应用就是WWW服务应用，下面就以WWW服务应用为例介绍HTTP协议的通信原理了，HTTP协议进行通信时，需要有客户端（即终端用户）和服务端（即Web服务器），在Web客户端向Web服务器发送请求报文之前，先要通过TCP&#x2F;IP协议在Web客户端和服务器之间建立一个TCP&#x2F;IP连接。</p></blockquote><p><strong>过程：</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 用户访问网站的流程</li><li><input checked="" disabled="" type="checkbox"> DNS解析流程细节</li><li><input checked="" disabled="" type="checkbox"> 建立TCP连接过程（TCP&#x2F;IP三次握手原理知识）（11种状态）</li><li><input checked="" disabled="" type="checkbox"> 发送HTTP报文及HTTP请求报文内容细节。</li><li><input checked="" disabled="" type="checkbox"> Web服务器响应客户端请求处理细节（网站集群架构细节）</li><li><input checked="" disabled="" type="checkbox"> 响应HTTP报文及HTTP响应报文的细节</li><li><input checked="" disabled="" type="checkbox"> 关闭TCP连接，涉及TCP&#x2F;IP协议四次挥手原理</li></ul><p><strong>重要知识点汇总</strong></p><ul><li><input checked="" disabled="" type="checkbox"> http协议位于OSI模型中第7层应用层</li><li><input checked="" disabled="" type="checkbox"> http协议的重要应用是www服务。</li><li><input checked="" disabled="" type="checkbox"> 用户上网流程，DNS解析原理流程</li><li><input checked="" disabled="" type="checkbox"> DNS解析获取的IP后，建立TCP连接，然后发送http请求细节和服务器响应细节。</li><li><input checked="" disabled="" type="checkbox"> HTTP请求报文与HTTP响应报文知识</li><li><input checked="" disabled="" type="checkbox"> 到达HTTP服务后请求后端集群节点流程为Nginix–&gt;fastcgi–&gt;PHP–&gt;(数据库，存储等)</li><li><input checked="" disabled="" type="checkbox"> TCP&#x2F;IP协议三次握手和四次挥手原理。</li></ul><h3 id="1-3-http资源"><a href="#1-3-http资源" class="headerlink" title="1.3 http资源"></a>1.3 http资源</h3><h4 id="1-3-1-媒体类型"><a href="#1-3-1-媒体类型" class="headerlink" title="1.3.1 媒体类型"></a>1.3.1 媒体类型</h4><blockquote></blockquote><ul><li>互联网上的数据有很多不同的数据类型，Web服务器会把通过Web传输的每个对象都打上名为MIME类型（MIME Type）的数据格式标签。</li><li>当Web服务器响应HTTP请求时，会为每一个HTTP对象数据加一个MIME类型，当Web浏览器获取到服务器返回的对象时，会去查看相关的MIME类型，进行相应处理。</li><li>MIME类型存在于HTTP响应报文的响应头部信息里，它是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠来分隔。</li></ul><table><thead><tr><th>MIME类型</th><th>文件类型</th></tr></thead><tbody><tr><td>text&#x2F;html</td><td>html htm shtml文本类型</td></tr><tr><td>text&#x2F;css</td><td>css文本类型</td></tr><tr><td>text&#x2F;xml</td><td>xml文本类型</td></tr><tr><td>image&#x2F;gif</td><td>gif图像类型</td></tr><tr><td>image&#x2F;jpeg</td><td>jpeg jpg图像类型</td></tr><tr><td>application&#x2F;javascript</td><td>js文本类型</td></tr><tr><td>text&#x2F;plain</td><td>txt文本类型</td></tr><tr><td>application&#x2F;json</td><td>json文本类型</td></tr><tr><td>text.plain</td><td>txt文本类型</td></tr><tr><td>application&#x2F;json</td><td>json文本类型</td></tr><tr><td>video&#x2F;mp4</td><td>mp4视频类型</td></tr><tr><td>video&#x2F;quicktime</td><td>mov视频类型</td></tr><tr><td>video&#x2F;x-flv</td><td>flv视频类型</td></tr><tr><td>video&#x2F;x-ms-wmv</td><td>wmv视频类型</td></tr><tr><td>video&#x2F;x-msvideo</td><td>avi视频类型</td></tr></tbody></table><blockquote><p><strong>说明</strong><br>PC电脑浏览器上显示的网站，是web前端做的。用户直接接触的客户端就是前端。<br>1，前端包括：web开发，安卓开发，ios开发，VR开发。</p></blockquote><blockquote><p>web开发用到了什么？(1和2写的网页是静态网页，3写的是动态网页)<br>（1），html语言：决定了你的浏览器上显示的具体内容<br>（2），CSS语言：决定了内容的显示格式，例如图片是方的还是圆的。<br>（3），JavaScript语言：不是java。<br>2，后端语言包括：PHP，java，python（前后端都有），c++，c#（前后端都有），Golang</p></blockquote><p><img src="/articles/2018/08/14/httpxieyiyuanli/1.png"></p><h4 id="1-3-2-URL介绍"><a href="#1-3-2-URL介绍" class="headerlink" title="1.3.2 URL介绍"></a>1.3.2 URL介绍</h4><blockquote><p>URL，全称Uniform Resource Location，中文翻译为统一资源定位符，就叫（用户的）请求，也被称为网页地址（网址）。如同在网络上的门牌，它是因特网上标准的资源唯一地址。</p></blockquote><p><strong>URL的组成</strong></p><blockquote><p>URL是由域名+后边的部分(页面的存储路径，这个部分成为URi）<br>（URL&#x3D;域名+URi）</p></blockquote><h4 id="1-3-4-静态网页资源"><a href="#1-3-4-静态网页资源" class="headerlink" title="1.3.4 静态网页资源"></a>1.3.4 静态网页资源</h4><p><strong>静态网页资源介绍</strong></p><blockquote><p>在网站设计中，纯粹HTML格式的网页（可以包含图片，视频，JS（前端功能实现），CSS（样式）等）通常被称为“静态网页”，早期的网站大多都是静态的。静态网页是相对于动态网页而言的，是指没有后台数据库，不含程序（如php，jsp，asp(C#)）和可交互的网页。</p></blockquote><p><strong>静态网页资源特点</strong></p><blockquote></blockquote><ul><li>静态网页资源的特点是，开发者编写的是什么，它显示的就是什么，一旦编写完成，就不会有任何改变。静态网页的维护和更新相对比较麻烦，每个不同的网页都需要单独编集更新，静态网页一般适用于更新较少的宣传展示型网站（例如：酒，家具，猪饲料等的宣传网站），是早期很多中小网站展示的形式。</li><li>静态网页资源的对应程序及资源文件的常见扩展名为：<br>纯文本类程序或文件，如htm，html，xml，shtml，js，css等<br>图片类文件或数据文档，如jpg，gif，png，bmp，txt，doc，ppt等<br>视频类流媒体文件，如mp4，swf，avi，wmv，flv等</li></ul><p><strong>静态网页资源有几个重要的特征：</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 每个网页都有一个固定的URL地址，且URL一般以.html,.html,shtml等常见形式为后缀，而且地址中不含邮问号“？”或“&amp;”等特殊符号。</li><li><input checked="" disabled="" type="checkbox"> 网页内容一经发布到网站服务器上，无论是否有用户访问，每个网页的内容都是保存在网站服务器文件系统上的，也就是说，静态网页是实实在在保存在服务器上的文件实体，每个网页都是一个独立的文件。</li><li><input checked="" disabled="" type="checkbox"> 网页内容是固定不变的，因此，容易被搜索引擎收录（容易被用户找到）（优点）</li><li><input checked="" disabled="" type="checkbox"> 网页没有数据库支持，在网站制作和维护方面工作量较大，因此当网站信息量很大时完全依靠静态网页制作的方式比较困难（缺点）</li><li><input checked="" disabled="" type="checkbox"> 网页的交互性较差，在程序功能实现方面有较大的限制（缺点）</li><li><input checked="" disabled="" type="checkbox"> 网页程序在用户浏览器端解析，如IE浏览器，程序解析效率很高，由于服务端不进行解析，并且不需要读取数据库，因此服务器端可以接受更多的并发访问。当客户端向服务器请求数据时，服务器直接把数据从磁盘文件系统上返回（不做任何解析），待客户端拿到数据后，在浏览器端解析展现出来（优点)</li></ul><blockquote><p><strong>静态网页的核心特点，如下：</strong><br>1）程序在客户浏览器端解析，不读取后端数据库，因此性能和效率很高。<br>2）因为后端没有数据库支持，所以和用户的交互性较差，功能实现也很少。</p></blockquote><p><strong>有关静态网页的架构思想</strong></p><pre><code>    在高并发，高访问量的场景下做架构优化，涉及的关键环节就是把动态网页转成静态网页，而不直接请求数据库和动态服务器，并且可以把静态内容推送到前端缓存（或CDN）中提供服务，这样就可以提升用户体验，节约服务器和维护成本。</code></pre><h4 id="1-3-5-动态网页资源"><a href="#1-3-5-动态网页资源" class="headerlink" title="1.3.5 动态网页资源"></a>1.3.5 动态网页资源</h4><p><strong>动态网页资源介绍</strong></p><p>所谓的动态网页是与静态网页相对而言的，也就是说，动态网页的URL后缀不是.htm,.html,.shtml,.xml,.js,.css等静态网页的常见后缀扩展名形式，而是以.asp,.aspx,.php,.js,.do,.cgi等形式作为后缀的，并且一般在动态网页网址中会有标志性的符号–“？，&amp;”，此外，在大多数情况下后端都需要有数据库支持等。</p><p><strong>动态网页资源特点</strong></p><p>1）网页扩展名后缀常见为：.asp,.aspx,.php,.jsp,.do,cgi等<br>2）网页一般以数据库技术为基础，大大降低了网站维护的工作量<br>3）采用动态网页技术的网站可以实现更多的功能，如用户注册，用户登录，在线调查，投票，用户管理，订单管理，发博文等等<br>4）动态网页并不是独立存在于服务器上的网页文件，当用户请求服务器上的动态程序时，服务器解析这些程序并可能读取数据库返回一个完整的网页内容。<br>5）动态网页中的“？”在搜索引擎的收录方面存在一定问题，搜索引擎一般不会从一个网站的数据库中访问全部网页，或者出于技术等方面的考虑，搜索蜘蛛一般不会去抓去网址中“？”后面的内容，因此在企业通过搜索引擎进行推广时，需要针对采用动态网页的网站做一定的技术处理（伪静态技术），以便适应搜索引擎的抓取要求。<br>6）程序在服务器端解析，这相当于顾客点餐，饭店厨师做饭做菜，耗时长，效率低。由于程序在服务端解析，因此，会消耗大量的CPU和内存，I&#x2F;O等资源，并且多数还要读取数据库等服务，因此，其访问效率远不如静态网页，在服务端解析动态程序的服务常见的有PHP引擎，Java容器（tomcat,resin,jboss,weblogic）</p><p><strong>有关动态网页的架构思想</strong></p><ul><li>一般来说，静态网页的性能效率是动态网页的10～30倍。且动态网站效率很差，并发能力也很低，在高并发场景中，应尽可能转换成静态网页提供服务。动态转静态几乎是所有高并发网站必备的架构方案思路，也是高级架构师的职责所在。</li><li>此外，动态转静态也要根据业务需求设计，例如，对于更新频繁的网站如果设计不好就可能会产生数据不一致的情况，即用户看到的数据不是网站最新的内容，而是静态的内容。</li></ul><h4 id="1-3-6-生产Web架构优化实战方案"><a href="#1-3-6-生产Web架构优化实战方案" class="headerlink" title="1.3.6 生产Web架构优化实战方案"></a>1.3.6 生产Web架构优化实战方案</h4><p>由于静态网页程序在客户端解析，大大降低了服务器端的访问压力，因此解析效率更高，在实际高并发网站架构中，可以考虑把用户请求的数据解析后存成静态文件放于磁盘中或放于内存中，来降低动态服务器的压力，节约企业成本，提升用户体验。</p><p><strong>（1）门户新闻业务</strong></p><p>新闻网站的特点是一旦发布完成，几乎不会再改动网页内容。因此，对于新闻业务内容的静态化相对比较简单。</p><p>程序&#x3D;&#x3D;&#x3D;&gt;生成静态页面</p><ul><li><input checked="" disabled="" type="checkbox"> 第一步：程序要支持发布动态内容转成静态功能</li><li><input checked="" disabled="" type="checkbox"> 第二步：运营编辑人员发布新闻网页后，后台程序立刻将动态网页生成静态文件。</li><li><input checked="" disabled="" type="checkbox"> 第三步：运维人员通过发布或事件触发把运营编辑生成的静态网页发布到事先搭建好的公司缓存集群服务器上，或者把静态内容同步到购买的全国所有CDN服务器节点上，然后，再提供给用户访问浏览。</li></ul><p><strong>（2）视频网站业务</strong></p><ul><li>视频网站和新闻网站类似，特点都是一旦发布完成，几乎不会再改动网页内容。因此，实现视频业务网站高效访问也很简单。</li><li>以优酷视频网为例，用户在上传视频时，需要经历转码–&gt;审核的过程（大概1小时），然后一些热点视频也可能会被提前推送同步到CDN的核心节点或全国所有CDN服务器节点，用户访问时才会更快。</li></ul><p><strong>（3）Blog&#x2F;BBS&#x2F;SNS&#x2F;微博社区业务&#x2F;电商（如淘宝，京东）</strong></p><ul><li>这几类业务的动态转静态是比较困难的，因为，用户发布完成内容，可能会随时更新并查看，这种情况一般会通过异步方式，例如消息中间件技术加上NoSQL集群技术实现转换，当然也会改进产品细节，例如：在访问的环节设置延时，异步加载等手段。</li></ul><h3 id="1-4-网站流量度量术语"><a href="#1-4-网站流量度量术语" class="headerlink" title="1.4 网站流量度量术语"></a>1.4 网站流量度量术语</h3><h4 id="1-4-1-IP（internet-Protocol）"><a href="#1-4-1-IP（internet-Protocol）" class="headerlink" title="1.4.1 IP（internet Protocol）"></a>1.4.1 IP（internet Protocol）</h4><blockquote><p>IP(独立IP)即Internet Protocol，这里指独立IP数，独立IP数是指不同IP地址的计算机访问网站时被计算的总次数。独立IP数是衡量网站流量的一个重要指标。一般一天内（00:00- 24:00）相同IP地址的客户端访问网站页面只被计算为一次，记录独立IP的时间可为一天或一个月，目前通用的标准为“一天”。</p></blockquote><h4 id="1-4-2-PV（Page-View）"><a href="#1-4-2-PV（Page-View）" class="headerlink" title="1.4.2 PV（Page View）"></a>1.4.2 PV（Page View）</h4><ul><li>PV（访问量）即Page View，中文翻译为页面浏览，即页面浏览器或点击量，不管客户端是不是相同，也不管IP是不是相同，用户每次访问一个网站页面都会被计算一个PV。</li><li>PV的具体度量方法就是从客户浏览器发出一个对Web服务器的请求（Request），Web服务器接到这个请求后，将该请求对应的一个网页（Page）发送给浏览器，就产生一个PV。这里有一个问题，就是只要这个请求发送给了浏览器，无论这个页面是否完全打开（或下载完成），那么都是会被计数为1个PV（服务器日志），一般为了防止用户快速刷PV，很多网站把PV的统计程序放在页面的最下面。</li><li>用PV衡量网站时，PV数反映的是浏览某网站的页面数量，每刷新一次页面也算一次。因此，可以说PV数与来访用户的数量成正比，但PV数并不是真正的页面来访者数量，而是网站被访问的页面数量，因为一个来访者可能产生多个PV。</li></ul><blockquote><p><strong>说明</strong><br>PV（Page View）是网站被访问的页面数量的一个指标，但不能直接知道有多少人访问了这个网站。<br>一个来访者访问网站，可能产生若干PV数，但是独立IP数就只有1个，因此，如果对比一个网站的独立IP数和PV数，不难看出，PV数一定会大于等于独立IP数的</p></blockquote><h4 id="1-4-3-UV-Unique-Visitor"><a href="#1-4-3-UV-Unique-Visitor" class="headerlink" title="1.4.3 UV(Unique Visitor)"></a>1.4.3 UV(Unique Visitor)</h4><ul><li>UV(独立访客)即Unique Visitor，同一台客户端（PC或移动端）访问网站被计算为一个访客。一天（00:00-24:00）内相同的客户端访问同一个网站只计算一次UV。UV一般是以客户端Cookie等技术作为统计依据的，实际统计会有误差。</li><li>考虑到一台客户端电脑可能会有多人使用的情况，因此，UV（独立访客）实际上并不一定是独立的自然人访问。<br>1.http请求报文：浏览器版本，OS<br>2.http响应报文：cookie（id）</li></ul><h4 id="1-4-4-企业网站对IP，PV，UV的度量"><a href="#1-4-4-企业网站对IP，PV，UV的度量" class="headerlink" title="1.4.4 企业网站对IP，PV，UV的度量"></a>1.4.4 企业网站对IP，PV，UV的度量</h4><ul><li><input checked="" disabled="" type="checkbox"> 先来看对IP的度量： <ul><li>分析所有Web服务器的访问日志信息，对IP地址段去重后计数，这是IT人员的基本计算手段</li><li>在网站的每一个（所有）页面结尾，嵌入JS等统计程序代码，待用户加载网页后，IP即传给统计IP的服务器，这种方法一般被第三方统计公司或企业内部开发日志分析程序时使用</li><li>用第三方大家比较信任的统计工具例如：谷歌的统计（GA）。</li></ul></li></ul><p>IP的统计方法简单，易用，因此，成为了多数网站衡量网站流量的重要指标之一。</p><ul><li><input checked="" disabled="" type="checkbox"> 对PV的度量如下： <ul><li>分析Web服务的访问日志（需要排除js，css及各种图片的日志信息），只计算HTML，PHP等页面数量。</li><li>在网站的每一个页面结尾，嵌入JS等统计程序代码，待用户加载网页后，访问数量即传给统计PV的服务器，这种方法一般被第三方统计公司或在企业内部开发日志分析程序时使用。</li><li>用第三方大家比较信任的统计工具例如：谷歌的统计（GA）</li></ul></li></ul><p>PV的统计方法也很简单，易用，因此，也是多数网站衡量网站流量的重要指标之一。</p><ul><li><input checked="" disabled="" type="checkbox"> 对于UV的度量如下： <ul><li>通过客户端HTTP请求报文分析<br>  一个客户端会多次请求网站服务器，每次HTTP请求都会携带客户端自身的大量信息，比如：IP地址，请求发出时间，浏览器版本，操作系统版本等等。网站服务器对这些请求进行分析，如果这些请求满足一些共同特征，比如来自同一个IP地址，且浏览器版本和操作系统版本相同，请求时间又相近等，那么就可以认为这些是来自于同一个客户端，那么多个页面访问也只算一个UV。共同特征的定义是由服务器方决定的。通常，用IP地址+其他特征共同来定义的情况较多。但此种度量方法无法解决以下问题，例如：多个人的电脑软硬件经常雷同，并且是一个公司或者学校的人；多个人共用一个电脑的情况。</li><li>通过cookie鉴别<br>  当客户端第一次访问某个网站服务器的时候，网站服务器会给这个客户端的电脑发出一个cookie，通常放在这个客户端电脑的C盘当中。在这个cookie中会分配一个独一无二的编号，这其中会记录一些访问服务器的信息，如访问时间，访问了哪些页面，等等。当你下次再访问这个服务器的时候，服务器就可以直接从你的电脑中找到上一次放进去的Cookie文件，并且对其进行一些更新，但那个独一无二的编号是不会变的。如果在一定时间内，服务器发现2个来访者对应的是一个编号，那么自然可以认为它来源于同一个来访者了，于是就计算1个UV。</li><li>使用Cookie的方法要比分析客户端HTTP请求头部信息分析更精确些。但也存在一些问题，比如：有的客户端为保证更高级别的安全，关闭了Cookie的功能；或者是有些客户端设置了在退出页面时自动删除Cookie，亦或你经常自己去手动删除Cookie，那么这个方法就不那么精确了。</li></ul></li></ul><h4 id="1-4-5-IP-PV-UV的区别"><a href="#1-4-5-IP-PV-UV的区别" class="headerlink" title="1.4.5 IP,PV,UV的区别"></a>1.4.5 IP,PV,UV的区别</h4><ul><li>一个网站的独立IP数量要比网站实际访问的PV数量小的多。通常情况下（国内互联网环境），网站的UV数也会大于独立IP数。</li><li>PV数高说明访问的页面数多，但是不一定就代表来访者多：但PV数一定与来访者的数量成正比，不过，PV并不直接决定页面的真实来访者数量。比如在访问某网站时，一个人也可通过不断的刷新页面，制造出非常高的PV数。PV数多，用户访问网站页面的总数量多，通常服务器的压力会大一些。</li></ul><h4 id="1-4-6-并发连接"><a href="#1-4-6-并发连接" class="headerlink" title="1.4.6 并发连接"></a>1.4.6 并发连接</h4><p><code>统计并发连接方法(ss命令等于netstat命令)：ss -an | grep ESTAB | wc -l</code></p><p><strong>网站并发连接</strong></p><p>那么到底什么事并发？怎么理解并发呢？<br>A种理解：网站服务器每秒能够接收的最大用户请求数<br>B种理解：网站服务器每秒能够响应的最大用户请求数。<br>C种理解：网站服务器在单位时间内能够处理的最大连接数。<br>虽然A，B的理解占IT人员中的大多数，但是，C理解更为准确一些。</p><p><strong>如何测试磁盘的存储性能？</strong></p><p>1.连续的读写向磁盘中写入大的文件<br>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;tmp&#x2F;test01.bin bs&#x3D;1K count&#x3D;10000</p><h3 id="1-5-www服务软件介绍"><a href="#1-5-www服务软件介绍" class="headerlink" title="1.5 www服务软件介绍"></a>1.5 www服务软件介绍</h3><h4 id="1-5-1-当前互联网主流Web服务说明"><a href="#1-5-1-当前互联网主流Web服务说明" class="headerlink" title="1.5.1 当前互联网主流Web服务说明"></a>1.5.1 当前互联网主流Web服务说明</h4><p><strong>常用来提供静态Web服务的软件：</strong></p><ul><li>Apache：这是中小型Web服务的主流，Web服务器中的老大哥。</li><li>Nginx：大型网站Web服务主流，曾经Web服务器中的初生牛犊，现已长大。Nginx的分支tengine（<a href="http://tengine.taobao.org/%EF%BC%89%E7%9B%AE%E5%89%8D%E4%B9%9F%E5%9C%A8%E9%A3%9E%E9%80%9F%E5%8F%91%E5%B1%95%E3%80%82">http://tengine.taobao.org/）目前也在飞速发展。</a></li></ul><p><strong>常用来提供动态服务的软件</strong></p><ul><li>PHP（fastcgi）：大中小型网站都会使用，动态网页语言PHP程序的解析容器。它可配合Apache解析动态程序，不过，这里的PHP不是Fastcgi守护进程模式，而是mod_php5.so(module).也可配合Nginx解析动态程序，此时的PHP常用Fastcgi守护进程模式提供服务。</li><li>tomcat:中小企业动态Web服务主流，互联网Java容器主流（如jsp，do）</li><li>resin：大型动态Web服务主流，互联网Java容器主流（如jsp，do）</li><li>IIS（internet information services）：微软Windows下的Web服务软件（asp，.aspx）</li></ul><h3 id="1-6重点"><a href="#1-6重点" class="headerlink" title="1.6重点"></a>1.6重点</h3><ul><li>用户访问网站基本流程</li><li>DNS系统解析原理</li><li>HTTP协议通信原理，包括HTTP协议，请求报文，响应报文，状态码等相关知识</li><li>动态，静态概念特点以及伪静态技术；</li><li>动态转静态Web优化方案</li><li>IP，PV，UV的概念和区别</li><li>并发的概念理解</li><li>了解常用www服务软件特点，如Apache，Nginx，PHP（Fastcgi），tomcat，Resin等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rsync数据同步工具</title>
      <link href="/articles/2018/07/25/rsync/"/>
      <url>/articles/2018/07/25/rsync/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>无论你跑多少距离，放弃很容易，停下来，肉体得到暂时的舒服，但你最终会一无所得。</em><br><em>坚持或许很难，但你最后一定会有所收获，跑过的路，永远不会欺骗自己。</em></p></blockquote><h2 id="一，Rsync介绍"><a href="#一，Rsync介绍" class="headerlink" title="一，Rsync介绍"></a>一，Rsync介绍</h2><h3 id="1-1什么是Rsync？"><a href="#1-1什么是Rsync？" class="headerlink" title="1.1什么是Rsync？"></a>1.1什么是Rsync？</h3><pre><code>    Rsync是一款开源的，快速的，多功能的，可实现全量及变量的本地或远程数据同步备份的优秀工具。    </code></pre><h3 id="1-2Rsync简介"><a href="#1-2Rsync简介" class="headerlink" title="1.2Rsync简介"></a>1.2Rsync简介</h3><pre><code>    Rsync具有可是本地和远程两台主机之间的数据快速复制同步镜像，远程备份的功能。这个功能类似ssh带的scp命令，但又优于scp命令的功能。scp每次都是全量拷贝，而Rsync可以增量拷贝。当然，Rsync还可以在本地主机的不同分区的不同目录之间全量及增量的复制数据。这有类似cp命令，但同样也优于cp命令，cp每次都是全量拷贝，而Rsync可以增量拷贝。    </code></pre><ul><li><input checked="" disabled="" type="checkbox"> 小提示：利用Rsync还可以实现删除文件和目录的功能，这又相当于rm命令。</li></ul><h3 id="1-3Rsync的特性"><a href="#1-3Rsync的特性" class="headerlink" title="1.3Rsync的特性"></a>1.3Rsync的特性</h3><ul><li>支持拷贝特殊文件、设备等。</li><li>可以有排除指定文件或目录同步的功能，相当于打包命令tar的排除功能。</li><li>可以做到保持原文件的目录的权限、时间、软硬连接、属主、属组等属性均不改变。</li><li>可以实现增量同步，即只同步发生变化的数据，因此数据传输效率很高。</li><li>可以使用rcp，rsh，ssh等方式来配合传输文件。（rsync本身不对数据加密）</li><li>可以通过socket（进程方式）传输文件和数据。（服务端和客户端）</li><li>支持匿名的或认证（无需系统用户）的进程模式传输，可实现方便安全的进行数据备份及镜像。</li></ul><h3 id="1-4Rsync的企业工作场景说明"><a href="#1-4Rsync的企业工作场景说明" class="headerlink" title="1.4Rsync的企业工作场景说明"></a>1.4Rsync的企业工作场景说明</h3><pre><code>    两台服务器之间数据同步（定时任务+备份数据）    即：crond + rsync</code></pre><h2 id="二，Rsync的工作方式"><a href="#二，Rsync的工作方式" class="headerlink" title="二，Rsync的工作方式"></a>二，Rsync的工作方式</h2><ol><li>本地间类似cp命令的复制方式</li><li>网络间两太不同服务器间数据传输（类似scp命令的功能），也叫借助rcp，ssh等通道来传输数据。</li><li>以守护进程（socket）的方式进行数据传输（这是Rsync自身的重要功能）。也叫以socket进程监听的方式启动rsync server端。</li></ol><h2 id="三，Rsync的应用方式"><a href="#三，Rsync的应用方式" class="headerlink" title="三，Rsync的应用方式"></a>三，Rsync的应用方式</h2><h3 id="第一种，本地间数据传输服务"><a href="#第一种，本地间数据传输服务" class="headerlink" title="第一种，本地间数据传输服务"></a>第一种，本地间数据传输服务</h3><p><img src="/articles/2018/07/25/rsync/1.png" alt="1"></p><h4 id="检查有无rsync软件包"><a href="#检查有无rsync软件包" class="headerlink" title="检查有无rsync软件包"></a>检查有无rsync软件包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mount /dev/sr0 /media/cdrom/</span><br><span class="line">mount: block device /dev/sr0 is write-protected, mounting read-only</span><br><span class="line">[root@localhost ~]# rpm -qa rsync</span><br><span class="line">[root@localhost ~]# yum -y install rsync   <span class="comment">#没有则安装</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Rsync本地数据同步就相当于cp命令"><a href="#Rsync本地数据同步就相当于cp命令" class="headerlink" title="Rsync本地数据同步就相当于cp命令"></a>Rsync本地数据同步就相当于cp命令</h4><p><code>rsync /etc/hosts /tmp</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rsync /etc/hosts /tmp</span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span> /tmp/</span><br><span class="line">hosts</span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /tmp/hosts </span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="增量复制文件内容"><a href="#增量复制文件内容" class="headerlink" title="增量复制文件内容"></a>增量复制文件内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">echo</span> <span class="string">&quot;`hostname -I` www.yunjisuan.com&quot;</span>  &gt;&gt; /etc/hosts</span><br><span class="line">[root@localhost ~]# <span class="built_in">tail</span> -1 /etc/hosts</span><br><span class="line">192.168.131.129  www.yunjisuan.com</span><br><span class="line">[root@localhost ~]# rsync /etc/hosts /tmp</span><br><span class="line">[root@localhost ~]# <span class="built_in">tail</span> -1 /tmp/hosts</span><br><span class="line">192.168.131.129  www.yunjisuan.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>备注</strong><br>只复制没有的那一部分数据，cp命令是全量复制，所以会提示是否覆盖。</p></blockquote><h4 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h4><p><code>rsync -avz /root/zhaoshuo /tmp/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">ls</span> zhaoshuo</span><br><span class="line">aaa                stu_102999_14.jpg  stu_102999_19.jpg  stu_102999_4.jpg  stu_102999_9.jpg</span><br><span class="line">stu_102999_10.jpg  stu_102999_15.jpg  stu_102999_1.jpg   stu_102999_5.jpg  yunjisuan.txt</span><br><span class="line">stu_102999_11.jpg  stu_102999_16.jpg  stu_102999_20.jpg  stu_102999_6.jpg</span><br><span class="line">stu_102999_12.jpg  stu_102999_17.jpg  stu_102999_2.jpg   stu_102999_7.jpg</span><br><span class="line">stu_102999_13.jpg  stu_102999_18.jpg  stu_102999_3.jpg   stu_102999_8.jpg</span><br><span class="line">[root@localhost ~]# rsync -avz /root/zhaoshuo /tmp/   <span class="comment">#/root/zhaoshuo/*就是复制zhaoshuo下所有文件</span></span><br><span class="line">sending incremental file list                   </span><br><span class="line">zhaoshuo/                                       </span><br><span class="line">zhaoshuo/stu_102999_1.jpg                       </span><br><span class="line">zhaoshuo/stu_102999_10.jpg</span><br><span class="line">zhaoshuo/stu_102999_11.jpg</span><br><span class="line">zhaoshuo/stu_102999_12.jpg</span><br><span class="line">zhaoshuo/stu_102999_13.jpg</span><br><span class="line">zhaoshuo/stu_102999_14.jpg</span><br><span class="line">zhaoshuo/stu_102999_15.jpg</span><br><span class="line">zhaoshuo/stu_102999_16.jpg</span><br><span class="line">zhaoshuo/stu_102999_17.jpg</span><br><span class="line">zhaoshuo/stu_102999_18.jpg</span><br><span class="line">zhaoshuo/stu_102999_19.jpg</span><br><span class="line">zhaoshuo/stu_102999_2.jpg</span><br><span class="line">zhaoshuo/stu_102999_20.jpg</span><br><span class="line">zhaoshuo/stu_102999_3.jpg</span><br><span class="line">zhaoshuo/stu_102999_4.jpg</span><br><span class="line">zhaoshuo/stu_102999_5.jpg</span><br><span class="line">zhaoshuo/stu_102999_6.jpg</span><br><span class="line">zhaoshuo/stu_102999_7.jpg</span><br><span class="line">zhaoshuo/stu_102999_8.jpg</span><br><span class="line">zhaoshuo/stu_102999_9.jpg</span><br><span class="line">zhaoshuo/yunjisuan.txt</span><br><span class="line">zhaoshuo/aaa/</span><br><span class="line"></span><br><span class="line">sent 2057 bytes  received 419 bytes  4952.00 bytes/sec</span><br><span class="line">total size is 944  speedup is 0.38</span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span> /tmp/zhaoshuo/</span><br><span class="line">aaa                stu_102999_14.jpg  stu_102999_19.jpg  stu_102999_4.jpg  stu_102999_9.jpg</span><br><span class="line">stu_102999_10.jpg  stu_102999_15.jpg  stu_102999_1.jpg   stu_102999_5.jpg  yunjisuan.txt</span><br><span class="line">stu_102999_11.jpg  stu_102999_16.jpg  stu_102999_20.jpg  stu_102999_6.jpg</span><br><span class="line">stu_102999_12.jpg  stu_102999_17.jpg  stu_102999_2.jpg   stu_102999_7.jpg</span><br><span class="line">stu_102999_13.jpg  stu_102999_18.jpg  stu_102999_3.jpg   stu_102999_8.jp</span><br></pre></td></tr></table></figure><blockquote><p><em>参数介绍</em><br>-a：归档模式，表示以递归方式传输文件，并保持文件的所有属性<br>-v：显示详细信息<br>-z：传输时压缩以提高传输效率</p></blockquote><h4 id="增量同步"><a href="#增量同步" class="headerlink" title="增量同步"></a>增量同步</h4><p><code>rsync -avz /root/www/ /tmp/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">touch</span> www/25</span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span> /root/www</span><br><span class="line">1  10  15  2  20  25  3  4  5  6  7  8  9</span><br><span class="line">[root@localhost ~]# rsync -avz /root/www/ /tmp/</span><br><span class="line">sending incremental file list</span><br><span class="line">25</span><br><span class="line"></span><br><span class="line">sent 158 bytes  received 31 bytes  378.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span> /tmp/</span><br><span class="line">1  10  15  2  20  25  3  4  5  6  7  8  9</span><br></pre></td></tr></table></figure><blockquote><p>特别提示：<br>文中同步命令是rsync -avz &#x2F;root&#x2F;www&#x2F;* &#x2F;tmp的意思</p></blockquote><h4 id="实现源目录和目标保持一致"><a href="#实现源目录和目标保持一致" class="headerlink" title="实现源目录和目标保持一致"></a>实现源目录和目标保持一致</h4><p><code>rsync -avz /root/www/ /tmp --delete</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">touch</span> /tmp/&#123;41..45&#125;</span><br><span class="line">[root@localhost ~]# </span><br><span class="line">[root@localhost ~]# <span class="built_in">touch</span> /tmp/&#123;41..45&#125;</span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span> /tmp/</span><br><span class="line">41  42  43  44  45</span><br><span class="line">[root@localhost ~]# rsync -avz /root/www/ /tmp --delete</span><br><span class="line">sending incremental file list</span><br><span class="line">./</span><br><span class="line">deleting 45     <span class="comment">#源没有，目标有，删除</span></span><br><span class="line">deleting 44</span><br><span class="line">deleting 43</span><br><span class="line">deleting 42</span><br><span class="line">deleting 41</span><br><span class="line">1               <span class="comment">#源有，目标没有，添加</span></span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">2</span><br><span class="line">20</span><br><span class="line">25</span><br><span class="line">3</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line"></span><br><span class="line">sent 842 bytes  received 357 bytes  2398.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> –delete：实现删除的参数，也有同步的意思</li></ul><h3 id="第二种，两台服务器之间进行数据同步"><a href="#第二种，两台服务器之间进行数据同步" class="headerlink" title="第二种，两台服务器之间进行数据同步"></a>第二种，两台服务器之间进行数据同步</h3><p><img src="/articles/2018/07/25/rsync/2.png" alt="2"></p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><blockquote><p><strong>注意</strong><br>实验开始前，两台机器都要有rsync软件包和openssh-clients软件包</p></blockquote><p><code>rsync -avz /root/www root@192.168.131.128:/tmp</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install openssh-clients   <span class="comment">#先装ssh远程连接支持包，也是scp命令的包</span></span><br><span class="line">[root@localhost ~]# rsync -avz /root/www root@192.168.131.128:/tmp</span><br><span class="line">root@192.168.131.128<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">sending incremental file list</span></span><br><span class="line"><span class="string">www/</span></span><br><span class="line"><span class="string">www/1</span></span><br><span class="line"><span class="string">www/10</span></span><br><span class="line"><span class="string">www/15</span></span><br><span class="line"><span class="string">www/2</span></span><br><span class="line"><span class="string">www/20</span></span><br><span class="line"><span class="string">www/25</span></span><br><span class="line"><span class="string">www/3</span></span><br><span class="line"><span class="string">www/31</span></span><br><span class="line"><span class="string">www/32</span></span><br><span class="line"><span class="string">www/33</span></span><br><span class="line"><span class="string">www/34</span></span><br><span class="line"><span class="string">www/35</span></span><br><span class="line"><span class="string">www/4</span></span><br><span class="line"><span class="string">www/5</span></span><br><span class="line"><span class="string">www/6</span></span><br><span class="line"><span class="string">www/7</span></span><br><span class="line"><span class="string">www/8</span></span><br><span class="line"><span class="string">www/9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sent 869 bytes  received 358 bytes  350.57 bytes/sec</span></span><br><span class="line"><span class="string">total size is 0  speedup is 0.00</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><blockquote><p><strong>小贴士</strong><br>root@ 代表对方登陆的账号<br>192.168.200.103 代表对方服务器的ip<br>：&#x2F;tmp 代表对方服务器的目录路径</p></blockquote><h4 id="scp命令远程复制的应用方法"><a href="#scp命令远程复制的应用方法" class="headerlink" title="scp命令远程复制的应用方法"></a>scp命令远程复制的应用方法</h4><p><code>scp -r /root/zhaoshuo 192.168.131.128:/tmp</code><br><code>-r:递归复制</code><br><code>不写root@，就默认以root用户登陆</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# scp -r /root/zhaoshuo 192.168.131.128:/tmp</span><br><span class="line">root@192.168.131.128<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">10                                                              100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">7                                                               100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">11                                                              100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">9                                                               100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">2                                                               100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">6                                                               100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">19                                                              100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">12                                                              100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">3                                                               100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">1                                                               100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">13                                                              100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">17                                                              100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">4                                                               100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">5                                                               100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">&#123;1.20&#125;                                                          100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">8                                                               100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">18                                                              100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">14                                                              100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">16                                                              100%    0     0.0KB/s   00:00</span></span><br><span class="line"><span class="string">20                                                              100%    0     0.0KB/s   00:00    </span></span><br><span class="line"><span class="string">15                                                              100%    0     0.0KB/s   00:00  </span></span><br></pre></td></tr></table></figure><p>还可以指定端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rsync -avz -e <span class="string">&#x27;ssh -p 22&#x27;</span>  /root/xxx root@192.168.131.128:/tmp</span><br><span class="line">root@192.168.131.128<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string">sending incremental file list</span></span><br><span class="line"><span class="string">xxx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sent 235 bytes  received 31 bytes  48.36 bytes/sec</span></span><br><span class="line"><span class="string">total size is 388  speedup is 1.46</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><blockquote><p>-e ‘ssh -p 22’ 代表指定22端口</p></blockquote><p>修改默认指定端口的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/ssh/sshd_config  <span class="comment">#打开ssh远程连接的配置文件</span></span><br><span class="line"> 10 <span class="comment"># possible, but leave them commented.  Uncommented options change a</span></span><br><span class="line"> 11 <span class="comment"># default value.</span></span><br><span class="line"> 12 </span><br><span class="line"> 13 <span class="comment">#Port 22</span></span><br><span class="line"> 14 port 8888                 <span class="comment">#保存退出就等于把端口改为8888了。如果不指定端口号，默认为22</span></span><br><span class="line"> 15 <span class="comment">#AddressFamily any</span></span><br><span class="line"> 16 <span class="comment">#ListenAddress 0.0.0.0</span></span><br><span class="line"> 17 <span class="comment">#ListenAddress ::</span></span><br><span class="line"> 18 </span><br><span class="line"> 19 <span class="comment"># Disable legacy (protocol version 1) support in the server for new</span></span><br><span class="line"> 20 <span class="comment"># installations. In future the default will change to require explicit</span></span><br><span class="line"> 21 <span class="comment"># activation of protocol 1</span></span><br><span class="line"> 22 Protocol 2</span><br><span class="line"> 23 </span><br><span class="line"> 24 <span class="comment"># HostKey for protocol version 1</span></span><br><span class="line"> 25 <span class="comment">#HostKey /etc/ssh/ssh_host_key</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>小贴士</strong></p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> 修改端口，端口号不能用1000以下的，因为默认机制，1000以下的端口都被占用了(注意关闭防火墙服务)。</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-P</td><td>显示同步过程及传输时的进度等信息</td></tr><tr><td>-e</td><td>指定端口的参数</td></tr><tr><td>-t</td><td>保持文件时间信息</td></tr><tr><td>-o</td><td>保持文件属主信息</td></tr><tr><td>-g</td><td>保持文件属组信息</td></tr><tr><td>-p</td><td>保持文件权限</td></tr><tr><td>-l</td><td>保留软链接</td></tr></tbody></table><blockquote><p><strong>案例</strong><br>某DBA做数据同步，宽带占满，导致用户无法访问网站<br><code>rsync -avz dbfile 10.0.0.41：/backup</code> 没有给带宽做限制<br><code>rsync -avz --bwlimit 100 dbfile 10.0.0.41：/backup</code>  限定了带宽</p></blockquote><h3 id="第三种，多组服务器之间，以socket进程的方式启动Rsync进程进行监听"><a href="#第三种，多组服务器之间，以socket进程的方式启动Rsync进程进行监听" class="headerlink" title="第三种，多组服务器之间，以socket进程的方式启动Rsync进程进行监听"></a>第三种，多组服务器之间，以socket进程的方式启动Rsync进程进行监听</h3><p><img src="/articles/2018/07/25/rsync/3.png" alt="3"></p><h4 id="第一步，设置部署环境"><a href="#第一步，设置部署环境" class="headerlink" title="第一步，设置部署环境"></a>第一步，设置部署环境</h4><h5 id="1-主机网络参数"><a href="#1-主机网络参数" class="headerlink" title="1.主机网络参数"></a>1.主机网络参数</h5><table><thead><tr><th>主机名</th><th>网卡eth0</th><th>用途</th><th>代号</th></tr></thead><tbody><tr><td>zhaoshuo</td><td>192.168.131.129</td><td>Rsync服务端</td><td>D-server</td></tr><tr><td>zhaoshuo1</td><td>192.168.131.128</td><td>Rsync客户端</td><td>A-server</td></tr></tbody></table><h5 id="2-具体要求"><a href="#2-具体要求" class="headerlink" title="2.具体要求"></a>2.具体要求</h5><pre><code>    要求在D-server上以rsync守护进程的方式部署rsync服务。使得所有rsync节点客户端主机，可以把本地数据通过rsync的方式备份到数据备份服务器D-server上，客户端为A-server。    </code></pre><hr><h4 id="第二步，开始部署rsync服务——-Rsync服务端D-server操作过程"><a href="#第二步，开始部署rsync服务——-Rsync服务端D-server操作过程" class="headerlink" title="第二步，开始部署rsync服务——&gt;Rsync服务端D-server操作过程"></a>第二步，开始部署rsync服务——&gt;Rsync服务端D-server操作过程</h4><h5 id="1-配置rsyncd-conf"><a href="#1-配置rsyncd-conf" class="headerlink" title="1.配置rsyncd.conf"></a>1.配置rsyncd.conf</h5><p>1）首先确认是否安装rsync软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo ~]# rpm -qa rsync</span><br><span class="line">rsync-3.0.6-9.el6_4.1.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2)创建rsync配置文件（默认不存在）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo ~]# vim /etc/rsyncd.conf</span><br><span class="line">uid = rsync                         <span class="comment">#用户</span></span><br><span class="line">gid = rsync                         <span class="comment">#组</span></span><br><span class="line">use <span class="built_in">chroot</span> = no                     <span class="comment">#程序安全设置（no代表不开启）</span></span><br><span class="line">max connections = 200               <span class="comment">#客户端最大连接数</span></span><br><span class="line"><span class="built_in">timeout</span> = 300                       <span class="comment">#超时时间</span></span><br><span class="line">pid file = /var/run/rsyncd.pid      <span class="comment">#进程号文件位置</span></span><br><span class="line">lock file = /var/run/rsyncd.pid     <span class="comment">#进程锁</span></span><br><span class="line"><span class="built_in">log</span> file = /var/log/rsyncd.log      <span class="comment">#日志文件位置</span></span><br><span class="line">[backup]                            <span class="comment">#模块名</span></span><br><span class="line">path = /backup                      <span class="comment">#使用目录（path代表路径）</span></span><br><span class="line">ignore errors                       <span class="comment">#有错误时忽略（意思是有错误也传）</span></span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span>                   <span class="comment">#可读可写（ture或false）</span></span><br><span class="line">list = <span class="literal">false</span>                        <span class="comment">#阻止远程列表（禁止客户端通过远程方式看服务端都有啥）</span></span><br><span class="line">hosts allow = 192.168.131.0/24      <span class="comment">#允许ip</span></span><br><span class="line">hosts deny = 0.0.0.0/32             <span class="comment">#禁止ip（32代表谁都不拒绝）</span></span><br><span class="line">auth <span class="built_in">users</span> = rsync_backup           <span class="comment">#虚拟用户</span></span><br><span class="line">secrets file = /etc/rsync.password  <span class="comment">#存放用户和密码的文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>客户端和服务端的连接原理：</strong><br><img src="/articles/2018/07/25/rsync/4.png" alt="4"></p><blockquote><p><strong>客户端要告诉server端两点</strong><br>1,告诉server，我要推送给配置文件的哪个模块。（模块可以有很多个）<br>2,需要验证推送到那个模块下的用户名和密码。</p></blockquote><p><img src="/articles/2018/07/25/rsync/5.png" alt="5"></p><h5 id="2-创建共享目录及添加rsync程序用户"><a href="#2-创建共享目录及添加rsync程序用户" class="headerlink" title="2.创建共享目录及添加rsync程序用户"></a>2.创建共享目录及添加rsync程序用户</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo ~]# useradd -s /sbin/nologin -M rsync</span><br><span class="line">[root@zhaoshuo ~]# <span class="built_in">mkdir</span> /backup</span><br><span class="line">[root@zhaoshuo ~]# <span class="built_in">chown</span> -R rsync.rsync /backup   <span class="comment">#-R：递归修改，将目录和目录下所有文件一起修改</span></span><br><span class="line">[root@zhaoshuo ~]# ll -d /backup</span><br><span class="line">drwxr-xr-x. 2 rsync rsync 4096 Jul 26 22:27 /backup</span><br></pre></td></tr></table></figure><h5 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3.启动服务"></a>3.启动服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo ~]# rsync --daemon</span><br><span class="line">[root@zhaoshuo ~]# netstat -antup | grep rsync</span><br><span class="line">tcp        0      0 0.0.0.0:873                 0.0.0.0:*                   LISTEN      1653/rsync          </span><br><span class="line">tcp        0      0 :::873                      :::*                        LISTEN      1653/rsync</span><br></pre></td></tr></table></figure><p><code>--daemon 是守护进程的意思</code></p><h5 id="4-创建rsync虚拟账户名和密码"><a href="#4-创建rsync虚拟账户名和密码" class="headerlink" title="4.创建rsync虚拟账户名和密码"></a>4.创建rsync虚拟账户名和密码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo ~]# vim /etc/rsync.password</span><br><span class="line">rsync_backup:123456</span><br></pre></td></tr></table></figure><h5 id="5-将账户密码的文件权限改为600（必须，否则失败）"><a href="#5-将账户密码的文件权限改为600（必须，否则失败）" class="headerlink" title="5.将账户密码的文件权限改为600（必须，否则失败）"></a>5.将账户密码的文件权限改为600（必须，否则失败）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo ~]# <span class="built_in">chmod</span> 600 /etc/rsync.password </span><br><span class="line">[root@zhaoshuo ~]# ll -d /etc/rsync.password </span><br><span class="line">-rw-------. 1 root root 20 Jul 26 22:43 /etc/rsync.password</span><br></pre></td></tr></table></figure><h5 id="6-加入开机启动"><a href="#6-加入开机启动" class="headerlink" title="6.加入开机启动"></a>6.加入开机启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo ~]# <span class="built_in">echo</span> <span class="string">&quot;rsync --daemon&quot;</span> &gt;&gt; /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><blockquote><p><strong>小提示:如何重启rsync服务</strong></p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> pkill rsync 关闭rsync服务</li><li><input checked="" disabled="" type="checkbox"> rsync –daemon 开启rsync服务</li></ul><hr><h4 id="第三步，开始部署rsync服务——-Rsync客户端A-server"><a href="#第三步，开始部署rsync服务——-Rsync客户端A-server" class="headerlink" title="第三步，开始部署rsync服务——&gt;Rsync客户端A-server"></a>第三步，开始部署rsync服务——&gt;Rsync客户端A-server</h4><h5 id="1-只需要创建密码文件"><a href="#1-只需要创建密码文件" class="headerlink" title="1.只需要创建密码文件"></a>1.只需要创建密码文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo1 ~]# rpm -qa rsync</span><br><span class="line">rsync-3.0.6-9.el6_4.1.x86_64</span><br><span class="line">[root@zhaoshuo1 ~]# <span class="built_in">echo</span> <span class="string">&quot;123456&quot;</span> &gt;&gt; /etc/rsync.password</span><br><span class="line">[root@zhaoshuo1 ~]# <span class="built_in">cat</span> /etc/rsync.password </span><br><span class="line">123456</span><br></pre></td></tr></table></figure><h5 id="2-将密码文件的权限设置为600（必须，否则失败）"><a href="#2-将密码文件的权限设置为600（必须，否则失败）" class="headerlink" title="2.将密码文件的权限设置为600（必须，否则失败）"></a>2.将密码文件的权限设置为600（必须，否则失败）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo1 ~]# chmod 600 /etc/rsync.password </span><br><span class="line">[root@zhaoshuo1 ~]# ll -d /etc/rsync.password </span><br><span class="line">-rw------- 1 root root 7 Jul 26 22:44 /etc/rsync.password</span><br></pre></td></tr></table></figure><h3 id="四，Rsync同步测试"><a href="#四，Rsync同步测试" class="headerlink" title="四，Rsync同步测试"></a>四，Rsync同步测试</h3><h5 id="推送测试1：将客户端指定目录推送到服务端rsync指定目录下"><a href="#推送测试1：将客户端指定目录推送到服务端rsync指定目录下" class="headerlink" title="推送测试1：将客户端指定目录推送到服务端rsync指定目录下"></a>推送测试1：将客户端指定目录推送到服务端rsync指定目录下</h5><p><code>rsync -avz /root/sss rsync_backup@192.168.131.129::backup --password-file=/etc/rsync.password </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo1 ~]# rsync -avz /root/sss rsync_backup@192.168.131.129::backup --password-file=/etc/rsync.password         <span class="comment">#在sss后面加上/就代表推送sss里的文件，不包括目录，不加/就代表推送sss目录</span></span><br><span class="line">sending incremental file list</span><br><span class="line">sss/</span><br><span class="line">sss/1</span><br><span class="line">sss/10</span><br><span class="line">sss/11</span><br><span class="line">sss/12</span><br><span class="line">sss/13</span><br><span class="line">sss/14</span><br><span class="line">sss/15</span><br><span class="line">sss/16</span><br><span class="line">sss/17</span><br><span class="line">sss/18</span><br><span class="line">sss/19</span><br><span class="line">sss/2</span><br><span class="line">sss/20</span><br><span class="line">sss/3</span><br><span class="line">sss/4</span><br><span class="line">sss/5</span><br><span class="line">sss/6</span><br><span class="line">sss/7</span><br><span class="line">sss/8</span><br><span class="line">sss/9</span><br><span class="line"></span><br><span class="line">sent 906 bytes  received 392 bytes  2596.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong><br>-avz：保持文件各项属性不变。-v：显示同步信息<br>&#x2F;root&#x2F;www：要推送的内容所在目录<br>rsync_backup：服务器端rsync服务同步的用户名（虚拟用户的用户名）<br>192.168.131.129：rsync服务端的ip地址<br>backup：rsync服务器配置文件里的模块名<br>–password-file&#x3D;&#x2F;etc&#x2F;rsync.password：免密码的操作，指定密码文件。若不指定，需要手动输入密码</p></blockquote><h5 id="拉取测试1：将rsync服务端指定的目录内容同步到客户端"><a href="#拉取测试1：将rsync服务端指定的目录内容同步到客户端" class="headerlink" title="拉取测试1：将rsync服务端指定的目录内容同步到客户端"></a>拉取测试1：将rsync服务端指定的目录内容同步到客户端</h5><p><code>rsync -avz  rsync_backup@192.168.131.129::backup /root  --password-file=/etc/rsync.password</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo1 ~]# rsync -avz  rsync_backup@192.168.131.129::backup /root  --password-file=/etc/rsync.password </span><br><span class="line">receiving incremental file list</span><br><span class="line">./</span><br><span class="line">sss/</span><br><span class="line">sss/1</span><br><span class="line">sss/10</span><br><span class="line">sss/11</span><br><span class="line">sss/12</span><br><span class="line">sss/13</span><br><span class="line">sss/14</span><br><span class="line">sss/15</span><br><span class="line">sss/16</span><br><span class="line">sss/17</span><br><span class="line">sss/18</span><br><span class="line">sss/19</span><br><span class="line">sss/2</span><br><span class="line">sss/20</span><br><span class="line">sss/3</span><br><span class="line">sss/4</span><br><span class="line">sss/5</span><br><span class="line">sss/6</span><br><span class="line">sss/7</span><br><span class="line">sss/8</span><br><span class="line">sss/9</span><br><span class="line"></span><br><span class="line">sent 831 bytes  received 1867 bytes  5396.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：和推送相比，两个目录换了位置</strong></p></blockquote><h5 id="拉取测试2：将rsync服务器端指定目录下的全部内容排除某目录或文件后，同步到客户端"><a href="#拉取测试2：将rsync服务器端指定目录下的全部内容排除某目录或文件后，同步到客户端" class="headerlink" title="拉取测试2：将rsync服务器端指定目录下的全部内容排除某目录或文件后，同步到客户端"></a>拉取测试2：将rsync服务器端指定目录下的全部内容排除某目录或文件后，同步到客户端</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo1 ~]# rsync -avz --exclude=sss/3 --exclude=4  rsync_backup@192.168.131.129::backup /root  --password-file=/etc/rsync.password   <span class="comment">#拉取时排除了sss目录下3和4文件</span></span><br><span class="line">receiving incremental file list</span><br><span class="line">./</span><br><span class="line">sss/</span><br><span class="line">sss/1</span><br><span class="line">sss/10</span><br><span class="line">sss/11</span><br><span class="line">sss/12</span><br><span class="line">sss/13</span><br><span class="line">sss/14</span><br><span class="line">sss/15</span><br><span class="line">sss/16</span><br><span class="line">sss/17</span><br><span class="line">sss/18</span><br><span class="line">sss/19</span><br><span class="line">sss/2</span><br><span class="line">sss/20</span><br><span class="line">sss/5</span><br><span class="line">sss/6</span><br><span class="line">sss/7</span><br><span class="line">sss/8</span><br><span class="line">sss/9</span><br><span class="line"></span><br><span class="line">sent 431 bytes  received 919 bytes  2700.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure><p>排除列表的方法排除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo1 ~]# vim /etc/exclude.txt</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">[root@zhaoshuo1 ~]# rsync -avz --exclude-from=/etc/exclude.txt  rsync_backup@192.168.131.129::backup /root  --password-file=/etc/rsync.password </span><br><span class="line">receiving incremental file list         #排除了/etc/exclude.txt里包含的文件名的文件</span><br><span class="line">./</span><br><span class="line">sss/</span><br><span class="line">sss/10</span><br><span class="line">sss/11</span><br><span class="line">sss/12</span><br><span class="line">sss/13</span><br><span class="line">sss/14</span><br><span class="line">sss/15</span><br><span class="line">sss/16</span><br><span class="line">sss/17</span><br><span class="line">sss/18</span><br><span class="line">sss/19</span><br><span class="line">sss/2</span><br><span class="line">sss/20</span><br><span class="line">sss/4</span><br><span class="line">sss/6</span><br><span class="line">sss/8</span><br><span class="line"></span><br><span class="line">sent 391 bytes  received 790 bytes  787.33 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure><h5 id="Rsync同步拉取测试-让rsync客户端指定目录内容始终和rsync服务端共享目录内容保持一致（反之，两路径调换位置）"><a href="#Rsync同步拉取测试-让rsync客户端指定目录内容始终和rsync服务端共享目录内容保持一致（反之，两路径调换位置）" class="headerlink" title="Rsync同步拉取测试:让rsync客户端指定目录内容始终和rsync服务端共享目录内容保持一致（反之，两路径调换位置）"></a>Rsync同步拉取测试:让rsync客户端指定目录内容始终和rsync服务端共享目录内容保持一致（反之，两路径调换位置）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo1 ~]# rsync -avz --delete rsync_backup@192.168.131.129::backup /root  --password-file=/etc/rsync.password </span><br><span class="line">receiving incremental file list</span><br><span class="line">deleting 9</span><br><span class="line">deleting 8</span><br><span class="line">deleting 7</span><br><span class="line">deleting 6</span><br><span class="line">deleting 5</span><br><span class="line">deleting 4</span><br><span class="line">deleting 3</span><br><span class="line">deleting 20</span><br><span class="line">deleting 2</span><br><span class="line">deleting 19</span><br><span class="line">deleting 18</span><br><span class="line">deleting 17</span><br><span class="line">deleting 16</span><br><span class="line">deleting 15</span><br><span class="line">deleting 14</span><br><span class="line">deleting 13</span><br><span class="line">deleting 123</span><br><span class="line">deleting 12</span><br><span class="line">deleting 11</span><br><span class="line">deleting 10</span><br><span class="line">deleting 1</span><br><span class="line">sss/</span><br><span class="line">sss/1</span><br><span class="line">sss/10</span><br><span class="line">sss/11</span><br><span class="line">sss/12</span><br><span class="line">sss/13</span><br><span class="line">sss/14</span><br><span class="line">sss/15</span><br><span class="line">sss/16</span><br><span class="line">sss/17</span><br><span class="line">sss/18</span><br><span class="line">sss/19</span><br><span class="line">sss/20</span><br><span class="line">sss/3</span><br><span class="line">sss/5</span><br><span class="line">sss/7</span><br><span class="line">sss/9</span><br><span class="line"></span><br><span class="line">sent 372 bytes  received 859 bytes  820.67 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>排除某文件，再同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhaoshuo1 ~]# rsync -avz --delete  --exclude-from=/etc/exclude.txt  rsync_backup@192.168.131.129::backup /root  --password-file=/etc/rsync.password </span><br></pre></td></tr></table></figure><blockquote><p><strong>特别说明</strong><br>执行–delete参数，从rsync服务端往rsync客户端拉取数据时，一定要小心，最好不用。客户端带–delete参数往服务端推送进删除服务端模块下的数据。反之则有能力删除rsync客户端本地的所有数据，包括根下的所有目录。</p></blockquote><h3 id="五，Rsync优缺点"><a href="#五，Rsync优缺点" class="headerlink" title="五，Rsync优缺点"></a>五，Rsync优缺点</h3><h4 id="1-5-1Rsync优点"><a href="#1-5-1Rsync优点" class="headerlink" title="1.5.1Rsync优点"></a>1.5.1Rsync优点</h4><blockquote><p>1，增量备份，支持socket（daemon），集中备份（支持推拉，都是以客户端为参照物）。<br>2，远程SHELL通道模式还可以加密（SSH）传输，socket（daemon）需要加密传输，可以利用vpn服务或ipsec服务</p></blockquote><h4 id="1-5-2Rsync缺点"><a href="#1-5-2Rsync缺点" class="headerlink" title="1.5.2Rsync缺点"></a>1.5.2Rsync缺点</h4><blockquote><p>1，大量小文件时候同步的时候，比对时间较长，有的时候，同步过程中，rsync进程可能会停止，僵死了。<br>2，同步大文件，10G这样的大文件有时也会出问题，中断。未完整同步前，是隐藏文件，可以通过续传（–partial）等参数实现传输<br>3，一次性远程拷贝可以用scp，大量小文件要打成一个包再拷贝。</p></blockquote><h3 id="附录：rsyncd-conf配置文件常用参数说明："><a href="#附录：rsyncd-conf配置文件常用参数说明：" class="headerlink" title="附录：rsyncd.conf配置文件常用参数说明："></a>附录：rsyncd.conf配置文件常用参数说明：</h3><table><thead><tr><th>rsyncd.conf参数</th><th>参数说明</th></tr></thead><tbody><tr><td>uid&#x3D;rsync</td><td>rsync使用的用户。</td></tr><tr><td>gid&#x3D;rsync</td><td>rsync使用的用户组（用户所在的组）</td></tr><tr><td>use chroot&#x3D;no</td><td>如果为true，daemon会在客户端传输文件前“chroot to the path”。这是一种安全配置，因为我们大多数都在内网，所以不配也没关系</td></tr><tr><td>max connections&#x3D;200</td><td>设置最大连接数，默认0，意思无限制，负值为关闭这个模块</td></tr><tr><td>timeout&#x3D;400</td><td>默认为0，表示no timeout，建议300-600（5-10分钟）</td></tr><tr><td>pid file</td><td>rsync daemon启动后将其进程pid写入此文件。如果这个文件存在，rsync不会覆盖该文件，而是会终止</td></tr><tr><td>lock file</td><td>指定lock文件用来支持“max connections”参数，使得总连接数不会超过限制</td></tr><tr><td>log file</td><td>不设或者设置错误，rsync会使用rsyslog输出相关日志信息</td></tr><tr><td>ignore errors</td><td>忽略I&#x2F;O错误</td></tr><tr><td>read only&#x3D;false</td><td>指定客户端是否可以上传文件，默认对所有模块为true</td></tr><tr><td>list&#x3D;false</td><td>是否允许客户端可以查看可用模块列表，默认为可以</td></tr><tr><td>hosts allow</td><td>指定可以联系的客户端主机名或和ip地址或地址段，默认情况没有此参数，即都可以连接</td></tr><tr><td>hosts deny</td><td>指定不可以联系的客户端主机名或ip地址或地址段，默认情况没有此参数，即都可以连接</td></tr><tr><td>auth users</td><td>指定以空格或逗号分隔的用户可以使用哪些模块，用户不需要在本地系统中存在。默认为所有用户无密码访问</td></tr><tr><td>secrets file</td><td>指定用户名和密码存放的文件，格式；用户名；密码，密码不超过8位</td></tr><tr><td>[backup]</td><td>这里就是模块名称，需用中括号扩起来，起名称没有特殊要求，但最好是有意义的名称，便于以后维护</td></tr><tr><td>path</td><td>这个模块中，daemon使用的文件系统或目录，目录的权限要注意和配置文件中的权限一致，否则会遇到读写的问题</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 服务基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rsync </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
